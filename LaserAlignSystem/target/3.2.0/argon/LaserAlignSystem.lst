
c:/Users/Arjun/Documents/IOT/IOTCapstone/LaserAlignSystem/target/3.2.0/argon/LaserAlignSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000040c4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000b80e0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  2002fa38  000b80e4  0000fa38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000ed44  2002faac  2002faac  0001faac  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000b8158  000b8158  00018158  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000b8180  000b8180  00018180  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0011ae7b  00000000  00000000  00018184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00012c47  00000000  00000000  00132fff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    000361ba  00000000  00000000  00145c46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002e00  00000000  00000000  0017be00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00009e80  00000000  00000000  0017ec00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00039e0c  00000000  00000000  00188a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0003dc91  00000000  00000000  001c288c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001286d5  00000000  00000000  0020051d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  000082d8  00000000  00000000  00328bf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f003 fa85 	bl	b753c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f003 faa7 	bl	b758c <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2002fa38 	.word	0x2002fa38
   b4048:	000b80e4 	.word	0x000b80e4
   b404c:	2002faac 	.word	0x2002faac
   b4050:	2002faac 	.word	0x2002faac
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f002 fda7 	bl	b6bb0 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b80b0 	.word	0x000b80b0
   b407c:	000b80d4 	.word	0x000b80d4

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b8ba 	b.w	b41f8 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 fcdf 	bl	b4a48 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f002 bd47 	b.w	b6b20 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f001 b9cd 	b.w	b5430 <malloc>

000b4096 <_Znaj>:
   b4096:	f001 b9cb 	b.w	b5430 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f001 b9d1 	b.w	b5440 <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr
	...

000b40b0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
    }
    
  
}

void onDataReceived(const uint8_t *data, size_t len, const BlePeerDevice &peer, void *context) {
   b40b0:	b510      	push	{r4, lr}
    for (i = 0; i < len; i++) {
        // Serial.printf("%02X", data[i]);
    }

    // up arrow recieved
    if (data[0] == 0x21 && data[1] == 0x42 && data[2] == 0x35 && data[3] == 0x31) {
   b40b2:	7803      	ldrb	r3, [r0, #0]
   b40b4:	2b21      	cmp	r3, #33	; 0x21
void onDataReceived(const uint8_t *data, size_t len, const BlePeerDevice &peer, void *context) {
   b40b6:	4604      	mov	r4, r0
    if (data[0] == 0x21 && data[1] == 0x42 && data[2] == 0x35 && data[3] == 0x31) {
   b40b8:	d110      	bne.n	b40dc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c>
   b40ba:	7843      	ldrb	r3, [r0, #1]
   b40bc:	2b42      	cmp	r3, #66	; 0x42
   b40be:	d111      	bne.n	b40e4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x34>
   b40c0:	7883      	ldrb	r3, [r0, #2]
   b40c2:	2b35      	cmp	r3, #53	; 0x35
   b40c4:	d12c      	bne.n	b4120 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x70>
   b40c6:	78c3      	ldrb	r3, [r0, #3]
   b40c8:	2b31      	cmp	r3, #49	; 0x31
   b40ca:	d129      	bne.n	b4120 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x70>
        // Serial.printf("\nUp Arrow");
        tipStepper.step(stepSize);
   b40cc:	4b3c      	ldr	r3, [pc, #240]	; (b41c0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x110>)
   b40ce:	483d      	ldr	r0, [pc, #244]	; (b41c4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x114>)
   b40d0:	6819      	ldr	r1, [r3, #0]
   b40d2:	f000 ff59 	bl	b4f88 <_ZN7Stepper4stepEi>
    }

    // down arrow recieved
    if (data[0] == 0x21 && data[1] == 0x42 && data[2] == 0x36 && data[3] == 0x31) {
   b40d6:	7823      	ldrb	r3, [r4, #0]
   b40d8:	2b21      	cmp	r3, #33	; 0x21
   b40da:	d000      	beq.n	b40de <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e>
        button4State = true;
    }

    // Serial.printf("\n");
    // Serial.printf("Message: %s \n", (char *)data);
}
   b40dc:	bd10      	pop	{r4, pc}
    if (data[0] == 0x21 && data[1] == 0x42 && data[2] == 0x36 && data[3] == 0x31) {
   b40de:	7863      	ldrb	r3, [r4, #1]
   b40e0:	2b42      	cmp	r3, #66	; 0x42
   b40e2:	d01d      	beq.n	b4120 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x70>
    if (data[0] == 0x21 && data[1] == 0x42 && data[2] == 0x31 && data[3] == 0x31) {
   b40e4:	7863      	ldrb	r3, [r4, #1]
   b40e6:	2b42      	cmp	r3, #66	; 0x42
   b40e8:	d1f8      	bne.n	b40dc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c>
   b40ea:	78a3      	ldrb	r3, [r4, #2]
   b40ec:	2b31      	cmp	r3, #49	; 0x31
   b40ee:	d14a      	bne.n	b4186 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xd6>
   b40f0:	78e2      	ldrb	r2, [r4, #3]
   b40f2:	2a31      	cmp	r2, #49	; 0x31
   b40f4:	d103      	bne.n	b40fe <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4e>
        stepSize++;
   b40f6:	4932      	ldr	r1, [pc, #200]	; (b41c0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x110>)
   b40f8:	680a      	ldr	r2, [r1, #0]
   b40fa:	3201      	adds	r2, #1
   b40fc:	600a      	str	r2, [r1, #0]
    if (data[0] == 0x21 && data[1] == 0x42 && data[2] == 0x33 && data[3] == 0x31) {
   b40fe:	2b33      	cmp	r3, #51	; 0x33
   b4100:	d154      	bne.n	b41ac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfc>
   b4102:	78e3      	ldrb	r3, [r4, #3]
   b4104:	2b31      	cmp	r3, #49	; 0x31
   b4106:	d151      	bne.n	b41ac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfc>
        ScanToggle = true;
   b4108:	4b2f      	ldr	r3, [pc, #188]	; (b41c8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x118>)
   b410a:	2201      	movs	r2, #1
   b410c:	701a      	strb	r2, [r3, #0]
        stepperCounter = 0;
   b410e:	4b2f      	ldr	r3, [pc, #188]	; (b41cc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x11c>)
   b4110:	2200      	movs	r2, #0
   b4112:	601a      	str	r2, [r3, #0]
    if (data[0] == 0x21 && data[1] == 0x42 && data[2] == 0x34 && data[3] == 0x31) {
   b4114:	7823      	ldrb	r3, [r4, #0]
   b4116:	2b21      	cmp	r3, #33	; 0x21
   b4118:	d1e0      	bne.n	b40dc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c>
   b411a:	7863      	ldrb	r3, [r4, #1]
   b411c:	2b42      	cmp	r3, #66	; 0x42
   b411e:	e044      	b.n	b41aa <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfa>
    if (data[0] == 0x21 && data[1] == 0x42 && data[2] == 0x36 && data[3] == 0x31) {
   b4120:	78a3      	ldrb	r3, [r4, #2]
   b4122:	2b36      	cmp	r3, #54	; 0x36
   b4124:	d10e      	bne.n	b4144 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x94>
   b4126:	78e3      	ldrb	r3, [r4, #3]
   b4128:	2b31      	cmp	r3, #49	; 0x31
   b412a:	d10b      	bne.n	b4144 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x94>
        tipStepper.step(-stepSize);
   b412c:	4b24      	ldr	r3, [pc, #144]	; (b41c0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x110>)
   b412e:	4825      	ldr	r0, [pc, #148]	; (b41c4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x114>)
   b4130:	6819      	ldr	r1, [r3, #0]
   b4132:	4249      	negs	r1, r1
   b4134:	f000 ff28 	bl	b4f88 <_ZN7Stepper4stepEi>
    if (data[0] == 0x21 && data[1] == 0x42 && data[2] == 0x38 && data[3] == 0x31) {
   b4138:	7823      	ldrb	r3, [r4, #0]
   b413a:	2b21      	cmp	r3, #33	; 0x21
   b413c:	d1ce      	bne.n	b40dc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c>
   b413e:	7863      	ldrb	r3, [r4, #1]
   b4140:	2b42      	cmp	r3, #66	; 0x42
   b4142:	d1cf      	bne.n	b40e4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x34>
   b4144:	78a3      	ldrb	r3, [r4, #2]
   b4146:	2b38      	cmp	r3, #56	; 0x38
   b4148:	d10e      	bne.n	b4168 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xb8>
   b414a:	78e3      	ldrb	r3, [r4, #3]
   b414c:	2b31      	cmp	r3, #49	; 0x31
   b414e:	d10b      	bne.n	b4168 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xb8>
        tiltStepper.step(-stepSize);
   b4150:	4b1b      	ldr	r3, [pc, #108]	; (b41c0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x110>)
   b4152:	481f      	ldr	r0, [pc, #124]	; (b41d0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x120>)
   b4154:	6819      	ldr	r1, [r3, #0]
   b4156:	4249      	negs	r1, r1
   b4158:	f000 ff16 	bl	b4f88 <_ZN7Stepper4stepEi>
    if (data[0] == 0x21 && data[1] == 0x42 && data[2] == 0x37 && data[3] == 0x31) {
   b415c:	7823      	ldrb	r3, [r4, #0]
   b415e:	2b21      	cmp	r3, #33	; 0x21
   b4160:	d1bc      	bne.n	b40dc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c>
   b4162:	7863      	ldrb	r3, [r4, #1]
   b4164:	2b42      	cmp	r3, #66	; 0x42
   b4166:	d1bd      	bne.n	b40e4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x34>
   b4168:	78a3      	ldrb	r3, [r4, #2]
   b416a:	2b37      	cmp	r3, #55	; 0x37
   b416c:	d1ba      	bne.n	b40e4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x34>
   b416e:	78e3      	ldrb	r3, [r4, #3]
   b4170:	2b31      	cmp	r3, #49	; 0x31
   b4172:	d1b7      	bne.n	b40e4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x34>
        tiltStepper.step(stepSize);
   b4174:	4b12      	ldr	r3, [pc, #72]	; (b41c0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x110>)
   b4176:	4816      	ldr	r0, [pc, #88]	; (b41d0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x120>)
   b4178:	6819      	ldr	r1, [r3, #0]
   b417a:	f000 ff05 	bl	b4f88 <_ZN7Stepper4stepEi>
    if (data[0] == 0x21 && data[1] == 0x42 && data[2] == 0x31 && data[3] == 0x31) {
   b417e:	7823      	ldrb	r3, [r4, #0]
   b4180:	2b21      	cmp	r3, #33	; 0x21
   b4182:	d0af      	beq.n	b40e4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x34>
   b4184:	e7aa      	b.n	b40dc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c>
    if (data[0] == 0x21 && data[1] == 0x42 && data[2] == 0x32 && data[3] == 0x31) {
   b4186:	2b32      	cmp	r3, #50	; 0x32
   b4188:	d1b9      	bne.n	b40fe <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4e>
   b418a:	78e3      	ldrb	r3, [r4, #3]
   b418c:	2b31      	cmp	r3, #49	; 0x31
   b418e:	d10d      	bne.n	b41ac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfc>
        stepSize--;
   b4190:	490b      	ldr	r1, [pc, #44]	; (b41c0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x110>)
   b4192:	680b      	ldr	r3, [r1, #0]
   b4194:	2201      	movs	r2, #1
   b4196:	3b01      	subs	r3, #1
   b4198:	2b00      	cmp	r3, #0
   b419a:	bfcc      	ite	gt
   b419c:	4618      	movgt	r0, r3
   b419e:	4610      	movle	r0, r2
        StartTimer = true;
   b41a0:	4b0c      	ldr	r3, [pc, #48]	; (b41d4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x124>)
        stepSize--;
   b41a2:	6008      	str	r0, [r1, #0]
        StartTimer = true;
   b41a4:	701a      	strb	r2, [r3, #0]
    if (data[0] == 0x21 && data[1] == 0x42 && data[2] == 0x33 && data[3] == 0x31) {
   b41a6:	7823      	ldrb	r3, [r4, #0]
   b41a8:	2b21      	cmp	r3, #33	; 0x21
    if (data[0] == 0x21 && data[1] == 0x42 && data[2] == 0x34 && data[3] == 0x31) {
   b41aa:	d197      	bne.n	b40dc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c>
   b41ac:	78a3      	ldrb	r3, [r4, #2]
   b41ae:	2b34      	cmp	r3, #52	; 0x34
   b41b0:	d194      	bne.n	b40dc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c>
   b41b2:	78e3      	ldrb	r3, [r4, #3]
   b41b4:	2b31      	cmp	r3, #49	; 0x31
   b41b6:	d191      	bne.n	b40dc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c>
        button4State = true;
   b41b8:	4b07      	ldr	r3, [pc, #28]	; (b41d8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x128>)
   b41ba:	2201      	movs	r2, #1
   b41bc:	701a      	strb	r2, [r3, #0]
}
   b41be:	e78d      	b.n	b40dc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c>
   b41c0:	2002fb08 	.word	0x2002fb08
   b41c4:	2003e678 	.word	0x2003e678
   b41c8:	2002faad 	.word	0x2002faad
   b41cc:	2003e644 	.word	0x2003e644
   b41d0:	2003e64c 	.word	0x2003e64c
   b41d4:	2002faae 	.word	0x2002faae
   b41d8:	2002fb34 	.word	0x2002fb34

000b41dc <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b41dc:	b40e      	push	{r1, r2, r3}
   b41de:	b503      	push	{r0, r1, lr}
   b41e0:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b41e2:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b41e4:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b41e8:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b41ea:	f002 fbf6 	bl	b69da <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b41ee:	b002      	add	sp, #8
   b41f0:	f85d eb04 	ldr.w	lr, [sp], #4
   b41f4:	b003      	add	sp, #12
   b41f6:	4770      	bx	lr

000b41f8 <setup>:
void setup() {
   b41f8:	b570      	push	{r4, r5, r6, lr}
   b41fa:	b08e      	sub	sp, #56	; 0x38
    Serial.begin(9600);
   b41fc:	f002 fde0 	bl	b6dc0 <_Z16_fetch_usbserialv>
   b4200:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4204:	f002 fdd0 	bl	b6da8 <_ZN9USBSerial5beginEl>
    delay(3000);
   b4208:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b420c:	f002 fc5c 	bl	b6ac8 <delay>
    Serial.printf("Beginning Commands \n");
   b4210:	f002 fdd6 	bl	b6dc0 <_Z16_fetch_usbserialv>
   b4214:	49b5      	ldr	r1, [pc, #724]	; (b44ec <setup+0x2f4>)
   b4216:	f7ff ffe1 	bl	b41dc <_ZN5Print6printfEPKcz>
    Serial1.begin(115200);
   b421a:	f002 fffd 	bl	b7218 <_Z22__fetch_global_Serial1v>
   b421e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b4222:	f002 fe49 	bl	b6eb8 <_ZN11USARTSerial5beginEm>
    Serial1.printf("AT\r\n");
   b4226:	f002 fff7 	bl	b7218 <_Z22__fetch_global_Serial1v>
   b422a:	49b1      	ldr	r1, [pc, #708]	; (b44f0 <setup+0x2f8>)
   b422c:	f7ff ffd6 	bl	b41dc <_ZN5Print6printfEPKcz>
    delay(200);
   b4230:	20c8      	movs	r0, #200	; 0xc8
   b4232:	f002 fc49 	bl	b6ac8 <delay>
    if (Serial1.available() > 0) {
   b4236:	f002 ffef 	bl	b7218 <_Z22__fetch_global_Serial1v>
   b423a:	6803      	ldr	r3, [r0, #0]
   b423c:	691b      	ldr	r3, [r3, #16]
   b423e:	4798      	blx	r3
   b4240:	2800      	cmp	r0, #0
   b4242:	dd19      	ble.n	b4278 <setup+0x80>
        Serial.printf("Awaiting Reply\n");
   b4244:	f002 fdbc 	bl	b6dc0 <_Z16_fetch_usbserialv>
   b4248:	49aa      	ldr	r1, [pc, #680]	; (b44f4 <setup+0x2fc>)
        reply = Serial1.readStringUntil('\n');
   b424a:	4cab      	ldr	r4, [pc, #684]	; (b44f8 <setup+0x300>)
        Serial.printf("Awaiting Reply\n");
   b424c:	f7ff ffc6 	bl	b41dc <_ZN5Print6printfEPKcz>
        reply = Serial1.readStringUntil('\n');
   b4250:	f002 ffe2 	bl	b7218 <_Z22__fetch_global_Serial1v>
   b4254:	220a      	movs	r2, #10
   b4256:	4601      	mov	r1, r0
   b4258:	a809      	add	r0, sp, #36	; 0x24
   b425a:	f002 fc05 	bl	b6a68 <_ZN6Stream15readStringUntilEc>
   b425e:	a909      	add	r1, sp, #36	; 0x24
   b4260:	4620      	mov	r0, r4
   b4262:	f001 f9fb 	bl	b565c <_ZN6StringaSEOS_>
   b4266:	a809      	add	r0, sp, #36	; 0x24
   b4268:	f001 f97c 	bl	b5564 <_ZN6StringD1Ev>
        Serial.printf("Reply: %s\n", reply.c_str());
   b426c:	f002 fda8 	bl	b6dc0 <_Z16_fetch_usbserialv>
   b4270:	6822      	ldr	r2, [r4, #0]
   b4272:	49a2      	ldr	r1, [pc, #648]	; (b44fc <setup+0x304>)
   b4274:	f7ff ffb2 	bl	b41dc <_ZN5Print6printfEPKcz>
    Serial1.printf("AT+ADDRESS=%i\r\n", addr); // correct
   b4278:	f002 ffce 	bl	b7218 <_Z22__fetch_global_Serial1v>
   b427c:	4ba0      	ldr	r3, [pc, #640]	; (b4500 <setup+0x308>)
   b427e:	49a1      	ldr	r1, [pc, #644]	; (b4504 <setup+0x30c>)
   b4280:	681a      	ldr	r2, [r3, #0]
   b4282:	f7ff ffab 	bl	b41dc <_ZN5Print6printfEPKcz>
    delay(200);
   b4286:	20c8      	movs	r0, #200	; 0xc8
   b4288:	f002 fc1e 	bl	b6ac8 <delay>
    if (Serial1.available() > 0) {
   b428c:	f002 ffc4 	bl	b7218 <_Z22__fetch_global_Serial1v>
   b4290:	6803      	ldr	r3, [r0, #0]
   b4292:	691b      	ldr	r3, [r3, #16]
   b4294:	4798      	blx	r3
   b4296:	2800      	cmp	r0, #0
   b4298:	dd19      	ble.n	b42ce <setup+0xd6>
        Serial.printf("Awaiting Reply from address\n");
   b429a:	f002 fd91 	bl	b6dc0 <_Z16_fetch_usbserialv>
   b429e:	499a      	ldr	r1, [pc, #616]	; (b4508 <setup+0x310>)
        reply = Serial1.readStringUntil('\n');
   b42a0:	4c95      	ldr	r4, [pc, #596]	; (b44f8 <setup+0x300>)
        Serial.printf("Awaiting Reply from address\n");
   b42a2:	f7ff ff9b 	bl	b41dc <_ZN5Print6printfEPKcz>
        reply = Serial1.readStringUntil('\n');
   b42a6:	f002 ffb7 	bl	b7218 <_Z22__fetch_global_Serial1v>
   b42aa:	220a      	movs	r2, #10
   b42ac:	4601      	mov	r1, r0
   b42ae:	a809      	add	r0, sp, #36	; 0x24
   b42b0:	f002 fbda 	bl	b6a68 <_ZN6Stream15readStringUntilEc>
   b42b4:	a909      	add	r1, sp, #36	; 0x24
   b42b6:	4620      	mov	r0, r4
   b42b8:	f001 f9d0 	bl	b565c <_ZN6StringaSEOS_>
   b42bc:	a809      	add	r0, sp, #36	; 0x24
   b42be:	f001 f951 	bl	b5564 <_ZN6StringD1Ev>
        Serial.printf("Reply address: %s\n", reply.c_str());
   b42c2:	f002 fd7d 	bl	b6dc0 <_Z16_fetch_usbserialv>
   b42c6:	6822      	ldr	r2, [r4, #0]
   b42c8:	4990      	ldr	r1, [pc, #576]	; (b450c <setup+0x314>)
   b42ca:	f7ff ff87 	bl	b41dc <_ZN5Print6printfEPKcz>
    Serial1.printf("AT+NETWORKID=%i\r\n", net); // correct
   b42ce:	f002 ffa3 	bl	b7218 <_Z22__fetch_global_Serial1v>
   b42d2:	4b8f      	ldr	r3, [pc, #572]	; (b4510 <setup+0x318>)
   b42d4:	498f      	ldr	r1, [pc, #572]	; (b4514 <setup+0x31c>)
   b42d6:	681a      	ldr	r2, [r3, #0]
   b42d8:	f7ff ff80 	bl	b41dc <_ZN5Print6printfEPKcz>
    delay(200);
   b42dc:	20c8      	movs	r0, #200	; 0xc8
   b42de:	f002 fbf3 	bl	b6ac8 <delay>
    if (Serial1.available() > 0) {
   b42e2:	f002 ff99 	bl	b7218 <_Z22__fetch_global_Serial1v>
   b42e6:	6803      	ldr	r3, [r0, #0]
   b42e8:	691b      	ldr	r3, [r3, #16]
   b42ea:	4798      	blx	r3
   b42ec:	2800      	cmp	r0, #0
   b42ee:	dd19      	ble.n	b4324 <setup+0x12c>
        Serial.printf("Awaiting Reply from networkid\n");
   b42f0:	f002 fd66 	bl	b6dc0 <_Z16_fetch_usbserialv>
   b42f4:	4988      	ldr	r1, [pc, #544]	; (b4518 <setup+0x320>)
        reply = Serial1.readStringUntil('\n');
   b42f6:	4c80      	ldr	r4, [pc, #512]	; (b44f8 <setup+0x300>)
        Serial.printf("Awaiting Reply from networkid\n");
   b42f8:	f7ff ff70 	bl	b41dc <_ZN5Print6printfEPKcz>
        reply = Serial1.readStringUntil('\n');
   b42fc:	f002 ff8c 	bl	b7218 <_Z22__fetch_global_Serial1v>
   b4300:	220a      	movs	r2, #10
   b4302:	4601      	mov	r1, r0
   b4304:	a809      	add	r0, sp, #36	; 0x24
   b4306:	f002 fbaf 	bl	b6a68 <_ZN6Stream15readStringUntilEc>
   b430a:	a909      	add	r1, sp, #36	; 0x24
   b430c:	4620      	mov	r0, r4
   b430e:	f001 f9a5 	bl	b565c <_ZN6StringaSEOS_>
   b4312:	a809      	add	r0, sp, #36	; 0x24
   b4314:	f001 f926 	bl	b5564 <_ZN6StringD1Ev>
        Serial.printf("Reply network: %s\n", reply.c_str());
   b4318:	f002 fd52 	bl	b6dc0 <_Z16_fetch_usbserialv>
   b431c:	6822      	ldr	r2, [r4, #0]
   b431e:	497f      	ldr	r1, [pc, #508]	; (b451c <setup+0x324>)
   b4320:	f7ff ff5c 	bl	b41dc <_ZN5Print6printfEPKcz>
    Serial1.printf("AT+ADDRESS?\r\n"); // correct
   b4324:	f002 ff78 	bl	b7218 <_Z22__fetch_global_Serial1v>
   b4328:	497d      	ldr	r1, [pc, #500]	; (b4520 <setup+0x328>)
   b432a:	f7ff ff57 	bl	b41dc <_ZN5Print6printfEPKcz>
    delay(200);
   b432e:	20c8      	movs	r0, #200	; 0xc8
   b4330:	f002 fbca 	bl	b6ac8 <delay>
    if (Serial1.available() > 0) {
   b4334:	f002 ff70 	bl	b7218 <_Z22__fetch_global_Serial1v>
   b4338:	6803      	ldr	r3, [r0, #0]
   b433a:	691b      	ldr	r3, [r3, #16]
   b433c:	4798      	blx	r3
   b433e:	2800      	cmp	r0, #0
   b4340:	dd19      	ble.n	b4376 <setup+0x17e>
        Serial.printf("Awaiting Reply\n");
   b4342:	f002 fd3d 	bl	b6dc0 <_Z16_fetch_usbserialv>
   b4346:	496b      	ldr	r1, [pc, #428]	; (b44f4 <setup+0x2fc>)
        reply = Serial1.readStringUntil('\n');
   b4348:	4c6b      	ldr	r4, [pc, #428]	; (b44f8 <setup+0x300>)
        Serial.printf("Awaiting Reply\n");
   b434a:	f7ff ff47 	bl	b41dc <_ZN5Print6printfEPKcz>
        reply = Serial1.readStringUntil('\n');
   b434e:	f002 ff63 	bl	b7218 <_Z22__fetch_global_Serial1v>
   b4352:	220a      	movs	r2, #10
   b4354:	4601      	mov	r1, r0
   b4356:	a809      	add	r0, sp, #36	; 0x24
   b4358:	f002 fb86 	bl	b6a68 <_ZN6Stream15readStringUntilEc>
   b435c:	a909      	add	r1, sp, #36	; 0x24
   b435e:	4620      	mov	r0, r4
   b4360:	f001 f97c 	bl	b565c <_ZN6StringaSEOS_>
   b4364:	a809      	add	r0, sp, #36	; 0x24
   b4366:	f001 f8fd 	bl	b5564 <_ZN6StringD1Ev>
        Serial.printf("Reply get address: %s\n", reply.c_str());
   b436a:	f002 fd29 	bl	b6dc0 <_Z16_fetch_usbserialv>
   b436e:	6822      	ldr	r2, [r4, #0]
   b4370:	496c      	ldr	r1, [pc, #432]	; (b4524 <setup+0x32c>)
   b4372:	f7ff ff33 	bl	b41dc <_ZN5Print6printfEPKcz>
    Serial1.printf("AT+NETWORKID?\r\n"); // correct
   b4376:	f002 ff4f 	bl	b7218 <_Z22__fetch_global_Serial1v>
   b437a:	496b      	ldr	r1, [pc, #428]	; (b4528 <setup+0x330>)
   b437c:	f7ff ff2e 	bl	b41dc <_ZN5Print6printfEPKcz>
    delay(200);
   b4380:	20c8      	movs	r0, #200	; 0xc8
   b4382:	f002 fba1 	bl	b6ac8 <delay>
    if (Serial1.available() > 0) {
   b4386:	f002 ff47 	bl	b7218 <_Z22__fetch_global_Serial1v>
   b438a:	6803      	ldr	r3, [r0, #0]
   b438c:	691b      	ldr	r3, [r3, #16]
   b438e:	4798      	blx	r3
   b4390:	2800      	cmp	r0, #0
   b4392:	dd19      	ble.n	b43c8 <setup+0x1d0>
        Serial.printf("Awaiting Reply\n");
   b4394:	f002 fd14 	bl	b6dc0 <_Z16_fetch_usbserialv>
   b4398:	4956      	ldr	r1, [pc, #344]	; (b44f4 <setup+0x2fc>)
        reply = Serial1.readStringUntil('\n');
   b439a:	4c57      	ldr	r4, [pc, #348]	; (b44f8 <setup+0x300>)
        Serial.printf("Awaiting Reply\n");
   b439c:	f7ff ff1e 	bl	b41dc <_ZN5Print6printfEPKcz>
        reply = Serial1.readStringUntil('\n');
   b43a0:	f002 ff3a 	bl	b7218 <_Z22__fetch_global_Serial1v>
   b43a4:	220a      	movs	r2, #10
   b43a6:	4601      	mov	r1, r0
   b43a8:	a809      	add	r0, sp, #36	; 0x24
   b43aa:	f002 fb5d 	bl	b6a68 <_ZN6Stream15readStringUntilEc>
   b43ae:	a909      	add	r1, sp, #36	; 0x24
   b43b0:	4620      	mov	r0, r4
   b43b2:	f001 f953 	bl	b565c <_ZN6StringaSEOS_>
   b43b6:	a809      	add	r0, sp, #36	; 0x24
   b43b8:	f001 f8d4 	bl	b5564 <_ZN6StringD1Ev>
        Serial.printf("Reply get network: %s\n", reply.c_str());
   b43bc:	f002 fd00 	bl	b6dc0 <_Z16_fetch_usbserialv>
   b43c0:	6822      	ldr	r2, [r4, #0]
   b43c2:	495a      	ldr	r1, [pc, #360]	; (b452c <setup+0x334>)
   b43c4:	f7ff ff0a 	bl	b41dc <_ZN5Print6printfEPKcz>
    Serial1.printf("AT+CPIN?\r\n"); // correct
   b43c8:	f002 ff26 	bl	b7218 <_Z22__fetch_global_Serial1v>
   b43cc:	4958      	ldr	r1, [pc, #352]	; (b4530 <setup+0x338>)
   b43ce:	f7ff ff05 	bl	b41dc <_ZN5Print6printfEPKcz>
    delay(500);
   b43d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b43d6:	f002 fb77 	bl	b6ac8 <delay>
    if (Serial1.available() > 0) {
   b43da:	f002 ff1d 	bl	b7218 <_Z22__fetch_global_Serial1v>
   b43de:	6803      	ldr	r3, [r0, #0]
   b43e0:	691b      	ldr	r3, [r3, #16]
   b43e2:	4798      	blx	r3
   b43e4:	2800      	cmp	r0, #0
   b43e6:	dd1e      	ble.n	b4426 <setup+0x22e>
        Serial.printf("Awaiting Reply\n");
   b43e8:	f002 fcea 	bl	b6dc0 <_Z16_fetch_usbserialv>
   b43ec:	4941      	ldr	r1, [pc, #260]	; (b44f4 <setup+0x2fc>)
   b43ee:	f7ff fef5 	bl	b41dc <_ZN5Print6printfEPKcz>
        reply = Serial1.readStringUntil('\n');
   b43f2:	f002 ff11 	bl	b7218 <_Z22__fetch_global_Serial1v>
   b43f6:	220a      	movs	r2, #10
   b43f8:	4601      	mov	r1, r0
   b43fa:	a809      	add	r0, sp, #36	; 0x24
   b43fc:	f002 fb34 	bl	b6a68 <_ZN6Stream15readStringUntilEc>
   b4400:	a909      	add	r1, sp, #36	; 0x24
   b4402:	483d      	ldr	r0, [pc, #244]	; (b44f8 <setup+0x300>)
   b4404:	f001 f92a 	bl	b565c <_ZN6StringaSEOS_>
   b4408:	a809      	add	r0, sp, #36	; 0x24
   b440a:	f001 f8ab 	bl	b5564 <_ZN6StringD1Ev>
        reply.getBytes(buf, 40);
   b440e:	4949      	ldr	r1, [pc, #292]	; (b4534 <setup+0x33c>)
   b4410:	4839      	ldr	r0, [pc, #228]	; (b44f8 <setup+0x300>)
   b4412:	2228      	movs	r2, #40	; 0x28
   b4414:	2300      	movs	r3, #0
   b4416:	f001 f95f 	bl	b56d8 <_ZNK6String8getBytesEPhjj>
        Serial.printf("Reply get password: %s\n", (char *)buf);
   b441a:	f002 fcd1 	bl	b6dc0 <_Z16_fetch_usbserialv>
   b441e:	4a45      	ldr	r2, [pc, #276]	; (b4534 <setup+0x33c>)
   b4420:	4945      	ldr	r1, [pc, #276]	; (b4538 <setup+0x340>)
   b4422:	f7ff fedb 	bl	b41dc <_ZN5Print6printfEPKcz>
    BLE.on();
   b4426:	f001 fc63 	bl	b5cf0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b442a:	f001 fcab 	bl	b5d84 <_ZNK8particle14BleLocalDevice2onEv>
    BLE.addCharacteristic(txCharacteristic);
   b442e:	f001 fc5f 	bl	b5cf0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4432:	4a42      	ldr	r2, [pc, #264]	; (b453c <setup+0x344>)
   b4434:	4c42      	ldr	r4, [pc, #264]	; (b4540 <setup+0x348>)
   b4436:	4601      	mov	r1, r0
   b4438:	a809      	add	r0, sp, #36	; 0x24
   b443a:	f002 f969 	bl	b6710 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b443e:	a809      	add	r0, sp, #36	; 0x24
   b4440:	f001 fd47 	bl	b5ed2 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(rxCharacteristic);
   b4444:	f001 fc54 	bl	b5cf0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4448:	4a3e      	ldr	r2, [pc, #248]	; (b4544 <setup+0x34c>)
   b444a:	4601      	mov	r1, r0
   b444c:	a809      	add	r0, sp, #36	; 0x24
   b444e:	f002 f95f 	bl	b6710 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4452:	a809      	add	r0, sp, #36	; 0x24
   b4454:	f001 fd3d 	bl	b5ed2 <_ZN8particle17BleCharacteristicD1Ev>
    data.appendServiceUUID(serviceUuid);
   b4458:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b445a:	ad04      	add	r5, sp, #16
   b445c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b445e:	ad04      	add	r5, sp, #16
   b4460:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4462:	6826      	ldr	r6, [r4, #0]
   b4464:	ac09      	add	r4, sp, #36	; 0x24
   b4466:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4468:	a809      	add	r0, sp, #36	; 0x24
        BleUuid tempUUID(uuid);
   b446a:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b446c:	f001 faba 	bl	b59e4 <_ZNK8particle7BleUuid4typeEv>
   b4470:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b4472:	a809      	add	r0, sp, #36	; 0x24
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4474:	bb94      	cbnz	r4, b44dc <setup+0x2e4>
            uint16_t uuid16 = tempUUID.shorted();
   b4476:	f001 fad1 	bl	b5a1c <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b447a:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b447c:	f8ad 000e 	strh.w	r0, [sp, #14]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4480:	2302      	movs	r3, #2
   b4482:	f10d 020e 	add.w	r2, sp, #14
   b4486:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b4488:	482f      	ldr	r0, [pc, #188]	; (b4548 <setup+0x350>)
   b448a:	f001 fe49 	bl	b6120 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    BLE.advertise(&data);
   b448e:	f001 fc2f 	bl	b5cf0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4492:	2200      	movs	r2, #0
   b4494:	492c      	ldr	r1, [pc, #176]	; (b4548 <setup+0x350>)
   b4496:	f001 fcbf 	bl	b5e18 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    tipStepper.setSpeed(RPM);
   b449a:	482c      	ldr	r0, [pc, #176]	; (b454c <setup+0x354>)
   b449c:	210a      	movs	r1, #10
   b449e:	f000 fca1 	bl	b4de4 <_ZN7Stepper8setSpeedEl>
    tiltStepper.setSpeed(RPM);
   b44a2:	482b      	ldr	r0, [pc, #172]	; (b4550 <setup+0x358>)
   b44a4:	210a      	movs	r1, #10
   b44a6:	f000 fc9d 	bl	b4de4 <_ZN7Stepper8setSpeedEl>
    pinMode(PHOTODIODE, INPUT); // delete this later only for quick testing purposes of photodioide pin on TX side
   b44aa:	2100      	movs	r1, #0
   b44ac:	2013      	movs	r0, #19
   b44ae:	f002 fe6d 	bl	b718c <pinMode>
    pinMode(D3, INPUT); // bit 2
   b44b2:	2100      	movs	r1, #0
   b44b4:	2003      	movs	r0, #3
   b44b6:	f002 fe69 	bl	b718c <pinMode>
    pinMode(D4, INPUT); // bit 1
   b44ba:	2100      	movs	r1, #0
   b44bc:	2004      	movs	r0, #4
   b44be:	f002 fe65 	bl	b718c <pinMode>
    pinMode(A1, OUTPUT); // reset pd values with a HIGH/LOW SIGNAL to an interrupt ( it will trigger an interrupt on the other side )
   b44c2:	2101      	movs	r1, #1
   b44c4:	2012      	movs	r0, #18
   b44c6:	f002 fe61 	bl	b718c <pinMode>
    ScanToggle = false;
   b44ca:	4a22      	ldr	r2, [pc, #136]	; (b4554 <setup+0x35c>)
   b44cc:	2300      	movs	r3, #0
   b44ce:	7013      	strb	r3, [r2, #0]
    MoveToState= false;
   b44d0:	4a21      	ldr	r2, [pc, #132]	; (b4558 <setup+0x360>)
   b44d2:	7013      	strb	r3, [r2, #0]
    button4State= false;
   b44d4:	4a21      	ldr	r2, [pc, #132]	; (b455c <setup+0x364>)
   b44d6:	7013      	strb	r3, [r2, #0]
}
   b44d8:	b00e      	add	sp, #56	; 0x38
   b44da:	bd70      	pop	{r4, r5, r6, pc}
   b44dc:	f001 faa0 	bl	b5a20 <_ZNK8particle7BleUuid8rawBytesEv>
   b44e0:	2300      	movs	r3, #0
   b44e2:	9300      	str	r3, [sp, #0]
   b44e4:	4602      	mov	r2, r0
   b44e6:	2310      	movs	r3, #16
   b44e8:	2107      	movs	r1, #7
   b44ea:	e7cd      	b.n	b4488 <setup+0x290>
   b44ec:	000b7864 	.word	0x000b7864
   b44f0:	000b7879 	.word	0x000b7879
   b44f4:	000b787e 	.word	0x000b787e
   b44f8:	2002fbb0 	.word	0x2002fbb0
   b44fc:	000b788e 	.word	0x000b788e
   b4500:	2002fa38 	.word	0x2002fa38
   b4504:	000b7899 	.word	0x000b7899
   b4508:	000b78a9 	.word	0x000b78a9
   b450c:	000b78c6 	.word	0x000b78c6
   b4510:	2002fa3c 	.word	0x2002fa3c
   b4514:	000b78d9 	.word	0x000b78d9
   b4518:	000b78eb 	.word	0x000b78eb
   b451c:	000b790a 	.word	0x000b790a
   b4520:	000b791d 	.word	0x000b791d
   b4524:	000b792b 	.word	0x000b792b
   b4528:	000b7942 	.word	0x000b7942
   b452c:	000b7952 	.word	0x000b7952
   b4530:	000b7969 	.word	0x000b7969
   b4534:	2002fb0c 	.word	0x2002fb0c
   b4538:	000b7974 	.word	0x000b7974
   b453c:	2003e6a4 	.word	0x2003e6a4
   b4540:	2002fabc 	.word	0x2002fabc
   b4544:	2002fbc0 	.word	0x2002fbc0
   b4548:	2002fb40 	.word	0x2002fb40
   b454c:	2003e678 	.word	0x2003e678
   b4550:	2003e64c 	.word	0x2003e64c
   b4554:	2002faad 	.word	0x2002faad
   b4558:	2002faac 	.word	0x2002faac
   b455c:	2002fb34 	.word	0x2002fb34

000b4560 <_Z4Scanv>:
    currentX = currentX + (-totalHorizontalSteps / 2);
    currentY = currentY + (totalVerticalSteps / 2);
    Serial.printf("current x = %i , currentY = %i\n", currentX, currentY);
}

void Scan() {
   b4560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int verticalCounter;
    bool ScanComplete;
    n = 1;
    horizontalCounter = 0;
    verticalCounter = 0;
    currentX = 0;
   b4564:	4f73      	ldr	r7, [pc, #460]	; (b4734 <_Z4Scanv+0x1d4>)
    currentY = 0;
   b4566:	4e74      	ldr	r6, [pc, #464]	; (b4738 <_Z4Scanv+0x1d8>)
    stepperCounter= 0;
   b4568:	f8df b200 	ldr.w	fp, [pc, #512]	; b476c <_Z4Scanv+0x20c>
    n = n * -1;
   b456c:	f8df 8200 	ldr.w	r8, [pc, #512]	; b4770 <_Z4Scanv+0x210>
  
    tiltStepper.step(totalHorizontalSteps / 2); // move to the left from current position
   b4570:	4872      	ldr	r0, [pc, #456]	; (b473c <_Z4Scanv+0x1dc>)
    currentY = totalVerticalSteps / 2;
    
    Serial1.printf("AT+SEND=888,1,5\r\n");
     
    delayMicroseconds(1065273 *.827); 
    startTimer1 = micros();                // delay time between Tx and Rx
   b4572:	f8df 9200 	ldr.w	r9, [pc, #512]	; b4774 <_Z4Scanv+0x214>

        if (micros() - stepTimer > 1000) {

            if (horizontalCounter <= totalHorizontalSteps) {
                stepTimer = micros();
                storedTimer= stepTimer-startTimer1;
   b4576:	f8df a1d8 	ldr.w	sl, [pc, #472]	; b4750 <_Z4Scanv+0x1f0>
void Scan() {
   b457a:	b087      	sub	sp, #28
    n = n * -1;
   b457c:	f04f 33ff 	mov.w	r3, #4294967295
    currentX = 0;
   b4580:	2500      	movs	r5, #0
    tiltStepper.step(totalHorizontalSteps / 2); // move to the left from current position
   b4582:	2119      	movs	r1, #25
    n = n * -1;
   b4584:	f8c8 3000 	str.w	r3, [r8]
    currentX = 0;
   b4588:	603d      	str	r5, [r7, #0]
    currentY = 0;
   b458a:	6035      	str	r5, [r6, #0]
    stepperCounter= 0;
   b458c:	f8cb 5000 	str.w	r5, [fp]
    tiltStepper.step(totalHorizontalSteps / 2); // move to the left from current position
   b4590:	f000 fcfa 	bl	b4f88 <_ZN7Stepper4stepEi>
    tipStepper.step(totalVerticalSteps / 2);    // move upwards from current position
   b4594:	486a      	ldr	r0, [pc, #424]	; (b4740 <_Z4Scanv+0x1e0>)
   b4596:	2119      	movs	r1, #25
   b4598:	f000 fcf6 	bl	b4f88 <_ZN7Stepper4stepEi>
    digitalWrite(A1, HIGH);                     // trigger an interrupt to clear PD val
   b459c:	2101      	movs	r1, #1
   b459e:	2012      	movs	r0, #18
   b45a0:	f002 fe05 	bl	b71ae <digitalWrite>
    digitalWrite(A1, LOW);                      // reset pin for next interrupt
   b45a4:	4629      	mov	r1, r5
   b45a6:	2012      	movs	r0, #18
   b45a8:	f002 fe01 	bl	b71ae <digitalWrite>
    currentX = totalHorizontalSteps / 2;
   b45ac:	2319      	movs	r3, #25
   b45ae:	603b      	str	r3, [r7, #0]
    currentY = totalVerticalSteps / 2;
   b45b0:	6033      	str	r3, [r6, #0]
    Serial1.printf("AT+SEND=888,1,5\r\n");
   b45b2:	f002 fe31 	bl	b7218 <_Z22__fetch_global_Serial1v>
   b45b6:	4963      	ldr	r1, [pc, #396]	; (b4744 <_Z4Scanv+0x1e4>)
   b45b8:	f7ff fe10 	bl	b41dc <_ZN5Print6printfEPKcz>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b45bc:	4862      	ldr	r0, [pc, #392]	; (b4748 <_Z4Scanv+0x1e8>)
   b45be:	f000 fd53 	bl	b5068 <HAL_Delay_Microseconds>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b45c2:	f000 fd59 	bl	b5078 <HAL_Timer_Get_Micro_Seconds>
    horizontalCounter = 0;
   b45c6:	462b      	mov	r3, r5
    startTimer1 = micros();                // delay time between Tx and Rx
   b45c8:	f8c9 0000 	str.w	r0, [r9]
    while (ScanComplete == false) {
   b45cc:	9301      	str	r3, [sp, #4]
   b45ce:	f000 fd53 	bl	b5078 <HAL_Timer_Get_Micro_Seconds>
        if (micros() - stepTimer > 1000) {
   b45d2:	1b00      	subs	r0, r0, r4
   b45d4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b45d8:	9b01      	ldr	r3, [sp, #4]
   b45da:	d927      	bls.n	b462c <_Z4Scanv+0xcc>
            if (horizontalCounter <= totalHorizontalSteps) {
   b45dc:	2b32      	cmp	r3, #50	; 0x32
   b45de:	dc24      	bgt.n	b462a <_Z4Scanv+0xca>
   b45e0:	f000 fd4a 	bl	b5078 <HAL_Timer_Get_Micro_Seconds>
                storedTimer= stepTimer-startTimer1;
   b45e4:	f8d9 1000 	ldr.w	r1, [r9]
   b45e8:	1a41      	subs	r1, r0, r1
   b45ea:	f8ca 1000 	str.w	r1, [sl]
   b45ee:	4604      	mov	r4, r0
                tiltStepper.step(1 * n);
   b45f0:	f8d8 1000 	ldr.w	r1, [r8]
   b45f4:	4851      	ldr	r0, [pc, #324]	; (b473c <_Z4Scanv+0x1dc>)
   b45f6:	f000 fcc7 	bl	b4f88 <_ZN7Stepper4stepEi>
                currentX = currentX + (1 * n);
   b45fa:	6838      	ldr	r0, [r7, #0]
   b45fc:	f8d8 1000 	ldr.w	r1, [r8]
                stepperCounter++;
                stepperArray[stepperCounter][0] = storedTimer;
   b4600:	4b52      	ldr	r3, [pc, #328]	; (b474c <_Z4Scanv+0x1ec>)
                currentX = currentX + (1 * n);
   b4602:	1842      	adds	r2, r0, r1
                stepperCounter++;
   b4604:	f8db 1000 	ldr.w	r1, [fp]
                currentX = currentX + (1 * n);
   b4608:	603a      	str	r2, [r7, #0]
                stepperCounter++;
   b460a:	3101      	adds	r1, #1
                stepperArray[stepperCounter][0] = storedTimer;
   b460c:	200c      	movs	r0, #12
                stepperCounter++;
   b460e:	f8cb 1000 	str.w	r1, [fp]
                stepperArray[stepperCounter][0] = storedTimer;
   b4612:	4341      	muls	r1, r0
   b4614:	eb03 0e01 	add.w	lr, r3, r1
   b4618:	f8da 0000 	ldr.w	r0, [sl]
   b461c:	5058      	str	r0, [r3, r1]
                stepperArray[stepperCounter][1] = currentX;
                stepperArray[stepperCounter][2] = currentY;
   b461e:	6831      	ldr	r1, [r6, #0]
   b4620:	9b01      	ldr	r3, [sp, #4]
                stepperArray[stepperCounter][1] = currentX;
   b4622:	f8ce 2004 	str.w	r2, [lr, #4]
                stepperArray[stepperCounter][2] = currentY;
   b4626:	f8ce 1008 	str.w	r1, [lr, #8]
            }

            horizontalCounter++;
   b462a:	3301      	adds	r3, #1
        }
        if (horizontalCounter == totalHorizontalSteps) {
   b462c:	2b32      	cmp	r3, #50	; 0x32
   b462e:	d126      	bne.n	b467e <_Z4Scanv+0x11e>
   b4630:	f000 fd22 	bl	b5078 <HAL_Timer_Get_Micro_Seconds>
            stepTimer = micros();
            storedTimer= stepTimer-startTimer1;
   b4634:	f8d9 3000 	ldr.w	r3, [r9]
            tipStepper.step(-1);
   b4638:	f04f 31ff 	mov.w	r1, #4294967295
            storedTimer= stepTimer-startTimer1;
   b463c:	1ac3      	subs	r3, r0, r3
   b463e:	4604      	mov	r4, r0
            tipStepper.step(-1);
   b4640:	483f      	ldr	r0, [pc, #252]	; (b4740 <_Z4Scanv+0x1e0>)
            storedTimer= stepTimer-startTimer1;
   b4642:	f8ca 3000 	str.w	r3, [sl]
            tipStepper.step(-1);
   b4646:	f000 fc9f 	bl	b4f88 <_ZN7Stepper4stepEi>
            currentY = currentY - 1;
            stepperCounter++;
   b464a:	f8db 3000 	ldr.w	r3, [fp]
            stepperArray[stepperCounter][0] = storedTimer;
   b464e:	4a3f      	ldr	r2, [pc, #252]	; (b474c <_Z4Scanv+0x1ec>)
            currentY = currentY - 1;
   b4650:	6831      	ldr	r1, [r6, #0]
            stepperCounter++;
   b4652:	3301      	adds	r3, #1
            stepperArray[stepperCounter][0] = storedTimer;
   b4654:	200c      	movs	r0, #12
            stepperCounter++;
   b4656:	f8cb 3000 	str.w	r3, [fp]
            stepperArray[stepperCounter][0] = storedTimer;
   b465a:	4343      	muls	r3, r0
   b465c:	f8da 0000 	ldr.w	r0, [sl]
   b4660:	50d0      	str	r0, [r2, r3]
   b4662:	eb02 0c03 	add.w	ip, r2, r3
            stepperArray[stepperCounter][1] = currentX;
   b4666:	683b      	ldr	r3, [r7, #0]
            currentY = currentY - 1;
   b4668:	3901      	subs	r1, #1
            stepperArray[stepperCounter][2] = currentY;
   b466a:	e9cc 3101 	strd	r3, r1, [ip, #4]
            horizontalCounter = 0;
            n = n * -1;
   b466e:	f8d8 3000 	ldr.w	r3, [r8]
            currentY = currentY - 1;
   b4672:	6031      	str	r1, [r6, #0]
            n = n * -1;
   b4674:	425b      	negs	r3, r3
   b4676:	f8c8 3000 	str.w	r3, [r8]
            verticalCounter++;
   b467a:	3501      	adds	r5, #1
            horizontalCounter = 0;
   b467c:	2300      	movs	r3, #0
    while (ScanComplete == false) {
   b467e:	2d32      	cmp	r5, #50	; 0x32
   b4680:	d1a4      	bne.n	b45cc <_Z4Scanv+0x6c>
        if (verticalCounter == totalVerticalSteps) {
            ScanComplete = true;
        }
    }

    tiltStepper.step(-totalHorizontalSteps / 2); // move to the right to reset to current position
   b4682:	482e      	ldr	r0, [pc, #184]	; (b473c <_Z4Scanv+0x1dc>)
    tipStepper.step(totalVerticalSteps / 2);     // move downwards to reset to current position
    storedTimer= stepTimer-startTimer1;
   b4684:	4d32      	ldr	r5, [pc, #200]	; (b4750 <_Z4Scanv+0x1f0>)
    tiltStepper.step(-totalHorizontalSteps / 2); // move to the right to reset to current position
   b4686:	f06f 0118 	mvn.w	r1, #24
   b468a:	f000 fc7d 	bl	b4f88 <_ZN7Stepper4stepEi>
    tipStepper.step(totalVerticalSteps / 2);     // move downwards to reset to current position
   b468e:	2119      	movs	r1, #25
   b4690:	482b      	ldr	r0, [pc, #172]	; (b4740 <_Z4Scanv+0x1e0>)
   b4692:	f000 fc79 	bl	b4f88 <_ZN7Stepper4stepEi>
    currentX = currentX + (-totalHorizontalSteps / 2);
   b4696:	683b      	ldr	r3, [r7, #0]
    storedTimer= stepTimer-startTimer1;
   b4698:	f8d9 0000 	ldr.w	r0, [r9]
    currentX = currentX + (-totalHorizontalSteps / 2);
   b469c:	3b19      	subs	r3, #25
   b469e:	603b      	str	r3, [r7, #0]
    currentY = currentY + (totalVerticalSteps / 2);
   b46a0:	6833      	ldr	r3, [r6, #0]
    storedTimer= stepTimer-startTimer1;
   b46a2:	1a24      	subs	r4, r4, r0
    currentY = currentY + (totalVerticalSteps / 2);
   b46a4:	3319      	adds	r3, #25
   b46a6:	6033      	str	r3, [r6, #0]
    storedTimer= stepTimer-startTimer1;
   b46a8:	602c      	str	r4, [r5, #0]
    
    Serial.printf(" movedStepper");
   b46aa:	f002 fb89 	bl	b6dc0 <_Z16_fetch_usbserialv>
   b46ae:	4929      	ldr	r1, [pc, #164]	; (b4754 <_Z4Scanv+0x1f4>)
   b46b0:	f7ff fd94 	bl	b41dc <_ZN5Print6printfEPKcz>
   b46b4:	f000 fce0 	bl	b5078 <HAL_Timer_Get_Micro_Seconds>
    endTimer1 = micros();
   b46b8:	4b27      	ldr	r3, [pc, #156]	; (b4758 <_Z4Scanv+0x1f8>)
    stepperCounter++;
    stepperArray[stepperCounter][0] = storedTimer;
   b46ba:	4924      	ldr	r1, [pc, #144]	; (b474c <_Z4Scanv+0x1ec>)
    endTimer1 = micros();
   b46bc:	6018      	str	r0, [r3, #0]
    stepperCounter++;
   b46be:	f8db 3000 	ldr.w	r3, [fp]
    stepperArray[stepperCounter][0] = storedTimer;
   b46c2:	6828      	ldr	r0, [r5, #0]
    stepperCounter++;
   b46c4:	3301      	adds	r3, #1
    stepperArray[stepperCounter][0] = storedTimer;
   b46c6:	220c      	movs	r2, #12
    stepperCounter++;
   b46c8:	f8cb 3000 	str.w	r3, [fp]
    stepperArray[stepperCounter][0] = storedTimer;
   b46cc:	4353      	muls	r3, r2
   b46ce:	18ca      	adds	r2, r1, r3
   b46d0:	50c8      	str	r0, [r1, r3]
    stepperArray[stepperCounter][1] = currentX;
   b46d2:	683b      	ldr	r3, [r7, #0]
   b46d4:	6053      	str	r3, [r2, #4]
    stepperArray[stepperCounter][2] = currentY;
   b46d6:	6833      	ldr	r3, [r6, #0]
   b46d8:	6093      	str	r3, [r2, #8]

    Serial1.printf("AT+SEND=888,1,9\r\n");
   b46da:	f002 fd9d 	bl	b7218 <_Z22__fetch_global_Serial1v>
   b46de:	491f      	ldr	r1, [pc, #124]	; (b475c <_Z4Scanv+0x1fc>)
   b46e0:	f7ff fd7c 	bl	b41dc <_ZN5Print6printfEPKcz>
    Serial.printf(" sending 9");
   b46e4:	f002 fb6c 	bl	b6dc0 <_Z16_fetch_usbserialv>
   b46e8:	491d      	ldr	r1, [pc, #116]	; (b4760 <_Z4Scanv+0x200>)
   b46ea:	f7ff fd77 	bl	b41dc <_ZN5Print6printfEPKcz>
    delay(200);
   b46ee:	20c8      	movs	r0, #200	; 0xc8
   b46f0:	f002 f9ea 	bl	b6ac8 <delay>
    if( Serial1.available()>0){
   b46f4:	f002 fd90 	bl	b7218 <_Z22__fetch_global_Serial1v>
   b46f8:	6803      	ldr	r3, [r0, #0]
   b46fa:	691b      	ldr	r3, [r3, #16]
   b46fc:	4798      	blx	r3
   b46fe:	2800      	cmp	r0, #0
   b4700:	dd14      	ble.n	b472c <_Z4Scanv+0x1cc>
        reply = Serial1.readStringUntil('\n');
   b4702:	f002 fd89 	bl	b7218 <_Z22__fetch_global_Serial1v>
   b4706:	4c17      	ldr	r4, [pc, #92]	; (b4764 <_Z4Scanv+0x204>)
   b4708:	220a      	movs	r2, #10
   b470a:	4601      	mov	r1, r0
   b470c:	a802      	add	r0, sp, #8
   b470e:	f002 f9ab 	bl	b6a68 <_ZN6Stream15readStringUntilEc>
   b4712:	a902      	add	r1, sp, #8
   b4714:	4620      	mov	r0, r4
   b4716:	f000 ffa1 	bl	b565c <_ZN6StringaSEOS_>
   b471a:	a802      	add	r0, sp, #8
   b471c:	f000 ff22 	bl	b5564 <_ZN6StringD1Ev>
        Serial.printf("\n Reply to send : %s\n", reply.c_str());
   b4720:	f002 fb4e 	bl	b6dc0 <_Z16_fetch_usbserialv>
   b4724:	6822      	ldr	r2, [r4, #0]
   b4726:	4910      	ldr	r1, [pc, #64]	; (b4768 <_Z4Scanv+0x208>)
   b4728:	f7ff fd58 	bl	b41dc <_ZN5Print6printfEPKcz>
    }
    // Serial.printf("current x = %i , currentY = %i\n", currentX, currentY);
}
   b472c:	b007      	add	sp, #28
   b472e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4732:	bf00      	nop
   b4734:	2002fb38 	.word	0x2002fb38
   b4738:	2002fb3c 	.word	0x2002fb3c
   b473c:	2003e64c 	.word	0x2003e64c
   b4740:	2003e678 	.word	0x2003e678
   b4744:	000b798c 	.word	0x000b798c
   b4748:	000d7154 	.word	0x000d7154
   b474c:	2002fbe4 	.word	0x2002fbe4
   b4750:	2003e648 	.word	0x2003e648
   b4754:	000b799e 	.word	0x000b799e
   b4758:	2002fb58 	.word	0x2002fb58
   b475c:	000b79ac 	.word	0x000b79ac
   b4760:	000b79be 	.word	0x000b79be
   b4764:	2002fbb0 	.word	0x2002fbb0
   b4768:	000b79c9 	.word	0x000b79c9
   b476c:	2003e644 	.word	0x2003e644
   b4770:	2002fb5c 	.word	0x2002fb5c
   b4774:	2002fbe0 	.word	0x2002fbe0

000b4778 <_Z12goTOsinglePDv>:
    Serial.printf("singleX %i, singleY %i\n", singleX, singleY);
    // pdDirection = n;
}


void goTOsinglePD() {
   b4778:	b538      	push	{r3, r4, r5, lr}
    tiltStepper.step(singleX);
   b477a:	4c09      	ldr	r4, [pc, #36]	; (b47a0 <_Z12goTOsinglePDv+0x28>)
    tipStepper.step(singleY);
   b477c:	4d09      	ldr	r5, [pc, #36]	; (b47a4 <_Z12goTOsinglePDv+0x2c>)
    tiltStepper.step(singleX);
   b477e:	6821      	ldr	r1, [r4, #0]
   b4780:	4809      	ldr	r0, [pc, #36]	; (b47a8 <_Z12goTOsinglePDv+0x30>)
   b4782:	f000 fc01 	bl	b4f88 <_ZN7Stepper4stepEi>
    tipStepper.step(singleY);
   b4786:	6829      	ldr	r1, [r5, #0]
   b4788:	4808      	ldr	r0, [pc, #32]	; (b47ac <_Z12goTOsinglePDv+0x34>)
   b478a:	f000 fbfd 	bl	b4f88 <_ZN7Stepper4stepEi>
    Serial.printf("moved to %i, %i\n", singleX, singleY);
   b478e:	f002 fb17 	bl	b6dc0 <_Z16_fetch_usbserialv>
   b4792:	682b      	ldr	r3, [r5, #0]
   b4794:	6822      	ldr	r2, [r4, #0]
   b4796:	4906      	ldr	r1, [pc, #24]	; (b47b0 <_Z12goTOsinglePDv+0x38>)
   b4798:	f7ff fd20 	bl	b41dc <_ZN5Print6printfEPKcz>
}
   b479c:	bd38      	pop	{r3, r4, r5, pc}
   b479e:	bf00      	nop
   b47a0:	2002fbd8 	.word	0x2002fbd8
   b47a4:	2002fbdc 	.word	0x2002fbdc
   b47a8:	2003e64c 	.word	0x2003e64c
   b47ac:	2003e678 	.word	0x2003e678
   b47b0:	000b79df 	.word	0x000b79df

000b47b4 <_Z10printArrayv>:
    for (c = 0; c < 4; c++) {
        Serial.printf("pdX[%i]= %i, pdY[%i] =%i\n", c, pdX[c], c, pdY[c]);
    }
}

void printArray() {
   b47b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
int r; 
    Serial.printf("printStart\n");
   b47b6:	f002 fb03 	bl	b6dc0 <_Z16_fetch_usbserialv>
   b47ba:	490f      	ldr	r1, [pc, #60]	; (b47f8 <_Z10printArrayv+0x44>)
   b47bc:	4c0f      	ldr	r4, [pc, #60]	; (b47fc <_Z10printArrayv+0x48>)
    
    for (r = 0; r < stepperCounter; r++) {
   b47be:	4f10      	ldr	r7, [pc, #64]	; (b4800 <_Z10printArrayv+0x4c>)
    Serial.printf("%i,%i,%i,%i\n", r,stepperArray[r][0], stepperArray[r][1], stepperArray[r][2]);
   b47c0:	4e10      	ldr	r6, [pc, #64]	; (b4804 <_Z10printArrayv+0x50>)
    Serial.printf("printStart\n");
   b47c2:	f7ff fd0b 	bl	b41dc <_ZN5Print6printfEPKcz>
    for (r = 0; r < stepperCounter; r++) {
   b47c6:	2500      	movs	r5, #0
   b47c8:	683b      	ldr	r3, [r7, #0]
   b47ca:	42ab      	cmp	r3, r5
   b47cc:	f104 040c 	add.w	r4, r4, #12
   b47d0:	dd0f      	ble.n	b47f2 <_Z10printArrayv+0x3e>
    Serial.printf("%i,%i,%i,%i\n", r,stepperArray[r][0], stepperArray[r][1], stepperArray[r][2]);
   b47d2:	f002 faf5 	bl	b6dc0 <_Z16_fetch_usbserialv>
   b47d6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   b47da:	9301      	str	r3, [sp, #4]
   b47dc:	f854 3c08 	ldr.w	r3, [r4, #-8]
   b47e0:	9300      	str	r3, [sp, #0]
   b47e2:	462a      	mov	r2, r5
   b47e4:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   b47e8:	4631      	mov	r1, r6
   b47ea:	f7ff fcf7 	bl	b41dc <_ZN5Print6printfEPKcz>
    for (r = 0; r < stepperCounter; r++) {
   b47ee:	3501      	adds	r5, #1
   b47f0:	e7ea      	b.n	b47c8 <_Z10printArrayv+0x14>
    }
    
}
   b47f2:	b003      	add	sp, #12
   b47f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b47f6:	bf00      	nop
   b47f8:	000b79f0 	.word	0x000b79f0
   b47fc:	2002fbe4 	.word	0x2002fbe4
   b4800:	2003e644 	.word	0x2003e644
   b4804:	000b79fc 	.word	0x000b79fc

000b4808 <_Z11SearchArrayv>:

void SearchArray(){
   b4808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


for(x = 0; x < 5000; x++){

    comparedVal = stepperArray[x][0];
    offset = dataLora - comparedVal;
   b480a:	4b16      	ldr	r3, [pc, #88]	; (b4864 <_Z11SearchArrayv+0x5c>)
int prevOffset = 7330673;
   b480c:	4816      	ldr	r0, [pc, #88]	; (b4868 <_Z11SearchArrayv+0x60>)
    offset = dataLora - comparedVal;
   b480e:	681e      	ldr	r6, [r3, #0]
    comparedVal = stepperArray[x][0];
   b4810:	4b16      	ldr	r3, [pc, #88]	; (b486c <_Z11SearchArrayv+0x64>)
for(x = 0; x < 5000; x++){
   b4812:	2200      	movs	r2, #0
    comparedVal = stepperArray[x][0];
   b4814:	270c      	movs	r7, #12
for(x = 0; x < 5000; x++){
   b4816:	f241 3488 	movw	r4, #5000	; 0x1388
    comparedVal = stepperArray[x][0];
   b481a:	fb07 f102 	mul.w	r1, r7, r2
    offset = dataLora - comparedVal;
   b481e:	58c9      	ldr	r1, [r1, r3]
   b4820:	1a71      	subs	r1, r6, r1
    if (abs(offset) < prevOffset){
   b4822:	ea81 7ce1 	eor.w	ip, r1, r1, asr #31
   b4826:	ebac 7ce1 	sub.w	ip, ip, r1, asr #31
   b482a:	4584      	cmp	ip, r0
   b482c:	bfb8      	it	lt
   b482e:	4615      	movlt	r5, r2
for(x = 0; x < 5000; x++){
   b4830:	f102 0201 	add.w	r2, r2, #1
        prevOffset = offset;
   b4834:	bfb8      	it	lt
   b4836:	4608      	movlt	r0, r1
for(x = 0; x < 5000; x++){
   b4838:	42a2      	cmp	r2, r4
   b483a:	d1ee      	bne.n	b481a <_Z11SearchArrayv+0x12>
        row = x;
       // Serial.printf("offset %i  row = %i\n ", offset, x);
    }
 } 
 singleX = stepperArray[row][1];
   b483c:	220c      	movs	r2, #12
   b483e:	fb02 3305 	mla	r3, r2, r5, r3
 singleY = stepperArray[row][2];
   b4842:	4d0b      	ldr	r5, [pc, #44]	; (b4870 <_Z11SearchArrayv+0x68>)
 singleX = stepperArray[row][1];
   b4844:	685a      	ldr	r2, [r3, #4]
   b4846:	4c0b      	ldr	r4, [pc, #44]	; (b4874 <_Z11SearchArrayv+0x6c>)
 singleY = stepperArray[row][2];
   b4848:	689b      	ldr	r3, [r3, #8]
   b484a:	602b      	str	r3, [r5, #0]
 stepperCounter=0;
   b484c:	4b0a      	ldr	r3, [pc, #40]	; (b4878 <_Z11SearchArrayv+0x70>)
 singleX = stepperArray[row][1];
   b484e:	6022      	str	r2, [r4, #0]
 stepperCounter=0;
   b4850:	2200      	movs	r2, #0
   b4852:	601a      	str	r2, [r3, #0]
 Serial.printf("singleX= %i, singleY=%i\n", singleX, singleY);
   b4854:	f002 fab4 	bl	b6dc0 <_Z16_fetch_usbserialv>
   b4858:	682b      	ldr	r3, [r5, #0]
   b485a:	6822      	ldr	r2, [r4, #0]
   b485c:	4907      	ldr	r1, [pc, #28]	; (b487c <_Z11SearchArrayv+0x74>)
   b485e:	f7ff fcbd 	bl	b41dc <_ZN5Print6printfEPKcz>
}
   b4862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b4864:	2002fb50 	.word	0x2002fb50
   b4868:	006fdb71 	.word	0x006fdb71
   b486c:	2002fbe4 	.word	0x2002fbe4
   b4870:	2002fbdc 	.word	0x2002fbdc
   b4874:	2002fbd8 	.word	0x2002fbd8
   b4878:	2003e644 	.word	0x2003e644
   b487c:	000b7a09 	.word	0x000b7a09

000b4880 <_Z12ParabolaScanv>:

void ParabolaScan(){
   b4880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
static int x2;
static int y2;

int p = 200 ;

for (x1=0;x1<=50; x1++){
   b4884:	4c68      	ldr	r4, [pc, #416]	; (b4a28 <_Z12ParabolaScanv+0x1a8>)
   b4886:	4d69      	ldr	r5, [pc, #420]	; (b4a2c <_Z12ParabolaScanv+0x1ac>)
   b4888:	4e69      	ldr	r6, [pc, #420]	; (b4a30 <_Z12ParabolaScanv+0x1b0>)
   b488a:	4f6a      	ldr	r7, [pc, #424]	; (b4a34 <_Z12ParabolaScanv+0x1b4>)
   b488c:	2300      	movs	r3, #0
   b488e:	6023      	str	r3, [r4, #0]
   b4890:	6823      	ldr	r3, [r4, #0]
   b4892:	2b32      	cmp	r3, #50	; 0x32
   b4894:	dc25      	bgt.n	b48e2 <_Z12ParabolaScanv+0x62>
    y1= (x1*x1)/p;
   b4896:	22c8      	movs	r2, #200	; 0xc8
   b4898:	435b      	muls	r3, r3
   b489a:	fbb3 f3f2 	udiv	r3, r3, r2
   b489e:	602b      	str	r3, [r5, #0]
    Serial.printf ("x = %i, y= %i \n",x1, y1);
   b48a0:	f002 fa8e 	bl	b6dc0 <_Z16_fetch_usbserialv>
   b48a4:	682b      	ldr	r3, [r5, #0]
   b48a6:	6822      	ldr	r2, [r4, #0]
   b48a8:	4963      	ldr	r1, [pc, #396]	; (b4a38 <_Z12ParabolaScanv+0x1b8>)
   b48aa:	f7ff fc97 	bl	b41dc <_ZN5Print6printfEPKcz>
    Serial.printf ("x2 = %i, y2= %i \n",x2, y2);
   b48ae:	f002 fa87 	bl	b6dc0 <_Z16_fetch_usbserialv>
   b48b2:	683a      	ldr	r2, [r7, #0]
   b48b4:	6833      	ldr	r3, [r6, #0]
   b48b6:	4961      	ldr	r1, [pc, #388]	; (b4a3c <_Z12ParabolaScanv+0x1bc>)
   b48b8:	f7ff fc90 	bl	b41dc <_ZN5Print6printfEPKcz>
    tiltStepper.step(x2-x1); // move to the right to reset to current position
   b48bc:	6823      	ldr	r3, [r4, #0]
   b48be:	6839      	ldr	r1, [r7, #0]
   b48c0:	485f      	ldr	r0, [pc, #380]	; (b4a40 <_Z12ParabolaScanv+0x1c0>)
   b48c2:	1ac9      	subs	r1, r1, r3
   b48c4:	f000 fb60 	bl	b4f88 <_ZN7Stepper4stepEi>
    tipStepper.step(y2-y1);  // move downwards to reset to current position
   b48c8:	682b      	ldr	r3, [r5, #0]
   b48ca:	6831      	ldr	r1, [r6, #0]
   b48cc:	485d      	ldr	r0, [pc, #372]	; (b4a44 <_Z12ParabolaScanv+0x1c4>)
   b48ce:	1ac9      	subs	r1, r1, r3
   b48d0:	f000 fb5a 	bl	b4f88 <_ZN7Stepper4stepEi>
    x2= x1;
   b48d4:	6823      	ldr	r3, [r4, #0]
    y2=y1;
   b48d6:	682a      	ldr	r2, [r5, #0]
    x2= x1;
   b48d8:	603b      	str	r3, [r7, #0]
for (x1=0;x1<=50; x1++){
   b48da:	3301      	adds	r3, #1
    y2=y1;
   b48dc:	6032      	str	r2, [r6, #0]
for (x1=0;x1<=50; x1++){
   b48de:	6023      	str	r3, [r4, #0]
   b48e0:	e7d6      	b.n	b4890 <_Z12ParabolaScanv+0x10>
    
}
x1=0;
   b48e2:	2300      	movs	r3, #0
y1 =0;
y2=0;

for(x1=0; x1<=50;x1++){
    y1= (x1*x1)/p;
    Serial.printf ("x = %i, y= %i \n",x1, y1);
   b48e4:	f8df a150 	ldr.w	sl, [pc, #336]	; b4a38 <_Z12ParabolaScanv+0x1b8>
    Serial.printf ("x2 = %i, y2= %i \n",x2, y2);
   b48e8:	f8df 9150 	ldr.w	r9, [pc, #336]	; b4a3c <_Z12ParabolaScanv+0x1bc>
    tiltStepper.step(x1-x2); // move to the right to reset to current position
   b48ec:	f8df 8150 	ldr.w	r8, [pc, #336]	; b4a40 <_Z12ParabolaScanv+0x1c0>
x1=0;
   b48f0:	6023      	str	r3, [r4, #0]
x2=0;
   b48f2:	603b      	str	r3, [r7, #0]
y2=0;
   b48f4:	6033      	str	r3, [r6, #0]
for(x1=0; x1<=50;x1++){
   b48f6:	6823      	ldr	r3, [r4, #0]
   b48f8:	2b32      	cmp	r3, #50	; 0x32
   b48fa:	dc25      	bgt.n	b4948 <_Z12ParabolaScanv+0xc8>
    y1= (x1*x1)/p;
   b48fc:	22c8      	movs	r2, #200	; 0xc8
   b48fe:	435b      	muls	r3, r3
   b4900:	fbb3 f3f2 	udiv	r3, r3, r2
   b4904:	602b      	str	r3, [r5, #0]
    Serial.printf ("x = %i, y= %i \n",x1, y1);
   b4906:	f002 fa5b 	bl	b6dc0 <_Z16_fetch_usbserialv>
   b490a:	682b      	ldr	r3, [r5, #0]
   b490c:	6822      	ldr	r2, [r4, #0]
   b490e:	4651      	mov	r1, sl
   b4910:	f7ff fc64 	bl	b41dc <_ZN5Print6printfEPKcz>
    Serial.printf ("x2 = %i, y2= %i \n",x2, y2);
   b4914:	f002 fa54 	bl	b6dc0 <_Z16_fetch_usbserialv>
   b4918:	683a      	ldr	r2, [r7, #0]
   b491a:	6833      	ldr	r3, [r6, #0]
   b491c:	4649      	mov	r1, r9
   b491e:	f7ff fc5d 	bl	b41dc <_ZN5Print6printfEPKcz>
    tiltStepper.step(x1-x2); // move to the right to reset to current position
   b4922:	683b      	ldr	r3, [r7, #0]
   b4924:	6821      	ldr	r1, [r4, #0]
   b4926:	4640      	mov	r0, r8
   b4928:	1ac9      	subs	r1, r1, r3
   b492a:	f000 fb2d 	bl	b4f88 <_ZN7Stepper4stepEi>
    tipStepper.step(y1-y2);  // move downwards to reset to current position
   b492e:	6833      	ldr	r3, [r6, #0]
   b4930:	6829      	ldr	r1, [r5, #0]
   b4932:	4844      	ldr	r0, [pc, #272]	; (b4a44 <_Z12ParabolaScanv+0x1c4>)
   b4934:	1ac9      	subs	r1, r1, r3
   b4936:	f000 fb27 	bl	b4f88 <_ZN7Stepper4stepEi>
    x2= x1;
   b493a:	6823      	ldr	r3, [r4, #0]
    y2=y1;
   b493c:	682a      	ldr	r2, [r5, #0]
    x2= x1;
   b493e:	603b      	str	r3, [r7, #0]
for(x1=0; x1<=50;x1++){
   b4940:	3301      	adds	r3, #1
    y2=y1;
   b4942:	6032      	str	r2, [r6, #0]
for(x1=0; x1<=50;x1++){
   b4944:	6023      	str	r3, [r4, #0]
   b4946:	e7d6      	b.n	b48f6 <_Z12ParabolaScanv+0x76>
   
}
x1=0;
   b4948:	2300      	movs	r3, #0
y2= 0;


for(x1=0; x1>=-50;x1--){
    y1= (x1*x1)/p;
    Serial.printf ("x = %i, y= %i \n",x1, y1);
   b494a:	f8df a0ec 	ldr.w	sl, [pc, #236]	; b4a38 <_Z12ParabolaScanv+0x1b8>
    Serial.printf ("x2 = %i, y2= %i \n",x2, y2);
   b494e:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b4a3c <_Z12ParabolaScanv+0x1bc>
    tiltStepper.step(x2-x1); // move to the right to reset to current position
   b4952:	f8df 80ec 	ldr.w	r8, [pc, #236]	; b4a40 <_Z12ParabolaScanv+0x1c0>
x1=0;
   b4956:	6023      	str	r3, [r4, #0]
x2=0;
   b4958:	603b      	str	r3, [r7, #0]
y2= 0;
   b495a:	6033      	str	r3, [r6, #0]
for(x1=0; x1>=-50;x1--){
   b495c:	6823      	ldr	r3, [r4, #0]
   b495e:	f113 0f32 	cmn.w	r3, #50	; 0x32
   b4962:	db25      	blt.n	b49b0 <_Z12ParabolaScanv+0x130>
    y1= (x1*x1)/p;
   b4964:	22c8      	movs	r2, #200	; 0xc8
   b4966:	435b      	muls	r3, r3
   b4968:	fbb3 f3f2 	udiv	r3, r3, r2
   b496c:	602b      	str	r3, [r5, #0]
    Serial.printf ("x = %i, y= %i \n",x1, y1);
   b496e:	f002 fa27 	bl	b6dc0 <_Z16_fetch_usbserialv>
   b4972:	682b      	ldr	r3, [r5, #0]
   b4974:	6822      	ldr	r2, [r4, #0]
   b4976:	4651      	mov	r1, sl
   b4978:	f7ff fc30 	bl	b41dc <_ZN5Print6printfEPKcz>
    Serial.printf ("x2 = %i, y2= %i \n",x2, y2);
   b497c:	f002 fa20 	bl	b6dc0 <_Z16_fetch_usbserialv>
   b4980:	683a      	ldr	r2, [r7, #0]
   b4982:	6833      	ldr	r3, [r6, #0]
   b4984:	4649      	mov	r1, r9
   b4986:	f7ff fc29 	bl	b41dc <_ZN5Print6printfEPKcz>
    tiltStepper.step(x2-x1); // move to the right to reset to current position
   b498a:	6823      	ldr	r3, [r4, #0]
   b498c:	6839      	ldr	r1, [r7, #0]
   b498e:	4640      	mov	r0, r8
   b4990:	1ac9      	subs	r1, r1, r3
   b4992:	f000 faf9 	bl	b4f88 <_ZN7Stepper4stepEi>
    tipStepper.step(y2-y1);  // move downwards to reset to current position
   b4996:	682b      	ldr	r3, [r5, #0]
   b4998:	6831      	ldr	r1, [r6, #0]
   b499a:	482a      	ldr	r0, [pc, #168]	; (b4a44 <_Z12ParabolaScanv+0x1c4>)
   b499c:	1ac9      	subs	r1, r1, r3
   b499e:	f000 faf3 	bl	b4f88 <_ZN7Stepper4stepEi>
    x2= x1;
   b49a2:	6823      	ldr	r3, [r4, #0]
    y2=y1;
   b49a4:	682a      	ldr	r2, [r5, #0]
    x2= x1;
   b49a6:	603b      	str	r3, [r7, #0]
for(x1=0; x1>=-50;x1--){
   b49a8:	3b01      	subs	r3, #1
    y2=y1;
   b49aa:	6032      	str	r2, [r6, #0]
for(x1=0; x1>=-50;x1--){
   b49ac:	6023      	str	r3, [r4, #0]
   b49ae:	e7d5      	b.n	b495c <_Z12ParabolaScanv+0xdc>
  
}
x1=0;
   b49b0:	2300      	movs	r3, #0
x2=0;
y1 =0;
y2=0;
for(x1=0; x1>=-50;x1--){
    y1= (x1*x1)/p;
    Serial.printf ("x = %i, y= %i \n",x1, y1);
   b49b2:	f8df a084 	ldr.w	sl, [pc, #132]	; b4a38 <_Z12ParabolaScanv+0x1b8>
    Serial.printf ("x2 = %i, y2= %i \n",x2, y2);
   b49b6:	f8df 9084 	ldr.w	r9, [pc, #132]	; b4a3c <_Z12ParabolaScanv+0x1bc>
    tiltStepper.step(x1-x2); // move to the right to reset to current position
   b49ba:	f8df 8084 	ldr.w	r8, [pc, #132]	; b4a40 <_Z12ParabolaScanv+0x1c0>
x1=0;
   b49be:	6023      	str	r3, [r4, #0]
x2=0;
   b49c0:	603b      	str	r3, [r7, #0]
y2=0;
   b49c2:	6033      	str	r3, [r6, #0]
for(x1=0; x1>=-50;x1--){
   b49c4:	6823      	ldr	r3, [r4, #0]
   b49c6:	f113 0f32 	cmn.w	r3, #50	; 0x32
   b49ca:	db25      	blt.n	b4a18 <_Z12ParabolaScanv+0x198>
    y1= (x1*x1)/p;
   b49cc:	22c8      	movs	r2, #200	; 0xc8
   b49ce:	435b      	muls	r3, r3
   b49d0:	fbb3 f3f2 	udiv	r3, r3, r2
   b49d4:	602b      	str	r3, [r5, #0]
    Serial.printf ("x = %i, y= %i \n",x1, y1);
   b49d6:	f002 f9f3 	bl	b6dc0 <_Z16_fetch_usbserialv>
   b49da:	682b      	ldr	r3, [r5, #0]
   b49dc:	6822      	ldr	r2, [r4, #0]
   b49de:	4651      	mov	r1, sl
   b49e0:	f7ff fbfc 	bl	b41dc <_ZN5Print6printfEPKcz>
    Serial.printf ("x2 = %i, y2= %i \n",x2, y2);
   b49e4:	f002 f9ec 	bl	b6dc0 <_Z16_fetch_usbserialv>
   b49e8:	683a      	ldr	r2, [r7, #0]
   b49ea:	6833      	ldr	r3, [r6, #0]
   b49ec:	4649      	mov	r1, r9
   b49ee:	f7ff fbf5 	bl	b41dc <_ZN5Print6printfEPKcz>
    tiltStepper.step(x1-x2); // move to the right to reset to current position
   b49f2:	683b      	ldr	r3, [r7, #0]
   b49f4:	6821      	ldr	r1, [r4, #0]
   b49f6:	4640      	mov	r0, r8
   b49f8:	1ac9      	subs	r1, r1, r3
   b49fa:	f000 fac5 	bl	b4f88 <_ZN7Stepper4stepEi>
    tipStepper.step(y1-y2);  // move downwards to reset to current position
   b49fe:	6833      	ldr	r3, [r6, #0]
   b4a00:	6829      	ldr	r1, [r5, #0]
   b4a02:	4810      	ldr	r0, [pc, #64]	; (b4a44 <_Z12ParabolaScanv+0x1c4>)
   b4a04:	1ac9      	subs	r1, r1, r3
   b4a06:	f000 fabf 	bl	b4f88 <_ZN7Stepper4stepEi>
    x2= x1;
   b4a0a:	6823      	ldr	r3, [r4, #0]
    y2=y1;
   b4a0c:	682a      	ldr	r2, [r5, #0]
    x2= x1;
   b4a0e:	603b      	str	r3, [r7, #0]
for(x1=0; x1>=-50;x1--){
   b4a10:	3b01      	subs	r3, #1
    y2=y1;
   b4a12:	6032      	str	r2, [r6, #0]
for(x1=0; x1>=-50;x1--){
   b4a14:	6023      	str	r3, [r4, #0]
   b4a16:	e7d5      	b.n	b49c4 <_Z12ParabolaScanv+0x144>

}


x1=0;
   b4a18:	2300      	movs	r3, #0
   b4a1a:	6023      	str	r3, [r4, #0]
x2=0;
   b4a1c:	603b      	str	r3, [r7, #0]
y1=0;
   b4a1e:	602b      	str	r3, [r5, #0]
y2=0;
   b4a20:	6033      	str	r3, [r6, #0]


}
   b4a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4a26:	bf00      	nop
   b4a28:	2002faf8 	.word	0x2002faf8
   b4a2c:	2002fb00 	.word	0x2002fb00
   b4a30:	2002fb04 	.word	0x2002fb04
   b4a34:	2002fafc 	.word	0x2002fafc
   b4a38:	000b7a22 	.word	0x000b7a22
   b4a3c:	000b7a32 	.word	0x000b7a32
   b4a40:	2003e64c 	.word	0x2003e64c
   b4a44:	2003e678 	.word	0x2003e678

000b4a48 <loop>:
void loop() {
   b4a48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4a4c:	b089      	sub	sp, #36	; 0x24
    if (Serial1.available()) {
   b4a4e:	f002 fbe3 	bl	b7218 <_Z22__fetch_global_Serial1v>
   b4a52:	6803      	ldr	r3, [r0, #0]
   b4a54:	4d53      	ldr	r5, [pc, #332]	; (b4ba4 <loop+0x15c>)
   b4a56:	691b      	ldr	r3, [r3, #16]
   b4a58:	4798      	blx	r3
   b4a5a:	2800      	cmp	r0, #0
   b4a5c:	f000 8083 	beq.w	b4b66 <loop+0x11e>
        Serial.printf("Awaiting Incoming Message");
   b4a60:	f002 f9ae 	bl	b6dc0 <_Z16_fetch_usbserialv>
   b4a64:	4950      	ldr	r1, [pc, #320]	; (b4ba8 <loop+0x160>)
        parse0 = Serial1.readStringUntil(',');
   b4a66:	f8df 8170 	ldr.w	r8, [pc, #368]	; b4bd8 <loop+0x190>
        parse1 = Serial1.readStringUntil(',');
   b4a6a:	f8df 9170 	ldr.w	r9, [pc, #368]	; b4bdc <loop+0x194>
        parse2 = Serial1.readStringUntil(',');
   b4a6e:	4f4f      	ldr	r7, [pc, #316]	; (b4bac <loop+0x164>)
        parse3 = Serial1.readStringUntil(',');
   b4a70:	4c4f      	ldr	r4, [pc, #316]	; (b4bb0 <loop+0x168>)
        parse4 = Serial1.readStringUntil('\n');
   b4a72:	4e50      	ldr	r6, [pc, #320]	; (b4bb4 <loop+0x16c>)
        Serial.printf("Awaiting Incoming Message");
   b4a74:	f7ff fbb2 	bl	b41dc <_ZN5Print6printfEPKcz>
        parse0 = Serial1.readStringUntil(',');
   b4a78:	f002 fbce 	bl	b7218 <_Z22__fetch_global_Serial1v>
   b4a7c:	222c      	movs	r2, #44	; 0x2c
   b4a7e:	4601      	mov	r1, r0
   b4a80:	a804      	add	r0, sp, #16
   b4a82:	f001 fff1 	bl	b6a68 <_ZN6Stream15readStringUntilEc>
   b4a86:	a904      	add	r1, sp, #16
   b4a88:	4640      	mov	r0, r8
   b4a8a:	f000 fde7 	bl	b565c <_ZN6StringaSEOS_>
   b4a8e:	a804      	add	r0, sp, #16
   b4a90:	f000 fd68 	bl	b5564 <_ZN6StringD1Ev>
        parse1 = Serial1.readStringUntil(',');
   b4a94:	f002 fbc0 	bl	b7218 <_Z22__fetch_global_Serial1v>
   b4a98:	222c      	movs	r2, #44	; 0x2c
   b4a9a:	4601      	mov	r1, r0
   b4a9c:	a804      	add	r0, sp, #16
   b4a9e:	f001 ffe3 	bl	b6a68 <_ZN6Stream15readStringUntilEc>
   b4aa2:	a904      	add	r1, sp, #16
   b4aa4:	4648      	mov	r0, r9
   b4aa6:	f000 fdd9 	bl	b565c <_ZN6StringaSEOS_>
   b4aaa:	a804      	add	r0, sp, #16
   b4aac:	f000 fd5a 	bl	b5564 <_ZN6StringD1Ev>
        parse2 = Serial1.readStringUntil(',');
   b4ab0:	f002 fbb2 	bl	b7218 <_Z22__fetch_global_Serial1v>
   b4ab4:	222c      	movs	r2, #44	; 0x2c
   b4ab6:	4601      	mov	r1, r0
   b4ab8:	a804      	add	r0, sp, #16
   b4aba:	f001 ffd5 	bl	b6a68 <_ZN6Stream15readStringUntilEc>
   b4abe:	a904      	add	r1, sp, #16
   b4ac0:	4638      	mov	r0, r7
   b4ac2:	f000 fdcb 	bl	b565c <_ZN6StringaSEOS_>
   b4ac6:	a804      	add	r0, sp, #16
   b4ac8:	f000 fd4c 	bl	b5564 <_ZN6StringD1Ev>
        parse3 = Serial1.readStringUntil(',');
   b4acc:	f002 fba4 	bl	b7218 <_Z22__fetch_global_Serial1v>
   b4ad0:	222c      	movs	r2, #44	; 0x2c
   b4ad2:	4601      	mov	r1, r0
   b4ad4:	a804      	add	r0, sp, #16
   b4ad6:	f001 ffc7 	bl	b6a68 <_ZN6Stream15readStringUntilEc>
   b4ada:	a904      	add	r1, sp, #16
   b4adc:	4620      	mov	r0, r4
   b4ade:	f000 fdbd 	bl	b565c <_ZN6StringaSEOS_>
   b4ae2:	a804      	add	r0, sp, #16
   b4ae4:	f000 fd3e 	bl	b5564 <_ZN6StringD1Ev>
        parse4 = Serial1.readStringUntil('\n');
   b4ae8:	f002 fb96 	bl	b7218 <_Z22__fetch_global_Serial1v>
   b4aec:	220a      	movs	r2, #10
   b4aee:	4601      	mov	r1, r0
   b4af0:	a804      	add	r0, sp, #16
   b4af2:	f001 ffb9 	bl	b6a68 <_ZN6Stream15readStringUntilEc>
   b4af6:	a904      	add	r1, sp, #16
   b4af8:	4630      	mov	r0, r6
   b4afa:	f000 fdaf 	bl	b565c <_ZN6StringaSEOS_>
   b4afe:	a804      	add	r0, sp, #16
   b4b00:	f000 fd30 	bl	b5564 <_ZN6StringD1Ev>
        Serial.printf("Incoming Message; %s\n%s\n%s\n%s\n%s\n", parse0.c_str(), parse1.c_str(), parse2.c_str(), parse3.c_str(), parse4.c_str());
   b4b04:	f002 f95c 	bl	b6dc0 <_Z16_fetch_usbserialv>
   b4b08:	6833      	ldr	r3, [r6, #0]
   b4b0a:	9302      	str	r3, [sp, #8]
   b4b0c:	6823      	ldr	r3, [r4, #0]
   b4b0e:	9301      	str	r3, [sp, #4]
   b4b10:	683b      	ldr	r3, [r7, #0]
   b4b12:	f8d8 2000 	ldr.w	r2, [r8]
   b4b16:	4928      	ldr	r1, [pc, #160]	; (b4bb8 <loop+0x170>)
   b4b18:	9300      	str	r3, [sp, #0]
   b4b1a:	f8d9 3000 	ldr.w	r3, [r9]
   b4b1e:	f7ff fb5d 	bl	b41dc <_ZN5Print6printfEPKcz>
        dataLen = parse2.toInt();
   b4b22:	4638      	mov	r0, r7
   b4b24:	f000 fdf0 	bl	b5708 <_ZNK6String5toIntEv>
   b4b28:	4f24      	ldr	r7, [pc, #144]	; (b4bbc <loop+0x174>)
   b4b2a:	6038      	str	r0, [r7, #0]
        dataLora = parse3.toInt();
   b4b2c:	4620      	mov	r0, r4
   b4b2e:	f000 fdeb 	bl	b5708 <_ZNK6String5toIntEv>
   b4b32:	4c23      	ldr	r4, [pc, #140]	; (b4bc0 <loop+0x178>)
   b4b34:	6020      	str	r0, [r4, #0]
        db = parse4.toInt();
   b4b36:	4630      	mov	r0, r6
   b4b38:	f000 fde6 	bl	b5708 <_ZNK6String5toIntEv>
   b4b3c:	4b21      	ldr	r3, [pc, #132]	; (b4bc4 <loop+0x17c>)
   b4b3e:	6018      	str	r0, [r3, #0]
        Serial.printf("Incoming Len %i, IncomingData %i\n", dataLen, dataLora);
   b4b40:	f002 f93e 	bl	b6dc0 <_Z16_fetch_usbserialv>
   b4b44:	6823      	ldr	r3, [r4, #0]
   b4b46:	683a      	ldr	r2, [r7, #0]
   b4b48:	491f      	ldr	r1, [pc, #124]	; (b4bc8 <loop+0x180>)
   b4b4a:	f7ff fb47 	bl	b41dc <_ZN5Print6printfEPKcz>
          if(dataLora == 0){
   b4b4e:	6823      	ldr	r3, [r4, #0]
   b4b50:	b923      	cbnz	r3, b4b5c <loop+0x114>
          Serial.printf("Scan did not work\n");
   b4b52:	f002 f935 	bl	b6dc0 <_Z16_fetch_usbserialv>
   b4b56:	491d      	ldr	r1, [pc, #116]	; (b4bcc <loop+0x184>)
   b4b58:	f7ff fb40 	bl	b41dc <_ZN5Print6printfEPKcz>
        if(dataLora >7){
   b4b5c:	6823      	ldr	r3, [r4, #0]
   b4b5e:	2b07      	cmp	r3, #7
            MoveToState= true;
   b4b60:	bfc4      	itt	gt
   b4b62:	2301      	movgt	r3, #1
   b4b64:	702b      	strbgt	r3, [r5, #0]
    if (ScanToggle) {
   b4b66:	4c1a      	ldr	r4, [pc, #104]	; (b4bd0 <loop+0x188>)
   b4b68:	7823      	ldrb	r3, [r4, #0]
   b4b6a:	b12b      	cbz	r3, b4b78 <loop+0x130>
        Scan();
   b4b6c:	f7ff fcf8 	bl	b4560 <_Z4Scanv>
        printArray();
   b4b70:	f7ff fe20 	bl	b47b4 <_Z10printArrayv>
        ScanToggle = false;
   b4b74:	2300      	movs	r3, #0
   b4b76:	7023      	strb	r3, [r4, #0]
    if(MoveToState){
   b4b78:	782b      	ldrb	r3, [r5, #0]
   b4b7a:	b12b      	cbz	r3, b4b88 <loop+0x140>
        SearchArray();
   b4b7c:	f7ff fe44 	bl	b4808 <_Z11SearchArrayv>
        goTOsinglePD();
   b4b80:	f7ff fdfa 	bl	b4778 <_Z12goTOsinglePDv>
        MoveToState=false;
   b4b84:	2300      	movs	r3, #0
   b4b86:	702b      	strb	r3, [r5, #0]
    if (button4State){
   b4b88:	4c12      	ldr	r4, [pc, #72]	; (b4bd4 <loop+0x18c>)
   b4b8a:	7823      	ldrb	r3, [r4, #0]
   b4b8c:	b13b      	cbz	r3, b4b9e <loop+0x156>
        ParabolaScan();
   b4b8e:	f7ff fe77 	bl	b4880 <_Z12ParabolaScanv>
        ParabolaScan();
   b4b92:	f7ff fe75 	bl	b4880 <_Z12ParabolaScanv>
        ParabolaScan();
   b4b96:	f7ff fe73 	bl	b4880 <_Z12ParabolaScanv>
        button4State= false;
   b4b9a:	2300      	movs	r3, #0
   b4b9c:	7023      	strb	r3, [r4, #0]
}
   b4b9e:	b009      	add	sp, #36	; 0x24
   b4ba0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b4ba4:	2002faac 	.word	0x2002faac
   b4ba8:	000b7a44 	.word	0x000b7a44
   b4bac:	2002fb80 	.word	0x2002fb80
   b4bb0:	2002fb90 	.word	0x2002fb90
   b4bb4:	2002fba0 	.word	0x2002fba0
   b4bb8:	000b7a5e 	.word	0x000b7a5e
   b4bbc:	2002fb4c 	.word	0x2002fb4c
   b4bc0:	2002fb50 	.word	0x2002fb50
   b4bc4:	2002fb54 	.word	0x2002fb54
   b4bc8:	000b7a80 	.word	0x000b7a80
   b4bcc:	000b7aa2 	.word	0x000b7aa2
   b4bd0:	2002faad 	.word	0x2002faad
   b4bd4:	2002fb34 	.word	0x2002fb34
   b4bd8:	2002fb60 	.word	0x2002fb60
   b4bdc:	2002fb70 	.word	0x2002fb70

000b4be0 <_GLOBAL__sub_I_SystemMode>:
}
   b4be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4be4:	4b56      	ldr	r3, [pc, #344]	; (b4d40 <_GLOBAL__sub_I_SystemMode+0x160>)
    SleepResult() {}
   b4be6:	4a57      	ldr	r2, [pc, #348]	; (b4d44 <_GLOBAL__sub_I_SystemMode+0x164>)
   b4be8:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4bea:	2700      	movs	r7, #0
   b4bec:	b098      	sub	sp, #96	; 0x60
   b4bee:	e9c3 7700 	strd	r7, r7, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4bf2:	2002      	movs	r0, #2
   b4bf4:	f000 fb90 	bl	b5318 <set_system_mode>
Stepper tipStepper(stepsPerRevolution, D8, D6, D7, D5);
   b4bf8:	2307      	movs	r3, #7
   b4bfa:	2205      	movs	r2, #5
   b4bfc:	e9cd 3200 	strd	r3, r2, [sp]
   b4c00:	f44f 6100 	mov.w	r1, #2048	; 0x800
   b4c04:	2306      	movs	r3, #6
   b4c06:	2208      	movs	r2, #8
   b4c08:	484f      	ldr	r0, [pc, #316]	; (b4d48 <_GLOBAL__sub_I_SystemMode+0x168>)
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b4c0a:	4c50      	ldr	r4, [pc, #320]	; (b4d4c <_GLOBAL__sub_I_SystemMode+0x16c>)
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b4c0c:	4d50      	ldr	r5, [pc, #320]	; (b4d50 <_GLOBAL__sub_I_SystemMode+0x170>)
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b4c0e:	4e51      	ldr	r6, [pc, #324]	; (b4d54 <_GLOBAL__sub_I_SystemMode+0x174>)
Stepper tipStepper(stepsPerRevolution, D8, D6, D7, D5);
   b4c10:	f000 f8c6 	bl	b4da0 <_ZN7StepperC1Eiiiii>
Stepper tiltStepper(stepsPerRevolution, A5, D12, D13, D11);
   b4c14:	230d      	movs	r3, #13
   b4c16:	210b      	movs	r1, #11
   b4c18:	220e      	movs	r2, #14
   b4c1a:	e9cd 3100 	strd	r3, r1, [sp]
   b4c1e:	484e      	ldr	r0, [pc, #312]	; (b4d58 <_GLOBAL__sub_I_SystemMode+0x178>)
   b4c20:	230c      	movs	r3, #12
   b4c22:	f44f 6100 	mov.w	r1, #2048	; 0x800
   b4c26:	f000 f8bb 	bl	b4da0 <_ZN7StepperC1Eiiiii>
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b4c2a:	494c      	ldr	r1, [pc, #304]	; (b4d5c <_GLOBAL__sub_I_SystemMode+0x17c>)
   b4c2c:	4620      	mov	r0, r4
   b4c2e:	f000 ff77 	bl	b5b20 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b4c32:	494b      	ldr	r1, [pc, #300]	; (b4d60 <_GLOBAL__sub_I_SystemMode+0x180>)
   b4c34:	4628      	mov	r0, r5
   b4c36:	f000 ff73 	bl	b5b20 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b4c3a:	494a      	ldr	r1, [pc, #296]	; (b4d64 <_GLOBAL__sub_I_SystemMode+0x184>)
   b4c3c:	4630      	mov	r0, r6
   b4c3e:	f000 ff6f 	bl	b5b20 <_ZN8particle7BleUuidC1EPKc>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags()
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
   b4c42:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4c44:	f10d 0c10 	add.w	ip, sp, #16
   b4c48:	46a0      	mov	r8, r4
   b4c4a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b4c4e:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
   b4c52:	f8d6 a000 	ldr.w	sl, [r6]
   b4c56:	f8cc a000 	str.w	sl, [ip]
   b4c5a:	ae09      	add	r6, sp, #36	; 0x24
   b4c5c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   b4c5e:	f10d 0c10 	add.w	ip, sp, #16
   b4c62:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b4c66:	f8d8 9000 	ldr.w	r9, [r8]
   b4c6a:	f8c6 9000 	str.w	r9, [r6]
   b4c6e:	ae0e      	add	r6, sp, #56	; 0x38
   b4c70:	c60f      	stmia	r6!, {r0, r1, r2, r3}
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b4c72:	f8df e124 	ldr.w	lr, [pc, #292]	; b4d98 <_GLOBAL__sub_I_SystemMode+0x1b8>
   b4c76:	f8c6 a000 	str.w	sl, [r6]
        BleUuid sUuid(svcUuid);
   b4c7a:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
      constexpr __shared_count() noexcept : _M_pi(0)
   b4c7e:	e9ce 7700 	strd	r7, r7, [lr]
   b4c82:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b4c86:	ae13      	add	r6, sp, #76	; 0x4c
   b4c88:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b4c8a:	f8c6 9000 	str.w	r9, [r6]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b4c8e:	ae13      	add	r6, sp, #76	; 0x4c
   b4c90:	ab0e      	add	r3, sp, #56	; 0x38
   b4c92:	4670      	mov	r0, lr
   b4c94:	e9cd 7701 	strd	r7, r7, [sp, #4]
   b4c98:	4933      	ldr	r1, [pc, #204]	; (b4d68 <_GLOBAL__sub_I_SystemMode+0x188>)
   b4c9a:	9600      	str	r6, [sp, #0]
   b4c9c:	f04f 0210 	mov.w	r2, #16
   b4ca0:	f001 fc10 	bl	b64c4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   b4ca4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4ca6:	f10d 0c10 	add.w	ip, sp, #16
   b4caa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b4cae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4cb0:	f8d5 e000 	ldr.w	lr, [r5]
   b4cb4:	f8d8 8000 	ldr.w	r8, [r8]
   b4cb8:	f8cc e000 	str.w	lr, [ip]
   b4cbc:	ad09      	add	r5, sp, #36	; 0x24
   b4cbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4cc0:	f8c5 8000 	str.w	r8, [r5]
        BleUuid cUuid(charUuid);
   b4cc4:	ad04      	add	r5, sp, #16
   b4cc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4cc8:	ac0e      	add	r4, sp, #56	; 0x38
   b4cca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
      : _M_ptr(0), _M_refcount()
   b4ccc:	f8df c0cc 	ldr.w	ip, [pc, #204]	; b4d9c <_GLOBAL__sub_I_SystemMode+0x1bc>
   b4cd0:	f8c4 e000 	str.w	lr, [r4]
        BleUuid sUuid(svcUuid);
   b4cd4:	ad09      	add	r5, sp, #36	; 0x24
      constexpr __shared_count() noexcept : _M_pi(0)
   b4cd6:	e9cc 7700 	strd	r7, r7, [ip]
   b4cda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4cdc:	4634      	mov	r4, r6
   b4cde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b4ce0:	4b22      	ldr	r3, [pc, #136]	; (b4d6c <_GLOBAL__sub_I_SystemMode+0x18c>)
        BleUuid sUuid(svcUuid);
   b4ce2:	f8c4 8000 	str.w	r8, [r4]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b4ce6:	4660      	mov	r0, ip
   b4ce8:	f04f 0204 	mov.w	r2, #4
   b4cec:	e9cd 6300 	strd	r6, r3, [sp]
   b4cf0:	491f      	ldr	r1, [pc, #124]	; (b4d70 <_GLOBAL__sub_I_SystemMode+0x190>)
   b4cf2:	9702      	str	r7, [sp, #8]
   b4cf4:	ab0e      	add	r3, sp, #56	; 0x38
   b4cf6:	f001 fbe5 	bl	b64c4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
BleAdvertisingData data;
   b4cfa:	481e      	ldr	r0, [pc, #120]	; (b4d74 <_GLOBAL__sub_I_SystemMode+0x194>)
   b4cfc:	f001 fa1b 	bl	b6136 <_ZN8particle18BleAdvertisingDataC1Ev>
String reply;
   b4d00:	491d      	ldr	r1, [pc, #116]	; (b4d78 <_GLOBAL__sub_I_SystemMode+0x198>)
   b4d02:	481e      	ldr	r0, [pc, #120]	; (b4d7c <_GLOBAL__sub_I_SystemMode+0x19c>)
   b4d04:	f000 fc79 	bl	b55fa <_ZN6StringC1EPK19__FlashStringHelper>
String parse0;
   b4d08:	491b      	ldr	r1, [pc, #108]	; (b4d78 <_GLOBAL__sub_I_SystemMode+0x198>)
   b4d0a:	481d      	ldr	r0, [pc, #116]	; (b4d80 <_GLOBAL__sub_I_SystemMode+0x1a0>)
   b4d0c:	f000 fc75 	bl	b55fa <_ZN6StringC1EPK19__FlashStringHelper>
String parse1;
   b4d10:	4919      	ldr	r1, [pc, #100]	; (b4d78 <_GLOBAL__sub_I_SystemMode+0x198>)
   b4d12:	481c      	ldr	r0, [pc, #112]	; (b4d84 <_GLOBAL__sub_I_SystemMode+0x1a4>)
   b4d14:	f000 fc71 	bl	b55fa <_ZN6StringC1EPK19__FlashStringHelper>
String parse2;
   b4d18:	4917      	ldr	r1, [pc, #92]	; (b4d78 <_GLOBAL__sub_I_SystemMode+0x198>)
   b4d1a:	481b      	ldr	r0, [pc, #108]	; (b4d88 <_GLOBAL__sub_I_SystemMode+0x1a8>)
   b4d1c:	f000 fc6d 	bl	b55fa <_ZN6StringC1EPK19__FlashStringHelper>
String parse3;
   b4d20:	4915      	ldr	r1, [pc, #84]	; (b4d78 <_GLOBAL__sub_I_SystemMode+0x198>)
   b4d22:	481a      	ldr	r0, [pc, #104]	; (b4d8c <_GLOBAL__sub_I_SystemMode+0x1ac>)
   b4d24:	f000 fc69 	bl	b55fa <_ZN6StringC1EPK19__FlashStringHelper>
String parse4;
   b4d28:	4913      	ldr	r1, [pc, #76]	; (b4d78 <_GLOBAL__sub_I_SystemMode+0x198>)
   b4d2a:	4819      	ldr	r0, [pc, #100]	; (b4d90 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   b4d2c:	f000 fc65 	bl	b55fa <_ZN6StringC1EPK19__FlashStringHelper>
String sentTimeString;
   b4d30:	4911      	ldr	r1, [pc, #68]	; (b4d78 <_GLOBAL__sub_I_SystemMode+0x198>)
   b4d32:	4818      	ldr	r0, [pc, #96]	; (b4d94 <_GLOBAL__sub_I_SystemMode+0x1b4>)
}
   b4d34:	b018      	add	sp, #96	; 0x60
   b4d36:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
String sentTimeString;
   b4d3a:	f000 bc5e 	b.w	b55fa <_ZN6StringC1EPK19__FlashStringHelper>
   b4d3e:	bf00      	nop
   b4d40:	2002fab0 	.word	0x2002fab0
   b4d44:	ffff0000 	.word	0xffff0000
   b4d48:	2003e678 	.word	0x2003e678
   b4d4c:	2002fabc 	.word	0x2002fabc
   b4d50:	2002fad0 	.word	0x2002fad0
   b4d54:	2002fae4 	.word	0x2002fae4
   b4d58:	2003e64c 	.word	0x2003e64c
   b4d5c:	000b7ab5 	.word	0x000b7ab5
   b4d60:	000b7ada 	.word	0x000b7ada
   b4d64:	000b7aff 	.word	0x000b7aff
   b4d68:	000b7b24 	.word	0x000b7b24
   b4d6c:	000b40b1 	.word	0x000b40b1
   b4d70:	000b7b27 	.word	0x000b7b27
   b4d74:	2002fb40 	.word	0x2002fb40
   b4d78:	000b799d 	.word	0x000b799d
   b4d7c:	2002fbb0 	.word	0x2002fbb0
   b4d80:	2002fb60 	.word	0x2002fb60
   b4d84:	2002fb70 	.word	0x2002fb70
   b4d88:	2002fb80 	.word	0x2002fb80
   b4d8c:	2002fb90 	.word	0x2002fb90
   b4d90:	2002fba0 	.word	0x2002fba0
   b4d94:	2002fbc8 	.word	0x2002fbc8
   b4d98:	2003e6a4 	.word	0x2003e6a4
   b4d9c:	2002fbc0 	.word	0x2002fbc0

000b4da0 <_ZN7StepperC1Eiiiii>:

/*
 *   constructor for four-pin version
 *   Sets which wires should control the motor.
 */
Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2,
   b4da0:	b538      	push	{r3, r4, r5, lr}
  this->last_step_time = 0; // time stamp in us of the last step taken
  this->number_of_steps = number_of_steps; // total number of steps for this motor

  // Arduino pins for the motor control connection:
  this->motor_pin_1 = motor_pin_1;
  this->motor_pin_2 = motor_pin_2;
   b4da2:	e9c0 2305 	strd	r2, r3, [r0, #20]
  this->motor_pin_3 = motor_pin_3;
   b4da6:	9b04      	ldr	r3, [sp, #16]
   b4da8:	61c3      	str	r3, [r0, #28]
Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2,
   b4daa:	4604      	mov	r4, r0
  this->motor_pin_4 = motor_pin_4;
   b4dac:	9b05      	ldr	r3, [sp, #20]
   b4dae:	6203      	str	r3, [r0, #32]
  this->step_number = 0;    // which step the motor is on
   b4db0:	2500      	movs	r5, #0
   b4db2:	6105      	str	r5, [r0, #16]
  this->direction = 0;      // motor direction
   b4db4:	6005      	str	r5, [r0, #0]
  this->last_step_time = 0; // time stamp in us of the last step taken
   b4db6:	6285      	str	r5, [r0, #40]	; 0x28
  this->number_of_steps = number_of_steps; // total number of steps for this motor
   b4db8:	6081      	str	r1, [r0, #8]

  // setup the pins on the microcontroller:
  pinMode(this->motor_pin_1, OUTPUT);
   b4dba:	b290      	uxth	r0, r2
   b4dbc:	2101      	movs	r1, #1
   b4dbe:	f002 f9e5 	bl	b718c <pinMode>
  pinMode(this->motor_pin_2, OUTPUT);
   b4dc2:	8b20      	ldrh	r0, [r4, #24]
   b4dc4:	2101      	movs	r1, #1
   b4dc6:	f002 f9e1 	bl	b718c <pinMode>
  pinMode(this->motor_pin_3, OUTPUT);
   b4dca:	8ba0      	ldrh	r0, [r4, #28]
   b4dcc:	2101      	movs	r1, #1
   b4dce:	f002 f9dd 	bl	b718c <pinMode>
  pinMode(this->motor_pin_4, OUTPUT);
   b4dd2:	8c20      	ldrh	r0, [r4, #32]
   b4dd4:	2101      	movs	r1, #1
   b4dd6:	f002 f9d9 	bl	b718c <pinMode>

  // When there are 4 pins, set the others to 0:
  this->motor_pin_5 = 0;

  // pin_count is used by the stepMotor() method:
  this->pin_count = 4;
   b4dda:	2304      	movs	r3, #4
  this->motor_pin_5 = 0;
   b4ddc:	6265      	str	r5, [r4, #36]	; 0x24
  this->pin_count = 4;
   b4dde:	60e3      	str	r3, [r4, #12]
}
   b4de0:	4620      	mov	r0, r4
   b4de2:	bd38      	pop	{r3, r4, r5, pc}

000b4de4 <_ZN7Stepper8setSpeedEl>:
/*
 * Sets the speed in revs per minute
 */
void Stepper::setSpeed(long whatSpeed)
{
  this->step_delay = 60L * 1000L * 1000L / this->number_of_steps / whatSpeed;
   b4de4:	6882      	ldr	r2, [r0, #8]
   b4de6:	4b03      	ldr	r3, [pc, #12]	; (b4df4 <_ZN7Stepper8setSpeedEl+0x10>)
   b4de8:	fb93 f3f2 	sdiv	r3, r3, r2
   b4dec:	fb93 f1f1 	sdiv	r1, r3, r1
   b4df0:	6041      	str	r1, [r0, #4]
}
   b4df2:	4770      	bx	lr
   b4df4:	03938700 	.word	0x03938700

000b4df8 <_ZN7Stepper9stepMotorEi>:

/*
 * Moves the motor forward or backwards.
 */
void Stepper::stepMotor(int thisStep)
{
   b4df8:	b538      	push	{r3, r4, r5, lr}
  if (this->pin_count == 2) {
   b4dfa:	68c3      	ldr	r3, [r0, #12]
   b4dfc:	2b02      	cmp	r3, #2
{
   b4dfe:	4604      	mov	r4, r0
   b4e00:	460d      	mov	r5, r1
  if (this->pin_count == 2) {
   b4e02:	d10d      	bne.n	b4e20 <_ZN7Stepper9stepMotorEi+0x28>
    switch (thisStep) {
   b4e04:	2903      	cmp	r1, #3
   b4e06:	d80b      	bhi.n	b4e20 <_ZN7Stepper9stepMotorEi+0x28>
   b4e08:	e8df f001 	tbb	[pc, r1]
   b4e0c:	1b151302 	.word	0x1b151302
      case 0:  // 01
        digitalWrite(motor_pin_1, LOW);
   b4e10:	2100      	movs	r1, #0
        digitalWrite(motor_pin_2, HIGH);
      break;
      case 1:  // 11
        digitalWrite(motor_pin_1, HIGH);
   b4e12:	8aa0      	ldrh	r0, [r4, #20]
   b4e14:	f002 f9cb 	bl	b71ae <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
   b4e18:	2101      	movs	r1, #1
        digitalWrite(motor_pin_1, HIGH);
        digitalWrite(motor_pin_2, LOW);
      break;
      case 3:  // 00
        digitalWrite(motor_pin_1, LOW);
        digitalWrite(motor_pin_2, LOW);
   b4e1a:	8b20      	ldrh	r0, [r4, #24]
   b4e1c:	f002 f9c7 	bl	b71ae <digitalWrite>
      break;
    }
  }
  if (this->pin_count == 4) {
   b4e20:	68e3      	ldr	r3, [r4, #12]
   b4e22:	2b04      	cmp	r3, #4
   b4e24:	d11f      	bne.n	b4e66 <_ZN7Stepper9stepMotorEi+0x6e>
    switch (thisStep) {
   b4e26:	2d03      	cmp	r5, #3
   b4e28:	d81d      	bhi.n	b4e66 <_ZN7Stepper9stepMotorEi+0x6e>
   b4e2a:	e8df f005 	tbb	[pc, r5]
   b4e2e:	2a0c      	.short	0x2a0c
   b4e30:	3e30      	.short	0x3e30
        digitalWrite(motor_pin_1, HIGH);
   b4e32:	2101      	movs	r1, #1
   b4e34:	e7ed      	b.n	b4e12 <_ZN7Stepper9stepMotorEi+0x1a>
        digitalWrite(motor_pin_1, HIGH);
   b4e36:	2101      	movs	r1, #1
        digitalWrite(motor_pin_1, LOW);
   b4e38:	8aa0      	ldrh	r0, [r4, #20]
   b4e3a:	f002 f9b8 	bl	b71ae <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
   b4e3e:	2100      	movs	r1, #0
   b4e40:	e7eb      	b.n	b4e1a <_ZN7Stepper9stepMotorEi+0x22>
        digitalWrite(motor_pin_1, LOW);
   b4e42:	2100      	movs	r1, #0
   b4e44:	e7f8      	b.n	b4e38 <_ZN7Stepper9stepMotorEi+0x40>
      case 0:  // 1010
        digitalWrite(motor_pin_1, HIGH);
   b4e46:	2101      	movs	r1, #1
   b4e48:	8aa0      	ldrh	r0, [r4, #20]
   b4e4a:	f002 f9b0 	bl	b71ae <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
   b4e4e:	2100      	movs	r1, #0
        digitalWrite(motor_pin_3, HIGH);
        digitalWrite(motor_pin_4, LOW);
      break;
      case 1:  // 0110
        digitalWrite(motor_pin_1, LOW);
        digitalWrite(motor_pin_2, HIGH);
   b4e50:	8b20      	ldrh	r0, [r4, #24]
   b4e52:	f002 f9ac 	bl	b71ae <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
   b4e56:	2101      	movs	r1, #1
   b4e58:	8ba0      	ldrh	r0, [r4, #28]
   b4e5a:	f002 f9a8 	bl	b71ae <digitalWrite>
        digitalWrite(motor_pin_4, LOW);
   b4e5e:	2100      	movs	r1, #0
      break;
      case 3:  //1001
        digitalWrite(motor_pin_1, HIGH);
        digitalWrite(motor_pin_2, LOW);
        digitalWrite(motor_pin_3, LOW);
        digitalWrite(motor_pin_4, HIGH);
   b4e60:	8c20      	ldrh	r0, [r4, #32]
   b4e62:	f002 f9a4 	bl	b71ae <digitalWrite>
      break;
    }
  }

  if (this->pin_count == 5) {
   b4e66:	68e3      	ldr	r3, [r4, #12]
   b4e68:	2b05      	cmp	r3, #5
   b4e6a:	f040 808c 	bne.w	b4f86 <_ZN7Stepper9stepMotorEi+0x18e>
    switch (thisStep) {
   b4e6e:	2d09      	cmp	r5, #9
   b4e70:	f200 8089 	bhi.w	b4f86 <_ZN7Stepper9stepMotorEi+0x18e>
   b4e74:	e8df f005 	tbb	[pc, r5]
   b4e78:	4937291f 	.word	0x4937291f
   b4e7c:	7167615f 	.word	0x7167615f
   b4e80:	857f      	.short	0x857f
        digitalWrite(motor_pin_1, LOW);
   b4e82:	2100      	movs	r1, #0
   b4e84:	8aa0      	ldrh	r0, [r4, #20]
   b4e86:	f002 f992 	bl	b71ae <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
   b4e8a:	2101      	movs	r1, #1
   b4e8c:	e7e0      	b.n	b4e50 <_ZN7Stepper9stepMotorEi+0x58>
        digitalWrite(motor_pin_1, LOW);
   b4e8e:	2100      	movs	r1, #0
   b4e90:	8aa0      	ldrh	r0, [r4, #20]
   b4e92:	f002 f98c 	bl	b71ae <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
   b4e96:	2101      	movs	r1, #1
        digitalWrite(motor_pin_2, LOW);
   b4e98:	8b20      	ldrh	r0, [r4, #24]
   b4e9a:	f002 f988 	bl	b71ae <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
   b4e9e:	2100      	movs	r1, #0
   b4ea0:	8ba0      	ldrh	r0, [r4, #28]
   b4ea2:	f002 f984 	bl	b71ae <digitalWrite>
        digitalWrite(motor_pin_4, HIGH);
   b4ea6:	2101      	movs	r1, #1
   b4ea8:	e7da      	b.n	b4e60 <_ZN7Stepper9stepMotorEi+0x68>
        digitalWrite(motor_pin_1, HIGH);
   b4eaa:	2101      	movs	r1, #1
   b4eac:	8aa0      	ldrh	r0, [r4, #20]
   b4eae:	f002 f97e 	bl	b71ae <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
   b4eb2:	2100      	movs	r1, #0
   b4eb4:	e7f0      	b.n	b4e98 <_ZN7Stepper9stepMotorEi+0xa0>
      case 0:  // 01101
        digitalWrite(motor_pin_1, LOW);
   b4eb6:	2100      	movs	r1, #0
   b4eb8:	8aa0      	ldrh	r0, [r4, #20]
   b4eba:	f002 f978 	bl	b71ae <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
   b4ebe:	2101      	movs	r1, #1
        digitalWrite(motor_pin_4, LOW);
        digitalWrite(motor_pin_5, HIGH);
        break;
      case 9:  // 00101
        digitalWrite(motor_pin_1, LOW);
        digitalWrite(motor_pin_2, LOW);
   b4ec0:	8b20      	ldrh	r0, [r4, #24]
   b4ec2:	f002 f974 	bl	b71ae <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
   b4ec6:	2101      	movs	r1, #1
   b4ec8:	e008      	b.n	b4edc <_ZN7Stepper9stepMotorEi+0xe4>
        digitalWrite(motor_pin_1, LOW);
   b4eca:	8aa0      	ldrh	r0, [r4, #20]
   b4ecc:	2100      	movs	r1, #0
   b4ece:	f002 f96e 	bl	b71ae <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
   b4ed2:	2101      	movs	r1, #1
   b4ed4:	8b20      	ldrh	r0, [r4, #24]
   b4ed6:	f002 f96a 	bl	b71ae <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
   b4eda:	2100      	movs	r1, #0
        digitalWrite(motor_pin_3, HIGH);
   b4edc:	8ba0      	ldrh	r0, [r4, #28]
   b4ede:	f002 f966 	bl	b71ae <digitalWrite>
        digitalWrite(motor_pin_4, LOW);
   b4ee2:	2100      	movs	r1, #0
   b4ee4:	e00c      	b.n	b4f00 <_ZN7Stepper9stepMotorEi+0x108>
        digitalWrite(motor_pin_1, LOW);
   b4ee6:	8aa0      	ldrh	r0, [r4, #20]
   b4ee8:	2100      	movs	r1, #0
   b4eea:	f002 f960 	bl	b71ae <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
   b4eee:	8b20      	ldrh	r0, [r4, #24]
   b4ef0:	2101      	movs	r1, #1
   b4ef2:	f002 f95c 	bl	b71ae <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
   b4ef6:	2100      	movs	r1, #0
   b4ef8:	8ba0      	ldrh	r0, [r4, #28]
   b4efa:	f002 f958 	bl	b71ae <digitalWrite>
        digitalWrite(motor_pin_4, HIGH);
   b4efe:	2101      	movs	r1, #1
        digitalWrite(motor_pin_4, LOW);
   b4f00:	8c20      	ldrh	r0, [r4, #32]
   b4f02:	f002 f954 	bl	b71ae <digitalWrite>
        digitalWrite(motor_pin_5, HIGH);
   b4f06:	2101      	movs	r1, #1
   b4f08:	e010      	b.n	b4f2c <_ZN7Stepper9stepMotorEi+0x134>
        digitalWrite(motor_pin_1, LOW);
   b4f0a:	2100      	movs	r1, #0
        digitalWrite(motor_pin_1, HIGH);
   b4f0c:	8aa0      	ldrh	r0, [r4, #20]
   b4f0e:	f002 f94e 	bl	b71ae <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
   b4f12:	2101      	movs	r1, #1
        digitalWrite(motor_pin_2, LOW);
   b4f14:	8b20      	ldrh	r0, [r4, #24]
   b4f16:	f002 f94a 	bl	b71ae <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
   b4f1a:	2100      	movs	r1, #0
        digitalWrite(motor_pin_3, HIGH);
   b4f1c:	8ba0      	ldrh	r0, [r4, #28]
   b4f1e:	f002 f946 	bl	b71ae <digitalWrite>
        digitalWrite(motor_pin_4, HIGH);
   b4f22:	2101      	movs	r1, #1
        digitalWrite(motor_pin_4, LOW);
   b4f24:	8c20      	ldrh	r0, [r4, #32]
   b4f26:	f002 f942 	bl	b71ae <digitalWrite>
        digitalWrite(motor_pin_5, LOW);
   b4f2a:	2100      	movs	r1, #0
        digitalWrite(motor_pin_5, HIGH);
   b4f2c:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
        break;
    }
  }
}
   b4f2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        digitalWrite(motor_pin_5, HIGH);
   b4f32:	f002 b93c 	b.w	b71ae <digitalWrite>
        digitalWrite(motor_pin_1, HIGH);
   b4f36:	2101      	movs	r1, #1
   b4f38:	e7e8      	b.n	b4f0c <_ZN7Stepper9stepMotorEi+0x114>
        digitalWrite(motor_pin_1, HIGH);
   b4f3a:	2101      	movs	r1, #1
   b4f3c:	8aa0      	ldrh	r0, [r4, #20]
   b4f3e:	f002 f936 	bl	b71ae <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
   b4f42:	2100      	movs	r1, #0
   b4f44:	e7e6      	b.n	b4f14 <_ZN7Stepper9stepMotorEi+0x11c>
        digitalWrite(motor_pin_1, HIGH);
   b4f46:	8aa0      	ldrh	r0, [r4, #20]
   b4f48:	2101      	movs	r1, #1
   b4f4a:	f002 f930 	bl	b71ae <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
   b4f4e:	2100      	movs	r1, #0
   b4f50:	8b20      	ldrh	r0, [r4, #24]
   b4f52:	f002 f92c 	bl	b71ae <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
   b4f56:	2101      	movs	r1, #1
   b4f58:	e7e0      	b.n	b4f1c <_ZN7Stepper9stepMotorEi+0x124>
        digitalWrite(motor_pin_1, HIGH);
   b4f5a:	8aa0      	ldrh	r0, [r4, #20]
   b4f5c:	2101      	movs	r1, #1
   b4f5e:	f002 f926 	bl	b71ae <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
   b4f62:	8b20      	ldrh	r0, [r4, #24]
   b4f64:	2100      	movs	r1, #0
   b4f66:	f002 f922 	bl	b71ae <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
   b4f6a:	2101      	movs	r1, #1
   b4f6c:	8ba0      	ldrh	r0, [r4, #28]
   b4f6e:	f002 f91e 	bl	b71ae <digitalWrite>
        digitalWrite(motor_pin_4, LOW);
   b4f72:	2100      	movs	r1, #0
   b4f74:	e7d6      	b.n	b4f24 <_ZN7Stepper9stepMotorEi+0x12c>
        digitalWrite(motor_pin_1, HIGH);
   b4f76:	2101      	movs	r1, #1
        digitalWrite(motor_pin_1, LOW);
   b4f78:	8aa0      	ldrh	r0, [r4, #20]
   b4f7a:	f002 f918 	bl	b71ae <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
   b4f7e:	2100      	movs	r1, #0
   b4f80:	e79e      	b.n	b4ec0 <_ZN7Stepper9stepMotorEi+0xc8>
        digitalWrite(motor_pin_1, LOW);
   b4f82:	2100      	movs	r1, #0
   b4f84:	e7f8      	b.n	b4f78 <_ZN7Stepper9stepMotorEi+0x180>
}
   b4f86:	bd38      	pop	{r3, r4, r5, pc}

000b4f88 <_ZN7Stepper4stepEi>:
{
   b4f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (steps_to_move > 0) { this->direction = 1; }
   b4f8a:	2900      	cmp	r1, #0
  int steps_left = abs(steps_to_move);  // how many steps to take
   b4f8c:	ea81 75e1 	eor.w	r5, r1, r1, asr #31
{
   b4f90:	4604      	mov	r4, r0
  int steps_left = abs(steps_to_move);  // how many steps to take
   b4f92:	eba5 75e1 	sub.w	r5, r5, r1, asr #31
  if (steps_to_move > 0) { this->direction = 1; }
   b4f96:	dd24      	ble.n	b4fe2 <_ZN7Stepper4stepEi+0x5a>
   b4f98:	2301      	movs	r3, #1
   b4f9a:	6023      	str	r3, [r4, #0]
          this->step_number = 0;
   b4f9c:	2700      	movs	r7, #0
        stepMotor(this->step_number % 10);
   b4f9e:	260a      	movs	r6, #10
  while (steps_left > 0)
   b4fa0:	b385      	cbz	r5, b5004 <_ZN7Stepper4stepEi+0x7c>
   b4fa2:	f000 f869 	bl	b5078 <HAL_Timer_Get_Micro_Seconds>
    if (now - this->last_step_time >= this->step_delay)
   b4fa6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b4fa8:	6862      	ldr	r2, [r4, #4]
   b4faa:	1ac3      	subs	r3, r0, r3
   b4fac:	4293      	cmp	r3, r2
   b4fae:	d3f7      	bcc.n	b4fa0 <_ZN7Stepper4stepEi+0x18>
      if (this->direction == 1)
   b4fb0:	6822      	ldr	r2, [r4, #0]
        this->step_number++;
   b4fb2:	6923      	ldr	r3, [r4, #16]
      this->last_step_time = now;
   b4fb4:	62a0      	str	r0, [r4, #40]	; 0x28
      if (this->direction == 1)
   b4fb6:	2a01      	cmp	r2, #1
   b4fb8:	d116      	bne.n	b4fe8 <_ZN7Stepper4stepEi+0x60>
        if (this->step_number == this->number_of_steps) {
   b4fba:	68a2      	ldr	r2, [r4, #8]
        this->step_number++;
   b4fbc:	3301      	adds	r3, #1
        if (this->step_number == this->number_of_steps) {
   b4fbe:	4293      	cmp	r3, r2
          this->step_number = 0;
   b4fc0:	bf08      	it	eq
   b4fc2:	463b      	moveq	r3, r7
        this->step_number--;
   b4fc4:	6123      	str	r3, [r4, #16]
      if (this->pin_count == 5)
   b4fc6:	e9d4 3103 	ldrd	r3, r1, [r4, #12]
   b4fca:	2b05      	cmp	r3, #5
      steps_left--;
   b4fcc:	f105 35ff 	add.w	r5, r5, #4294967295
      if (this->pin_count == 5)
   b4fd0:	d110      	bne.n	b4ff4 <_ZN7Stepper4stepEi+0x6c>
        stepMotor(this->step_number % 10);
   b4fd2:	fb91 f3f6 	sdiv	r3, r1, r6
   b4fd6:	fb06 1113 	mls	r1, r6, r3, r1
        stepMotor(this->step_number % 4);
   b4fda:	4620      	mov	r0, r4
   b4fdc:	f7ff ff0c 	bl	b4df8 <_ZN7Stepper9stepMotorEi>
   b4fe0:	e7de      	b.n	b4fa0 <_ZN7Stepper4stepEi+0x18>
  if (steps_to_move < 0) { this->direction = 0; }
   b4fe2:	d0db      	beq.n	b4f9c <_ZN7Stepper4stepEi+0x14>
   b4fe4:	2300      	movs	r3, #0
   b4fe6:	e7d8      	b.n	b4f9a <_ZN7Stepper4stepEi+0x12>
        if (this->step_number == 0) {
   b4fe8:	b90b      	cbnz	r3, b4fee <_ZN7Stepper4stepEi+0x66>
          this->step_number = this->number_of_steps;
   b4fea:	68a3      	ldr	r3, [r4, #8]
   b4fec:	6123      	str	r3, [r4, #16]
        this->step_number--;
   b4fee:	6923      	ldr	r3, [r4, #16]
   b4ff0:	3b01      	subs	r3, #1
   b4ff2:	e7e7      	b.n	b4fc4 <_ZN7Stepper4stepEi+0x3c>
        stepMotor(this->step_number % 4);
   b4ff4:	424b      	negs	r3, r1
   b4ff6:	f003 0303 	and.w	r3, r3, #3
   b4ffa:	f001 0103 	and.w	r1, r1, #3
   b4ffe:	bf58      	it	pl
   b5000:	4259      	negpl	r1, r3
   b5002:	e7ea      	b.n	b4fda <_ZN7Stepper4stepEi+0x52>
}
   b5004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000b5008 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5008:	b508      	push	{r3, lr}
   b500a:	4b02      	ldr	r3, [pc, #8]	; (b5014 <netdb_freeaddrinfo+0xc>)
   b500c:	681b      	ldr	r3, [r3, #0]
   b500e:	689b      	ldr	r3, [r3, #8]
   b5010:	9301      	str	r3, [sp, #4]
   b5012:	bd08      	pop	{r3, pc}
   b5014:	00030268 	.word	0x00030268

000b5018 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5018:	b508      	push	{r3, lr}
   b501a:	4b02      	ldr	r3, [pc, #8]	; (b5024 <netdb_getaddrinfo+0xc>)
   b501c:	681b      	ldr	r3, [r3, #0]
   b501e:	68db      	ldr	r3, [r3, #12]
   b5020:	9301      	str	r3, [sp, #4]
   b5022:	bd08      	pop	{r3, pc}
   b5024:	00030268 	.word	0x00030268

000b5028 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b5028:	b508      	push	{r3, lr}
   b502a:	4b02      	ldr	r3, [pc, #8]	; (b5034 <HAL_Pin_Mode+0xc>)
   b502c:	681b      	ldr	r3, [r3, #0]
   b502e:	689b      	ldr	r3, [r3, #8]
   b5030:	9301      	str	r3, [sp, #4]
   b5032:	bd08      	pop	{r3, pc}
   b5034:	0003022c 	.word	0x0003022c

000b5038 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b5038:	b508      	push	{r3, lr}
   b503a:	4b02      	ldr	r3, [pc, #8]	; (b5044 <HAL_Get_Pin_Mode+0xc>)
   b503c:	681b      	ldr	r3, [r3, #0]
   b503e:	68db      	ldr	r3, [r3, #12]
   b5040:	9301      	str	r3, [sp, #4]
   b5042:	bd08      	pop	{r3, pc}
   b5044:	0003022c 	.word	0x0003022c

000b5048 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b5048:	b508      	push	{r3, lr}
   b504a:	4b02      	ldr	r3, [pc, #8]	; (b5054 <HAL_GPIO_Write+0xc>)
   b504c:	681b      	ldr	r3, [r3, #0]
   b504e:	691b      	ldr	r3, [r3, #16]
   b5050:	9301      	str	r3, [sp, #4]
   b5052:	bd08      	pop	{r3, pc}
   b5054:	0003022c 	.word	0x0003022c

000b5058 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5058:	b508      	push	{r3, lr}
   b505a:	4b02      	ldr	r3, [pc, #8]	; (b5064 <HAL_RNG_GetRandomNumber+0xc>)
   b505c:	681b      	ldr	r3, [r3, #0]
   b505e:	685b      	ldr	r3, [r3, #4]
   b5060:	9301      	str	r3, [sp, #4]
   b5062:	bd08      	pop	{r3, pc}
   b5064:	00030218 	.word	0x00030218

000b5068 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5068:	b508      	push	{r3, lr}
   b506a:	4b02      	ldr	r3, [pc, #8]	; (b5074 <HAL_Delay_Microseconds+0xc>)
   b506c:	681b      	ldr	r3, [r3, #0]
   b506e:	68db      	ldr	r3, [r3, #12]
   b5070:	9301      	str	r3, [sp, #4]
   b5072:	bd08      	pop	{r3, pc}
   b5074:	00030218 	.word	0x00030218

000b5078 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b5078:	b508      	push	{r3, lr}
   b507a:	4b02      	ldr	r3, [pc, #8]	; (b5084 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b507c:	681b      	ldr	r3, [r3, #0]
   b507e:	691b      	ldr	r3, [r3, #16]
   b5080:	9301      	str	r3, [sp, #4]
   b5082:	bd08      	pop	{r3, pc}
   b5084:	00030218 	.word	0x00030218

000b5088 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5088:	b508      	push	{r3, lr}
   b508a:	4b02      	ldr	r3, [pc, #8]	; (b5094 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b508c:	681b      	ldr	r3, [r3, #0]
   b508e:	695b      	ldr	r3, [r3, #20]
   b5090:	9301      	str	r3, [sp, #4]
   b5092:	bd08      	pop	{r3, pc}
   b5094:	00030218 	.word	0x00030218

000b5098 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b5098:	b508      	push	{r3, lr}
   b509a:	4b02      	ldr	r3, [pc, #8]	; (b50a4 <hal_ble_stack_init+0xc>)
   b509c:	681b      	ldr	r3, [r3, #0]
   b509e:	689b      	ldr	r3, [r3, #8]
   b50a0:	9301      	str	r3, [sp, #4]
   b50a2:	bd08      	pop	{r3, pc}
   b50a4:	00030278 	.word	0x00030278

000b50a8 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b50a8:	b508      	push	{r3, lr}
   b50aa:	4b02      	ldr	r3, [pc, #8]	; (b50b4 <hal_ble_gap_set_advertising_data+0xc>)
   b50ac:	681b      	ldr	r3, [r3, #0]
   b50ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b50b0:	9301      	str	r3, [sp, #4]
   b50b2:	bd08      	pop	{r3, pc}
   b50b4:	00030278 	.word	0x00030278

000b50b8 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b50b8:	b508      	push	{r3, lr}
   b50ba:	4b02      	ldr	r3, [pc, #8]	; (b50c4 <hal_ble_gap_set_scan_response_data+0xc>)
   b50bc:	681b      	ldr	r3, [r3, #0]
   b50be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b50c0:	9301      	str	r3, [sp, #4]
   b50c2:	bd08      	pop	{r3, pc}
   b50c4:	00030278 	.word	0x00030278

000b50c8 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b50c8:	b508      	push	{r3, lr}
   b50ca:	4b02      	ldr	r3, [pc, #8]	; (b50d4 <hal_ble_gap_start_advertising+0xc>)
   b50cc:	681b      	ldr	r3, [r3, #0]
   b50ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b50d0:	9301      	str	r3, [sp, #4]
   b50d2:	bd08      	pop	{r3, pc}
   b50d4:	00030278 	.word	0x00030278

000b50d8 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b50d8:	b508      	push	{r3, lr}
   b50da:	4b03      	ldr	r3, [pc, #12]	; (b50e8 <hal_ble_gap_disconnect+0x10>)
   b50dc:	681b      	ldr	r3, [r3, #0]
   b50de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b50e2:	9301      	str	r3, [sp, #4]
   b50e4:	bd08      	pop	{r3, pc}
   b50e6:	0000      	.short	0x0000
   b50e8:	00030278 	.word	0x00030278

000b50ec <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b50ec:	b508      	push	{r3, lr}
   b50ee:	4b03      	ldr	r3, [pc, #12]	; (b50fc <hal_ble_gatt_server_add_service+0x10>)
   b50f0:	681b      	ldr	r3, [r3, #0]
   b50f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b50f6:	9301      	str	r3, [sp, #4]
   b50f8:	bd08      	pop	{r3, pc}
   b50fa:	0000      	.short	0x0000
   b50fc:	00030278 	.word	0x00030278

000b5100 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b5100:	b508      	push	{r3, lr}
   b5102:	4b03      	ldr	r3, [pc, #12]	; (b5110 <hal_ble_gatt_server_add_characteristic+0x10>)
   b5104:	681b      	ldr	r3, [r3, #0]
   b5106:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b510a:	9301      	str	r3, [sp, #4]
   b510c:	bd08      	pop	{r3, pc}
   b510e:	0000      	.short	0x0000
   b5110:	00030278 	.word	0x00030278

000b5114 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b5114:	b508      	push	{r3, lr}
   b5116:	4b03      	ldr	r3, [pc, #12]	; (b5124 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b5118:	681b      	ldr	r3, [r3, #0]
   b511a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b511e:	9301      	str	r3, [sp, #4]
   b5120:	bd08      	pop	{r3, pc}
   b5122:	0000      	.short	0x0000
   b5124:	00030278 	.word	0x00030278

000b5128 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5128:	b508      	push	{r3, lr}
   b512a:	4b02      	ldr	r3, [pc, #8]	; (b5134 <os_mutex_recursive_create+0xc>)
   b512c:	681b      	ldr	r3, [r3, #0]
   b512e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5130:	9301      	str	r3, [sp, #4]
   b5132:	bd08      	pop	{r3, pc}
   b5134:	00030248 	.word	0x00030248

000b5138 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b5138:	b508      	push	{r3, lr}
   b513a:	4b02      	ldr	r3, [pc, #8]	; (b5144 <os_mutex_recursive_lock+0xc>)
   b513c:	681b      	ldr	r3, [r3, #0]
   b513e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5140:	9301      	str	r3, [sp, #4]
   b5142:	bd08      	pop	{r3, pc}
   b5144:	00030248 	.word	0x00030248

000b5148 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b5148:	b508      	push	{r3, lr}
   b514a:	4b02      	ldr	r3, [pc, #8]	; (b5154 <os_mutex_recursive_unlock+0xc>)
   b514c:	681b      	ldr	r3, [r3, #0]
   b514e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5150:	9301      	str	r3, [sp, #4]
   b5152:	bd08      	pop	{r3, pc}
   b5154:	00030248 	.word	0x00030248

000b5158 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5158:	b508      	push	{r3, lr}
   b515a:	4b02      	ldr	r3, [pc, #8]	; (b5164 <inet_inet_ntop+0xc>)
   b515c:	681b      	ldr	r3, [r3, #0]
   b515e:	695b      	ldr	r3, [r3, #20]
   b5160:	9301      	str	r3, [sp, #4]
   b5162:	bd08      	pop	{r3, pc}
   b5164:	00030264 	.word	0x00030264

000b5168 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5168:	b508      	push	{r3, lr}
   b516a:	4b02      	ldr	r3, [pc, #8]	; (b5174 <hal_usart_write+0xc>)
   b516c:	681b      	ldr	r3, [r3, #0]
   b516e:	68db      	ldr	r3, [r3, #12]
   b5170:	9301      	str	r3, [sp, #4]
   b5172:	bd08      	pop	{r3, pc}
   b5174:	0003023c 	.word	0x0003023c

000b5178 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5178:	b508      	push	{r3, lr}
   b517a:	4b02      	ldr	r3, [pc, #8]	; (b5184 <hal_usart_available+0xc>)
   b517c:	681b      	ldr	r3, [r3, #0]
   b517e:	691b      	ldr	r3, [r3, #16]
   b5180:	9301      	str	r3, [sp, #4]
   b5182:	bd08      	pop	{r3, pc}
   b5184:	0003023c 	.word	0x0003023c

000b5188 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5188:	b508      	push	{r3, lr}
   b518a:	4b02      	ldr	r3, [pc, #8]	; (b5194 <hal_usart_read+0xc>)
   b518c:	681b      	ldr	r3, [r3, #0]
   b518e:	695b      	ldr	r3, [r3, #20]
   b5190:	9301      	str	r3, [sp, #4]
   b5192:	bd08      	pop	{r3, pc}
   b5194:	0003023c 	.word	0x0003023c

000b5198 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5198:	b508      	push	{r3, lr}
   b519a:	4b02      	ldr	r3, [pc, #8]	; (b51a4 <hal_usart_peek+0xc>)
   b519c:	681b      	ldr	r3, [r3, #0]
   b519e:	699b      	ldr	r3, [r3, #24]
   b51a0:	9301      	str	r3, [sp, #4]
   b51a2:	bd08      	pop	{r3, pc}
   b51a4:	0003023c 	.word	0x0003023c

000b51a8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b51a8:	b508      	push	{r3, lr}
   b51aa:	4b02      	ldr	r3, [pc, #8]	; (b51b4 <hal_usart_flush+0xc>)
   b51ac:	681b      	ldr	r3, [r3, #0]
   b51ae:	69db      	ldr	r3, [r3, #28]
   b51b0:	9301      	str	r3, [sp, #4]
   b51b2:	bd08      	pop	{r3, pc}
   b51b4:	0003023c 	.word	0x0003023c

000b51b8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b51b8:	b508      	push	{r3, lr}
   b51ba:	4b02      	ldr	r3, [pc, #8]	; (b51c4 <hal_usart_is_enabled+0xc>)
   b51bc:	681b      	ldr	r3, [r3, #0]
   b51be:	6a1b      	ldr	r3, [r3, #32]
   b51c0:	9301      	str	r3, [sp, #4]
   b51c2:	bd08      	pop	{r3, pc}
   b51c4:	0003023c 	.word	0x0003023c

000b51c8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b51c8:	b508      	push	{r3, lr}
   b51ca:	4b02      	ldr	r3, [pc, #8]	; (b51d4 <hal_usart_available_data_for_write+0xc>)
   b51cc:	681b      	ldr	r3, [r3, #0]
   b51ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b51d0:	9301      	str	r3, [sp, #4]
   b51d2:	bd08      	pop	{r3, pc}
   b51d4:	0003023c 	.word	0x0003023c

000b51d8 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b51d8:	b508      	push	{r3, lr}
   b51da:	4b02      	ldr	r3, [pc, #8]	; (b51e4 <hal_usart_begin_config+0xc>)
   b51dc:	681b      	ldr	r3, [r3, #0]
   b51de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b51e0:	9301      	str	r3, [sp, #4]
   b51e2:	bd08      	pop	{r3, pc}
   b51e4:	0003023c 	.word	0x0003023c

000b51e8 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b51e8:	b508      	push	{r3, lr}
   b51ea:	4b02      	ldr	r3, [pc, #8]	; (b51f4 <hal_usart_init_ex+0xc>)
   b51ec:	681b      	ldr	r3, [r3, #0]
   b51ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b51f0:	9301      	str	r3, [sp, #4]
   b51f2:	bd08      	pop	{r3, pc}
   b51f4:	0003023c 	.word	0x0003023c

000b51f8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b51f8:	b508      	push	{r3, lr}
   b51fa:	4b02      	ldr	r3, [pc, #8]	; (b5204 <hal_i2c_write+0xc>)
   b51fc:	681b      	ldr	r3, [r3, #0]
   b51fe:	6a1b      	ldr	r3, [r3, #32]
   b5200:	9301      	str	r3, [sp, #4]
   b5202:	bd08      	pop	{r3, pc}
   b5204:	00030228 	.word	0x00030228

000b5208 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5208:	b508      	push	{r3, lr}
   b520a:	4b02      	ldr	r3, [pc, #8]	; (b5214 <hal_i2c_available+0xc>)
   b520c:	681b      	ldr	r3, [r3, #0]
   b520e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5210:	9301      	str	r3, [sp, #4]
   b5212:	bd08      	pop	{r3, pc}
   b5214:	00030228 	.word	0x00030228

000b5218 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5218:	b508      	push	{r3, lr}
   b521a:	4b02      	ldr	r3, [pc, #8]	; (b5224 <hal_i2c_read+0xc>)
   b521c:	681b      	ldr	r3, [r3, #0]
   b521e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5220:	9301      	str	r3, [sp, #4]
   b5222:	bd08      	pop	{r3, pc}
   b5224:	00030228 	.word	0x00030228

000b5228 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5228:	b508      	push	{r3, lr}
   b522a:	4b02      	ldr	r3, [pc, #8]	; (b5234 <hal_i2c_peek+0xc>)
   b522c:	681b      	ldr	r3, [r3, #0]
   b522e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5230:	9301      	str	r3, [sp, #4]
   b5232:	bd08      	pop	{r3, pc}
   b5234:	00030228 	.word	0x00030228

000b5238 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5238:	b508      	push	{r3, lr}
   b523a:	4b02      	ldr	r3, [pc, #8]	; (b5244 <hal_i2c_flush+0xc>)
   b523c:	681b      	ldr	r3, [r3, #0]
   b523e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5240:	9301      	str	r3, [sp, #4]
   b5242:	bd08      	pop	{r3, pc}
   b5244:	00030228 	.word	0x00030228

000b5248 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5248:	b508      	push	{r3, lr}
   b524a:	4b02      	ldr	r3, [pc, #8]	; (b5254 <hal_i2c_is_enabled+0xc>)
   b524c:	681b      	ldr	r3, [r3, #0]
   b524e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5250:	9301      	str	r3, [sp, #4]
   b5252:	bd08      	pop	{r3, pc}
   b5254:	00030228 	.word	0x00030228

000b5258 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5258:	b508      	push	{r3, lr}
   b525a:	4b02      	ldr	r3, [pc, #8]	; (b5264 <hal_i2c_init+0xc>)
   b525c:	681b      	ldr	r3, [r3, #0]
   b525e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5260:	9301      	str	r3, [sp, #4]
   b5262:	bd08      	pop	{r3, pc}
   b5264:	00030228 	.word	0x00030228

000b5268 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5268:	b508      	push	{r3, lr}
   b526a:	4b02      	ldr	r3, [pc, #8]	; (b5274 <hal_spi_init+0xc>)
   b526c:	681b      	ldr	r3, [r3, #0]
   b526e:	69db      	ldr	r3, [r3, #28]
   b5270:	9301      	str	r3, [sp, #4]
   b5272:	bd08      	pop	{r3, pc}
   b5274:	00030230 	.word	0x00030230

000b5278 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5278:	b508      	push	{r3, lr}
   b527a:	4b02      	ldr	r3, [pc, #8]	; (b5284 <hal_spi_is_enabled+0xc>)
   b527c:	681b      	ldr	r3, [r3, #0]
   b527e:	6a1b      	ldr	r3, [r3, #32]
   b5280:	9301      	str	r3, [sp, #4]
   b5282:	bd08      	pop	{r3, pc}
   b5284:	00030230 	.word	0x00030230

000b5288 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5288:	b508      	push	{r3, lr}
   b528a:	4b02      	ldr	r3, [pc, #8]	; (b5294 <HAL_USB_USART_Init+0xc>)
   b528c:	681b      	ldr	r3, [r3, #0]
   b528e:	681b      	ldr	r3, [r3, #0]
   b5290:	9301      	str	r3, [sp, #4]
   b5292:	bd08      	pop	{r3, pc}
   b5294:	0003024c 	.word	0x0003024c

000b5298 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b5298:	b508      	push	{r3, lr}
   b529a:	4b02      	ldr	r3, [pc, #8]	; (b52a4 <HAL_USB_USART_Begin+0xc>)
   b529c:	681b      	ldr	r3, [r3, #0]
   b529e:	685b      	ldr	r3, [r3, #4]
   b52a0:	9301      	str	r3, [sp, #4]
   b52a2:	bd08      	pop	{r3, pc}
   b52a4:	0003024c 	.word	0x0003024c

000b52a8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b52a8:	b508      	push	{r3, lr}
   b52aa:	4b02      	ldr	r3, [pc, #8]	; (b52b4 <HAL_USB_USART_Available_Data+0xc>)
   b52ac:	681b      	ldr	r3, [r3, #0]
   b52ae:	691b      	ldr	r3, [r3, #16]
   b52b0:	9301      	str	r3, [sp, #4]
   b52b2:	bd08      	pop	{r3, pc}
   b52b4:	0003024c 	.word	0x0003024c

000b52b8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b52b8:	b508      	push	{r3, lr}
   b52ba:	4b02      	ldr	r3, [pc, #8]	; (b52c4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b52bc:	681b      	ldr	r3, [r3, #0]
   b52be:	695b      	ldr	r3, [r3, #20]
   b52c0:	9301      	str	r3, [sp, #4]
   b52c2:	bd08      	pop	{r3, pc}
   b52c4:	0003024c 	.word	0x0003024c

000b52c8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b52c8:	b508      	push	{r3, lr}
   b52ca:	4b02      	ldr	r3, [pc, #8]	; (b52d4 <HAL_USB_USART_Receive_Data+0xc>)
   b52cc:	681b      	ldr	r3, [r3, #0]
   b52ce:	699b      	ldr	r3, [r3, #24]
   b52d0:	9301      	str	r3, [sp, #4]
   b52d2:	bd08      	pop	{r3, pc}
   b52d4:	0003024c 	.word	0x0003024c

000b52d8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b52d8:	b508      	push	{r3, lr}
   b52da:	4b02      	ldr	r3, [pc, #8]	; (b52e4 <HAL_USB_USART_Send_Data+0xc>)
   b52dc:	681b      	ldr	r3, [r3, #0]
   b52de:	69db      	ldr	r3, [r3, #28]
   b52e0:	9301      	str	r3, [sp, #4]
   b52e2:	bd08      	pop	{r3, pc}
   b52e4:	0003024c 	.word	0x0003024c

000b52e8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b52e8:	b508      	push	{r3, lr}
   b52ea:	4b02      	ldr	r3, [pc, #8]	; (b52f4 <HAL_USB_USART_Flush_Data+0xc>)
   b52ec:	681b      	ldr	r3, [r3, #0]
   b52ee:	6a1b      	ldr	r3, [r3, #32]
   b52f0:	9301      	str	r3, [sp, #4]
   b52f2:	bd08      	pop	{r3, pc}
   b52f4:	0003024c 	.word	0x0003024c

000b52f8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b52f8:	b508      	push	{r3, lr}
   b52fa:	4b02      	ldr	r3, [pc, #8]	; (b5304 <panic_+0xc>)
   b52fc:	681b      	ldr	r3, [r3, #0]
   b52fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5300:	9301      	str	r3, [sp, #4]
   b5302:	bd08      	pop	{r3, pc}
   b5304:	00030260 	.word	0x00030260

000b5308 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b5308:	b508      	push	{r3, lr}
   b530a:	4b02      	ldr	r3, [pc, #8]	; (b5314 <log_message+0xc>)
   b530c:	681b      	ldr	r3, [r3, #0]
   b530e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5310:	9301      	str	r3, [sp, #4]
   b5312:	bd08      	pop	{r3, pc}
   b5314:	00030260 	.word	0x00030260

000b5318 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5318:	b508      	push	{r3, lr}
   b531a:	4b02      	ldr	r3, [pc, #8]	; (b5324 <set_system_mode+0xc>)
   b531c:	681b      	ldr	r3, [r3, #0]
   b531e:	685b      	ldr	r3, [r3, #4]
   b5320:	9301      	str	r3, [sp, #4]
   b5322:	bd08      	pop	{r3, pc}
   b5324:	00030220 	.word	0x00030220

000b5328 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5328:	b508      	push	{r3, lr}
   b532a:	4b02      	ldr	r3, [pc, #8]	; (b5334 <system_delay_ms+0xc>)
   b532c:	681b      	ldr	r3, [r3, #0]
   b532e:	695b      	ldr	r3, [r3, #20]
   b5330:	9301      	str	r3, [sp, #4]
   b5332:	bd08      	pop	{r3, pc}
   b5334:	00030220 	.word	0x00030220

000b5338 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5338:	b508      	push	{r3, lr}
   b533a:	4b03      	ldr	r3, [pc, #12]	; (b5348 <system_ctrl_set_app_request_handler+0x10>)
   b533c:	681b      	ldr	r3, [r3, #0]
   b533e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b5342:	9301      	str	r3, [sp, #4]
   b5344:	bd08      	pop	{r3, pc}
   b5346:	0000      	.short	0x0000
   b5348:	00030220 	.word	0x00030220

000b534c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b534c:	b508      	push	{r3, lr}
   b534e:	4b03      	ldr	r3, [pc, #12]	; (b535c <system_ctrl_set_result+0x10>)
   b5350:	681b      	ldr	r3, [r3, #0]
   b5352:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5356:	9301      	str	r3, [sp, #4]
   b5358:	bd08      	pop	{r3, pc}
   b535a:	0000      	.short	0x0000
   b535c:	00030220 	.word	0x00030220

000b5360 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5360:	b508      	push	{r3, lr}
   b5362:	4b02      	ldr	r3, [pc, #8]	; (b536c <network_connect+0xc>)
   b5364:	681b      	ldr	r3, [r3, #0]
   b5366:	685b      	ldr	r3, [r3, #4]
   b5368:	9301      	str	r3, [sp, #4]
   b536a:	bd08      	pop	{r3, pc}
   b536c:	00030240 	.word	0x00030240

000b5370 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5370:	b508      	push	{r3, lr}
   b5372:	4b02      	ldr	r3, [pc, #8]	; (b537c <network_connecting+0xc>)
   b5374:	681b      	ldr	r3, [r3, #0]
   b5376:	689b      	ldr	r3, [r3, #8]
   b5378:	9301      	str	r3, [sp, #4]
   b537a:	bd08      	pop	{r3, pc}
   b537c:	00030240 	.word	0x00030240

000b5380 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b5380:	b508      	push	{r3, lr}
   b5382:	4b02      	ldr	r3, [pc, #8]	; (b538c <network_disconnect+0xc>)
   b5384:	681b      	ldr	r3, [r3, #0]
   b5386:	68db      	ldr	r3, [r3, #12]
   b5388:	9301      	str	r3, [sp, #4]
   b538a:	bd08      	pop	{r3, pc}
   b538c:	00030240 	.word	0x00030240

000b5390 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5390:	b508      	push	{r3, lr}
   b5392:	4b02      	ldr	r3, [pc, #8]	; (b539c <network_ready+0xc>)
   b5394:	681b      	ldr	r3, [r3, #0]
   b5396:	691b      	ldr	r3, [r3, #16]
   b5398:	9301      	str	r3, [sp, #4]
   b539a:	bd08      	pop	{r3, pc}
   b539c:	00030240 	.word	0x00030240

000b53a0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b53a0:	b508      	push	{r3, lr}
   b53a2:	4b02      	ldr	r3, [pc, #8]	; (b53ac <network_on+0xc>)
   b53a4:	681b      	ldr	r3, [r3, #0]
   b53a6:	695b      	ldr	r3, [r3, #20]
   b53a8:	9301      	str	r3, [sp, #4]
   b53aa:	bd08      	pop	{r3, pc}
   b53ac:	00030240 	.word	0x00030240

000b53b0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b53b0:	b508      	push	{r3, lr}
   b53b2:	4b02      	ldr	r3, [pc, #8]	; (b53bc <network_off+0xc>)
   b53b4:	681b      	ldr	r3, [r3, #0]
   b53b6:	699b      	ldr	r3, [r3, #24]
   b53b8:	9301      	str	r3, [sp, #4]
   b53ba:	bd08      	pop	{r3, pc}
   b53bc:	00030240 	.word	0x00030240

000b53c0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b53c0:	b508      	push	{r3, lr}
   b53c2:	4b02      	ldr	r3, [pc, #8]	; (b53cc <network_listen+0xc>)
   b53c4:	681b      	ldr	r3, [r3, #0]
   b53c6:	69db      	ldr	r3, [r3, #28]
   b53c8:	9301      	str	r3, [sp, #4]
   b53ca:	bd08      	pop	{r3, pc}
   b53cc:	00030240 	.word	0x00030240

000b53d0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b53d0:	b508      	push	{r3, lr}
   b53d2:	4b02      	ldr	r3, [pc, #8]	; (b53dc <network_listening+0xc>)
   b53d4:	681b      	ldr	r3, [r3, #0]
   b53d6:	6a1b      	ldr	r3, [r3, #32]
   b53d8:	9301      	str	r3, [sp, #4]
   b53da:	bd08      	pop	{r3, pc}
   b53dc:	00030240 	.word	0x00030240

000b53e0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b53e0:	b508      	push	{r3, lr}
   b53e2:	4b02      	ldr	r3, [pc, #8]	; (b53ec <network_set_listen_timeout+0xc>)
   b53e4:	681b      	ldr	r3, [r3, #0]
   b53e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b53e8:	9301      	str	r3, [sp, #4]
   b53ea:	bd08      	pop	{r3, pc}
   b53ec:	00030240 	.word	0x00030240

000b53f0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b53f0:	b508      	push	{r3, lr}
   b53f2:	4b02      	ldr	r3, [pc, #8]	; (b53fc <network_get_listen_timeout+0xc>)
   b53f4:	681b      	ldr	r3, [r3, #0]
   b53f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b53f8:	9301      	str	r3, [sp, #4]
   b53fa:	bd08      	pop	{r3, pc}
   b53fc:	00030240 	.word	0x00030240

000b5400 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5400:	b508      	push	{r3, lr}
   b5402:	4b02      	ldr	r3, [pc, #8]	; (b540c <network_is_on+0xc>)
   b5404:	681b      	ldr	r3, [r3, #0]
   b5406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5408:	9301      	str	r3, [sp, #4]
   b540a:	bd08      	pop	{r3, pc}
   b540c:	00030240 	.word	0x00030240

000b5410 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5410:	b508      	push	{r3, lr}
   b5412:	4b02      	ldr	r3, [pc, #8]	; (b541c <network_is_off+0xc>)
   b5414:	681b      	ldr	r3, [r3, #0]
   b5416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5418:	9301      	str	r3, [sp, #4]
   b541a:	bd08      	pop	{r3, pc}
   b541c:	00030240 	.word	0x00030240

000b5420 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5420:	b508      	push	{r3, lr}
   b5422:	4b02      	ldr	r3, [pc, #8]	; (b542c <spark_set_random_seed_from_cloud_handler+0xc>)
   b5424:	681b      	ldr	r3, [r3, #0]
   b5426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5428:	9301      	str	r3, [sp, #4]
   b542a:	bd08      	pop	{r3, pc}
   b542c:	00030244 	.word	0x00030244

000b5430 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5430:	b508      	push	{r3, lr}
   b5432:	4b02      	ldr	r3, [pc, #8]	; (b543c <malloc+0xc>)
   b5434:	681b      	ldr	r3, [r3, #0]
   b5436:	681b      	ldr	r3, [r3, #0]
   b5438:	9301      	str	r3, [sp, #4]
   b543a:	bd08      	pop	{r3, pc}
   b543c:	0003021c 	.word	0x0003021c

000b5440 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5440:	b508      	push	{r3, lr}
   b5442:	4b02      	ldr	r3, [pc, #8]	; (b544c <free+0xc>)
   b5444:	681b      	ldr	r3, [r3, #0]
   b5446:	685b      	ldr	r3, [r3, #4]
   b5448:	9301      	str	r3, [sp, #4]
   b544a:	bd08      	pop	{r3, pc}
   b544c:	0003021c 	.word	0x0003021c

000b5450 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b5450:	b508      	push	{r3, lr}
   b5452:	4b02      	ldr	r3, [pc, #8]	; (b545c <realloc+0xc>)
   b5454:	681b      	ldr	r3, [r3, #0]
   b5456:	689b      	ldr	r3, [r3, #8]
   b5458:	9301      	str	r3, [sp, #4]
   b545a:	bd08      	pop	{r3, pc}
   b545c:	0003021c 	.word	0x0003021c

000b5460 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b5460:	b508      	push	{r3, lr}
   b5462:	4b02      	ldr	r3, [pc, #8]	; (b546c <vsnprintf+0xc>)
   b5464:	681b      	ldr	r3, [r3, #0]
   b5466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5468:	9301      	str	r3, [sp, #4]
   b546a:	bd08      	pop	{r3, pc}
   b546c:	0003021c 	.word	0x0003021c

000b5470 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b5470:	b508      	push	{r3, lr}
   b5472:	4b02      	ldr	r3, [pc, #8]	; (b547c <abort+0xc>)
   b5474:	681b      	ldr	r3, [r3, #0]
   b5476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5478:	9301      	str	r3, [sp, #4]
   b547a:	bd08      	pop	{r3, pc}
   b547c:	0003021c 	.word	0x0003021c

000b5480 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b5480:	b508      	push	{r3, lr}
   b5482:	4b02      	ldr	r3, [pc, #8]	; (b548c <__errno+0xc>)
   b5484:	681b      	ldr	r3, [r3, #0]
   b5486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5488:	9301      	str	r3, [sp, #4]
   b548a:	bd08      	pop	{r3, pc}
   b548c:	0003021c 	.word	0x0003021c

000b5490 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5490:	b508      	push	{r3, lr}
   b5492:	4b02      	ldr	r3, [pc, #8]	; (b549c <__assert_func+0xc>)
   b5494:	681b      	ldr	r3, [r3, #0]
   b5496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5498:	9301      	str	r3, [sp, #4]
   b549a:	bd08      	pop	{r3, pc}
   b549c:	0003021c 	.word	0x0003021c

000b54a0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b54a0:	b508      	push	{r3, lr}
   b54a2:	4b02      	ldr	r3, [pc, #8]	; (b54ac <newlib_impure_ptr_callback+0xc>)
   b54a4:	681b      	ldr	r3, [r3, #0]
   b54a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b54a8:	9301      	str	r3, [sp, #4]
   b54aa:	bd08      	pop	{r3, pc}
   b54ac:	0003021c 	.word	0x0003021c

000b54b0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b54b0:	2200      	movs	r2, #0
   b54b2:	6840      	ldr	r0, [r0, #4]
   b54b4:	4611      	mov	r1, r2
   b54b6:	f7ff bf8b 	b.w	b53d0 <network_listening>

000b54ba <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b54ba:	2200      	movs	r2, #0
   b54bc:	6840      	ldr	r0, [r0, #4]
   b54be:	4611      	mov	r1, r2
   b54c0:	f7ff bf96 	b.w	b53f0 <network_get_listen_timeout>

000b54c4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b54c4:	6840      	ldr	r0, [r0, #4]
   b54c6:	2200      	movs	r2, #0
   b54c8:	f7ff bf8a 	b.w	b53e0 <network_set_listen_timeout>

000b54cc <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b54cc:	6840      	ldr	r0, [r0, #4]
   b54ce:	2200      	movs	r2, #0
   b54d0:	f081 0101 	eor.w	r1, r1, #1
   b54d4:	f7ff bf74 	b.w	b53c0 <network_listen>

000b54d8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b54d8:	2300      	movs	r3, #0
   b54da:	6840      	ldr	r0, [r0, #4]
   b54dc:	461a      	mov	r2, r3
   b54de:	4619      	mov	r1, r3
   b54e0:	f7ff bf66 	b.w	b53b0 <network_off>

000b54e4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b54e4:	2300      	movs	r3, #0
   b54e6:	6840      	ldr	r0, [r0, #4]
   b54e8:	461a      	mov	r2, r3
   b54ea:	4619      	mov	r1, r3
   b54ec:	f7ff bf58 	b.w	b53a0 <network_on>

000b54f0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b54f0:	2200      	movs	r2, #0
   b54f2:	6840      	ldr	r0, [r0, #4]
   b54f4:	4611      	mov	r1, r2
   b54f6:	f7ff bf4b 	b.w	b5390 <network_ready>

000b54fa <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b54fa:	2200      	movs	r2, #0
   b54fc:	6840      	ldr	r0, [r0, #4]
   b54fe:	4611      	mov	r1, r2
   b5500:	f7ff bf36 	b.w	b5370 <network_connecting>

000b5504 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5504:	6840      	ldr	r0, [r0, #4]
   b5506:	2200      	movs	r2, #0
   b5508:	2102      	movs	r1, #2
   b550a:	f7ff bf39 	b.w	b5380 <network_disconnect>

000b550e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b550e:	2300      	movs	r3, #0
   b5510:	6840      	ldr	r0, [r0, #4]
   b5512:	461a      	mov	r2, r3
   b5514:	f7ff bf24 	b.w	b5360 <network_connect>

000b5518 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5518:	4b02      	ldr	r3, [pc, #8]	; (b5524 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b551a:	2203      	movs	r2, #3
   b551c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b551e:	4a02      	ldr	r2, [pc, #8]	; (b5528 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5520:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5522:	4770      	bx	lr
   b5524:	2003e6ac 	.word	0x2003e6ac
   b5528:	000b7b34 	.word	0x000b7b34

000b552c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b552c:	b510      	push	{r4, lr}
   b552e:	4604      	mov	r4, r0
   b5530:	4608      	mov	r0, r1
{
    _spi = spi;
   b5532:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5534:	f7ff fe98 	bl	b5268 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5538:	2300      	movs	r3, #0
   b553a:	6063      	str	r3, [r4, #4]
}
   b553c:	4620      	mov	r0, r4
   b553e:	bd10      	pop	{r4, pc}

000b5540 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5540:	4b05      	ldr	r3, [pc, #20]	; (b5558 <_GLOBAL__sub_I_System+0x18>)
   b5542:	2202      	movs	r2, #2
   b5544:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5546:	4b05      	ldr	r3, [pc, #20]	; (b555c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5548:	4a05      	ldr	r2, [pc, #20]	; (b5560 <_GLOBAL__sub_I_System+0x20>)
   b554a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b554c:	2000      	movs	r0, #0
   b554e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5552:	f7ff bee1 	b.w	b5318 <set_system_mode>
   b5556:	bf00      	nop
   b5558:	2003e6c0 	.word	0x2003e6c0
   b555c:	2003e6b4 	.word	0x2003e6b4
   b5560:	ffff0000 	.word	0xffff0000

000b5564 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b5564:	b510      	push	{r4, lr}
   b5566:	4604      	mov	r4, r0
{
	free(buffer);
   b5568:	6800      	ldr	r0, [r0, #0]
   b556a:	f7ff ff69 	bl	b5440 <free>
}
   b556e:	4620      	mov	r0, r4
   b5570:	bd10      	pop	{r4, pc}

000b5572 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b5572:	b510      	push	{r4, lr}
   b5574:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b5576:	6800      	ldr	r0, [r0, #0]
   b5578:	b108      	cbz	r0, b557e <_ZN6String10invalidateEv+0xc>
   b557a:	f7ff ff61 	bl	b5440 <free>
	buffer = NULL;
   b557e:	2300      	movs	r3, #0
	capacity = len = 0;
   b5580:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b5584:	6023      	str	r3, [r4, #0]
}
   b5586:	bd10      	pop	{r4, pc}

000b5588 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b5588:	b538      	push	{r3, r4, r5, lr}
   b558a:	4604      	mov	r4, r0
   b558c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b558e:	6800      	ldr	r0, [r0, #0]
   b5590:	3101      	adds	r1, #1
   b5592:	f7ff ff5d 	bl	b5450 <realloc>
	if (newbuffer) {
   b5596:	b110      	cbz	r0, b559e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b5598:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b559c:	2001      	movs	r0, #1
	}
	return 0;
}
   b559e:	bd38      	pop	{r3, r4, r5, pc}

000b55a0 <_ZN6String7reserveEj>:
{
   b55a0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b55a2:	6803      	ldr	r3, [r0, #0]
{
   b55a4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b55a6:	b123      	cbz	r3, b55b2 <_ZN6String7reserveEj+0x12>
   b55a8:	6843      	ldr	r3, [r0, #4]
   b55aa:	428b      	cmp	r3, r1
   b55ac:	d301      	bcc.n	b55b2 <_ZN6String7reserveEj+0x12>
   b55ae:	2001      	movs	r0, #1
}
   b55b0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b55b2:	4620      	mov	r0, r4
   b55b4:	f7ff ffe8 	bl	b5588 <_ZN6String12changeBufferEj>
   b55b8:	2800      	cmp	r0, #0
   b55ba:	d0f9      	beq.n	b55b0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b55bc:	68a3      	ldr	r3, [r4, #8]
   b55be:	2b00      	cmp	r3, #0
   b55c0:	d1f5      	bne.n	b55ae <_ZN6String7reserveEj+0xe>
   b55c2:	6822      	ldr	r2, [r4, #0]
   b55c4:	7013      	strb	r3, [r2, #0]
   b55c6:	e7f2      	b.n	b55ae <_ZN6String7reserveEj+0xe>

000b55c8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b55c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b55ca:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b55cc:	4611      	mov	r1, r2
   b55ce:	9201      	str	r2, [sp, #4]
{
   b55d0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b55d2:	f7ff ffe5 	bl	b55a0 <_ZN6String7reserveEj>
   b55d6:	9a01      	ldr	r2, [sp, #4]
   b55d8:	b928      	cbnz	r0, b55e6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b55da:	4620      	mov	r0, r4
   b55dc:	f7ff ffc9 	bl	b5572 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b55e0:	4620      	mov	r0, r4
   b55e2:	b003      	add	sp, #12
   b55e4:	bd30      	pop	{r4, r5, pc}
	len = length;
   b55e6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b55e8:	4629      	mov	r1, r5
   b55ea:	6820      	ldr	r0, [r4, #0]
   b55ec:	f001 ffa6 	bl	b753c <memcpy>
	buffer[len] = 0;
   b55f0:	6822      	ldr	r2, [r4, #0]
   b55f2:	68a3      	ldr	r3, [r4, #8]
   b55f4:	2100      	movs	r1, #0
   b55f6:	54d1      	strb	r1, [r2, r3]
	return *this;
   b55f8:	e7f2      	b.n	b55e0 <_ZN6String4copyEPKcj+0x18>

000b55fa <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b55fa:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b55fc:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b55fe:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b5602:	4604      	mov	r4, r0
	len = 0;
   b5604:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5606:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b5608:	b141      	cbz	r1, b561c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b560a:	4608      	mov	r0, r1
   b560c:	9101      	str	r1, [sp, #4]
   b560e:	f002 f805 	bl	b761c <strlen>
   b5612:	9901      	ldr	r1, [sp, #4]
   b5614:	4602      	mov	r2, r0
   b5616:	4620      	mov	r0, r4
   b5618:	f7ff ffd6 	bl	b55c8 <_ZN6String4copyEPKcj>
}
   b561c:	4620      	mov	r0, r4
   b561e:	b002      	add	sp, #8
   b5620:	bd10      	pop	{r4, pc}

000b5622 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b5622:	b538      	push	{r3, r4, r5, lr}
   b5624:	4605      	mov	r5, r0
	if (buffer) {
   b5626:	6800      	ldr	r0, [r0, #0]
{
   b5628:	460c      	mov	r4, r1
	if (buffer) {
   b562a:	b168      	cbz	r0, b5648 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b562c:	686a      	ldr	r2, [r5, #4]
   b562e:	688b      	ldr	r3, [r1, #8]
   b5630:	429a      	cmp	r2, r3
   b5632:	d307      	bcc.n	b5644 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b5634:	6809      	ldr	r1, [r1, #0]
   b5636:	f001 ffe9 	bl	b760c <strcpy>
			len = rhs.len;
   b563a:	68a3      	ldr	r3, [r4, #8]
   b563c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b563e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b5640:	60a3      	str	r3, [r4, #8]
}
   b5642:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b5644:	f7ff fefc 	bl	b5440 <free>
	buffer = rhs.buffer;
   b5648:	6823      	ldr	r3, [r4, #0]
   b564a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b564c:	6863      	ldr	r3, [r4, #4]
   b564e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b5650:	68a3      	ldr	r3, [r4, #8]
   b5652:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b5654:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b5656:	e9c4 3300 	strd	r3, r3, [r4]
   b565a:	e7f1      	b.n	b5640 <_ZN6String4moveERS_+0x1e>

000b565c <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   b565c:	4288      	cmp	r0, r1
{
   b565e:	b510      	push	{r4, lr}
   b5660:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   b5662:	d001      	beq.n	b5668 <_ZN6StringaSEOS_+0xc>
   b5664:	f7ff ffdd 	bl	b5622 <_ZN6String4moveERS_>
	return *this;
}
   b5668:	4620      	mov	r0, r4
   b566a:	bd10      	pop	{r4, pc}

000b566c <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b566c:	b513      	push	{r0, r1, r4, lr}
   b566e:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b5670:	b159      	cbz	r1, b568a <_ZN6StringaSEPKc+0x1e>
   b5672:	4608      	mov	r0, r1
   b5674:	9101      	str	r1, [sp, #4]
   b5676:	f001 ffd1 	bl	b761c <strlen>
   b567a:	9901      	ldr	r1, [sp, #4]
   b567c:	4602      	mov	r2, r0
   b567e:	4620      	mov	r0, r4
   b5680:	f7ff ffa2 	bl	b55c8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b5684:	4620      	mov	r0, r4
   b5686:	b002      	add	sp, #8
   b5688:	bd10      	pop	{r4, pc}
	else invalidate();
   b568a:	f7ff ff72 	bl	b5572 <_ZN6String10invalidateEv>
   b568e:	e7f9      	b.n	b5684 <_ZN6StringaSEPKc+0x18>

000b5690 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b5690:	b570      	push	{r4, r5, r6, lr}
   b5692:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b5694:	460e      	mov	r6, r1
   b5696:	b909      	cbnz	r1, b569c <_ZN6String6concatEPKcj+0xc>
   b5698:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b569a:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b569c:	b16a      	cbz	r2, b56ba <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b569e:	6884      	ldr	r4, [r0, #8]
   b56a0:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b56a2:	4621      	mov	r1, r4
   b56a4:	f7ff ff7c 	bl	b55a0 <_ZN6String7reserveEj>
   b56a8:	2800      	cmp	r0, #0
   b56aa:	d0f5      	beq.n	b5698 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b56ac:	6828      	ldr	r0, [r5, #0]
   b56ae:	68ab      	ldr	r3, [r5, #8]
   b56b0:	4631      	mov	r1, r6
   b56b2:	4418      	add	r0, r3
   b56b4:	f001 ffaa 	bl	b760c <strcpy>
	len = newlen;
   b56b8:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b56ba:	2001      	movs	r0, #1
   b56bc:	e7ed      	b.n	b569a <_ZN6String6concatEPKcj+0xa>

000b56be <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b56be:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b56c0:	2300      	movs	r3, #0
	buf[0] = c;
   b56c2:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b56c6:	2201      	movs	r2, #1
   b56c8:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b56ca:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b56ce:	f7ff ffdf 	bl	b5690 <_ZN6String6concatEPKcj>
}
   b56d2:	b003      	add	sp, #12
   b56d4:	f85d fb04 	ldr.w	pc, [sp], #4

000b56d8 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   b56d8:	b558      	push	{r3, r4, r6, lr}
   b56da:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   b56dc:	b12a      	cbz	r2, b56ea <_ZNK6String8getBytesEPhjj+0x12>
   b56de:	b121      	cbz	r1, b56ea <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   b56e0:	6884      	ldr	r4, [r0, #8]
   b56e2:	42a3      	cmp	r3, r4
   b56e4:	d302      	bcc.n	b56ec <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   b56e6:	2300      	movs	r3, #0
   b56e8:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   b56ea:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   b56ec:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   b56ee:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   b56f0:	6801      	ldr	r1, [r0, #0]
   b56f2:	4294      	cmp	r4, r2
   b56f4:	bf28      	it	cs
   b56f6:	4614      	movcs	r4, r2
   b56f8:	4419      	add	r1, r3
   b56fa:	4622      	mov	r2, r4
   b56fc:	4630      	mov	r0, r6
   b56fe:	f001 ff95 	bl	b762c <strncpy>
	buf[n] = 0;
   b5702:	2300      	movs	r3, #0
   b5704:	5533      	strb	r3, [r6, r4]
   b5706:	e7f0      	b.n	b56ea <_ZNK6String8getBytesEPhjj+0x12>

000b5708 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   b5708:	6800      	ldr	r0, [r0, #0]
   b570a:	b108      	cbz	r0, b5710 <_ZNK6String5toIntEv+0x8>
   b570c:	f001 bf02 	b.w	b7514 <atol>
	return 0;
}
   b5710:	4770      	bx	lr

000b5712 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5712:	4770      	bx	lr

000b5714 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b5714:	4770      	bx	lr

000b5716 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b5716:	4770      	bx	lr

000b5718 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5718:	4770      	bx	lr
	...

000b571c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b571c:	4b06      	ldr	r3, [pc, #24]	; (b5738 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b571e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b5720:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b5722:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5726:	d005      	beq.n	b5734 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5728:	4608      	mov	r0, r1
   b572a:	f001 fddb 	bl	b72e4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b572e:	2800      	cmp	r0, #0
   b5730:	bf08      	it	eq
   b5732:	2400      	moveq	r4, #0
      }
   b5734:	4620      	mov	r0, r4
   b5736:	bd10      	pop	{r4, pc}
   b5738:	000b7cb0 	.word	0x000b7cb0

000b573c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b573c:	4b06      	ldr	r3, [pc, #24]	; (b5758 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b573e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b5740:	b510      	push	{r4, lr}
   b5742:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5746:	d005      	beq.n	b5754 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5748:	4608      	mov	r0, r1
   b574a:	f001 fdcb 	bl	b72e4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b574e:	2800      	cmp	r0, #0
   b5750:	bf08      	it	eq
   b5752:	2400      	moveq	r4, #0
      }
   b5754:	4620      	mov	r0, r4
   b5756:	bd10      	pop	{r4, pc}
   b5758:	000b7cb0 	.word	0x000b7cb0

000b575c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b575c:	4b06      	ldr	r3, [pc, #24]	; (b5778 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b575e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b5760:	b510      	push	{r4, lr}
   b5762:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5766:	d005      	beq.n	b5774 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5768:	4608      	mov	r0, r1
   b576a:	f001 fdbb 	bl	b72e4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b576e:	2800      	cmp	r0, #0
   b5770:	bf08      	it	eq
   b5772:	2400      	moveq	r4, #0
      }
   b5774:	4620      	mov	r0, r4
   b5776:	bd10      	pop	{r4, pc}
   b5778:	000b7cb0 	.word	0x000b7cb0

000b577c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b577c:	b510      	push	{r4, lr}
   b577e:	2168      	movs	r1, #104	; 0x68
   b5780:	4604      	mov	r4, r0
   b5782:	f7fe fc8a 	bl	b409a <_ZdlPvj>
   b5786:	4620      	mov	r0, r4
   b5788:	bd10      	pop	{r4, pc}

000b578a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b578a:	b510      	push	{r4, lr}
   b578c:	2128      	movs	r1, #40	; 0x28
   b578e:	4604      	mov	r4, r0
   b5790:	f7fe fc83 	bl	b409a <_ZdlPvj>
   b5794:	4620      	mov	r0, r4
   b5796:	bd10      	pop	{r4, pc}

000b5798 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b5798:	b510      	push	{r4, lr}
   b579a:	2130      	movs	r1, #48	; 0x30
   b579c:	4604      	mov	r4, r0
   b579e:	f7fe fc7c 	bl	b409a <_ZdlPvj>
   b57a2:	4620      	mov	r0, r4
   b57a4:	bd10      	pop	{r4, pc}

000b57a6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b57a6:	2168      	movs	r1, #104	; 0x68
   b57a8:	f7fe bc77 	b.w	b409a <_ZdlPvj>

000b57ac <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b57ac:	2128      	movs	r1, #40	; 0x28
   b57ae:	f7fe bc74 	b.w	b409a <_ZdlPvj>

000b57b2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b57b2:	2130      	movs	r1, #48	; 0x30
   b57b4:	f7fe bc71 	b.w	b409a <_ZdlPvj>

000b57b8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b57b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b57ba:	2500      	movs	r5, #0
   b57bc:	1cec      	adds	r4, r5, #3
   b57be:	428c      	cmp	r4, r1
   b57c0:	d80d      	bhi.n	b57de <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b57c2:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b57c4:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b57c6:	5d87      	ldrb	r7, [r0, r6]
   b57c8:	4297      	cmp	r7, r2
   b57ca:	d105      	bne.n	b57d8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b57cc:	4426      	add	r6, r4
   b57ce:	42b1      	cmp	r1, r6
   b57d0:	d305      	bcc.n	b57de <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b57d2:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b57d4:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b57d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b57d8:	3401      	adds	r4, #1
   b57da:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b57dc:	e7ee      	b.n	b57bc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b57de:	2000      	movs	r0, #0
   b57e0:	e7f9      	b.n	b57d6 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b57e4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b57e4:	4a02      	ldr	r2, [pc, #8]	; (b57f0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b57e6:	2100      	movs	r1, #0
   b57e8:	200a      	movs	r0, #10
   b57ea:	f7ff bd85 	b.w	b52f8 <panic_>
   b57ee:	bf00      	nop
   b57f0:	000b5069 	.word	0x000b5069

000b57f4 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b57f4:	b430      	push	{r4, r5}
   b57f6:	460d      	mov	r5, r1
   b57f8:	4611      	mov	r1, r2
   b57fa:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b57fc:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b57fe:	6809      	ldr	r1, [r1, #0]
   b5800:	6828      	ldr	r0, [r5, #0]
   b5802:	e9d3 4300 	ldrd	r4, r3, [r3]
   b5806:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b5808:	bc30      	pop	{r4, r5}
   b580a:	4760      	bx	ip

000b580c <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b580c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b580e:	b538      	push	{r3, r4, r5, lr}
   b5810:	4604      	mov	r4, r0
	switch (__op)
   b5812:	d102      	bne.n	b581a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b5814:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b5816:	6023      	str	r3, [r4, #0]
	}
   b5818:	e003      	b.n	b5822 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b581a:	2a02      	cmp	r2, #2
   b581c:	d003      	beq.n	b5826 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b581e:	2a03      	cmp	r2, #3
   b5820:	d00d      	beq.n	b583e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b5822:	2000      	movs	r0, #0
   b5824:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b5826:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b5828:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b582a:	f7fe fc32 	bl	b4092 <_Znwj>
   b582e:	4603      	mov	r3, r0
   b5830:	2800      	cmp	r0, #0
   b5832:	d0f0      	beq.n	b5816 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b5834:	e895 0003 	ldmia.w	r5, {r0, r1}
   b5838:	e883 0003 	stmia.w	r3, {r0, r1}
   b583c:	e7eb      	b.n	b5816 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b583e:	6800      	ldr	r0, [r0, #0]
   b5840:	2800      	cmp	r0, #0
   b5842:	d0ee      	beq.n	b5822 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b5844:	2108      	movs	r1, #8
   b5846:	f7fe fc28 	bl	b409a <_ZdlPvj>
   b584a:	e7ea      	b.n	b5822 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b584c <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b584c:	b510      	push	{r4, lr}
      if (_M_manager)
   b584e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b5850:	4604      	mov	r4, r0
      if (_M_manager)
   b5852:	b113      	cbz	r3, b585a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5854:	2203      	movs	r2, #3
   b5856:	4601      	mov	r1, r0
   b5858:	4798      	blx	r3
    }
   b585a:	4620      	mov	r0, r4
   b585c:	bd10      	pop	{r4, pc}

000b585e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b585e:	b510      	push	{r4, lr}
   b5860:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b5862:	3058      	adds	r0, #88	; 0x58
   b5864:	f7ff fff2 	bl	b584c <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b5868:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b586c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5870:	f7ff be78 	b.w	b5564 <_ZN6StringD1Ev>

000b5874 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b5874:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b5876:	6843      	ldr	r3, [r0, #4]
   b5878:	3b01      	subs	r3, #1
    {
   b587a:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b587c:	6043      	str	r3, [r0, #4]
   b587e:	b963      	cbnz	r3, b589a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b5880:	6803      	ldr	r3, [r0, #0]
   b5882:	689b      	ldr	r3, [r3, #8]
   b5884:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5886:	68a3      	ldr	r3, [r4, #8]
   b5888:	3b01      	subs	r3, #1
   b588a:	60a3      	str	r3, [r4, #8]
   b588c:	b92b      	cbnz	r3, b589a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b588e:	6823      	ldr	r3, [r4, #0]
   b5890:	4620      	mov	r0, r4
   b5892:	68db      	ldr	r3, [r3, #12]
    }
   b5894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b5898:	4718      	bx	r3
    }
   b589a:	bd10      	pop	{r4, pc}

000b589c <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b589c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b58a0:	b2da      	uxtb	r2, r3
   b58a2:	2a09      	cmp	r2, #9
   b58a4:	d801      	bhi.n	b58aa <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b58a6:	4618      	mov	r0, r3
   b58a8:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b58aa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b58ae:	2b05      	cmp	r3, #5
   b58b0:	d801      	bhi.n	b58b6 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b58b2:	3857      	subs	r0, #87	; 0x57
   b58b4:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b58b6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b58ba:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b58bc:	bf94      	ite	ls
   b58be:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b58c0:	f04f 30ff 	movhi.w	r0, #4294967295
}
   b58c4:	4770      	bx	lr
	...

000b58c8 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b58c8:	b510      	push	{r4, lr}
            locked_(false) {
   b58ca:	2300      	movs	r3, #0
   b58cc:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b58ce:	4b04      	ldr	r3, [pc, #16]	; (b58e0 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b58d0:	4604      	mov	r4, r0
   b58d2:	6818      	ldr	r0, [r3, #0]
   b58d4:	f7ff fc30 	bl	b5138 <os_mutex_recursive_lock>
        locked_ = true;
   b58d8:	2301      	movs	r3, #1
   b58da:	7023      	strb	r3, [r4, #0]
    }
   b58dc:	4620      	mov	r0, r4
   b58de:	bd10      	pop	{r4, pc}
   b58e0:	2003e6cc 	.word	0x2003e6cc

000b58e4 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b58e4:	b510      	push	{r4, lr}
        if (locked_) {
   b58e6:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b58e8:	4604      	mov	r4, r0
        if (locked_) {
   b58ea:	b11b      	cbz	r3, b58f4 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b58ec:	4b02      	ldr	r3, [pc, #8]	; (b58f8 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b58ee:	6818      	ldr	r0, [r3, #0]
   b58f0:	f7ff fc2a 	bl	b5148 <os_mutex_recursive_unlock>
    }
   b58f4:	4620      	mov	r0, r4
   b58f6:	bd10      	pop	{r4, pc}
   b58f8:	2003e6cc 	.word	0x2003e6cc

000b58fc <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b58fc:	b082      	sub	sp, #8
   b58fe:	4603      	mov	r3, r0
    address_ = addr;
   b5900:	6808      	ldr	r0, [r1, #0]
   b5902:	6849      	ldr	r1, [r1, #4]
   b5904:	466a      	mov	r2, sp
   b5906:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b5908:	466a      	mov	r2, sp
   b590a:	ca03      	ldmia	r2!, {r0, r1}
   b590c:	6018      	str	r0, [r3, #0]
}
   b590e:	4618      	mov	r0, r3
    address_ = addr.address_;
   b5910:	6059      	str	r1, [r3, #4]
}
   b5912:	b002      	add	sp, #8
   b5914:	4770      	bx	lr

000b5916 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b5916:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b5918:	7982      	ldrb	r2, [r0, #6]
   b591a:	798b      	ldrb	r3, [r1, #6]
   b591c:	429a      	cmp	r2, r3
   b591e:	d106      	bne.n	b592e <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b5920:	2206      	movs	r2, #6
   b5922:	f001 fdfb 	bl	b751c <memcmp>
   b5926:	fab0 f080 	clz	r0, r0
   b592a:	0940      	lsrs	r0, r0, #5
}
   b592c:	bd08      	pop	{r3, pc}
    return false;
   b592e:	2000      	movs	r0, #0
   b5930:	e7fc      	b.n	b592c <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b5932 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b5932:	f04f 33ff 	mov.w	r3, #4294967295
   b5936:	6003      	str	r3, [r0, #0]
   b5938:	8083      	strh	r3, [r0, #4]
}
   b593a:	2000      	movs	r0, #0
   b593c:	4770      	bx	lr

000b593e <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b593e:	b508      	push	{r3, lr}
   b5940:	4602      	mov	r2, r0
        : address_{} {
   b5942:	2100      	movs	r1, #0
   b5944:	6001      	str	r1, [r0, #0]
   b5946:	6041      	str	r1, [r0, #4]
    clear();
   b5948:	f7ff fff3 	bl	b5932 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b594c:	7191      	strb	r1, [r2, #6]
}
   b594e:	4610      	mov	r0, r2
   b5950:	bd08      	pop	{r3, pc}
	...

000b5954 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b5954:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b5956:	2301      	movs	r3, #1
   b5958:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b595a:	4b05      	ldr	r3, [pc, #20]	; (b5970 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b595c:	4602      	mov	r2, r0
   b595e:	f103 0110 	add.w	r1, r3, #16
   b5962:	f853 4b04 	ldr.w	r4, [r3], #4
   b5966:	f842 4b04 	str.w	r4, [r2], #4
   b596a:	428b      	cmp	r3, r1
   b596c:	d1f9      	bne.n	b5962 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b596e:	bd10      	pop	{r4, pc}
   b5970:	000b7cbe 	.word	0x000b7cbe

000b5974 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b5974:	b510      	push	{r4, lr}
    if (uuid128) {
   b5976:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b5978:	4604      	mov	r4, r0
    if (uuid128) {
   b597a:	b1b1      	cbz	r1, b59aa <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b597c:	2a01      	cmp	r2, #1
   b597e:	f101 0210 	add.w	r2, r1, #16
   b5982:	d10a      	bne.n	b599a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b5984:	4601      	mov	r1, r0
   b5986:	f853 0b04 	ldr.w	r0, [r3], #4
   b598a:	f841 0b04 	str.w	r0, [r1], #4
   b598e:	4293      	cmp	r3, r2
   b5990:	d1f9      	bne.n	b5986 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b5992:	2301      	movs	r3, #1
   b5994:	6123      	str	r3, [r4, #16]
}
   b5996:	4620      	mov	r0, r4
   b5998:	bd10      	pop	{r4, pc}
   b599a:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b599c:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b59a0:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b59a4:	429a      	cmp	r2, r3
   b59a6:	d1f9      	bne.n	b599c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b59a8:	e7f3      	b.n	b5992 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b59aa:	2210      	movs	r2, #16
   b59ac:	f001 fdee 	bl	b758c <memset>
   b59b0:	e7f1      	b.n	b5996 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b59b2 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b59b2:	b538      	push	{r3, r4, r5, lr}
   b59b4:	4604      	mov	r4, r0
   b59b6:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b59b8:	461a      	mov	r2, r3
   b59ba:	f7ff ffdb 	bl	b5974 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b59be:	81a5      	strh	r5, [r4, #12]
}
   b59c0:	4620      	mov	r0, r4
   b59c2:	bd38      	pop	{r3, r4, r5, pc}

000b59c4 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b59c4:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b59c6:	6902      	ldr	r2, [r0, #16]
   b59c8:	b922      	cbnz	r2, b59d4 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b59ca:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b59cc:	3800      	subs	r0, #0
   b59ce:	bf18      	it	ne
   b59d0:	2001      	movne	r0, #1
}
   b59d2:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b59d4:	4902      	ldr	r1, [pc, #8]	; (b59e0 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b59d6:	2210      	movs	r2, #16
   b59d8:	f001 fda0 	bl	b751c <memcmp>
   b59dc:	e7f6      	b.n	b59cc <_ZNK8particle7BleUuid7isValidEv+0x8>
   b59de:	bf00      	nop
   b59e0:	000b7cde 	.word	0x000b7cde

000b59e4 <_ZNK8particle7BleUuid4typeEv>:
}
   b59e4:	6900      	ldr	r0, [r0, #16]
   b59e6:	4770      	bx	lr

000b59e8 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b59e8:	b538      	push	{r3, r4, r5, lr}
   b59ea:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b59ec:	2214      	movs	r2, #20
   b59ee:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b59f0:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b59f2:	f001 fdcb 	bl	b758c <memset>
    if (type_ == BleUuidType::SHORT) {
   b59f6:	6923      	ldr	r3, [r4, #16]
   b59f8:	b91b      	cbnz	r3, b5a02 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b59fa:	89a3      	ldrh	r3, [r4, #12]
   b59fc:	802b      	strh	r3, [r5, #0]
}
   b59fe:	4628      	mov	r0, r5
   b5a00:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b5a02:	2301      	movs	r3, #1
   b5a04:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b5a06:	4621      	mov	r1, r4
   b5a08:	462b      	mov	r3, r5
   b5a0a:	f104 0210 	add.w	r2, r4, #16
   b5a0e:	f851 0b04 	ldr.w	r0, [r1], #4
   b5a12:	f843 0b04 	str.w	r0, [r3], #4
   b5a16:	4291      	cmp	r1, r2
   b5a18:	d1f9      	bne.n	b5a0e <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b5a1a:	e7f0      	b.n	b59fe <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b5a1c <_ZNK8particle7BleUuid7shortedEv>:
}
   b5a1c:	8980      	ldrh	r0, [r0, #12]
   b5a1e:	4770      	bx	lr

000b5a20 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b5a20:	4770      	bx	lr

000b5a22 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b5a22:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b5a24:	6902      	ldr	r2, [r0, #16]
   b5a26:	690b      	ldr	r3, [r1, #16]
   b5a28:	429a      	cmp	r2, r3
   b5a2a:	d106      	bne.n	b5a3a <_ZNK8particle7BleUuideqERKS0_+0x18>
   b5a2c:	2210      	movs	r2, #16
   b5a2e:	f001 fd75 	bl	b751c <memcmp>
   b5a32:	fab0 f080 	clz	r0, r0
   b5a36:	0940      	lsrs	r0, r0, #5
}
   b5a38:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b5a3a:	2000      	movs	r0, #0
   b5a3c:	e7fc      	b.n	b5a38 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b5a40 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b5a40:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b5a42:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b5a46:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b5a48:	4b34      	ldr	r3, [pc, #208]	; (b5b1c <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b5a4a:	460c      	mov	r4, r1
   b5a4c:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b5a4e:	4602      	mov	r2, r0
   b5a50:	f103 0110 	add.w	r1, r3, #16
   b5a54:	f853 0b04 	ldr.w	r0, [r3], #4
   b5a58:	f842 0b04 	str.w	r0, [r2], #4
   b5a5c:	428b      	cmp	r3, r1
   b5a5e:	d1f9      	bne.n	b5a54 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b5a60:	b344      	cbz	r4, b5ab4 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b5a62:	2124      	movs	r1, #36	; 0x24
   b5a64:	4620      	mov	r0, r4
   b5a66:	f001 fdf4 	bl	b7652 <strnlen>
   b5a6a:	2804      	cmp	r0, #4
   b5a6c:	f04f 0500 	mov.w	r5, #0
   b5a70:	d123      	bne.n	b5aba <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b5a72:	f8ad 5004 	strh.w	r5, [sp, #4]
   b5a76:	af01      	add	r7, sp, #4
   b5a78:	1ca5      	adds	r5, r4, #2
   b5a7a:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b5a7c:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b5a80:	f7ff ff0c 	bl	b589c <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b5a84:	f1b0 0800 	subs.w	r8, r0, #0
   b5a88:	db12      	blt.n	b5ab0 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b5a8a:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b5a8e:	f7ff ff05 	bl	b589c <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b5a92:	2800      	cmp	r0, #0
   b5a94:	db0c      	blt.n	b5ab0 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b5a96:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b5a98:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b5a9c:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b5a9e:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b5aa2:	d1eb      	bne.n	b5a7c <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b5aa4:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b5aa8:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b5aaa:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b5aae:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b5ab0:	2300      	movs	r3, #0
   b5ab2:	6133      	str	r3, [r6, #16]
}
   b5ab4:	b002      	add	sp, #8
   b5ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b5aba:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b5abe:	2124      	movs	r1, #36	; 0x24
   b5ac0:	4620      	mov	r0, r4
   b5ac2:	f001 fdc6 	bl	b7652 <strnlen>
   b5ac6:	42a8      	cmp	r0, r5
   b5ac8:	d807      	bhi.n	b5ada <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b5aca:	4642      	mov	r2, r8
   b5acc:	2100      	movs	r1, #0
   b5ace:	4630      	mov	r0, r6
}
   b5ad0:	b002      	add	sp, #8
   b5ad2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b5ad6:	f001 bd59 	b.w	b758c <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b5ada:	f1b8 0f00 	cmp.w	r8, #0
   b5ade:	d0e9      	beq.n	b5ab4 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b5ae0:	5d60      	ldrb	r0, [r4, r5]
   b5ae2:	f7ff fedb 	bl	b589c <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b5ae6:	0603      	lsls	r3, r0, #24
   b5ae8:	d415      	bmi.n	b5b16 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b5aea:	0100      	lsls	r0, r0, #4
   b5aec:	f108 38ff 	add.w	r8, r8, #4294967295
   b5af0:	b2c7      	uxtb	r7, r0
   b5af2:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b5af6:	2124      	movs	r1, #36	; 0x24
   b5af8:	4620      	mov	r0, r4
   b5afa:	f001 fdaa 	bl	b7652 <strnlen>
   b5afe:	3501      	adds	r5, #1
   b5b00:	42a8      	cmp	r0, r5
   b5b02:	d908      	bls.n	b5b16 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b5b04:	5d60      	ldrb	r0, [r4, r5]
   b5b06:	f7ff fec9 	bl	b589c <_ZN8particle11hexToNibbleEc>
   b5b0a:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b5b0c:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b5b0e:	bfa4      	itt	ge
   b5b10:	4338      	orrge	r0, r7
   b5b12:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b5b16:	3501      	adds	r5, #1
   b5b18:	e7d1      	b.n	b5abe <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b5b1a:	bf00      	nop
   b5b1c:	000b7cbe 	.word	0x000b7cbe

000b5b20 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b5b20:	b513      	push	{r0, r1, r4, lr}
   b5b22:	4604      	mov	r4, r0
   b5b24:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b5b26:	f7ff ff15 	bl	b5954 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b5b2a:	4620      	mov	r0, r4
   b5b2c:	9901      	ldr	r1, [sp, #4]
   b5b2e:	f7ff ff87 	bl	b5a40 <_ZN8particle7BleUuid9constructEPKc>
}
   b5b32:	4620      	mov	r0, r4
   b5b34:	b002      	add	sp, #8
   b5b36:	bd10      	pop	{r4, pc}

000b5b38 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b5b38:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b5b3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b5b3e:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b5b40:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b5b42:	8043      	strh	r3, [r0, #2]
   b5b44:	220e      	movs	r2, #14
   b5b46:	4629      	mov	r1, r5
   b5b48:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b5b4a:	7105      	strb	r5, [r0, #4]
   b5b4c:	3006      	adds	r0, #6
   b5b4e:	f001 fd1d 	bl	b758c <memset>
   b5b52:	f104 0014 	add.w	r0, r4, #20
   b5b56:	f7ff fefd 	bl	b5954 <_ZN8particle7BleUuidC1Ev>
   b5b5a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b5b5e:	f7ff fef9 	bl	b5954 <_ZN8particle7BleUuidC1Ev>
   b5b62:	4904      	ldr	r1, [pc, #16]	; (b5b74 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b5b64:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b5b68:	f7ff fd47 	bl	b55fa <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b5b6c:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b5b6e:	4620      	mov	r0, r4
   b5b70:	bd38      	pop	{r3, r4, r5, pc}
   b5b72:	bf00      	nop
   b5b74:	000b799d 	.word	0x000b799d

000b5b78 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b5b78:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b5b7a:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b5b7e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b5b82:	4293      	cmp	r3, r2
   b5b84:	4618      	mov	r0, r3
   b5b86:	d006      	beq.n	b5b96 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b5b88:	6804      	ldr	r4, [r0, #0]
   b5b8a:	8824      	ldrh	r4, [r4, #0]
   b5b8c:	428c      	cmp	r4, r1
   b5b8e:	f103 0308 	add.w	r3, r3, #8
   b5b92:	d1f6      	bne.n	b5b82 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b5b94:	bd10      	pop	{r4, pc}
        return nullptr;
   b5b96:	2000      	movs	r0, #0
   b5b98:	e7fc      	b.n	b5b94 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b5b9c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b5b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b5ba0:	2600      	movs	r6, #0
   b5ba2:	6006      	str	r6, [r0, #0]
   b5ba4:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5ba6:	2028      	movs	r0, #40	; 0x28
   b5ba8:	460c      	mov	r4, r1
   b5baa:	f7fe fa72 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b5bae:	1e05      	subs	r5, r0, #0
   b5bb0:	f105 080c 	add.w	r8, r5, #12
   b5bb4:	d00f      	beq.n	b5bd6 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b5bb6:	2301      	movs	r3, #1
   b5bb8:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b5bbc:	4b08      	ldr	r3, [pc, #32]	; (b5be0 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b5bbe:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b5bc0:	4640      	mov	r0, r8
   b5bc2:	f7ff fec7 	bl	b5954 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b5bc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b5bc8:	622e      	str	r6, [r5, #32]
   b5bca:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b5bce:	4646      	mov	r6, r8
   b5bd0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b5bd2:	6823      	ldr	r3, [r4, #0]
   b5bd4:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b5bd6:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b5bda:	4638      	mov	r0, r7
   b5bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5be0:	000b7c80 	.word	0x000b7c80

000b5be4 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b5be4:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b5be6:	2500      	movs	r5, #0
   b5be8:	6005      	str	r5, [r0, #0]
   b5bea:	4606      	mov	r6, r0
   b5bec:	2030      	movs	r0, #48	; 0x30
   b5bee:	f7fe fa50 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b5bf2:	4604      	mov	r4, r0
   b5bf4:	b188      	cbz	r0, b5c1a <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b5bf6:	2301      	movs	r3, #1
   b5bf8:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b5bfc:	4b09      	ldr	r3, [pc, #36]	; (b5c24 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b5bfe:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b5c00:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b5c04:	8183      	strh	r3, [r0, #12]
   b5c06:	300e      	adds	r0, #14
   b5c08:	f7ff fe99 	bl	b593e <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b5c0c:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b5c10:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b5c14:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b5c18:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b5c1a:	6074      	str	r4, [r6, #4]
   b5c1c:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b5c1e:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b5c20:	4630      	mov	r0, r6
   b5c22:	bd70      	pop	{r4, r5, r6, pc}
   b5c24:	000b7c9c 	.word	0x000b7c9c

000b5c28 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b5c28:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5c2a:	460d      	mov	r5, r1
   b5c2c:	4604      	mov	r4, r0
    WiringBleLock lk;
   b5c2e:	a801      	add	r0, sp, #4
   b5c30:	f7ff fe4a 	bl	b58c8 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b5c34:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b5c36:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b5c3a:	6023      	str	r3, [r4, #0]
   b5c3c:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b5c40:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b5c42:	a801      	add	r0, sp, #4
   b5c44:	f7ff fe4e 	bl	b58e4 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b5c48:	4620      	mov	r0, r4
   b5c4a:	b003      	add	sp, #12
   b5c4c:	bd30      	pop	{r4, r5, pc}

000b5c4e <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b5c4e:	b530      	push	{r4, r5, lr}
   b5c50:	4605      	mov	r5, r0
   b5c52:	b087      	sub	sp, #28
   b5c54:	460c      	mov	r4, r1
    WiringBleLock lk;
   b5c56:	a801      	add	r0, sp, #4
   b5c58:	f7ff fe36 	bl	b58c8 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b5c5c:	682a      	ldr	r2, [r5, #0]
   b5c5e:	6823      	ldr	r3, [r4, #0]
   b5c60:	8812      	ldrh	r2, [r2, #0]
   b5c62:	881b      	ldrh	r3, [r3, #0]
   b5c64:	429a      	cmp	r2, r3
   b5c66:	d10d      	bne.n	b5c84 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b5c68:	4629      	mov	r1, r5
   b5c6a:	a802      	add	r0, sp, #8
   b5c6c:	f7ff ffdc 	bl	b5c28 <_ZNK8particle13BlePeerDevice7addressEv>
   b5c70:	4621      	mov	r1, r4
   b5c72:	a804      	add	r0, sp, #16
   b5c74:	f7ff ffd8 	bl	b5c28 <_ZNK8particle13BlePeerDevice7addressEv>
   b5c78:	a904      	add	r1, sp, #16
   b5c7a:	a802      	add	r0, sp, #8
   b5c7c:	f7ff fe4b 	bl	b5916 <_ZNK8particle10BleAddresseqERKS0_>
   b5c80:	4604      	mov	r4, r0
   b5c82:	b900      	cbnz	r0, b5c86 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b5c84:	2400      	movs	r4, #0
    WiringBleLock lk;
   b5c86:	a801      	add	r0, sp, #4
   b5c88:	f7ff fe2c 	bl	b58e4 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b5c8c:	4620      	mov	r0, r4
   b5c8e:	b007      	add	sp, #28
   b5c90:	bd30      	pop	{r4, r5, pc}
	...

000b5c94 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b5c94:	b510      	push	{r4, lr}
   b5c96:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b5c98:	2054      	movs	r0, #84	; 0x54
   b5c9a:	f7fe f9fa 	bl	b4092 <_Znwj>
   b5c9e:	4601      	mov	r1, r0
   b5ca0:	b160      	cbz	r0, b5cbc <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b5ca2:	2300      	movs	r3, #0
   b5ca4:	e9c0 3300 	strd	r3, r3, [r0]
   b5ca8:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b5cac:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b5cb0:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b5cb4:	6203      	str	r3, [r0, #32]
   b5cb6:	62c3      	str	r3, [r0, #44]	; 0x2c
   b5cb8:	63c3      	str	r3, [r0, #60]	; 0x3c
   b5cba:	64c3      	str	r3, [r0, #76]	; 0x4c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b5cbc:	6021      	str	r1, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b5cbe:	b919      	cbnz	r1, b5cc8 <_ZN8particle14BleLocalDeviceC1Ev+0x34>
        SPARK_ASSERT(false);
   b5cc0:	4a09      	ldr	r2, [pc, #36]	; (b5ce8 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   b5cc2:	200a      	movs	r0, #10
   b5cc4:	f7ff fb18 	bl	b52f8 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b5cc8:	2000      	movs	r0, #0
   b5cca:	f7ff f9e5 	bl	b5098 <hal_ble_stack_init>
   b5cce:	b120      	cbz	r0, b5cda <_ZN8particle14BleLocalDeviceC1Ev+0x46>
   b5cd0:	4a05      	ldr	r2, [pc, #20]	; (b5ce8 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   b5cd2:	2100      	movs	r1, #0
   b5cd4:	200a      	movs	r0, #10
   b5cd6:	f7ff fb0f 	bl	b52f8 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b5cda:	6821      	ldr	r1, [r4, #0]
   b5cdc:	4803      	ldr	r0, [pc, #12]	; (b5cec <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b5cde:	2200      	movs	r2, #0
   b5ce0:	f7ff fa18 	bl	b5114 <hal_ble_set_callback_on_periph_link_events>
}
   b5ce4:	4620      	mov	r0, r4
   b5ce6:	bd10      	pop	{r4, pc}
   b5ce8:	000b5069 	.word	0x000b5069
   b5cec:	000b6269 	.word	0x000b6269

000b5cf0 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b5cf0:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b5cf2:	4c0a      	ldr	r4, [pc, #40]	; (b5d1c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b5cf4:	7823      	ldrb	r3, [r4, #0]
   b5cf6:	f3bf 8f5b 	dmb	ish
   b5cfa:	07db      	lsls	r3, r3, #31
   b5cfc:	d40c      	bmi.n	b5d18 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b5cfe:	4620      	mov	r0, r4
   b5d00:	f7fe f9cd 	bl	b409e <__cxa_guard_acquire>
   b5d04:	b140      	cbz	r0, b5d18 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b5d06:	4806      	ldr	r0, [pc, #24]	; (b5d20 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b5d08:	f7ff ffc4 	bl	b5c94 <_ZN8particle14BleLocalDeviceC1Ev>
   b5d0c:	4620      	mov	r0, r4
   b5d0e:	f7fe f9cb 	bl	b40a8 <__cxa_guard_release>
   b5d12:	4804      	ldr	r0, [pc, #16]	; (b5d24 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b5d14:	f001 fbf8 	bl	b7508 <atexit>
    return instance;
}
   b5d18:	4801      	ldr	r0, [pc, #4]	; (b5d20 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b5d1a:	bd10      	pop	{r4, pc}
   b5d1c:	2003e6c4 	.word	0x2003e6c4
   b5d20:	2003e6d0 	.word	0x2003e6d0
   b5d24:	000b5f3d 	.word	0x000b5f3d

000b5d28 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b5d28:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b5d2a:	6803      	ldr	r3, [r0, #0]
   b5d2c:	3b09      	subs	r3, #9
   b5d2e:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b5d30:	b08d      	sub	sp, #52	; 0x34
   b5d32:	4604      	mov	r4, r0
   b5d34:	460d      	mov	r5, r1
    switch (event->type) {
   b5d36:	d811      	bhi.n	b5d5c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b5d38:	f7ff ffda 	bl	b5cf0 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5d3c:	88a1      	ldrh	r1, [r4, #4]
   b5d3e:	6800      	ldr	r0, [r0, #0]
   b5d40:	f7ff ff1a 	bl	b5b78 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b5d44:	4603      	mov	r3, r0
   b5d46:	b958      	cbnz	r0, b5d60 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b5d48:	2220      	movs	r2, #32
   b5d4a:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b5d4e:	4a0b      	ldr	r2, [pc, #44]	; (b5d7c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b5d50:	9200      	str	r2, [sp, #0]
   b5d52:	490b      	ldr	r1, [pc, #44]	; (b5d80 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b5d54:	aa04      	add	r2, sp, #16
   b5d56:	2032      	movs	r0, #50	; 0x32
   b5d58:	f7ff fad6 	bl	b5308 <log_message>
}
   b5d5c:	b00d      	add	sp, #52	; 0x34
   b5d5e:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b5d60:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b5d62:	2a00      	cmp	r2, #0
   b5d64:	d0fa      	beq.n	b5d5c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b5d66:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5d6a:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b5d6e:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b5d72:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b5d74:	aa04      	add	r2, sp, #16
   b5d76:	a903      	add	r1, sp, #12
   b5d78:	47a0      	blx	r4
}
   b5d7a:	e7ef      	b.n	b5d5c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b5d7c:	000b7b8f 	.word	0x000b7b8f
   b5d80:	000b7b68 	.word	0x000b7b68

000b5d84 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b5d84:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b5d86:	2000      	movs	r0, #0
   b5d88:	f7ff f986 	bl	b5098 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b5d8c:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b5d90:	bd08      	pop	{r3, pc}

000b5d92 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b5d92:	b919      	cbnz	r1, b5d9c <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b5d94:	460a      	mov	r2, r1
   b5d96:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b5d98:	f7ff b986 	b.w	b50a8 <hal_ble_gap_set_advertising_data>
   b5d9c:	e9d1 0100 	ldrd	r0, r1, [r1]
   b5da0:	2200      	movs	r2, #0
   b5da2:	e7f9      	b.n	b5d98 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b5da4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b5da4:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b5da6:	1e14      	subs	r4, r2, #0
   b5da8:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b5daa:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b5dac:	db02      	blt.n	b5db4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b5dae:	1862      	adds	r2, r4, r1
   b5db0:	429a      	cmp	r2, r3
   b5db2:	dd00      	ble.n	b5db6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b5db4:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b5db6:	682a      	ldr	r2, [r5, #0]
   b5db8:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b5dba:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b5dbc:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5dbe:	1a52      	subs	r2, r2, r1
   b5dc0:	f001 fbca 	bl	b7558 <memmove>
    size_ -= n;
   b5dc4:	686a      	ldr	r2, [r5, #4]
   b5dc6:	1b12      	subs	r2, r2, r4
   b5dc8:	606a      	str	r2, [r5, #4]
}
   b5dca:	bd38      	pop	{r3, r4, r5, pc}

000b5dcc <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b5dcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b5dce:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b5dd0:	4604      	mov	r4, r0
   b5dd2:	460d      	mov	r5, r1
   b5dd4:	ab01      	add	r3, sp, #4
   b5dd6:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5dda:	f7ff fced 	bl	b57b8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b5dde:	4602      	mov	r2, r0
   b5de0:	b138      	cbz	r0, b5df2 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b5de2:	9901      	ldr	r1, [sp, #4]
   b5de4:	4620      	mov	r0, r4
   b5de6:	f7ff ffdd 	bl	b5da4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b5dea:	4629      	mov	r1, r5
   b5dec:	4620      	mov	r0, r4
   b5dee:	f7ff ffed 	bl	b5dcc <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b5df2:	b003      	add	sp, #12
   b5df4:	bd30      	pop	{r4, r5, pc}

000b5df6 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b5df6:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b5df8:	460c      	mov	r4, r1
   b5dfa:	b929      	cbnz	r1, b5e08 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b5dfc:	460a      	mov	r2, r1
   b5dfe:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b5e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b5e04:	f7ff b958 	b.w	b50b8 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b5e08:	2101      	movs	r1, #1
   b5e0a:	4620      	mov	r0, r4
   b5e0c:	f7ff ffde 	bl	b5dcc <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b5e10:	e9d4 0100 	ldrd	r0, r1, [r4]
   b5e14:	2200      	movs	r2, #0
   b5e16:	e7f3      	b.n	b5e00 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b5e18 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b5e18:	b538      	push	{r3, r4, r5, lr}
   b5e1a:	4604      	mov	r4, r0
   b5e1c:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b5e1e:	f7ff ffb8 	bl	b5d92 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b5e22:	2800      	cmp	r0, #0
   b5e24:	db0a      	blt.n	b5e3c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b5e26:	4629      	mov	r1, r5
   b5e28:	4620      	mov	r0, r4
   b5e2a:	f7ff ffe4 	bl	b5df6 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b5e2e:	2800      	cmp	r0, #0
   b5e30:	db04      	blt.n	b5e3c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b5e32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b5e36:	2000      	movs	r0, #0
   b5e38:	f7ff b946 	b.w	b50c8 <hal_ble_gap_start_advertising>
}
   b5e3c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5e40 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b5e40:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b5e42:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b5e44:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b5e46:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5e48:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b5e4a:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5e4c:	f7fe f921 	bl	b4092 <_Znwj>
   b5e50:	b118      	cbz	r0, b5e5a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b5e52:	682b      	ldr	r3, [r5, #0]
   b5e54:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5e56:	686b      	ldr	r3, [r5, #4]
   b5e58:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b5e5a:	4b03      	ldr	r3, [pc, #12]	; (b5e68 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b5e5c:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5e5e:	4b03      	ldr	r3, [pc, #12]	; (b5e6c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5e60:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5e62:	60a3      	str	r3, [r4, #8]
      }
   b5e64:	4620      	mov	r0, r4
   b5e66:	bd38      	pop	{r3, r4, r5, pc}
   b5e68:	000b57f5 	.word	0x000b57f5
   b5e6c:	000b580d 	.word	0x000b580d

000b5e70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b5e70:	680b      	ldr	r3, [r1, #0]
   b5e72:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b5e74:	b113      	cbz	r3, b5e7c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b5e76:	685a      	ldr	r2, [r3, #4]
   b5e78:	3201      	adds	r2, #1
   b5e7a:	605a      	str	r2, [r3, #4]
      }
   b5e7c:	4770      	bx	lr

000b5e7e <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b5e7e:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5e80:	f851 3b04 	ldr.w	r3, [r1], #4
   b5e84:	4604      	mov	r4, r0
   b5e86:	f840 3b04 	str.w	r3, [r0], #4
   b5e8a:	f7ff fff1 	bl	b5e70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b5e8e:	6823      	ldr	r3, [r4, #0]
   b5e90:	b90b      	cbnz	r3, b5e96 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b5e92:	f7ff fca7 	bl	b57e4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b5e96:	4620      	mov	r0, r4
   b5e98:	bd10      	pop	{r4, pc}

000b5e9a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b5e9a:	b510      	push	{r4, lr}
   b5e9c:	f851 3b04 	ldr.w	r3, [r1], #4
   b5ea0:	4604      	mov	r4, r0
   b5ea2:	f840 3b04 	str.w	r3, [r0], #4
   b5ea6:	f7ff ffe3 	bl	b5e70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b5eaa:	4620      	mov	r0, r4
   b5eac:	bd10      	pop	{r4, pc}

000b5eae <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b5eae:	b510      	push	{r4, lr}
   b5eb0:	f851 3b04 	ldr.w	r3, [r1], #4
   b5eb4:	4604      	mov	r4, r0
   b5eb6:	f840 3b04 	str.w	r3, [r0], #4
   b5eba:	f7ff ffd9 	bl	b5e70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b5ebe:	4620      	mov	r0, r4
   b5ec0:	bd10      	pop	{r4, pc}

000b5ec2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b5ec2:	b510      	push	{r4, lr}
   b5ec4:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b5ec6:	6800      	ldr	r0, [r0, #0]
   b5ec8:	b108      	cbz	r0, b5ece <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b5eca:	f7ff fcd3 	bl	b5874 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b5ece:	4620      	mov	r0, r4
   b5ed0:	bd10      	pop	{r4, pc}

000b5ed2 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b5ed2:	b510      	push	{r4, lr}
   b5ed4:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b5ed6:	3004      	adds	r0, #4
   b5ed8:	f7ff fff3 	bl	b5ec2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5edc:	4620      	mov	r0, r4
   b5ede:	bd10      	pop	{r4, pc}

000b5ee0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5ee0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5ee2:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5ee6:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5ee8:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b5eec:	42ae      	cmp	r6, r5
   b5eee:	d004      	beq.n	b5efa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b5ef0:	1d28      	adds	r0, r5, #4
   b5ef2:	f7ff ffe6 	bl	b5ec2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5ef6:	3508      	adds	r5, #8
   b5ef8:	e7f8      	b.n	b5eec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b5efa:	6820      	ldr	r0, [r4, #0]
   b5efc:	f7ff faa0 	bl	b5440 <free>
}
   b5f00:	4620      	mov	r0, r4
   b5f02:	bd70      	pop	{r4, r5, r6, pc}

000b5f04 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5f04:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5f06:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5f0a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5f0c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b5f10:	42ae      	cmp	r6, r5
   b5f12:	d004      	beq.n	b5f1e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b5f14:	1d28      	adds	r0, r5, #4
   b5f16:	f7ff ffd4 	bl	b5ec2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5f1a:	3508      	adds	r5, #8
   b5f1c:	e7f8      	b.n	b5f10 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b5f1e:	6820      	ldr	r0, [r4, #0]
   b5f20:	f7ff fa8e 	bl	b5440 <free>
}
   b5f24:	4620      	mov	r0, r4
   b5f26:	bd70      	pop	{r4, r5, r6, pc}

000b5f28 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b5f28:	b510      	push	{r4, lr}
   b5f2a:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b5f2c:	3024      	adds	r0, #36	; 0x24
   b5f2e:	f7ff ffe9 	bl	b5f04 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b5f32:	f104 0018 	add.w	r0, r4, #24
   b5f36:	f7ff ffd3 	bl	b5ee0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b5f3a:	bd10      	pop	{r4, pc}

000b5f3c <__tcf_0>:
    static BleLocalDevice instance;
   b5f3c:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b5f3e:	4b15      	ldr	r3, [pc, #84]	; (b5f94 <__tcf_0+0x58>)
   b5f40:	681c      	ldr	r4, [r3, #0]
   b5f42:	b334      	cbz	r4, b5f92 <__tcf_0+0x56>
    class function<_Res(_ArgTypes...)>
   b5f44:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b5f48:	f7ff fc80 	bl	b584c <_ZNSt14_Function_baseD1Ev>
   b5f4c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b5f50:	f7ff fc7c 	bl	b584c <_ZNSt14_Function_baseD1Ev>
   b5f54:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b5f58:	f7ff fc78 	bl	b584c <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b5f5c:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b5f60:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b5f64:	42ae      	cmp	r6, r5
   b5f66:	d004      	beq.n	b5f72 <__tcf_0+0x36>
      ~__shared_ptr() = default;
   b5f68:	1d28      	adds	r0, r5, #4
   b5f6a:	f7ff ffaa 	bl	b5ec2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5f6e:	3508      	adds	r5, #8
   b5f70:	e7f8      	b.n	b5f64 <__tcf_0+0x28>
    ::free(ptr);
   b5f72:	69a0      	ldr	r0, [r4, #24]
   b5f74:	f7ff fa64 	bl	b5440 <free>
    ~BleLocalDeviceImpl() = default;
   b5f78:	f104 000c 	add.w	r0, r4, #12
   b5f7c:	f7ff ffc2 	bl	b5f04 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b5f80:	4620      	mov	r0, r4
   b5f82:	f7ff ffad 	bl	b5ee0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b5f86:	4620      	mov	r0, r4
   b5f88:	2154      	movs	r1, #84	; 0x54
    static BleLocalDevice instance;
   b5f8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b5f8e:	f7fe b884 	b.w	b409a <_ZdlPvj>
   b5f92:	bd70      	pop	{r4, r5, r6, pc}
   b5f94:	2003e6d0 	.word	0x2003e6d0

000b5f98 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b5f98:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b5f9a:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b5f9c:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b5fa0:	e9c1 3300 	strd	r3, r3, [r1]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b5fa4:	6803      	ldr	r3, [r0, #0]
   b5fa6:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b5fa8:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b5faa:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b5fac:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b5fae:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b5fb0:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b5fb2:	f7ff ff86 	bl	b5ec2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b5fb6:	b002      	add	sp, #8
   b5fb8:	bd10      	pop	{r4, pc}

000b5fba <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b5fba:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5fbc:	b510      	push	{r4, lr}
      if (_M_empty())
   b5fbe:	b90a      	cbnz	r2, b5fc4 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b5fc0:	f001 f98c 	bl	b72dc <_ZSt25__throw_bad_function_callv>
    }
   b5fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5fc8:	68c3      	ldr	r3, [r0, #12]
   b5fca:	4718      	bx	r3

000b5fcc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b5fcc:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b5fce:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b5fd0:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b5fd2:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b5fd4:	dd03      	ble.n	b5fde <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b5fd6:	f7ff fa3b 	bl	b5450 <realloc>
            if (!d) {
   b5fda:	b918      	cbnz	r0, b5fe4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b5fdc:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b5fde:	f7ff fa2f 	bl	b5440 <free>
        T* d = nullptr;
   b5fe2:	2000      	movs	r0, #0
        data_ = d;
   b5fe4:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b5fe6:	60a5      	str	r5, [r4, #8]
        return true;
   b5fe8:	2001      	movs	r0, #1
   b5fea:	e7f7      	b.n	b5fdc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b5fec <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b5fec:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b5fee:	6883      	ldr	r3, [r0, #8]
   b5ff0:	428b      	cmp	r3, r1
   b5ff2:	da02      	bge.n	b5ffa <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b5ff4:	f7ff ffea 	bl	b5fcc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b5ff8:	bd08      	pop	{r3, pc}
    return true;
   b5ffa:	2001      	movs	r0, #1
   b5ffc:	e7fc      	b.n	b5ff8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b5ffe <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b5ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6002:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6004:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b6006:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6008:	4419      	add	r1, r3
   b600a:	6883      	ldr	r3, [r0, #8]
   b600c:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b600e:	4604      	mov	r4, r0
   b6010:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b6012:	dc12      	bgt.n	b603a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b6014:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6016:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6018:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b601a:	1bd2      	subs	r2, r2, r7
   b601c:	4631      	mov	r1, r6
   b601e:	1970      	adds	r0, r6, r5
   b6020:	f001 fa9a 	bl	b7558 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b6024:	462a      	mov	r2, r5
   b6026:	4641      	mov	r1, r8
   b6028:	4630      	mov	r0, r6
   b602a:	f001 fa87 	bl	b753c <memcpy>
    size_ += n;
   b602e:	6863      	ldr	r3, [r4, #4]
   b6030:	442b      	add	r3, r5
   b6032:	6063      	str	r3, [r4, #4]
    return true;
   b6034:	2001      	movs	r0, #1
}
   b6036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b603a:	f7ff ffc7 	bl	b5fcc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b603e:	2800      	cmp	r0, #0
   b6040:	d1e8      	bne.n	b6014 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b6042:	e7f8      	b.n	b6036 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b6044 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b6044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6046:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6048:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b604c:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b604e:	4604      	mov	r4, r0
   b6050:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6052:	da0b      	bge.n	b606c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b6054:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b6056:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b6058:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b605a:	1b52      	subs	r2, r2, r5
   b605c:	1c48      	adds	r0, r1, #1
   b605e:	f001 fa7b 	bl	b7558 <memmove>
    new(p) T(std::move(value));
   b6062:	557e      	strb	r6, [r7, r5]
    ++size_;
   b6064:	6863      	ldr	r3, [r4, #4]
   b6066:	3301      	adds	r3, #1
   b6068:	6063      	str	r3, [r4, #4]
}
   b606a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b606c:	3101      	adds	r1, #1
   b606e:	f7ff ffad 	bl	b5fcc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b6072:	2800      	cmp	r0, #0
   b6074:	d1ee      	bne.n	b6054 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b6076:	e7f8      	b.n	b606a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b6078 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6078:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b607a:	6841      	ldr	r1, [r0, #4]
   b607c:	f7ff bfe2 	b.w	b6044 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b6080 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b6080:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b6084:	4604      	mov	r4, r0
   b6086:	461d      	mov	r5, r3
   b6088:	460f      	mov	r7, r1
   b608a:	ab01      	add	r3, sp, #4
   b608c:	4690      	mov	r8, r2
   b608e:	460a      	mov	r2, r1
   b6090:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6094:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b6098:	f7ff fb8e 	bl	b57b8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b609c:	1cae      	adds	r6, r5, #2
   b609e:	6863      	ldr	r3, [r4, #4]
   b60a0:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b60a2:	f1b9 0f00 	cmp.w	r9, #0
   b60a6:	d126      	bne.n	b60f6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b60a8:	b328      	cbz	r0, b60f6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b60aa:	4433      	add	r3, r6
   b60ac:	1a1b      	subs	r3, r3, r0
   b60ae:	2bff      	cmp	r3, #255	; 0xff
   b60b0:	d809      	bhi.n	b60c6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b60b2:	9901      	ldr	r1, [sp, #4]
   b60b4:	4620      	mov	r0, r4
   b60b6:	f7ff fe75 	bl	b5da4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b60ba:	6861      	ldr	r1, [r4, #4]
   b60bc:	4620      	mov	r0, r4
   b60be:	4431      	add	r1, r6
   b60c0:	f7ff ff94 	bl	b5fec <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b60c4:	b918      	cbnz	r0, b60ce <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b60c6:	6860      	ldr	r0, [r4, #4]
}
   b60c8:	b003      	add	sp, #12
   b60ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b60ce:	1c6a      	adds	r2, r5, #1
   b60d0:	9901      	ldr	r1, [sp, #4]
   b60d2:	b2d2      	uxtb	r2, r2
   b60d4:	4620      	mov	r0, r4
   b60d6:	f7ff ffb5 	bl	b6044 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b60da:	9901      	ldr	r1, [sp, #4]
   b60dc:	463a      	mov	r2, r7
   b60de:	3101      	adds	r1, #1
   b60e0:	4620      	mov	r0, r4
   b60e2:	f7ff ffaf 	bl	b6044 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b60e6:	9901      	ldr	r1, [sp, #4]
   b60e8:	462b      	mov	r3, r5
   b60ea:	4642      	mov	r2, r8
   b60ec:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b60ee:	4620      	mov	r0, r4
   b60f0:	f7ff ff85 	bl	b5ffe <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b60f4:	e7e7      	b.n	b60c6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b60f6:	18f1      	adds	r1, r6, r3
   b60f8:	29ff      	cmp	r1, #255	; 0xff
   b60fa:	d8e4      	bhi.n	b60c6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b60fc:	4620      	mov	r0, r4
   b60fe:	f7ff ff75 	bl	b5fec <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b6102:	2800      	cmp	r0, #0
   b6104:	d0df      	beq.n	b60c6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b6106:	1c69      	adds	r1, r5, #1
   b6108:	b2c9      	uxtb	r1, r1
   b610a:	4620      	mov	r0, r4
   b610c:	f7ff ffb4 	bl	b6078 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b6110:	4639      	mov	r1, r7
   b6112:	4620      	mov	r0, r4
   b6114:	f7ff ffb0 	bl	b6078 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b6118:	6861      	ldr	r1, [r4, #4]
   b611a:	462b      	mov	r3, r5
   b611c:	4642      	mov	r2, r8
   b611e:	e7e6      	b.n	b60ee <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b6120 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b6120:	b430      	push	{r4, r5}
   b6122:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b6126:	b11a      	cbz	r2, b6130 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b6128:	9502      	str	r5, [sp, #8]
}
   b612a:	bc30      	pop	{r4, r5}
   b612c:	f7ff bfa8 	b.w	b6080 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b6130:	6840      	ldr	r0, [r0, #4]
}
   b6132:	bc30      	pop	{r4, r5}
   b6134:	4770      	bx	lr

000b6136 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b6136:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b6138:	2300      	movs	r3, #0
   b613a:	e9c0 3300 	strd	r3, r3, [r0]
   b613e:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b6140:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b6142:	9300      	str	r3, [sp, #0]
   b6144:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b6146:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b614a:	4619      	mov	r1, r3
   b614c:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b6150:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b6152:	f7ff ffe5 	bl	b6120 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b6156:	4620      	mov	r0, r4
   b6158:	b004      	add	sp, #16
   b615a:	bd10      	pop	{r4, pc}

000b615c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b615c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b615e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6160:	4604      	mov	r4, r0
   b6162:	460d      	mov	r5, r1
   b6164:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6166:	d914      	bls.n	b6192 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b6168:	4290      	cmp	r0, r2
   b616a:	d213      	bcs.n	b6194 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b616c:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b6170:	1a75      	subs	r5, r6, r1
   b6172:	f1a1 0708 	sub.w	r7, r1, #8
   b6176:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6178:	42b7      	cmp	r7, r6
   b617a:	d018      	beq.n	b61ae <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b617c:	b11c      	cbz	r4, b6186 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b617e:	4631      	mov	r1, r6
   b6180:	4620      	mov	r0, r4
   b6182:	f7ff fe94 	bl	b5eae <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b6186:	1d30      	adds	r0, r6, #4
   b6188:	f7ff fe9b 	bl	b5ec2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b618c:	3e08      	subs	r6, #8
   b618e:	3c08      	subs	r4, #8
   b6190:	e7f2      	b.n	b6178 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b6192:	d00c      	beq.n	b61ae <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b6194:	42b5      	cmp	r5, r6
   b6196:	d00a      	beq.n	b61ae <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b6198:	b11c      	cbz	r4, b61a2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b619a:	4629      	mov	r1, r5
   b619c:	4620      	mov	r0, r4
   b619e:	f7ff fe86 	bl	b5eae <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b61a2:	1d28      	adds	r0, r5, #4
   b61a4:	f7ff fe8d 	bl	b5ec2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b61a8:	3508      	adds	r5, #8
   b61aa:	3408      	adds	r4, #8
   b61ac:	e7f2      	b.n	b6194 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b61ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b61b0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b61b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b61b2:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b61b4:	6846      	ldr	r6, [r0, #4]
   b61b6:	4668      	mov	r0, sp
   b61b8:	f7ff fe79 	bl	b5eae <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b61bc:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b61c0:	429f      	cmp	r7, r3
   b61c2:	db12      	blt.n	b61ea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b61c4:	3701      	adds	r7, #1
        if (n > 0) {
   b61c6:	2f00      	cmp	r7, #0
   b61c8:	dd29      	ble.n	b621e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b61ca:	00f8      	lsls	r0, r7, #3
   b61cc:	f7ff f930 	bl	b5430 <malloc>
            if (!d) {
   b61d0:	4605      	mov	r5, r0
   b61d2:	b1f0      	cbz	r0, b6212 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b61d4:	e9d4 1200 	ldrd	r1, r2, [r4]
   b61d8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b61dc:	f7ff ffbe 	bl	b615c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b61e0:	6820      	ldr	r0, [r4, #0]
   b61e2:	f7ff f92d 	bl	b5440 <free>
        data_ = d;
   b61e6:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b61e8:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b61ea:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b61ec:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b61ee:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b61f2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b61f6:	4631      	mov	r1, r6
   b61f8:	f106 0008 	add.w	r0, r6, #8
   b61fc:	f7ff ffae 	bl	b615c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b6200:	b11e      	cbz	r6, b620a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b6202:	4669      	mov	r1, sp
   b6204:	4630      	mov	r0, r6
   b6206:	f7ff fe52 	bl	b5eae <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b620a:	6863      	ldr	r3, [r4, #4]
   b620c:	3301      	adds	r3, #1
   b620e:	6063      	str	r3, [r4, #4]
    return true;
   b6210:	2501      	movs	r5, #1
   b6212:	a801      	add	r0, sp, #4
   b6214:	f7ff fe55 	bl	b5ec2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6218:	4628      	mov	r0, r5
   b621a:	b003      	add	sp, #12
   b621c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b621e:	2500      	movs	r5, #0
   b6220:	e7de      	b.n	b61e0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b6222 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b6222:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b6224:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b6228:	4605      	mov	r5, r0
   b622a:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b622c:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b6230:	42a6      	cmp	r6, r4
   b6232:	d005      	beq.n	b6240 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b6234:	4639      	mov	r1, r7
   b6236:	4620      	mov	r0, r4
   b6238:	f7ff fd09 	bl	b5c4e <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b623c:	b108      	cbz	r0, b6242 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b623e:	b914      	cbnz	r4, b6246 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b6240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b6242:	3408      	adds	r4, #8
   b6244:	e7f4      	b.n	b6230 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b6246:	1d20      	adds	r0, r4, #4
   b6248:	f7ff fe3b 	bl	b5ec2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b624c:	e9d5 3200 	ldrd	r3, r2, [r5]
   b6250:	f104 0108 	add.w	r1, r4, #8
   b6254:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b6258:	4620      	mov	r0, r4
   b625a:	f7ff ff7f 	bl	b615c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b625e:	686b      	ldr	r3, [r5, #4]
   b6260:	3b01      	subs	r3, #1
   b6262:	606b      	str	r3, [r5, #4]
    return true;
   b6264:	e7ec      	b.n	b6240 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b6268 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b6268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b626c:	4605      	mov	r5, r0
   b626e:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b6270:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b6272:	460c      	mov	r4, r1
        WiringBleLock lk;
   b6274:	f7ff fb28 	bl	b58c8 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b6278:	682e      	ldr	r6, [r5, #0]
   b627a:	2e04      	cmp	r6, #4
   b627c:	d075      	beq.n	b636a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
   b627e:	d807      	bhi.n	b6290 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x28>
   b6280:	2e03      	cmp	r6, #3
   b6282:	d032      	beq.n	b62ea <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x82>
        WiringBleLock lk;
   b6284:	a803      	add	r0, sp, #12
   b6286:	f7ff fb2d 	bl	b58e4 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b628a:	b00e      	add	sp, #56	; 0x38
   b628c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (event->type) {
   b6290:	f1a6 030c 	sub.w	r3, r6, #12
   b6294:	2b04      	cmp	r3, #4
   b6296:	d8f5      	bhi.n	b6284 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b6298:	89a9      	ldrh	r1, [r5, #12]
   b629a:	4620      	mov	r0, r4
   b629c:	f7ff fc6c 	bl	b5b78 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b62a0:	2800      	cmp	r0, #0
   b62a2:	d0ef      	beq.n	b6284 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                    if (impl->pairingEventCallback_) {
   b62a4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b62a6:	2b00      	cmp	r3, #0
   b62a8:	d0ec      	beq.n	b6284 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        BlePairingEventPayload payload = {};
   b62aa:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b62ac:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b62ae:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b62b2:	d002      	beq.n	b62ba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x52>
   b62b4:	2e10      	cmp	r6, #16
   b62b6:	f040 80a0 	bne.w	b63fa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x192>
                        BlePairingEventPayload payload = {};
   b62ba:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b62bc:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b62be:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b62c0:	2506      	movs	r5, #6
                        };
   b62c2:	f88d 3015 	strb.w	r3, [sp, #21]
   b62c6:	9104      	str	r1, [sp, #16]
   b62c8:	f88d 2014 	strb.w	r2, [sp, #20]
   b62cc:	9006      	str	r0, [sp, #24]
   b62ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b62d2:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b62d4:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b62d8:	9508      	str	r5, [sp, #32]
   b62da:	e883 0003 	stmia.w	r3, {r0, r1}
   b62de:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b62e0:	a906      	add	r1, sp, #24
   b62e2:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b62e6:	4798      	blx	r3
   b62e8:	e7cc      	b.n	b6284 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice peer;
   b62ea:	a804      	add	r0, sp, #16
   b62ec:	f7ff fc7a 	bl	b5be4 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b62f0:	9b04      	ldr	r3, [sp, #16]
   b62f2:	89aa      	ldrh	r2, [r5, #12]
   b62f4:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b62f6:	6869      	ldr	r1, [r5, #4]
   b62f8:	9804      	ldr	r0, [sp, #16]
   b62fa:	3108      	adds	r1, #8
   b62fc:	3002      	adds	r0, #2
   b62fe:	f7ff fafd 	bl	b58fc <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b6302:	a904      	add	r1, sp, #16
   b6304:	a806      	add	r0, sp, #24
   b6306:	f7ff fdd2 	bl	b5eae <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b630a:	a906      	add	r1, sp, #24
   b630c:	f104 0018 	add.w	r0, r4, #24
   b6310:	f7ff ff4e 	bl	b61b0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b6314:	4605      	mov	r5, r0
   b6316:	a807      	add	r0, sp, #28
   b6318:	f7ff fdd3 	bl	b5ec2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b631c:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b631e:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b6320:	b98d      	cbnz	r5, b6346 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xde>
                    LOG(ERROR, "Failed to append peer Central device.");
   b6322:	4b3d      	ldr	r3, [pc, #244]	; (b6418 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1b0>)
   b6324:	493d      	ldr	r1, [pc, #244]	; (b641c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1b4>)
   b6326:	9300      	str	r3, [sp, #0]
   b6328:	2032      	movs	r0, #50	; 0x32
   b632a:	462b      	mov	r3, r5
   b632c:	aa06      	add	r2, sp, #24
   b632e:	9507      	str	r5, [sp, #28]
   b6330:	f7fe ffea 	bl	b5308 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b6334:	9b04      	ldr	r3, [sp, #16]
   b6336:	4629      	mov	r1, r5
   b6338:	8818      	ldrh	r0, [r3, #0]
   b633a:	f7fe fecd 	bl	b50d8 <hal_ble_gap_disconnect>
   b633e:	a805      	add	r0, sp, #20
   b6340:	f7ff fdbf 	bl	b5ec2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6344:	e79e      	b.n	b6284 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                LOG(TRACE, "Connected by Central device.");
   b6346:	4a36      	ldr	r2, [pc, #216]	; (b6420 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1b8>)
   b6348:	9200      	str	r2, [sp, #0]
   b634a:	2300      	movs	r3, #0
   b634c:	4933      	ldr	r1, [pc, #204]	; (b641c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1b4>)
   b634e:	9307      	str	r3, [sp, #28]
   b6350:	aa06      	add	r2, sp, #24
   b6352:	2001      	movs	r0, #1
   b6354:	f7fe ffd8 	bl	b5308 <log_message>
                if (impl->connectedCallback_) {
   b6358:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b635a:	2b00      	cmp	r3, #0
   b635c:	d0ef      	beq.n	b633e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd6>
                    impl->connectedCallback_(peer);
   b635e:	a904      	add	r1, sp, #16
   b6360:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b6364:	f7ff fe29 	bl	b5fba <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b6368:	e7e9      	b.n	b633e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd6>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b636a:	89a9      	ldrh	r1, [r5, #12]
   b636c:	4620      	mov	r0, r4
   b636e:	f7ff fc03 	bl	b5b78 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b6372:	4606      	mov	r6, r0
   b6374:	2800      	cmp	r0, #0
   b6376:	d085      	beq.n	b6284 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
      { return _M_ptr; }
   b6378:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b637a:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b637e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6382:	8029      	strh	r1, [r5, #0]
   b6384:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b6388:	429a      	cmp	r2, r3
   b638a:	d003      	beq.n	b6394 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   b638c:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b6390:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b6392:	e7f9      	b.n	b6388 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x120>
    destruct(data_, data_ + size_);
   b6394:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b6398:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b639c:	45b8      	cmp	r8, r7
   b639e:	d004      	beq.n	b63aa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x142>
      ~__shared_ptr() = default;
   b63a0:	1d38      	adds	r0, r7, #4
   b63a2:	f7ff fd8e 	bl	b5ec2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b63a6:	3708      	adds	r7, #8
   b63a8:	e7f8      	b.n	b639c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x134>
    size_ = 0;
   b63aa:	2300      	movs	r3, #0
   b63ac:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b63ae:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b63b2:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b63b6:	45b8      	cmp	r8, r7
   b63b8:	d004      	beq.n	b63c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x15c>
   b63ba:	1d38      	adds	r0, r7, #4
   b63bc:	f7ff fd81 	bl	b5ec2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b63c0:	3708      	adds	r7, #8
   b63c2:	e7f8      	b.n	b63b6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x14e>
    size_ = 0;
   b63c4:	2300      	movs	r3, #0
   b63c6:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b63c8:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b63ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b63cc:	b123      	cbz	r3, b63d8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x170>
                        impl->disconnectedCallback_(*peer);
   b63ce:	4631      	mov	r1, r6
   b63d0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b63d4:	f7ff fdf1 	bl	b5fba <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b63d8:	2300      	movs	r3, #0
   b63da:	2220      	movs	r2, #32
   b63dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b63e0:	4a10      	ldr	r2, [pc, #64]	; (b6424 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1bc>)
   b63e2:	9200      	str	r2, [sp, #0]
   b63e4:	490d      	ldr	r1, [pc, #52]	; (b641c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1b4>)
   b63e6:	aa06      	add	r2, sp, #24
   b63e8:	2001      	movs	r0, #1
   b63ea:	f7fe ff8d 	bl	b5308 <log_message>
                    impl->peers_.removeOne(*peer);
   b63ee:	4631      	mov	r1, r6
   b63f0:	f104 0018 	add.w	r0, r4, #24
   b63f4:	f7ff ff15 	bl	b6222 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b63f8:	e744      	b.n	b6284 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b63fa:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b63fc:	bf01      	itttt	eq
   b63fe:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b6400:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b6402:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b6406:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b6408:	bf0f      	iteee	eq
   b640a:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b640e:	461a      	movne	r2, r3
   b6410:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b6412:	461d      	movne	r5, r3
   b6414:	e755      	b.n	b62c2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x5a>
   b6416:	bf00      	nop
   b6418:	000b7ba7 	.word	0x000b7ba7
   b641c:	000b7b68 	.word	0x000b7b68
   b6420:	000b7bcd 	.word	0x000b7bcd
   b6424:	000b7bea 	.word	0x000b7bea

000b6428 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b6428:	b513      	push	{r0, r1, r4, lr}
   b642a:	460b      	mov	r3, r1
   b642c:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b642e:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6432:	466c      	mov	r4, sp
   b6434:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b6438:	e893 0003 	ldmia.w	r3, {r0, r1}
   b643c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b6440:	e894 0003 	ldmia.w	r4, {r0, r1}
   b6444:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b6448:	b002      	add	sp, #8
   b644a:	bd10      	pop	{r4, pc}

000b644c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b644c:	b538      	push	{r3, r4, r5, lr}
   b644e:	4605      	mov	r5, r0
   b6450:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b6452:	f7ff ffe9 	bl	b6428 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6456:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b6458:	68a2      	ldr	r2, [r4, #8]
   b645a:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b645c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b645e:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b6460:	68e2      	ldr	r2, [r4, #12]
   b6462:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6464:	60e3      	str	r3, [r4, #12]
      }
   b6466:	bd38      	pop	{r3, r4, r5, pc}

000b6468 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b6468:	b570      	push	{r4, r5, r6, lr}
   b646a:	4604      	mov	r4, r0
   b646c:	b08c      	sub	sp, #48	; 0x30
   b646e:	460e      	mov	r6, r1
   b6470:	9201      	str	r2, [sp, #4]
   b6472:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b6474:	f7ff fb60 	bl	b5b38 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b6478:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b647a:	9901      	ldr	r1, [sp, #4]
   b647c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b6480:	f7ff f8f4 	bl	b566c <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b6484:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b6488:	b1cd      	cbz	r5, b64be <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b648a:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b648c:	9502      	str	r5, [sp, #8]
   b648e:	a902      	add	r1, sp, #8
   b6490:	a804      	add	r0, sp, #16
   b6492:	9303      	str	r3, [sp, #12]
   b6494:	f7ff fcd4 	bl	b5e40 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b6498:	2300      	movs	r3, #0
	__x.swap(*this);
   b649a:	a908      	add	r1, sp, #32
   b649c:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b649e:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b64a0:	f7ff ffd4 	bl	b644c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b64a4:	4631      	mov	r1, r6
   b64a6:	a808      	add	r0, sp, #32
   b64a8:	f7ff ffd0 	bl	b644c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b64ac:	a808      	add	r0, sp, #32
   b64ae:	f7ff f9cd 	bl	b584c <_ZNSt14_Function_baseD1Ev>
   b64b2:	a804      	add	r0, sp, #16
   b64b4:	f7ff f9ca 	bl	b584c <_ZNSt14_Function_baseD1Ev>
    }
   b64b8:	4620      	mov	r0, r4
   b64ba:	b00c      	add	sp, #48	; 0x30
   b64bc:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b64be:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b64c0:	e7ea      	b.n	b6498 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b64c4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b64c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b64c8:	b087      	sub	sp, #28
   b64ca:	461d      	mov	r5, r3
   b64cc:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b64d0:	4680      	mov	r8, r0
   b64d2:	468b      	mov	fp, r1
   b64d4:	4692      	mov	sl, r2
   b64d6:	9912      	ldr	r1, [sp, #72]	; 0x48
   b64d8:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b64da:	2200      	movs	r2, #0
   b64dc:	2068      	movs	r0, #104	; 0x68
   b64de:	9102      	str	r1, [sp, #8]
   b64e0:	9204      	str	r2, [sp, #16]
   b64e2:	f7fd fdd6 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b64e6:	1e06      	subs	r6, r0, #0
   b64e8:	f106 090c 	add.w	r9, r6, #12
   b64ec:	d018      	beq.n	b6520 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b64ee:	2201      	movs	r2, #1
	: _M_impl(__a)
   b64f0:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b64f2:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b64f6:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b64f8:	4a14      	ldr	r2, [pc, #80]	; (b654c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x88>)
   b64fa:	f847 2b20 	str.w	r2, [r7], #32
   b64fe:	9b03      	ldr	r3, [sp, #12]
   b6500:	9100      	str	r1, [sp, #0]
   b6502:	465a      	mov	r2, fp
   b6504:	4651      	mov	r1, sl
   b6506:	4648      	mov	r0, r9
   b6508:	f7ff ffae 	bl	b6468 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b650c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b650e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b6510:	682b      	ldr	r3, [r5, #0]
   b6512:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b6514:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6516:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b651a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b651c:	6823      	ldr	r3, [r4, #0]
   b651e:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b6520:	a904      	add	r1, sp, #16
   b6522:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b6524:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b6528:	f7ff fd36 	bl	b5f98 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b652c:	a805      	add	r0, sp, #20
   b652e:	f7ff fcc8 	bl	b5ec2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b6532:	f8d8 1000 	ldr.w	r1, [r8]
   b6536:	b931      	cbnz	r1, b6546 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x82>
        SPARK_ASSERT(false);
   b6538:	4a05      	ldr	r2, [pc, #20]	; (b6550 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b653a:	200a      	movs	r0, #10
}
   b653c:	b007      	add	sp, #28
   b653e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b6542:	f7fe bed9 	b.w	b52f8 <panic_>
}
   b6546:	b007      	add	sp, #28
   b6548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b654c:	000b7c64 	.word	0x000b7c64
   b6550:	000b5069 	.word	0x000b5069

000b6554 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b6554:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6558:	4604      	mov	r4, r0
   b655a:	460d      	mov	r5, r1
   b655c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b655e:	d914      	bls.n	b658a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b6560:	4290      	cmp	r0, r2
   b6562:	d213      	bcs.n	b658c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b6564:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b6568:	1a75      	subs	r5, r6, r1
   b656a:	f1a1 0708 	sub.w	r7, r1, #8
   b656e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b6570:	42b7      	cmp	r7, r6
   b6572:	d018      	beq.n	b65a6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b6574:	b11c      	cbz	r4, b657e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b6576:	4631      	mov	r1, r6
   b6578:	4620      	mov	r0, r4
   b657a:	f7ff fc8e 	bl	b5e9a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b657e:	1d30      	adds	r0, r6, #4
   b6580:	f7ff fc9f 	bl	b5ec2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b6584:	3e08      	subs	r6, #8
   b6586:	3c08      	subs	r4, #8
   b6588:	e7f2      	b.n	b6570 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b658a:	d00c      	beq.n	b65a6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b658c:	42b5      	cmp	r5, r6
   b658e:	d00a      	beq.n	b65a6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b6590:	b11c      	cbz	r4, b659a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b6592:	4629      	mov	r1, r5
   b6594:	4620      	mov	r0, r4
   b6596:	f7ff fc80 	bl	b5e9a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b659a:	1d28      	adds	r0, r5, #4
   b659c:	f7ff fc91 	bl	b5ec2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b65a0:	3508      	adds	r5, #8
   b65a2:	3408      	adds	r4, #8
   b65a4:	e7f2      	b.n	b658c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b65a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b65a8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b65a8:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b65aa:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b65ac:	4605      	mov	r5, r0
        if (n > 0) {
   b65ae:	dd11      	ble.n	b65d4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b65b0:	00f0      	lsls	r0, r6, #3
   b65b2:	f7fe ff3d 	bl	b5430 <malloc>
            if (!d) {
   b65b6:	4604      	mov	r4, r0
   b65b8:	b158      	cbz	r0, b65d2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b65ba:	e9d5 1200 	ldrd	r1, r2, [r5]
   b65be:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b65c2:	f7ff ffc7 	bl	b6554 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b65c6:	6828      	ldr	r0, [r5, #0]
   b65c8:	f7fe ff3a 	bl	b5440 <free>
        data_ = d;
   b65cc:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b65ce:	60ae      	str	r6, [r5, #8]
        return true;
   b65d0:	2001      	movs	r0, #1
    }
   b65d2:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b65d4:	2400      	movs	r4, #0
   b65d6:	e7f6      	b.n	b65c6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b65d8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b65d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b65da:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b65dc:	6845      	ldr	r5, [r0, #4]
   b65de:	4668      	mov	r0, sp
   b65e0:	f7ff fc5b 	bl	b5e9a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b65e4:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b65e8:	4299      	cmp	r1, r3
   b65ea:	da10      	bge.n	b660e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b65ec:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b65ee:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b65f0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b65f4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b65f8:	4629      	mov	r1, r5
   b65fa:	f105 0008 	add.w	r0, r5, #8
   b65fe:	f7ff ffa9 	bl	b6554 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b6602:	b98d      	cbnz	r5, b6628 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b6604:	6863      	ldr	r3, [r4, #4]
   b6606:	3301      	adds	r3, #1
   b6608:	6063      	str	r3, [r4, #4]
    return true;
   b660a:	2601      	movs	r6, #1
   b660c:	e006      	b.n	b661c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b660e:	3101      	adds	r1, #1
   b6610:	4620      	mov	r0, r4
   b6612:	f7ff ffc9 	bl	b65a8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b6616:	4606      	mov	r6, r0
   b6618:	2800      	cmp	r0, #0
   b661a:	d1e7      	bne.n	b65ec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b661c:	a801      	add	r0, sp, #4
   b661e:	f7ff fc50 	bl	b5ec2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6622:	4630      	mov	r0, r6
   b6624:	b002      	add	sp, #8
   b6626:	bd70      	pop	{r4, r5, r6, pc}
   b6628:	4669      	mov	r1, sp
   b662a:	4628      	mov	r0, r5
   b662c:	f7ff fc35 	bl	b5e9a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b6630:	e7e8      	b.n	b6604 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b6632 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b6632:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6636:	4604      	mov	r4, r0
   b6638:	460d      	mov	r5, r1
   b663a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b663c:	d914      	bls.n	b6668 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b663e:	4290      	cmp	r0, r2
   b6640:	d213      	bcs.n	b666a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b6642:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b6646:	1a75      	subs	r5, r6, r1
   b6648:	f1a1 0708 	sub.w	r7, r1, #8
   b664c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b664e:	42b7      	cmp	r7, r6
   b6650:	d018      	beq.n	b6684 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b6652:	b11c      	cbz	r4, b665c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b6654:	4631      	mov	r1, r6
   b6656:	4620      	mov	r0, r4
   b6658:	f7ff fc11 	bl	b5e7e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b665c:	1d30      	adds	r0, r6, #4
   b665e:	f7ff fc30 	bl	b5ec2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b6662:	3e08      	subs	r6, #8
   b6664:	3c08      	subs	r4, #8
   b6666:	e7f2      	b.n	b664e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b6668:	d00c      	beq.n	b6684 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b666a:	42b5      	cmp	r5, r6
   b666c:	d00a      	beq.n	b6684 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b666e:	b11c      	cbz	r4, b6678 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b6670:	4629      	mov	r1, r5
   b6672:	4620      	mov	r0, r4
   b6674:	f7ff fc03 	bl	b5e7e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b6678:	1d28      	adds	r0, r5, #4
   b667a:	f7ff fc22 	bl	b5ec2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b667e:	3508      	adds	r5, #8
   b6680:	3408      	adds	r4, #8
   b6682:	e7f2      	b.n	b666a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b6684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6686 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b6686:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b6688:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b668a:	4605      	mov	r5, r0
        if (n > 0) {
   b668c:	dd11      	ble.n	b66b2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b668e:	00f0      	lsls	r0, r6, #3
   b6690:	f7fe fece 	bl	b5430 <malloc>
            if (!d) {
   b6694:	4604      	mov	r4, r0
   b6696:	b158      	cbz	r0, b66b0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b6698:	e9d5 1200 	ldrd	r1, r2, [r5]
   b669c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b66a0:	f7ff ffc7 	bl	b6632 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b66a4:	6828      	ldr	r0, [r5, #0]
   b66a6:	f7fe fecb 	bl	b5440 <free>
        data_ = d;
   b66aa:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b66ac:	60ae      	str	r6, [r5, #8]
        return true;
   b66ae:	2001      	movs	r0, #1
    }
   b66b0:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b66b2:	2400      	movs	r4, #0
   b66b4:	e7f6      	b.n	b66a4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b66b6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b66b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b66b8:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b66ba:	6845      	ldr	r5, [r0, #4]
   b66bc:	4668      	mov	r0, sp
   b66be:	f7ff fbde 	bl	b5e7e <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b66c2:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b66c6:	4299      	cmp	r1, r3
   b66c8:	da10      	bge.n	b66ec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b66ca:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b66cc:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b66ce:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b66d2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b66d6:	4629      	mov	r1, r5
   b66d8:	f105 0008 	add.w	r0, r5, #8
   b66dc:	f7ff ffa9 	bl	b6632 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b66e0:	b98d      	cbnz	r5, b6706 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b66e2:	6863      	ldr	r3, [r4, #4]
   b66e4:	3301      	adds	r3, #1
   b66e6:	6063      	str	r3, [r4, #4]
    return true;
   b66e8:	2601      	movs	r6, #1
   b66ea:	e006      	b.n	b66fa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b66ec:	3101      	adds	r1, #1
   b66ee:	4620      	mov	r0, r4
   b66f0:	f7ff ffc9 	bl	b6686 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b66f4:	4606      	mov	r6, r0
   b66f6:	2800      	cmp	r0, #0
   b66f8:	d1e7      	bne.n	b66ca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b66fa:	a801      	add	r0, sp, #4
   b66fc:	f7ff fbe1 	bl	b5ec2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6700:	4630      	mov	r0, r6
   b6702:	b002      	add	sp, #8
   b6704:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b6706:	4669      	mov	r1, sp
   b6708:	4628      	mov	r0, r5
   b670a:	f7ff fbb8 	bl	b5e7e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b670e:	e7e8      	b.n	b66e2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b6710 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b6710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6714:	4617      	mov	r7, r2
   b6716:	b0a1      	sub	sp, #132	; 0x84
   b6718:	4680      	mov	r8, r0
    WiringBleLock lk;
   b671a:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b671c:	460e      	mov	r6, r1
    WiringBleLock lk;
   b671e:	f7ff f8d3 	bl	b58c8 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b6722:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b6724:	7923      	ldrb	r3, [r4, #4]
   b6726:	b953      	cbnz	r3, b673e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b6728:	4639      	mov	r1, r7
   b672a:	4640      	mov	r0, r8
   b672c:	f7ff fba7 	bl	b5e7e <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b6730:	a80a      	add	r0, sp, #40	; 0x28
   b6732:	f7ff f8d7 	bl	b58e4 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b6736:	4640      	mov	r0, r8
   b6738:	b021      	add	sp, #132	; 0x84
   b673a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b673e:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b6740:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b6744:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b6748:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b674a:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b674e:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b6752:	9b03      	ldr	r3, [sp, #12]
   b6754:	429d      	cmp	r5, r3
   b6756:	d021      	beq.n	b679c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b6758:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b675c:	4658      	mov	r0, fp
   b675e:	f109 0114 	add.w	r1, r9, #20
   b6762:	f7ff f95e 	bl	b5a22 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b6766:	b1b8      	cbz	r0, b6798 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b6768:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b676c:	4650      	mov	r0, sl
   b676e:	f7ff f958 	bl	b5a22 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b6772:	b188      	cbz	r0, b6798 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b6774:	6823      	ldr	r3, [r4, #0]
   b6776:	f8d9 2000 	ldr.w	r2, [r9]
   b677a:	4053      	eors	r3, r2
   b677c:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b6780:	d10a      	bne.n	b6798 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b6782:	2220      	movs	r2, #32
   b6784:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b6788:	4a5e      	ldr	r2, [pc, #376]	; (b6904 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b678a:	9200      	str	r2, [sp, #0]
   b678c:	aa15      	add	r2, sp, #84	; 0x54
   b678e:	495e      	ldr	r1, [pc, #376]	; (b6908 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b6790:	2032      	movs	r0, #50	; 0x32
   b6792:	f7fe fdb9 	bl	b5308 <log_message>
   b6796:	e7c7      	b.n	b6728 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b6798:	3508      	adds	r5, #8
   b679a:	e7da      	b.n	b6752 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b679c:	4650      	mov	r0, sl
   b679e:	f7ff f911 	bl	b59c4 <_ZNK8particle7BleUuid7isValidEv>
   b67a2:	b960      	cbnz	r0, b67be <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b67a4:	4959      	ldr	r1, [pc, #356]	; (b690c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b67a6:	2201      	movs	r2, #1
   b67a8:	a815      	add	r0, sp, #84	; 0x54
   b67aa:	ad15      	add	r5, sp, #84	; 0x54
   b67ac:	f7ff f8e2 	bl	b5974 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b67b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b67b2:	46d4      	mov	ip, sl
   b67b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b67b8:	682b      	ldr	r3, [r5, #0]
   b67ba:	f8cc 3000 	str.w	r3, [ip]
   b67be:	6833      	ldr	r3, [r6, #0]
   b67c0:	e9d3 5300 	ldrd	r5, r3, [r3]
   b67c4:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b67c8:	455d      	cmp	r5, fp
   b67ca:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b67cc:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b67ce:	d06e      	beq.n	b68ae <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b67d0:	f855 0b08 	ldr.w	r0, [r5], #8
   b67d4:	f7ff f925 	bl	b5a22 <_ZNK8particle7BleUuideqERKS0_>
   b67d8:	2800      	cmp	r0, #0
   b67da:	d0f5      	beq.n	b67c8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b67dc:	f104 0a14 	add.w	sl, r4, #20
   b67e0:	4650      	mov	r0, sl
   b67e2:	f7ff f8ef 	bl	b59c4 <_ZNK8particle7BleUuid7isValidEv>
   b67e6:	b988      	cbnz	r0, b680c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b67e8:	4b49      	ldr	r3, [pc, #292]	; (b6910 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b67ea:	4948      	ldr	r1, [pc, #288]	; (b690c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b67ec:	881a      	ldrh	r2, [r3, #0]
   b67ee:	3201      	adds	r2, #1
   b67f0:	b292      	uxth	r2, r2
   b67f2:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b67f4:	a815      	add	r0, sp, #84	; 0x54
   b67f6:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b67f8:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b67fa:	f7ff f8da 	bl	b59b2 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b67fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6800:	46d4      	mov	ip, sl
   b6802:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6806:	682b      	ldr	r3, [r5, #0]
   b6808:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b680c:	4b41      	ldr	r3, [pc, #260]	; (b6914 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b680e:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b6810:	2228      	movs	r2, #40	; 0x28
   b6812:	2100      	movs	r1, #0
   b6814:	a816      	add	r0, sp, #88	; 0x58
   b6816:	f000 feb9 	bl	b758c <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b681a:	4651      	mov	r1, sl
   b681c:	a804      	add	r0, sp, #16
   b681e:	f7ff f8e3 	bl	b59e8 <_ZN8particle7BleUuid7halUUIDEv>
   b6822:	ab04      	add	r3, sp, #16
   b6824:	aa18      	add	r2, sp, #96	; 0x60
   b6826:	f10d 0c20 	add.w	ip, sp, #32
   b682a:	6818      	ldr	r0, [r3, #0]
   b682c:	6859      	ldr	r1, [r3, #4]
   b682e:	4615      	mov	r5, r2
   b6830:	c503      	stmia	r5!, {r0, r1}
   b6832:	3308      	adds	r3, #8
   b6834:	4563      	cmp	r3, ip
   b6836:	462a      	mov	r2, r5
   b6838:	d1f7      	bne.n	b682a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b683a:	6818      	ldr	r0, [r3, #0]
   b683c:	6028      	str	r0, [r5, #0]
    return *this;
}

template<typename T>
inline typename std::underlying_type_t<T> particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::value() const {
    return value_;
   b683e:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b6840:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b6844:	f8d9 3000 	ldr.w	r3, [r9]
   b6848:	8a9b      	ldrh	r3, [r3, #20]
   b684a:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b684e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b6850:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b6852:	4b31      	ldr	r3, [pc, #196]	; (b6918 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b6854:	2200      	movs	r2, #0
   b6856:	1da1      	adds	r1, r4, #6
   b6858:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b685a:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b685e:	f7fe fc4f 	bl	b5100 <hal_ble_gatt_server_add_characteristic>
   b6862:	2800      	cmp	r0, #0
   b6864:	f47f af60 	bne.w	b6728 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b6868:	2301      	movs	r3, #1
   b686a:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b686c:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b686e:	4639      	mov	r1, r7
        return characteristics_;
   b6870:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b6872:	a80d      	add	r0, sp, #52	; 0x34
   b6874:	f7ff fb03 	bl	b5e7e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b6878:	4620      	mov	r0, r4
   b687a:	a90d      	add	r1, sp, #52	; 0x34
   b687c:	f7ff ff1b 	bl	b66b6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b6880:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b6882:	a80e      	add	r0, sp, #56	; 0x38
   b6884:	f7ff fb1d 	bl	b5ec2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6888:	2c00      	cmp	r4, #0
   b688a:	f47f af4d 	bne.w	b6728 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b688e:	2320      	movs	r3, #32
   b6890:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b6894:	4b21      	ldr	r3, [pc, #132]	; (b691c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b6896:	9300      	str	r3, [sp, #0]
   b6898:	aa0d      	add	r2, sp, #52	; 0x34
   b689a:	4623      	mov	r3, r4
   b689c:	e777      	b.n	b678e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b689e:	4639      	mov	r1, r7
   b68a0:	4640      	mov	r0, r8
   b68a2:	f7ff faec 	bl	b5e7e <_ZN8particle17BleCharacteristicC1ERKS0_>
   b68a6:	a80c      	add	r0, sp, #48	; 0x30
   b68a8:	f7ff fb0b 	bl	b5ec2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b68ac:	e740      	b.n	b6730 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b68ae:	a80b      	add	r0, sp, #44	; 0x2c
   b68b0:	f7ff f974 	bl	b5b9c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b68b4:	4651      	mov	r1, sl
   b68b6:	a815      	add	r0, sp, #84	; 0x54
   b68b8:	f7ff f896 	bl	b59e8 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b68bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b68be:	2300      	movs	r3, #0
   b68c0:	3214      	adds	r2, #20
   b68c2:	a915      	add	r1, sp, #84	; 0x54
   b68c4:	2001      	movs	r0, #1
   b68c6:	f7fe fc11 	bl	b50ec <hal_ble_gatt_server_add_service>
   b68ca:	2800      	cmp	r0, #0
   b68cc:	d1e7      	bne.n	b689e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b68ce:	6835      	ldr	r5, [r6, #0]
   b68d0:	a90b      	add	r1, sp, #44	; 0x2c
   b68d2:	a80d      	add	r0, sp, #52	; 0x34
   b68d4:	f7ff fae1 	bl	b5e9a <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b68d8:	4628      	mov	r0, r5
   b68da:	a90d      	add	r1, sp, #52	; 0x34
   b68dc:	f7ff fe7c 	bl	b65d8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b68e0:	4605      	mov	r5, r0
   b68e2:	a80e      	add	r0, sp, #56	; 0x38
   b68e4:	f7ff faed 	bl	b5ec2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b68e8:	2d00      	cmp	r5, #0
   b68ea:	d0d8      	beq.n	b689e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b68ec:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b68ee:	6853      	ldr	r3, [r2, #4]
   b68f0:	6812      	ldr	r2, [r2, #0]
   b68f2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b68f6:	3b01      	subs	r3, #1
   b68f8:	a80c      	add	r0, sp, #48	; 0x30
   b68fa:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b68fe:	f7ff fae0 	bl	b5ec2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6902:	e76b      	b.n	b67dc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b6904:	000b7c09 	.word	0x000b7c09
   b6908:	000b7b68 	.word	0x000b7b68
   b690c:	000b7cce 	.word	0x000b7cce
   b6910:	2003e6c8 	.word	0x2003e6c8
   b6914:	002c0003 	.word	0x002c0003
   b6918:	000b5d29 	.word	0x000b5d29
   b691c:	000b7c34 	.word	0x000b7c34

000b6920 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b6920:	4802      	ldr	r0, [pc, #8]	; (b692c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b6922:	2300      	movs	r3, #0
   b6924:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b6926:	f7fe bbff 	b.w	b5128 <os_mutex_recursive_create>
   b692a:	bf00      	nop
   b692c:	2003e6cc 	.word	0x2003e6cc

000b6930 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6932:	4606      	mov	r6, r0
   b6934:	460d      	mov	r5, r1
  size_t n = 0;
   b6936:	188f      	adds	r7, r1, r2
   b6938:	2400      	movs	r4, #0
  while (size--) {
   b693a:	42bd      	cmp	r5, r7
   b693c:	d00c      	beq.n	b6958 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b693e:	6833      	ldr	r3, [r6, #0]
   b6940:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6944:	689b      	ldr	r3, [r3, #8]
   b6946:	4630      	mov	r0, r6
   b6948:	4798      	blx	r3
     if (chunk>=0)
   b694a:	1e03      	subs	r3, r0, #0
   b694c:	db01      	blt.n	b6952 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b694e:	441c      	add	r4, r3
  while (size--) {
   b6950:	e7f3      	b.n	b693a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b6952:	2c00      	cmp	r4, #0
   b6954:	bf08      	it	eq
   b6956:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6958:	4620      	mov	r0, r4
   b695a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b695c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b695c:	b513      	push	{r0, r1, r4, lr}
   b695e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b6960:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6962:	b159      	cbz	r1, b697c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6964:	9101      	str	r1, [sp, #4]
   b6966:	f000 fe59 	bl	b761c <strlen>
   b696a:	6823      	ldr	r3, [r4, #0]
   b696c:	9901      	ldr	r1, [sp, #4]
   b696e:	68db      	ldr	r3, [r3, #12]
   b6970:	4602      	mov	r2, r0
   b6972:	4620      	mov	r0, r4
    }
   b6974:	b002      	add	sp, #8
   b6976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b697a:	4718      	bx	r3
    }
   b697c:	b002      	add	sp, #8
   b697e:	bd10      	pop	{r4, pc}

000b6980 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b6980:	6803      	ldr	r3, [r0, #0]
   b6982:	689b      	ldr	r3, [r3, #8]
   b6984:	4718      	bx	r3

000b6986 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b6986:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b6988:	210d      	movs	r1, #13
{
   b698a:	4605      	mov	r5, r0
  size_t n = print('\r');
   b698c:	f7ff fff8 	bl	b6980 <_ZN5Print5printEc>
  n += print('\n');
   b6990:	210a      	movs	r1, #10
  size_t n = print('\r');
   b6992:	4604      	mov	r4, r0
  n += print('\n');
   b6994:	4628      	mov	r0, r5
   b6996:	f7ff fff3 	bl	b6980 <_ZN5Print5printEc>
  return n;
}
   b699a:	4420      	add	r0, r4
   b699c:	bd38      	pop	{r3, r4, r5, pc}

000b699e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b699e:	b530      	push	{r4, r5, lr}
   b69a0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b69a2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b69a4:	2a01      	cmp	r2, #1
  *str = '\0';
   b69a6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b69aa:	bf98      	it	ls
   b69ac:	220a      	movls	r2, #10
   b69ae:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b69b0:	460d      	mov	r5, r1
   b69b2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b69b6:	fb01 5312 	mls	r3, r1, r2, r5
   b69ba:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b69be:	2b09      	cmp	r3, #9
   b69c0:	bf94      	ite	ls
   b69c2:	3330      	addls	r3, #48	; 0x30
   b69c4:	3337      	addhi	r3, #55	; 0x37
   b69c6:	b2db      	uxtb	r3, r3
  } while(n);
   b69c8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b69ca:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b69ce:	d9ef      	bls.n	b69b0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b69d0:	4621      	mov	r1, r4
   b69d2:	f7ff ffc3 	bl	b695c <_ZN5Print5writeEPKc>
}
   b69d6:	b00b      	add	sp, #44	; 0x2c
   b69d8:	bd30      	pop	{r4, r5, pc}

000b69da <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b69da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b69de:	b086      	sub	sp, #24
   b69e0:	af00      	add	r7, sp, #0
   b69e2:	4605      	mov	r5, r0
   b69e4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b69e6:	1d38      	adds	r0, r7, #4
   b69e8:	2114      	movs	r1, #20
{
   b69ea:	4614      	mov	r4, r2
    va_copy(args2, args);
   b69ec:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b69ee:	f7fe fd37 	bl	b5460 <vsnprintf>

    if (n<bufsize)
   b69f2:	2813      	cmp	r0, #19
   b69f4:	d80e      	bhi.n	b6a14 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b69f6:	1d39      	adds	r1, r7, #4
   b69f8:	4628      	mov	r0, r5
   b69fa:	f7ff ffaf 	bl	b695c <_ZN5Print5writeEPKc>
   b69fe:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b6a00:	b11e      	cbz	r6, b6a0a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b6a02:	4628      	mov	r0, r5
   b6a04:	f7ff ffbf 	bl	b6986 <_ZN5Print7printlnEv>
   b6a08:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b6a0a:	4620      	mov	r0, r4
   b6a0c:	3718      	adds	r7, #24
   b6a0e:	46bd      	mov	sp, r7
   b6a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b6a14:	f100 0308 	add.w	r3, r0, #8
   b6a18:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b6a1c:	46e8      	mov	r8, sp
        char bigger[n+1];
   b6a1e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b6a22:	4622      	mov	r2, r4
   b6a24:	1c41      	adds	r1, r0, #1
   b6a26:	683b      	ldr	r3, [r7, #0]
   b6a28:	4668      	mov	r0, sp
   b6a2a:	f7fe fd19 	bl	b5460 <vsnprintf>
  return write(str);
   b6a2e:	4669      	mov	r1, sp
   b6a30:	4628      	mov	r0, r5
   b6a32:	f7ff ff93 	bl	b695c <_ZN5Print5writeEPKc>
   b6a36:	4604      	mov	r4, r0
   b6a38:	46c5      	mov	sp, r8
   b6a3a:	e7e1      	b.n	b6a00 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b6a3c <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b6a3c:	b510      	push	{r4, lr}
   b6a3e:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6a40:	f7fe fb22 	bl	b5088 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b6a44:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b6a46:	6823      	ldr	r3, [r4, #0]
   b6a48:	4620      	mov	r0, r4
   b6a4a:	695b      	ldr	r3, [r3, #20]
   b6a4c:	4798      	blx	r3
    if (c >= 0) return c;
   b6a4e:	2800      	cmp	r0, #0
   b6a50:	da08      	bge.n	b6a64 <_ZN6Stream9timedReadEv+0x28>
   b6a52:	f7fe fb19 	bl	b5088 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b6a56:	68e3      	ldr	r3, [r4, #12]
   b6a58:	1ac0      	subs	r0, r0, r3
   b6a5a:	68a3      	ldr	r3, [r4, #8]
   b6a5c:	4298      	cmp	r0, r3
   b6a5e:	d3f2      	bcc.n	b6a46 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b6a60:	f04f 30ff 	mov.w	r0, #4294967295
}
   b6a64:	bd10      	pop	{r4, pc}
	...

000b6a68 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   b6a68:	b570      	push	{r4, r5, r6, lr}
   b6a6a:	460d      	mov	r5, r1
  String ret;
   b6a6c:	4909      	ldr	r1, [pc, #36]	; (b6a94 <_ZN6Stream15readStringUntilEc+0x2c>)
{
   b6a6e:	4604      	mov	r4, r0
   b6a70:	4616      	mov	r6, r2
  String ret;
   b6a72:	f7fe fdc2 	bl	b55fa <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   b6a76:	4628      	mov	r0, r5
   b6a78:	f7ff ffe0 	bl	b6a3c <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   b6a7c:	2800      	cmp	r0, #0
   b6a7e:	db06      	blt.n	b6a8e <_ZN6Stream15readStringUntilEc+0x26>
   b6a80:	4286      	cmp	r6, r0
   b6a82:	d004      	beq.n	b6a8e <_ZN6Stream15readStringUntilEc+0x26>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   b6a84:	b2c1      	uxtb	r1, r0
   b6a86:	4620      	mov	r0, r4
   b6a88:	f7fe fe19 	bl	b56be <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   b6a8c:	e7f3      	b.n	b6a76 <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   b6a8e:	4620      	mov	r0, r4
   b6a90:	bd70      	pop	{r4, r5, r6, pc}
   b6a92:	bf00      	nop
   b6a94:	000b799d 	.word	0x000b799d

000b6a98 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b6a98:	2300      	movs	r3, #0
   b6a9a:	6840      	ldr	r0, [r0, #4]
   b6a9c:	461a      	mov	r2, r3
   b6a9e:	4619      	mov	r1, r3
   b6aa0:	f7fe bc7e 	b.w	b53a0 <network_on>

000b6aa4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b6aa4:	4b01      	ldr	r3, [pc, #4]	; (b6aac <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b6aa6:	4a02      	ldr	r2, [pc, #8]	; (b6ab0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6aa8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b6aaa:	4770      	bx	lr
   b6aac:	2003e6d4 	.word	0x2003e6d4
   b6ab0:	000b7cee 	.word	0x000b7cee

000b6ab4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b6ab4:	4b02      	ldr	r3, [pc, #8]	; (b6ac0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b6ab6:	681a      	ldr	r2, [r3, #0]
   b6ab8:	4b02      	ldr	r3, [pc, #8]	; (b6ac4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b6aba:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b6abc:	4770      	bx	lr
   b6abe:	bf00      	nop
   b6ac0:	2002fa40 	.word	0x2002fa40
   b6ac4:	2003e6d8 	.word	0x2003e6d8

000b6ac8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6ac8:	2100      	movs	r1, #0
   b6aca:	f7fe bc2d 	b.w	b5328 <system_delay_ms>
	...

000b6ad0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b6ad0:	4b01      	ldr	r3, [pc, #4]	; (b6ad8 <_GLOBAL__sub_I_RGB+0x8>)
   b6ad2:	2200      	movs	r2, #0
   b6ad4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b6ad6:	4770      	bx	lr
   b6ad8:	2003e6dc 	.word	0x2003e6dc

000b6adc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b6adc:	4b01      	ldr	r3, [pc, #4]	; (b6ae4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b6ade:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b6ae0:	4770      	bx	lr
   b6ae2:	bf00      	nop
   b6ae4:	2002fa44 	.word	0x2002fa44

000b6ae8 <serialEventRun>:
{
   b6ae8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b6aea:	4b0b      	ldr	r3, [pc, #44]	; (b6b18 <serialEventRun+0x30>)
   b6aec:	b143      	cbz	r3, b6b00 <serialEventRun+0x18>
   b6aee:	f000 f967 	bl	b6dc0 <_Z16_fetch_usbserialv>
   b6af2:	6803      	ldr	r3, [r0, #0]
   b6af4:	691b      	ldr	r3, [r3, #16]
   b6af6:	4798      	blx	r3
   b6af8:	2800      	cmp	r0, #0
   b6afa:	dd01      	ble.n	b6b00 <serialEventRun+0x18>
        serialEvent();
   b6afc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b6b00:	4b06      	ldr	r3, [pc, #24]	; (b6b1c <serialEventRun+0x34>)
   b6b02:	b143      	cbz	r3, b6b16 <serialEventRun+0x2e>
   b6b04:	f000 fb88 	bl	b7218 <_Z22__fetch_global_Serial1v>
   b6b08:	6803      	ldr	r3, [r0, #0]
   b6b0a:	691b      	ldr	r3, [r3, #16]
   b6b0c:	4798      	blx	r3
   b6b0e:	2800      	cmp	r0, #0
   b6b10:	dd01      	ble.n	b6b16 <serialEventRun+0x2e>
        serialEvent1();
   b6b12:	f3af 8000 	nop.w
}
   b6b16:	bd08      	pop	{r3, pc}
	...

000b6b20 <_post_loop>:
{
   b6b20:	b508      	push	{r3, lr}
	serialEventRun();
   b6b22:	f7ff ffe1 	bl	b6ae8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b6b26:	f7fe faaf 	bl	b5088 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6b2a:	4b01      	ldr	r3, [pc, #4]	; (b6b30 <_post_loop+0x10>)
   b6b2c:	6018      	str	r0, [r3, #0]
}
   b6b2e:	bd08      	pop	{r3, pc}
   b6b30:	2003e740 	.word	0x2003e740

000b6b34 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6b34:	4805      	ldr	r0, [pc, #20]	; (b6b4c <_Z33system_initialize_user_backup_ramv+0x18>)
   b6b36:	4a06      	ldr	r2, [pc, #24]	; (b6b50 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b6b38:	4906      	ldr	r1, [pc, #24]	; (b6b54 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b6b3a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6b3c:	1a12      	subs	r2, r2, r0
   b6b3e:	f000 fcfd 	bl	b753c <memcpy>
    __backup_sram_signature = signature;
   b6b42:	4b05      	ldr	r3, [pc, #20]	; (b6b58 <_Z33system_initialize_user_backup_ramv+0x24>)
   b6b44:	4a05      	ldr	r2, [pc, #20]	; (b6b5c <_Z33system_initialize_user_backup_ramv+0x28>)
   b6b46:	601a      	str	r2, [r3, #0]
}
   b6b48:	bd08      	pop	{r3, pc}
   b6b4a:	bf00      	nop
   b6b4c:	2003f400 	.word	0x2003f400
   b6b50:	2003f404 	.word	0x2003f404
   b6b54:	000b80e0 	.word	0x000b80e0
   b6b58:	2003f400 	.word	0x2003f400
   b6b5c:	9a271c1e 	.word	0x9a271c1e

000b6b60 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b6b60:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6b62:	2300      	movs	r3, #0
   b6b64:	9300      	str	r3, [sp, #0]
   b6b66:	461a      	mov	r2, r3
   b6b68:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6b6c:	f7fe fbee 	bl	b534c <system_ctrl_set_result>
}
   b6b70:	b003      	add	sp, #12
   b6b72:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6b78 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b6b78:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b6b7a:	8843      	ldrh	r3, [r0, #2]
   b6b7c:	2b0a      	cmp	r3, #10
   b6b7e:	d008      	beq.n	b6b92 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6b80:	2b50      	cmp	r3, #80	; 0x50
   b6b82:	d10b      	bne.n	b6b9c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b6b84:	4b09      	ldr	r3, [pc, #36]	; (b6bac <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b6b86:	681b      	ldr	r3, [r3, #0]
   b6b88:	b14b      	cbz	r3, b6b9e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b6b8a:	b003      	add	sp, #12
   b6b8c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6b90:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b6b92:	f7ff ffe5 	bl	b6b60 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b6b96:	b003      	add	sp, #12
   b6b98:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6b9c:	2300      	movs	r3, #0
   b6b9e:	9300      	str	r3, [sp, #0]
   b6ba0:	461a      	mov	r2, r3
   b6ba2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6ba6:	f7fe fbd1 	bl	b534c <system_ctrl_set_result>
}
   b6baa:	e7f4      	b.n	b6b96 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6bac:	2003e6f0 	.word	0x2003e6f0

000b6bb0 <module_user_init_hook>:
{
   b6bb0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b6bb2:	4812      	ldr	r0, [pc, #72]	; (b6bfc <module_user_init_hook+0x4c>)
   b6bb4:	2100      	movs	r1, #0
   b6bb6:	f7fe fc73 	bl	b54a0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b6bba:	4b11      	ldr	r3, [pc, #68]	; (b6c00 <module_user_init_hook+0x50>)
   b6bbc:	681a      	ldr	r2, [r3, #0]
   b6bbe:	4b11      	ldr	r3, [pc, #68]	; (b6c04 <module_user_init_hook+0x54>)
   b6bc0:	429a      	cmp	r2, r3
   b6bc2:	4b11      	ldr	r3, [pc, #68]	; (b6c08 <module_user_init_hook+0x58>)
   b6bc4:	bf0c      	ite	eq
   b6bc6:	2201      	moveq	r2, #1
   b6bc8:	2200      	movne	r2, #0
   b6bca:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6bcc:	d001      	beq.n	b6bd2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b6bce:	f7ff ffb1 	bl	b6b34 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b6bd2:	f7fe fa41 	bl	b5058 <HAL_RNG_GetRandomNumber>
   b6bd6:	4604      	mov	r4, r0
    srand(seed);
   b6bd8:	f000 fce0 	bl	b759c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6bdc:	4b0b      	ldr	r3, [pc, #44]	; (b6c0c <module_user_init_hook+0x5c>)
   b6bde:	b113      	cbz	r3, b6be6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6be0:	4620      	mov	r0, r4
   b6be2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b6be6:	2100      	movs	r1, #0
   b6be8:	4808      	ldr	r0, [pc, #32]	; (b6c0c <module_user_init_hook+0x5c>)
   b6bea:	f7fe fc19 	bl	b5420 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b6bee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b6bf2:	4807      	ldr	r0, [pc, #28]	; (b6c10 <module_user_init_hook+0x60>)
   b6bf4:	2100      	movs	r1, #0
   b6bf6:	f7fe bb9f 	b.w	b5338 <system_ctrl_set_app_request_handler>
   b6bfa:	bf00      	nop
   b6bfc:	000b6add 	.word	0x000b6add
   b6c00:	2003f400 	.word	0x2003f400
   b6c04:	9a271c1e 	.word	0x9a271c1e
   b6c08:	2003e6ec 	.word	0x2003e6ec
   b6c0c:	00000000 	.word	0x00000000
   b6c10:	000b6b79 	.word	0x000b6b79

000b6c14 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6c14:	4770      	bx	lr

000b6c16 <_ZN9IPAddressD0Ev>:
   b6c16:	b510      	push	{r4, lr}
   b6c18:	2118      	movs	r1, #24
   b6c1a:	4604      	mov	r4, r0
   b6c1c:	f7fd fa3d 	bl	b409a <_ZdlPvj>
   b6c20:	4620      	mov	r0, r4
   b6c22:	bd10      	pop	{r4, pc}

000b6c24 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6c24:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b6c26:	7d03      	ldrb	r3, [r0, #20]
   b6c28:	2b06      	cmp	r3, #6
{
   b6c2a:	b08d      	sub	sp, #52	; 0x34
   b6c2c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6c2e:	f100 0704 	add.w	r7, r0, #4
   b6c32:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b6c36:	d012      	beq.n	b6c5e <_ZNK9IPAddress7printToER5Print+0x3a>
   b6c38:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6c3c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6c40:	220a      	movs	r2, #10
   b6c42:	4630      	mov	r0, r6
   b6c44:	f7ff feab 	bl	b699e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6c48:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b6c4a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6c4c:	d019      	beq.n	b6c82 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b6c4e:	2c00      	cmp	r4, #0
   b6c50:	d0f4      	beq.n	b6c3c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6c52:	212e      	movs	r1, #46	; 0x2e
   b6c54:	4630      	mov	r0, r6
   b6c56:	f7ff fe93 	bl	b6980 <_ZN5Print5printEc>
   b6c5a:	4404      	add	r4, r0
   b6c5c:	e7ee      	b.n	b6c3c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6c5e:	232f      	movs	r3, #47	; 0x2f
   b6c60:	466a      	mov	r2, sp
   b6c62:	4639      	mov	r1, r7
   b6c64:	200a      	movs	r0, #10
		buf[0] = 0;
   b6c66:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6c6a:	f7fe fa75 	bl	b5158 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6c6e:	4668      	mov	r0, sp
   b6c70:	f000 fcd4 	bl	b761c <strlen>
   b6c74:	6833      	ldr	r3, [r6, #0]
   b6c76:	4602      	mov	r2, r0
   b6c78:	68db      	ldr	r3, [r3, #12]
   b6c7a:	4669      	mov	r1, sp
   b6c7c:	4630      	mov	r0, r6
   b6c7e:	4798      	blx	r3
   b6c80:	4604      	mov	r4, r0
    }
    return n;
}
   b6c82:	4620      	mov	r0, r4
   b6c84:	b00d      	add	sp, #52	; 0x34
   b6c86:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6c88 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6c88:	b510      	push	{r4, lr}
   b6c8a:	4b05      	ldr	r3, [pc, #20]	; (b6ca0 <_ZN9IPAddressC1Ev+0x18>)
   b6c8c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6c8e:	2211      	movs	r2, #17
   b6c90:	f840 3b04 	str.w	r3, [r0], #4
   b6c94:	2100      	movs	r1, #0
   b6c96:	f000 fc79 	bl	b758c <memset>
}
   b6c9a:	4620      	mov	r0, r4
   b6c9c:	bd10      	pop	{r4, pc}
   b6c9e:	bf00      	nop
   b6ca0:	000b7d18 	.word	0x000b7d18

000b6ca4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6ca4:	4603      	mov	r3, r0
   b6ca6:	4a07      	ldr	r2, [pc, #28]	; (b6cc4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6ca8:	b510      	push	{r4, lr}
   b6caa:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6cae:	f101 0210 	add.w	r2, r1, #16
   b6cb2:	f851 4b04 	ldr.w	r4, [r1], #4
   b6cb6:	f843 4b04 	str.w	r4, [r3], #4
   b6cba:	4291      	cmp	r1, r2
   b6cbc:	d1f9      	bne.n	b6cb2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6cbe:	780a      	ldrb	r2, [r1, #0]
   b6cc0:	701a      	strb	r2, [r3, #0]
}
   b6cc2:	bd10      	pop	{r4, pc}
   b6cc4:	000b7d18 	.word	0x000b7d18

000b6cc8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b6cc8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b6cca:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b6cce:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b6cd2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b6cd6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b6cda:	2304      	movs	r3, #4
   b6cdc:	6041      	str	r1, [r0, #4]
   b6cde:	7503      	strb	r3, [r0, #20]
}
   b6ce0:	bd10      	pop	{r4, pc}
	...

000b6ce4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6ce4:	b507      	push	{r0, r1, r2, lr}
   b6ce6:	4b06      	ldr	r3, [pc, #24]	; (b6d00 <_ZN9IPAddressC1EPKh+0x1c>)
   b6ce8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b6cea:	78cb      	ldrb	r3, [r1, #3]
   b6cec:	9300      	str	r3, [sp, #0]
   b6cee:	788b      	ldrb	r3, [r1, #2]
   b6cf0:	784a      	ldrb	r2, [r1, #1]
   b6cf2:	7809      	ldrb	r1, [r1, #0]
   b6cf4:	f7ff ffe8 	bl	b6cc8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6cf8:	b003      	add	sp, #12
   b6cfa:	f85d fb04 	ldr.w	pc, [sp], #4
   b6cfe:	bf00      	nop
   b6d00:	000b7d18 	.word	0x000b7d18

000b6d04 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6d04:	7441      	strb	r1, [r0, #17]
}
   b6d06:	4770      	bx	lr

000b6d08 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6d08:	4770      	bx	lr

000b6d0a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b6d0a:	4770      	bx	lr

000b6d0c <_ZN9USBSerial4readEv>:
{
   b6d0c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b6d0e:	2100      	movs	r1, #0
   b6d10:	7c00      	ldrb	r0, [r0, #16]
   b6d12:	f7fe fad9 	bl	b52c8 <HAL_USB_USART_Receive_Data>
}
   b6d16:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6d1a:	bd08      	pop	{r3, pc}

000b6d1c <_ZN9USBSerial4peekEv>:
{
   b6d1c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b6d1e:	2101      	movs	r1, #1
   b6d20:	7c00      	ldrb	r0, [r0, #16]
   b6d22:	f7fe fad1 	bl	b52c8 <HAL_USB_USART_Receive_Data>
}
   b6d26:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6d2a:	bd08      	pop	{r3, pc}

000b6d2c <_ZN9USBSerial17availableForWriteEv>:
{
   b6d2c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b6d2e:	7c00      	ldrb	r0, [r0, #16]
   b6d30:	f7fe fac2 	bl	b52b8 <HAL_USB_USART_Available_Data_For_Write>
}
   b6d34:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6d38:	bd08      	pop	{r3, pc}

000b6d3a <_ZN9USBSerial9availableEv>:
{
   b6d3a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6d3c:	7c00      	ldrb	r0, [r0, #16]
   b6d3e:	f7fe fab3 	bl	b52a8 <HAL_USB_USART_Available_Data>
}
   b6d42:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6d46:	bd08      	pop	{r3, pc}

000b6d48 <_ZN9USBSerial5writeEh>:
{
   b6d48:	b513      	push	{r0, r1, r4, lr}
   b6d4a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6d4c:	7c00      	ldrb	r0, [r0, #16]
{
   b6d4e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6d50:	f7fe fab2 	bl	b52b8 <HAL_USB_USART_Available_Data_For_Write>
   b6d54:	2800      	cmp	r0, #0
   b6d56:	9901      	ldr	r1, [sp, #4]
   b6d58:	dc01      	bgt.n	b6d5e <_ZN9USBSerial5writeEh+0x16>
   b6d5a:	7c60      	ldrb	r0, [r4, #17]
   b6d5c:	b120      	cbz	r0, b6d68 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b6d5e:	7c20      	ldrb	r0, [r4, #16]
   b6d60:	f7fe faba 	bl	b52d8 <HAL_USB_USART_Send_Data>
   b6d64:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6d68:	b002      	add	sp, #8
   b6d6a:	bd10      	pop	{r4, pc}

000b6d6c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6d6c:	7c00      	ldrb	r0, [r0, #16]
   b6d6e:	f7fe babb 	b.w	b52e8 <HAL_USB_USART_Flush_Data>

000b6d72 <_ZN9USBSerialD0Ev>:
   b6d72:	b510      	push	{r4, lr}
   b6d74:	2114      	movs	r1, #20
   b6d76:	4604      	mov	r4, r0
   b6d78:	f7fd f98f 	bl	b409a <_ZdlPvj>
   b6d7c:	4620      	mov	r0, r4
   b6d7e:	bd10      	pop	{r4, pc}

000b6d80 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6d80:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6d86:	4604      	mov	r4, r0
   b6d88:	4608      	mov	r0, r1
   b6d8a:	2100      	movs	r1, #0
   b6d8c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6d90:	4b04      	ldr	r3, [pc, #16]	; (b6da4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b6d92:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6d94:	2301      	movs	r3, #1
  _serial = serial;
   b6d96:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6d98:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b6d9a:	4611      	mov	r1, r2
   b6d9c:	f7fe fa74 	bl	b5288 <HAL_USB_USART_Init>
}
   b6da0:	4620      	mov	r0, r4
   b6da2:	bd10      	pop	{r4, pc}
   b6da4:	000b7d2c 	.word	0x000b7d2c

000b6da8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b6da8:	7c00      	ldrb	r0, [r0, #16]
   b6daa:	2200      	movs	r2, #0
   b6dac:	f7fe ba74 	b.w	b5298 <HAL_USB_USART_Begin>

000b6db0 <_Z19acquireSerialBufferv>:
{
   b6db0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b6db2:	2214      	movs	r2, #20
{
   b6db4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b6db6:	2100      	movs	r1, #0
   b6db8:	f000 fbe8 	bl	b758c <memset>
}
   b6dbc:	4620      	mov	r0, r4
   b6dbe:	bd10      	pop	{r4, pc}

000b6dc0 <_Z16_fetch_usbserialv>:
{
   b6dc0:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6dc2:	4c0f      	ldr	r4, [pc, #60]	; (b6e00 <_Z16_fetch_usbserialv+0x40>)
{
   b6dc4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b6dc6:	a803      	add	r0, sp, #12
   b6dc8:	f7ff fff2 	bl	b6db0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6dcc:	7821      	ldrb	r1, [r4, #0]
   b6dce:	f3bf 8f5b 	dmb	ish
   b6dd2:	f011 0101 	ands.w	r1, r1, #1
   b6dd6:	d10f      	bne.n	b6df8 <_Z16_fetch_usbserialv+0x38>
   b6dd8:	4620      	mov	r0, r4
   b6dda:	9101      	str	r1, [sp, #4]
   b6ddc:	f7fd f95f 	bl	b409e <__cxa_guard_acquire>
   b6de0:	9901      	ldr	r1, [sp, #4]
   b6de2:	b148      	cbz	r0, b6df8 <_Z16_fetch_usbserialv+0x38>
   b6de4:	aa03      	add	r2, sp, #12
   b6de6:	4807      	ldr	r0, [pc, #28]	; (b6e04 <_Z16_fetch_usbserialv+0x44>)
   b6de8:	f7ff ffca 	bl	b6d80 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6dec:	4620      	mov	r0, r4
   b6dee:	f7fd f95b 	bl	b40a8 <__cxa_guard_release>
   b6df2:	4805      	ldr	r0, [pc, #20]	; (b6e08 <_Z16_fetch_usbserialv+0x48>)
   b6df4:	f000 fb88 	bl	b7508 <atexit>
	return _usbserial;
}
   b6df8:	4802      	ldr	r0, [pc, #8]	; (b6e04 <_Z16_fetch_usbserialv+0x44>)
   b6dfa:	b008      	add	sp, #32
   b6dfc:	bd10      	pop	{r4, pc}
   b6dfe:	bf00      	nop
   b6e00:	2003e6f4 	.word	0x2003e6f4
   b6e04:	2003e6f8 	.word	0x2003e6f8
   b6e08:	000b6d09 	.word	0x000b6d09

000b6e0c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6e0c:	4770      	bx	lr

000b6e0e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6e0e:	7441      	strb	r1, [r0, #17]
}
   b6e10:	4770      	bx	lr

000b6e12 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b6e12:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6e14:	7c00      	ldrb	r0, [r0, #16]
   b6e16:	f7fe f9d7 	bl	b51c8 <hal_usart_available_data_for_write>
}
   b6e1a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6e1e:	bd08      	pop	{r3, pc}

000b6e20 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6e20:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b6e22:	7c00      	ldrb	r0, [r0, #16]
   b6e24:	f7fe f9a8 	bl	b5178 <hal_usart_available>
}
   b6e28:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6e2c:	bd08      	pop	{r3, pc}

000b6e2e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6e2e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6e30:	7c00      	ldrb	r0, [r0, #16]
   b6e32:	f7fe f9b1 	bl	b5198 <hal_usart_peek>
}
   b6e36:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6e3a:	bd08      	pop	{r3, pc}

000b6e3c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6e3c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6e3e:	7c00      	ldrb	r0, [r0, #16]
   b6e40:	f7fe f9a2 	bl	b5188 <hal_usart_read>
}
   b6e44:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6e48:	bd08      	pop	{r3, pc}

000b6e4a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6e4a:	7c00      	ldrb	r0, [r0, #16]
   b6e4c:	f7fe b9ac 	b.w	b51a8 <hal_usart_flush>

000b6e50 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6e50:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6e52:	7c45      	ldrb	r5, [r0, #17]
{
   b6e54:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6e56:	b12d      	cbz	r5, b6e64 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6e58:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6e5a:	b003      	add	sp, #12
   b6e5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6e60:	f7fe b982 	b.w	b5168 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6e64:	7c00      	ldrb	r0, [r0, #16]
   b6e66:	9101      	str	r1, [sp, #4]
   b6e68:	f7fe f9ae 	bl	b51c8 <hal_usart_available_data_for_write>
   b6e6c:	2800      	cmp	r0, #0
   b6e6e:	9901      	ldr	r1, [sp, #4]
   b6e70:	dcf2      	bgt.n	b6e58 <_ZN11USARTSerial5writeEh+0x8>
}
   b6e72:	4628      	mov	r0, r5
   b6e74:	b003      	add	sp, #12
   b6e76:	bd30      	pop	{r4, r5, pc}

000b6e78 <_ZN11USARTSerialD0Ev>:
   b6e78:	b510      	push	{r4, lr}
   b6e7a:	2114      	movs	r1, #20
   b6e7c:	4604      	mov	r4, r0
   b6e7e:	f7fd f90c 	bl	b409a <_ZdlPvj>
   b6e82:	4620      	mov	r0, r4
   b6e84:	bd10      	pop	{r4, pc}
	...

000b6e88 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6e88:	b510      	push	{r4, lr}
   b6e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6e8e:	4604      	mov	r4, r0
   b6e90:	4608      	mov	r0, r1
   b6e92:	4611      	mov	r1, r2
   b6e94:	2200      	movs	r2, #0
   b6e96:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6e9a:	4b04      	ldr	r3, [pc, #16]	; (b6eac <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6e9c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6e9e:	2301      	movs	r3, #1
  _serial = serial;
   b6ea0:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6ea2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6ea4:	f7fe f9a0 	bl	b51e8 <hal_usart_init_ex>
}
   b6ea8:	4620      	mov	r0, r4
   b6eaa:	bd10      	pop	{r4, pc}
   b6eac:	000b7d5c 	.word	0x000b7d5c

000b6eb0 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b6eb0:	7c00      	ldrb	r0, [r0, #16]
   b6eb2:	2300      	movs	r3, #0
   b6eb4:	f7fe b990 	b.w	b51d8 <hal_usart_begin_config>

000b6eb8 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b6eb8:	2200      	movs	r2, #0
   b6eba:	f7ff bff9 	b.w	b6eb0 <_ZN11USARTSerial5beginEmm>

000b6ebe <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6ebe:	4770      	bx	lr

000b6ec0 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b6ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6ec2:	4606      	mov	r6, r0
   b6ec4:	4615      	mov	r5, r2
   b6ec6:	460c      	mov	r4, r1
   b6ec8:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6eca:	42bc      	cmp	r4, r7
   b6ecc:	d006      	beq.n	b6edc <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6ece:	6833      	ldr	r3, [r6, #0]
   b6ed0:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6ed4:	689b      	ldr	r3, [r3, #8]
   b6ed6:	4630      	mov	r0, r6
   b6ed8:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6eda:	e7f6      	b.n	b6eca <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6edc:	4628      	mov	r0, r5
   b6ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6ee0 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6ee0:	7c00      	ldrb	r0, [r0, #16]
   b6ee2:	2200      	movs	r2, #0
   b6ee4:	f7fe b988 	b.w	b51f8 <hal_i2c_write>

000b6ee8 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b6ee8:	7c00      	ldrb	r0, [r0, #16]
   b6eea:	2100      	movs	r1, #0
   b6eec:	f7fe b98c 	b.w	b5208 <hal_i2c_available>

000b6ef0 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6ef0:	7c00      	ldrb	r0, [r0, #16]
   b6ef2:	2100      	movs	r1, #0
   b6ef4:	f7fe b990 	b.w	b5218 <hal_i2c_read>

000b6ef8 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b6ef8:	7c00      	ldrb	r0, [r0, #16]
   b6efa:	2100      	movs	r1, #0
   b6efc:	f7fe b994 	b.w	b5228 <hal_i2c_peek>

000b6f00 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6f00:	7c00      	ldrb	r0, [r0, #16]
   b6f02:	2100      	movs	r1, #0
   b6f04:	f7fe b998 	b.w	b5238 <hal_i2c_flush>

000b6f08 <_ZN7TwoWireD0Ev>:
   b6f08:	b510      	push	{r4, lr}
   b6f0a:	2114      	movs	r1, #20
   b6f0c:	4604      	mov	r4, r0
   b6f0e:	f7fd f8c4 	bl	b409a <_ZdlPvj>
   b6f12:	4620      	mov	r0, r4
   b6f14:	bd10      	pop	{r4, pc}
	...

000b6f18 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6f18:	b510      	push	{r4, lr}
   b6f1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6f1e:	4604      	mov	r4, r0
   b6f20:	4608      	mov	r0, r1
   b6f22:	2100      	movs	r1, #0
   b6f24:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6f28:	4b03      	ldr	r3, [pc, #12]	; (b6f38 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b6f2a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b6f2c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b6f2e:	4611      	mov	r1, r2
   b6f30:	f7fe f992 	bl	b5258 <hal_i2c_init>
}
   b6f34:	4620      	mov	r0, r4
   b6f36:	bd10      	pop	{r4, pc}
   b6f38:	000b7d8c 	.word	0x000b7d8c

000b6f3c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b6f3c:	2200      	movs	r2, #0
   b6f3e:	6840      	ldr	r0, [r0, #4]
   b6f40:	4611      	mov	r1, r2
   b6f42:	f7fe ba25 	b.w	b5390 <network_ready>

000b6f46 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6f46:	2200      	movs	r2, #0
   b6f48:	6840      	ldr	r0, [r0, #4]
   b6f4a:	4611      	mov	r1, r2
   b6f4c:	f7fe ba40 	b.w	b53d0 <network_listening>

000b6f50 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6f50:	2200      	movs	r2, #0
   b6f52:	6840      	ldr	r0, [r0, #4]
   b6f54:	4611      	mov	r1, r2
   b6f56:	f7fe ba4b 	b.w	b53f0 <network_get_listen_timeout>

000b6f5a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6f5a:	6840      	ldr	r0, [r0, #4]
   b6f5c:	2200      	movs	r2, #0
   b6f5e:	f7fe ba3f 	b.w	b53e0 <network_set_listen_timeout>

000b6f62 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6f62:	6840      	ldr	r0, [r0, #4]
   b6f64:	2200      	movs	r2, #0
   b6f66:	f081 0101 	eor.w	r1, r1, #1
   b6f6a:	f7fe ba29 	b.w	b53c0 <network_listen>

000b6f6e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6f6e:	2300      	movs	r3, #0
   b6f70:	6840      	ldr	r0, [r0, #4]
   b6f72:	461a      	mov	r2, r3
   b6f74:	4619      	mov	r1, r3
   b6f76:	f7fe ba1b 	b.w	b53b0 <network_off>

000b6f7a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6f7a:	2200      	movs	r2, #0
   b6f7c:	6840      	ldr	r0, [r0, #4]
   b6f7e:	4611      	mov	r1, r2
   b6f80:	f7fe b9f6 	b.w	b5370 <network_connecting>

000b6f84 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6f84:	6840      	ldr	r0, [r0, #4]
   b6f86:	2200      	movs	r2, #0
   b6f88:	2102      	movs	r1, #2
   b6f8a:	f7fe b9f9 	b.w	b5380 <network_disconnect>

000b6f8e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6f8e:	2300      	movs	r3, #0
   b6f90:	6840      	ldr	r0, [r0, #4]
   b6f92:	461a      	mov	r2, r3
   b6f94:	f7fe b9e4 	b.w	b5360 <network_connect>

000b6f98 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6f98:	4b02      	ldr	r3, [pc, #8]	; (b6fa4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b6f9a:	2204      	movs	r2, #4
   b6f9c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b6f9e:	4a02      	ldr	r2, [pc, #8]	; (b6fa8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b6fa0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b6fa2:	4770      	bx	lr
   b6fa4:	2003e70c 	.word	0x2003e70c
   b6fa8:	000b7db4 	.word	0x000b7db4

000b6fac <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6fac:	2300      	movs	r3, #0
   b6fae:	6840      	ldr	r0, [r0, #4]
   b6fb0:	461a      	mov	r2, r3
   b6fb2:	f7fe b9d5 	b.w	b5360 <network_connect>

000b6fb6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b6fb6:	6840      	ldr	r0, [r0, #4]
   b6fb8:	2200      	movs	r2, #0
   b6fba:	2102      	movs	r1, #2
   b6fbc:	f7fe b9e0 	b.w	b5380 <network_disconnect>

000b6fc0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6fc0:	2200      	movs	r2, #0
   b6fc2:	6840      	ldr	r0, [r0, #4]
   b6fc4:	4611      	mov	r1, r2
   b6fc6:	f7fe b9d3 	b.w	b5370 <network_connecting>

000b6fca <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b6fca:	2200      	movs	r2, #0
   b6fcc:	6840      	ldr	r0, [r0, #4]
   b6fce:	4611      	mov	r1, r2
   b6fd0:	f7fe b9de 	b.w	b5390 <network_ready>

000b6fd4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6fd4:	2300      	movs	r3, #0
   b6fd6:	6840      	ldr	r0, [r0, #4]
   b6fd8:	461a      	mov	r2, r3
   b6fda:	4619      	mov	r1, r3
   b6fdc:	f7fe b9e0 	b.w	b53a0 <network_on>

000b6fe0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6fe0:	2300      	movs	r3, #0
   b6fe2:	6840      	ldr	r0, [r0, #4]
   b6fe4:	461a      	mov	r2, r3
   b6fe6:	4619      	mov	r1, r3
   b6fe8:	f7fe b9e2 	b.w	b53b0 <network_off>

000b6fec <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6fec:	6840      	ldr	r0, [r0, #4]
   b6fee:	2100      	movs	r1, #0
   b6ff0:	f7fe ba06 	b.w	b5400 <network_is_on>

000b6ff4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6ff4:	6840      	ldr	r0, [r0, #4]
   b6ff6:	2100      	movs	r1, #0
   b6ff8:	f7fe ba0a 	b.w	b5410 <network_is_off>

000b6ffc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6ffc:	6840      	ldr	r0, [r0, #4]
   b6ffe:	2200      	movs	r2, #0
   b7000:	f081 0101 	eor.w	r1, r1, #1
   b7004:	f7fe b9dc 	b.w	b53c0 <network_listen>

000b7008 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b7008:	6840      	ldr	r0, [r0, #4]
   b700a:	2200      	movs	r2, #0
   b700c:	f7fe b9e8 	b.w	b53e0 <network_set_listen_timeout>

000b7010 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b7010:	2200      	movs	r2, #0
   b7012:	6840      	ldr	r0, [r0, #4]
   b7014:	4611      	mov	r1, r2
   b7016:	f7fe b9eb 	b.w	b53f0 <network_get_listen_timeout>

000b701a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b701a:	2200      	movs	r2, #0
   b701c:	6840      	ldr	r0, [r0, #4]
   b701e:	4611      	mov	r1, r2
   b7020:	f7fe b9d6 	b.w	b53d0 <network_listening>

000b7024 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b7024:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7028:	b095      	sub	sp, #84	; 0x54
   b702a:	4614      	mov	r4, r2
   b702c:	460d      	mov	r5, r1
   b702e:	4607      	mov	r7, r0
    IPAddress addr;
   b7030:	f7ff fe2a 	bl	b6c88 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b7034:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b7036:	221c      	movs	r2, #28
   b7038:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b703a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b703c:	f000 faa6 	bl	b758c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b7040:	2340      	movs	r3, #64	; 0x40
   b7042:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b7044:	4620      	mov	r0, r4
   b7046:	466b      	mov	r3, sp
   b7048:	aa0c      	add	r2, sp, #48	; 0x30
   b704a:	2100      	movs	r1, #0
   b704c:	f7fd ffe4 	bl	b5018 <netdb_getaddrinfo>
    if (!r) {
   b7050:	4604      	mov	r4, r0
   b7052:	2800      	cmp	r0, #0
   b7054:	d14b      	bne.n	b70ee <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b7056:	4602      	mov	r2, r0
   b7058:	2101      	movs	r1, #1
   b705a:	6868      	ldr	r0, [r5, #4]
   b705c:	f7fe f998 	bl	b5390 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7060:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b7062:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7064:	4622      	mov	r2, r4
   b7066:	6868      	ldr	r0, [r5, #4]
   b7068:	f7fe f992 	bl	b5390 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b706c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b706e:	4681      	mov	r9, r0
        bool ok = false;
   b7070:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7072:	2e00      	cmp	r6, #0
   b7074:	d03b      	beq.n	b70ee <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b7076:	2900      	cmp	r1, #0
   b7078:	d139      	bne.n	b70ee <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b707a:	6873      	ldr	r3, [r6, #4]
   b707c:	2b02      	cmp	r3, #2
   b707e:	d003      	beq.n	b7088 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b7080:	2b0a      	cmp	r3, #10
   b7082:	d011      	beq.n	b70a8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7084:	69f6      	ldr	r6, [r6, #28]
   b7086:	e7f4      	b.n	b7072 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b7088:	f1b8 0f00 	cmp.w	r8, #0
   b708c:	d0fa      	beq.n	b7084 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b708e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b7090:	a806      	add	r0, sp, #24
   b7092:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b7094:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b7096:	f7ff fe25 	bl	b6ce4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b709a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b709c:	1d3c      	adds	r4, r7, #4
   b709e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b70a0:	682b      	ldr	r3, [r5, #0]
   b70a2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b70a4:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b70a6:	e7ed      	b.n	b7084 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b70a8:	f1b9 0f00 	cmp.w	r9, #0
   b70ac:	d0ea      	beq.n	b7084 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b70ae:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b70b0:	2210      	movs	r2, #16
   b70b2:	a801      	add	r0, sp, #4
   b70b4:	f000 fa6a 	bl	b758c <memset>
                    a.v = 6;
   b70b8:	2306      	movs	r3, #6
   b70ba:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b70be:	ad01      	add	r5, sp, #4
   b70c0:	f104 0308 	add.w	r3, r4, #8
   b70c4:	3418      	adds	r4, #24
   b70c6:	6818      	ldr	r0, [r3, #0]
   b70c8:	6859      	ldr	r1, [r3, #4]
   b70ca:	462a      	mov	r2, r5
   b70cc:	c203      	stmia	r2!, {r0, r1}
   b70ce:	3308      	adds	r3, #8
   b70d0:	42a3      	cmp	r3, r4
   b70d2:	4615      	mov	r5, r2
   b70d4:	d1f7      	bne.n	b70c6 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b70d6:	a901      	add	r1, sp, #4
   b70d8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b70da:	ad07      	add	r5, sp, #28
   b70dc:	f7ff fde2 	bl	b6ca4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b70e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b70e2:	1d3c      	adds	r4, r7, #4
   b70e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b70e6:	682b      	ldr	r3, [r5, #0]
   b70e8:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b70ea:	4649      	mov	r1, r9
   b70ec:	e7ca      	b.n	b7084 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b70ee:	9800      	ldr	r0, [sp, #0]
   b70f0:	f7fd ff8a 	bl	b5008 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b70f4:	4638      	mov	r0, r7
   b70f6:	b015      	add	sp, #84	; 0x54
   b70f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b70fc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b70fc:	4b02      	ldr	r3, [pc, #8]	; (b7108 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b70fe:	4a03      	ldr	r2, [pc, #12]	; (b710c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b7100:	601a      	str	r2, [r3, #0]
   b7102:	2200      	movs	r2, #0
   b7104:	605a      	str	r2, [r3, #4]

} // spark
   b7106:	4770      	bx	lr
   b7108:	2003e714 	.word	0x2003e714
   b710c:	000b7df0 	.word	0x000b7df0

000b7110 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b7110:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b7112:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b7114:	d902      	bls.n	b711c <pinAvailable+0xc>
    return false;
   b7116:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7118:	b002      	add	sp, #8
   b711a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b711c:	f1a0 030b 	sub.w	r3, r0, #11
   b7120:	2b02      	cmp	r3, #2
   b7122:	d81a      	bhi.n	b715a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b7124:	4c17      	ldr	r4, [pc, #92]	; (b7184 <pinAvailable+0x74>)
   b7126:	7821      	ldrb	r1, [r4, #0]
   b7128:	f3bf 8f5b 	dmb	ish
   b712c:	f011 0101 	ands.w	r1, r1, #1
   b7130:	d10b      	bne.n	b714a <pinAvailable+0x3a>
   b7132:	4620      	mov	r0, r4
   b7134:	9101      	str	r1, [sp, #4]
   b7136:	f7fc ffb2 	bl	b409e <__cxa_guard_acquire>
   b713a:	9901      	ldr	r1, [sp, #4]
   b713c:	b128      	cbz	r0, b714a <pinAvailable+0x3a>
   b713e:	4812      	ldr	r0, [pc, #72]	; (b7188 <pinAvailable+0x78>)
   b7140:	f7fe f9f4 	bl	b552c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7144:	4620      	mov	r0, r4
   b7146:	f7fc ffaf 	bl	b40a8 <__cxa_guard_release>
   b714a:	4b0f      	ldr	r3, [pc, #60]	; (b7188 <pinAvailable+0x78>)
   b714c:	7818      	ldrb	r0, [r3, #0]
   b714e:	f7fe f893 	bl	b5278 <hal_spi_is_enabled>
   b7152:	2800      	cmp	r0, #0
   b7154:	d1df      	bne.n	b7116 <pinAvailable+0x6>
  return true; // 'pin' is available
   b7156:	2001      	movs	r0, #1
   b7158:	e7de      	b.n	b7118 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b715a:	2801      	cmp	r0, #1
   b715c:	d809      	bhi.n	b7172 <pinAvailable+0x62>
   b715e:	f000 f897 	bl	b7290 <_Z19__fetch_global_Wirev>
   b7162:	2100      	movs	r1, #0
   b7164:	7c00      	ldrb	r0, [r0, #16]
   b7166:	f7fe f86f 	bl	b5248 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b716a:	f080 0001 	eor.w	r0, r0, #1
   b716e:	b2c0      	uxtb	r0, r0
   b7170:	e7d2      	b.n	b7118 <pinAvailable+0x8>
   b7172:	3809      	subs	r0, #9
   b7174:	2801      	cmp	r0, #1
   b7176:	d8ee      	bhi.n	b7156 <pinAvailable+0x46>
   b7178:	f000 f84e 	bl	b7218 <_Z22__fetch_global_Serial1v>
   b717c:	7c00      	ldrb	r0, [r0, #16]
   b717e:	f7fe f81b 	bl	b51b8 <hal_usart_is_enabled>
   b7182:	e7f2      	b.n	b716a <pinAvailable+0x5a>
   b7184:	2003e71c 	.word	0x2003e71c
   b7188:	2003e720 	.word	0x2003e720

000b718c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b718c:	2823      	cmp	r0, #35	; 0x23
{
   b718e:	b538      	push	{r3, r4, r5, lr}
   b7190:	4604      	mov	r4, r0
   b7192:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7194:	d80a      	bhi.n	b71ac <pinMode+0x20>
   b7196:	29ff      	cmp	r1, #255	; 0xff
   b7198:	d008      	beq.n	b71ac <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b719a:	f7ff ffb9 	bl	b7110 <pinAvailable>
   b719e:	b128      	cbz	r0, b71ac <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b71a0:	4629      	mov	r1, r5
   b71a2:	4620      	mov	r0, r4
}
   b71a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b71a8:	f7fd bf3e 	b.w	b5028 <HAL_Pin_Mode>
}
   b71ac:	bd38      	pop	{r3, r4, r5, pc}

000b71ae <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b71ae:	b538      	push	{r3, r4, r5, lr}
   b71b0:	4604      	mov	r4, r0
   b71b2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b71b4:	f7fd ff40 	bl	b5038 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b71b8:	28ff      	cmp	r0, #255	; 0xff
   b71ba:	d010      	beq.n	b71de <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b71bc:	2806      	cmp	r0, #6
   b71be:	d804      	bhi.n	b71ca <digitalWrite+0x1c>
   b71c0:	234d      	movs	r3, #77	; 0x4d
   b71c2:	fa23 f000 	lsr.w	r0, r3, r0
   b71c6:	07c3      	lsls	r3, r0, #31
   b71c8:	d409      	bmi.n	b71de <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b71ca:	4620      	mov	r0, r4
   b71cc:	f7ff ffa0 	bl	b7110 <pinAvailable>
   b71d0:	b128      	cbz	r0, b71de <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b71d2:	4629      	mov	r1, r5
   b71d4:	4620      	mov	r0, r4
}
   b71d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b71da:	f7fd bf35 	b.w	b5048 <HAL_GPIO_Write>
}
   b71de:	bd38      	pop	{r3, r4, r5, pc}

000b71e0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b71e0:	4770      	bx	lr
	...

000b71e4 <_Z20acquireSerial1Bufferv>:
{
   b71e4:	b538      	push	{r3, r4, r5, lr}
   b71e6:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b71e8:	2514      	movs	r5, #20
   b71ea:	462a      	mov	r2, r5
   b71ec:	2100      	movs	r1, #0
   b71ee:	f000 f9cd 	bl	b758c <memset>
   b71f2:	8025      	strh	r5, [r4, #0]
   b71f4:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b71f6:	4907      	ldr	r1, [pc, #28]	; (b7214 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b71f8:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b71fa:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b71fc:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b71fe:	f000 f86b 	bl	b72d8 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7202:	4904      	ldr	r1, [pc, #16]	; (b7214 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b7204:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7206:	4628      	mov	r0, r5
   b7208:	f000 f866 	bl	b72d8 <_ZnajRKSt9nothrow_t>
    };
   b720c:	60e0      	str	r0, [r4, #12]
}
   b720e:	4620      	mov	r0, r4
   b7210:	bd38      	pop	{r3, r4, r5, pc}
   b7212:	bf00      	nop
   b7214:	000b7e24 	.word	0x000b7e24

000b7218 <_Z22__fetch_global_Serial1v>:
{
   b7218:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b721a:	4d0e      	ldr	r5, [pc, #56]	; (b7254 <_Z22__fetch_global_Serial1v+0x3c>)
   b721c:	7829      	ldrb	r1, [r5, #0]
   b721e:	f3bf 8f5b 	dmb	ish
   b7222:	f011 0401 	ands.w	r4, r1, #1
{
   b7226:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7228:	d111      	bne.n	b724e <_Z22__fetch_global_Serial1v+0x36>
   b722a:	4628      	mov	r0, r5
   b722c:	f7fc ff37 	bl	b409e <__cxa_guard_acquire>
   b7230:	b168      	cbz	r0, b724e <_Z22__fetch_global_Serial1v+0x36>
   b7232:	a801      	add	r0, sp, #4
   b7234:	f7ff ffd6 	bl	b71e4 <_Z20acquireSerial1Bufferv>
   b7238:	aa01      	add	r2, sp, #4
   b723a:	4621      	mov	r1, r4
   b723c:	4806      	ldr	r0, [pc, #24]	; (b7258 <_Z22__fetch_global_Serial1v+0x40>)
   b723e:	f7ff fe23 	bl	b6e88 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b7242:	4628      	mov	r0, r5
   b7244:	f7fc ff30 	bl	b40a8 <__cxa_guard_release>
   b7248:	4804      	ldr	r0, [pc, #16]	; (b725c <_Z22__fetch_global_Serial1v+0x44>)
   b724a:	f000 f95d 	bl	b7508 <atexit>
    return serial1;
}
   b724e:	4802      	ldr	r0, [pc, #8]	; (b7258 <_Z22__fetch_global_Serial1v+0x40>)
   b7250:	b007      	add	sp, #28
   b7252:	bd30      	pop	{r4, r5, pc}
   b7254:	2003e728 	.word	0x2003e728
   b7258:	2003e72c 	.word	0x2003e72c
   b725c:	000b71e1 	.word	0x000b71e1

000b7260 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7260:	4770      	bx	lr
	...

000b7264 <_Z17acquireWireBufferv>:
{
   b7264:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b7266:	2520      	movs	r5, #32
   b7268:	2314      	movs	r3, #20
{
   b726a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b726c:	6003      	str	r3, [r0, #0]
   b726e:	6085      	str	r5, [r0, #8]
   b7270:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b7272:	4906      	ldr	r1, [pc, #24]	; (b728c <_Z17acquireWireBufferv+0x28>)
   b7274:	4628      	mov	r0, r5
   b7276:	f000 f82f 	bl	b72d8 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b727a:	4904      	ldr	r1, [pc, #16]	; (b728c <_Z17acquireWireBufferv+0x28>)
	};
   b727c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b727e:	4628      	mov	r0, r5
   b7280:	f000 f82a 	bl	b72d8 <_ZnajRKSt9nothrow_t>
	};
   b7284:	60e0      	str	r0, [r4, #12]
}
   b7286:	4620      	mov	r0, r4
   b7288:	bd38      	pop	{r3, r4, r5, pc}
   b728a:	bf00      	nop
   b728c:	000b7e24 	.word	0x000b7e24

000b7290 <_Z19__fetch_global_Wirev>:
{
   b7290:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7292:	4d0e      	ldr	r5, [pc, #56]	; (b72cc <_Z19__fetch_global_Wirev+0x3c>)
   b7294:	7829      	ldrb	r1, [r5, #0]
   b7296:	f3bf 8f5b 	dmb	ish
   b729a:	f011 0401 	ands.w	r4, r1, #1
{
   b729e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b72a0:	d111      	bne.n	b72c6 <_Z19__fetch_global_Wirev+0x36>
   b72a2:	4628      	mov	r0, r5
   b72a4:	f7fc fefb 	bl	b409e <__cxa_guard_acquire>
   b72a8:	b168      	cbz	r0, b72c6 <_Z19__fetch_global_Wirev+0x36>
   b72aa:	a801      	add	r0, sp, #4
   b72ac:	f7ff ffda 	bl	b7264 <_Z17acquireWireBufferv>
   b72b0:	aa01      	add	r2, sp, #4
   b72b2:	4621      	mov	r1, r4
   b72b4:	4806      	ldr	r0, [pc, #24]	; (b72d0 <_Z19__fetch_global_Wirev+0x40>)
   b72b6:	f7ff fe2f 	bl	b6f18 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b72ba:	4628      	mov	r0, r5
   b72bc:	f7fc fef4 	bl	b40a8 <__cxa_guard_release>
   b72c0:	4804      	ldr	r0, [pc, #16]	; (b72d4 <_Z19__fetch_global_Wirev+0x44>)
   b72c2:	f000 f921 	bl	b7508 <atexit>
	return wire;
}
   b72c6:	4802      	ldr	r0, [pc, #8]	; (b72d0 <_Z19__fetch_global_Wirev+0x40>)
   b72c8:	b007      	add	sp, #28
   b72ca:	bd30      	pop	{r4, r5, pc}
   b72cc:	2003e744 	.word	0x2003e744
   b72d0:	2003e748 	.word	0x2003e748
   b72d4:	000b7261 	.word	0x000b7261

000b72d8 <_ZnajRKSt9nothrow_t>:
   b72d8:	f7fc bedd 	b.w	b4096 <_Znaj>

000b72dc <_ZSt25__throw_bad_function_callv>:
   b72dc:	b508      	push	{r3, lr}
   b72de:	f7fe f8c7 	bl	b5470 <abort>
	...

000b72e4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b72e4:	4901      	ldr	r1, [pc, #4]	; (b72ec <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b72e6:	f000 b8f9 	b.w	b74dc <_ZNKSt9type_infoeqERKS_>
   b72ea:	bf00      	nop
   b72ec:	000b7e40 	.word	0x000b7e40

000b72f0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b72f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b72f2:	2400      	movs	r4, #0
   b72f4:	2310      	movs	r3, #16
   b72f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b72fa:	6803      	ldr	r3, [r0, #0]
   b72fc:	4615      	mov	r5, r2
   b72fe:	699e      	ldr	r6, [r3, #24]
   b7300:	6812      	ldr	r2, [r2, #0]
   b7302:	466b      	mov	r3, sp
   b7304:	e9cd 4400 	strd	r4, r4, [sp]
   b7308:	47b0      	blx	r6
   b730a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b730e:	f003 0306 	and.w	r3, r3, #6
   b7312:	2b06      	cmp	r3, #6
   b7314:	bf03      	ittte	eq
   b7316:	9b00      	ldreq	r3, [sp, #0]
   b7318:	602b      	streq	r3, [r5, #0]
   b731a:	2001      	moveq	r0, #1
   b731c:	4620      	movne	r0, r4
   b731e:	b004      	add	sp, #16
   b7320:	bd70      	pop	{r4, r5, r6, pc}

000b7322 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b7322:	9800      	ldr	r0, [sp, #0]
   b7324:	4290      	cmp	r0, r2
   b7326:	bf14      	ite	ne
   b7328:	2001      	movne	r0, #1
   b732a:	2006      	moveq	r0, #6
   b732c:	4770      	bx	lr
	...

000b7330 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b7330:	b510      	push	{r4, lr}
   b7332:	4b03      	ldr	r3, [pc, #12]	; (b7340 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b7334:	6003      	str	r3, [r0, #0]
   b7336:	4604      	mov	r4, r0
   b7338:	f000 f8cd 	bl	b74d6 <_ZNSt9type_infoD1Ev>
   b733c:	4620      	mov	r0, r4
   b733e:	bd10      	pop	{r4, pc}
   b7340:	000b7e80 	.word	0x000b7e80

000b7344 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b7344:	b510      	push	{r4, lr}
   b7346:	4604      	mov	r4, r0
   b7348:	f7ff fff2 	bl	b7330 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b734c:	4620      	mov	r0, r4
   b734e:	2108      	movs	r1, #8
   b7350:	f7fc fea3 	bl	b409a <_ZdlPvj>
   b7354:	4620      	mov	r0, r4
   b7356:	bd10      	pop	{r4, pc}

000b7358 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b7358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b735c:	461f      	mov	r7, r3
   b735e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b7362:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b7366:	4598      	cmp	r8, r3
   b7368:	4606      	mov	r6, r0
   b736a:	4615      	mov	r5, r2
   b736c:	d107      	bne.n	b737e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b736e:	9907      	ldr	r1, [sp, #28]
   b7370:	f000 f8b4 	bl	b74dc <_ZNKSt9type_infoeqERKS_>
   b7374:	b118      	cbz	r0, b737e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7376:	7165      	strb	r5, [r4, #5]
   b7378:	2000      	movs	r0, #0
   b737a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b737e:	4639      	mov	r1, r7
   b7380:	4630      	mov	r0, r6
   b7382:	f000 f8ab 	bl	b74dc <_ZNKSt9type_infoeqERKS_>
   b7386:	2800      	cmp	r0, #0
   b7388:	d0f6      	beq.n	b7378 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b738a:	2301      	movs	r3, #1
   b738c:	f8c4 8000 	str.w	r8, [r4]
   b7390:	7125      	strb	r5, [r4, #4]
   b7392:	71a3      	strb	r3, [r4, #6]
   b7394:	e7f0      	b.n	b7378 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b7396 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b7396:	b538      	push	{r3, r4, r5, lr}
   b7398:	4615      	mov	r5, r2
   b739a:	461c      	mov	r4, r3
   b739c:	f000 f89e 	bl	b74dc <_ZNKSt9type_infoeqERKS_>
   b73a0:	b120      	cbz	r0, b73ac <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b73a2:	2308      	movs	r3, #8
   b73a4:	60e3      	str	r3, [r4, #12]
   b73a6:	2306      	movs	r3, #6
   b73a8:	6025      	str	r5, [r4, #0]
   b73aa:	7123      	strb	r3, [r4, #4]
   b73ac:	bd38      	pop	{r3, r4, r5, pc}

000b73ae <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b73ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b73b0:	4605      	mov	r5, r0
   b73b2:	460c      	mov	r4, r1
   b73b4:	9201      	str	r2, [sp, #4]
   b73b6:	461e      	mov	r6, r3
   b73b8:	f000 f890 	bl	b74dc <_ZNKSt9type_infoeqERKS_>
   b73bc:	b950      	cbnz	r0, b73d4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b73be:	2e03      	cmp	r6, #3
   b73c0:	d808      	bhi.n	b73d4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b73c2:	6823      	ldr	r3, [r4, #0]
   b73c4:	9a01      	ldr	r2, [sp, #4]
   b73c6:	695b      	ldr	r3, [r3, #20]
   b73c8:	4629      	mov	r1, r5
   b73ca:	4620      	mov	r0, r4
   b73cc:	b002      	add	sp, #8
   b73ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b73d2:	4718      	bx	r3
   b73d4:	b002      	add	sp, #8
   b73d6:	bd70      	pop	{r4, r5, r6, pc}

000b73d8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b73d8:	b510      	push	{r4, lr}
   b73da:	4b03      	ldr	r3, [pc, #12]	; (b73e8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b73dc:	6003      	str	r3, [r0, #0]
   b73de:	4604      	mov	r4, r0
   b73e0:	f7ff ffa6 	bl	b7330 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b73e4:	4620      	mov	r0, r4
   b73e6:	bd10      	pop	{r4, pc}
   b73e8:	000b7ee0 	.word	0x000b7ee0

000b73ec <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b73ec:	b510      	push	{r4, lr}
   b73ee:	4604      	mov	r4, r0
   b73f0:	f7ff fff2 	bl	b73d8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b73f4:	4620      	mov	r0, r4
   b73f6:	210c      	movs	r1, #12
   b73f8:	f7fc fe4f 	bl	b409a <_ZdlPvj>
   b73fc:	4620      	mov	r0, r4
   b73fe:	bd10      	pop	{r4, pc}

000b7400 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b7400:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7402:	9f08      	ldr	r7, [sp, #32]
   b7404:	4297      	cmp	r7, r2
   b7406:	4605      	mov	r5, r0
   b7408:	460e      	mov	r6, r1
   b740a:	4614      	mov	r4, r2
   b740c:	d00a      	beq.n	b7424 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b740e:	68a8      	ldr	r0, [r5, #8]
   b7410:	6802      	ldr	r2, [r0, #0]
   b7412:	9708      	str	r7, [sp, #32]
   b7414:	6a15      	ldr	r5, [r2, #32]
   b7416:	4631      	mov	r1, r6
   b7418:	4622      	mov	r2, r4
   b741a:	46ac      	mov	ip, r5
   b741c:	b003      	add	sp, #12
   b741e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b7422:	4760      	bx	ip
   b7424:	4619      	mov	r1, r3
   b7426:	9301      	str	r3, [sp, #4]
   b7428:	f000 f858 	bl	b74dc <_ZNKSt9type_infoeqERKS_>
   b742c:	9b01      	ldr	r3, [sp, #4]
   b742e:	2800      	cmp	r0, #0
   b7430:	d0ed      	beq.n	b740e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b7432:	2006      	movs	r0, #6
   b7434:	b003      	add	sp, #12
   b7436:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7438 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b7438:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b743c:	460d      	mov	r5, r1
   b743e:	4619      	mov	r1, r3
   b7440:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b7444:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b7448:	4681      	mov	r9, r0
   b744a:	4617      	mov	r7, r2
   b744c:	4698      	mov	r8, r3
   b744e:	f000 f845 	bl	b74dc <_ZNKSt9type_infoeqERKS_>
   b7452:	b190      	cbz	r0, b747a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b7454:	2d00      	cmp	r5, #0
   b7456:	6034      	str	r4, [r6, #0]
   b7458:	7137      	strb	r7, [r6, #4]
   b745a:	db09      	blt.n	b7470 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b745c:	1961      	adds	r1, r4, r5
   b745e:	458a      	cmp	sl, r1
   b7460:	bf0c      	ite	eq
   b7462:	2106      	moveq	r1, #6
   b7464:	2101      	movne	r1, #1
   b7466:	71b1      	strb	r1, [r6, #6]
   b7468:	2000      	movs	r0, #0
   b746a:	b001      	add	sp, #4
   b746c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7470:	3502      	adds	r5, #2
   b7472:	d1f9      	bne.n	b7468 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7474:	2301      	movs	r3, #1
   b7476:	71b3      	strb	r3, [r6, #6]
   b7478:	e7f6      	b.n	b7468 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b747a:	4554      	cmp	r4, sl
   b747c:	d106      	bne.n	b748c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b747e:	4659      	mov	r1, fp
   b7480:	4648      	mov	r0, r9
   b7482:	f000 f82b 	bl	b74dc <_ZNKSt9type_infoeqERKS_>
   b7486:	b108      	cbz	r0, b748c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7488:	7177      	strb	r7, [r6, #5]
   b748a:	e7ed      	b.n	b7468 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b748c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b7490:	6803      	ldr	r3, [r0, #0]
   b7492:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b7496:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b749a:	69dc      	ldr	r4, [r3, #28]
   b749c:	463a      	mov	r2, r7
   b749e:	4643      	mov	r3, r8
   b74a0:	4629      	mov	r1, r5
   b74a2:	46a4      	mov	ip, r4
   b74a4:	b001      	add	sp, #4
   b74a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b74aa:	4760      	bx	ip

000b74ac <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b74ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b74b0:	4607      	mov	r7, r0
   b74b2:	460c      	mov	r4, r1
   b74b4:	4615      	mov	r5, r2
   b74b6:	461e      	mov	r6, r3
   b74b8:	f7ff ff6d 	bl	b7396 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b74bc:	b948      	cbnz	r0, b74d2 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b74be:	68b8      	ldr	r0, [r7, #8]
   b74c0:	6803      	ldr	r3, [r0, #0]
   b74c2:	699f      	ldr	r7, [r3, #24]
   b74c4:	462a      	mov	r2, r5
   b74c6:	4633      	mov	r3, r6
   b74c8:	4621      	mov	r1, r4
   b74ca:	46bc      	mov	ip, r7
   b74cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b74d0:	4760      	bx	ip
   b74d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b74d6 <_ZNSt9type_infoD1Ev>:
   b74d6:	4770      	bx	lr

000b74d8 <_ZNKSt9type_info14__is_pointer_pEv>:
   b74d8:	2000      	movs	r0, #0
   b74da:	4770      	bx	lr

000b74dc <_ZNKSt9type_infoeqERKS_>:
   b74dc:	4281      	cmp	r1, r0
   b74de:	b508      	push	{r3, lr}
   b74e0:	d00e      	beq.n	b7500 <_ZNKSt9type_infoeqERKS_+0x24>
   b74e2:	6840      	ldr	r0, [r0, #4]
   b74e4:	7803      	ldrb	r3, [r0, #0]
   b74e6:	2b2a      	cmp	r3, #42	; 0x2a
   b74e8:	d00c      	beq.n	b7504 <_ZNKSt9type_infoeqERKS_+0x28>
   b74ea:	6849      	ldr	r1, [r1, #4]
   b74ec:	780b      	ldrb	r3, [r1, #0]
   b74ee:	2b2a      	cmp	r3, #42	; 0x2a
   b74f0:	bf08      	it	eq
   b74f2:	3101      	addeq	r1, #1
   b74f4:	f000 f880 	bl	b75f8 <strcmp>
   b74f8:	fab0 f080 	clz	r0, r0
   b74fc:	0940      	lsrs	r0, r0, #5
   b74fe:	bd08      	pop	{r3, pc}
   b7500:	2001      	movs	r0, #1
   b7502:	e7fc      	b.n	b74fe <_ZNKSt9type_infoeqERKS_+0x22>
   b7504:	2000      	movs	r0, #0
   b7506:	e7fa      	b.n	b74fe <_ZNKSt9type_infoeqERKS_+0x22>

000b7508 <atexit>:
   b7508:	2300      	movs	r3, #0
   b750a:	4601      	mov	r1, r0
   b750c:	461a      	mov	r2, r3
   b750e:	4618      	mov	r0, r3
   b7510:	f000 b938 	b.w	b7784 <__register_exitproc>

000b7514 <atol>:
   b7514:	220a      	movs	r2, #10
   b7516:	2100      	movs	r1, #0
   b7518:	f000 b92a 	b.w	b7770 <strtol>

000b751c <memcmp>:
   b751c:	b510      	push	{r4, lr}
   b751e:	3901      	subs	r1, #1
   b7520:	4402      	add	r2, r0
   b7522:	4290      	cmp	r0, r2
   b7524:	d101      	bne.n	b752a <memcmp+0xe>
   b7526:	2000      	movs	r0, #0
   b7528:	e005      	b.n	b7536 <memcmp+0x1a>
   b752a:	7803      	ldrb	r3, [r0, #0]
   b752c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b7530:	42a3      	cmp	r3, r4
   b7532:	d001      	beq.n	b7538 <memcmp+0x1c>
   b7534:	1b18      	subs	r0, r3, r4
   b7536:	bd10      	pop	{r4, pc}
   b7538:	3001      	adds	r0, #1
   b753a:	e7f2      	b.n	b7522 <memcmp+0x6>

000b753c <memcpy>:
   b753c:	440a      	add	r2, r1
   b753e:	4291      	cmp	r1, r2
   b7540:	f100 33ff 	add.w	r3, r0, #4294967295
   b7544:	d100      	bne.n	b7548 <memcpy+0xc>
   b7546:	4770      	bx	lr
   b7548:	b510      	push	{r4, lr}
   b754a:	f811 4b01 	ldrb.w	r4, [r1], #1
   b754e:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7552:	4291      	cmp	r1, r2
   b7554:	d1f9      	bne.n	b754a <memcpy+0xe>
   b7556:	bd10      	pop	{r4, pc}

000b7558 <memmove>:
   b7558:	4288      	cmp	r0, r1
   b755a:	b510      	push	{r4, lr}
   b755c:	eb01 0402 	add.w	r4, r1, r2
   b7560:	d902      	bls.n	b7568 <memmove+0x10>
   b7562:	4284      	cmp	r4, r0
   b7564:	4623      	mov	r3, r4
   b7566:	d807      	bhi.n	b7578 <memmove+0x20>
   b7568:	1e43      	subs	r3, r0, #1
   b756a:	42a1      	cmp	r1, r4
   b756c:	d008      	beq.n	b7580 <memmove+0x28>
   b756e:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7572:	f803 2f01 	strb.w	r2, [r3, #1]!
   b7576:	e7f8      	b.n	b756a <memmove+0x12>
   b7578:	4402      	add	r2, r0
   b757a:	4601      	mov	r1, r0
   b757c:	428a      	cmp	r2, r1
   b757e:	d100      	bne.n	b7582 <memmove+0x2a>
   b7580:	bd10      	pop	{r4, pc}
   b7582:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b7586:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b758a:	e7f7      	b.n	b757c <memmove+0x24>

000b758c <memset>:
   b758c:	4402      	add	r2, r0
   b758e:	4603      	mov	r3, r0
   b7590:	4293      	cmp	r3, r2
   b7592:	d100      	bne.n	b7596 <memset+0xa>
   b7594:	4770      	bx	lr
   b7596:	f803 1b01 	strb.w	r1, [r3], #1
   b759a:	e7f9      	b.n	b7590 <memset+0x4>

000b759c <srand>:
   b759c:	b538      	push	{r3, r4, r5, lr}
   b759e:	4b10      	ldr	r3, [pc, #64]	; (b75e0 <srand+0x44>)
   b75a0:	681d      	ldr	r5, [r3, #0]
   b75a2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b75a4:	4604      	mov	r4, r0
   b75a6:	b9b3      	cbnz	r3, b75d6 <srand+0x3a>
   b75a8:	2018      	movs	r0, #24
   b75aa:	f7fd ff41 	bl	b5430 <malloc>
   b75ae:	4602      	mov	r2, r0
   b75b0:	63a8      	str	r0, [r5, #56]	; 0x38
   b75b2:	b920      	cbnz	r0, b75be <srand+0x22>
   b75b4:	4b0b      	ldr	r3, [pc, #44]	; (b75e4 <srand+0x48>)
   b75b6:	480c      	ldr	r0, [pc, #48]	; (b75e8 <srand+0x4c>)
   b75b8:	2142      	movs	r1, #66	; 0x42
   b75ba:	f7fd ff69 	bl	b5490 <__assert_func>
   b75be:	490b      	ldr	r1, [pc, #44]	; (b75ec <srand+0x50>)
   b75c0:	4b0b      	ldr	r3, [pc, #44]	; (b75f0 <srand+0x54>)
   b75c2:	e9c0 1300 	strd	r1, r3, [r0]
   b75c6:	4b0b      	ldr	r3, [pc, #44]	; (b75f4 <srand+0x58>)
   b75c8:	6083      	str	r3, [r0, #8]
   b75ca:	230b      	movs	r3, #11
   b75cc:	8183      	strh	r3, [r0, #12]
   b75ce:	2100      	movs	r1, #0
   b75d0:	2001      	movs	r0, #1
   b75d2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b75d6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b75d8:	2200      	movs	r2, #0
   b75da:	611c      	str	r4, [r3, #16]
   b75dc:	615a      	str	r2, [r3, #20]
   b75de:	bd38      	pop	{r3, r4, r5, pc}
   b75e0:	2002fa44 	.word	0x2002fa44
   b75e4:	000b7f19 	.word	0x000b7f19
   b75e8:	000b7f30 	.word	0x000b7f30
   b75ec:	abcd330e 	.word	0xabcd330e
   b75f0:	e66d1234 	.word	0xe66d1234
   b75f4:	0005deec 	.word	0x0005deec

000b75f8 <strcmp>:
   b75f8:	f810 2b01 	ldrb.w	r2, [r0], #1
   b75fc:	f811 3b01 	ldrb.w	r3, [r1], #1
   b7600:	2a01      	cmp	r2, #1
   b7602:	bf28      	it	cs
   b7604:	429a      	cmpcs	r2, r3
   b7606:	d0f7      	beq.n	b75f8 <strcmp>
   b7608:	1ad0      	subs	r0, r2, r3
   b760a:	4770      	bx	lr

000b760c <strcpy>:
   b760c:	4603      	mov	r3, r0
   b760e:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7612:	f803 2b01 	strb.w	r2, [r3], #1
   b7616:	2a00      	cmp	r2, #0
   b7618:	d1f9      	bne.n	b760e <strcpy+0x2>
   b761a:	4770      	bx	lr

000b761c <strlen>:
   b761c:	4603      	mov	r3, r0
   b761e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b7622:	2a00      	cmp	r2, #0
   b7624:	d1fb      	bne.n	b761e <strlen+0x2>
   b7626:	1a18      	subs	r0, r3, r0
   b7628:	3801      	subs	r0, #1
   b762a:	4770      	bx	lr

000b762c <strncpy>:
   b762c:	b510      	push	{r4, lr}
   b762e:	3901      	subs	r1, #1
   b7630:	4603      	mov	r3, r0
   b7632:	b132      	cbz	r2, b7642 <strncpy+0x16>
   b7634:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b7638:	f803 4b01 	strb.w	r4, [r3], #1
   b763c:	3a01      	subs	r2, #1
   b763e:	2c00      	cmp	r4, #0
   b7640:	d1f7      	bne.n	b7632 <strncpy+0x6>
   b7642:	441a      	add	r2, r3
   b7644:	2100      	movs	r1, #0
   b7646:	4293      	cmp	r3, r2
   b7648:	d100      	bne.n	b764c <strncpy+0x20>
   b764a:	bd10      	pop	{r4, pc}
   b764c:	f803 1b01 	strb.w	r1, [r3], #1
   b7650:	e7f9      	b.n	b7646 <strncpy+0x1a>

000b7652 <strnlen>:
   b7652:	b510      	push	{r4, lr}
   b7654:	4602      	mov	r2, r0
   b7656:	4401      	add	r1, r0
   b7658:	428a      	cmp	r2, r1
   b765a:	4613      	mov	r3, r2
   b765c:	d003      	beq.n	b7666 <strnlen+0x14>
   b765e:	781c      	ldrb	r4, [r3, #0]
   b7660:	3201      	adds	r2, #1
   b7662:	2c00      	cmp	r4, #0
   b7664:	d1f8      	bne.n	b7658 <strnlen+0x6>
   b7666:	1a18      	subs	r0, r3, r0
   b7668:	bd10      	pop	{r4, pc}
	...

000b766c <_strtol_l.constprop.0>:
   b766c:	2b01      	cmp	r3, #1
   b766e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7672:	d001      	beq.n	b7678 <_strtol_l.constprop.0+0xc>
   b7674:	2b24      	cmp	r3, #36	; 0x24
   b7676:	d906      	bls.n	b7686 <_strtol_l.constprop.0+0x1a>
   b7678:	f7fd ff02 	bl	b5480 <__errno>
   b767c:	2316      	movs	r3, #22
   b767e:	6003      	str	r3, [r0, #0]
   b7680:	2000      	movs	r0, #0
   b7682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7686:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b776c <_strtol_l.constprop.0+0x100>
   b768a:	460d      	mov	r5, r1
   b768c:	462e      	mov	r6, r5
   b768e:	f815 4b01 	ldrb.w	r4, [r5], #1
   b7692:	f814 700c 	ldrb.w	r7, [r4, ip]
   b7696:	f017 0708 	ands.w	r7, r7, #8
   b769a:	d1f7      	bne.n	b768c <_strtol_l.constprop.0+0x20>
   b769c:	2c2d      	cmp	r4, #45	; 0x2d
   b769e:	d132      	bne.n	b7706 <_strtol_l.constprop.0+0x9a>
   b76a0:	782c      	ldrb	r4, [r5, #0]
   b76a2:	2701      	movs	r7, #1
   b76a4:	1cb5      	adds	r5, r6, #2
   b76a6:	2b00      	cmp	r3, #0
   b76a8:	d05b      	beq.n	b7762 <_strtol_l.constprop.0+0xf6>
   b76aa:	2b10      	cmp	r3, #16
   b76ac:	d109      	bne.n	b76c2 <_strtol_l.constprop.0+0x56>
   b76ae:	2c30      	cmp	r4, #48	; 0x30
   b76b0:	d107      	bne.n	b76c2 <_strtol_l.constprop.0+0x56>
   b76b2:	782c      	ldrb	r4, [r5, #0]
   b76b4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b76b8:	2c58      	cmp	r4, #88	; 0x58
   b76ba:	d14d      	bne.n	b7758 <_strtol_l.constprop.0+0xec>
   b76bc:	786c      	ldrb	r4, [r5, #1]
   b76be:	2310      	movs	r3, #16
   b76c0:	3502      	adds	r5, #2
   b76c2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b76c6:	f108 38ff 	add.w	r8, r8, #4294967295
   b76ca:	f04f 0c00 	mov.w	ip, #0
   b76ce:	fbb8 f9f3 	udiv	r9, r8, r3
   b76d2:	4666      	mov	r6, ip
   b76d4:	fb03 8a19 	mls	sl, r3, r9, r8
   b76d8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b76dc:	f1be 0f09 	cmp.w	lr, #9
   b76e0:	d816      	bhi.n	b7710 <_strtol_l.constprop.0+0xa4>
   b76e2:	4674      	mov	r4, lr
   b76e4:	42a3      	cmp	r3, r4
   b76e6:	dd24      	ble.n	b7732 <_strtol_l.constprop.0+0xc6>
   b76e8:	f1bc 0f00 	cmp.w	ip, #0
   b76ec:	db1e      	blt.n	b772c <_strtol_l.constprop.0+0xc0>
   b76ee:	45b1      	cmp	r9, r6
   b76f0:	d31c      	bcc.n	b772c <_strtol_l.constprop.0+0xc0>
   b76f2:	d101      	bne.n	b76f8 <_strtol_l.constprop.0+0x8c>
   b76f4:	45a2      	cmp	sl, r4
   b76f6:	db19      	blt.n	b772c <_strtol_l.constprop.0+0xc0>
   b76f8:	fb06 4603 	mla	r6, r6, r3, r4
   b76fc:	f04f 0c01 	mov.w	ip, #1
   b7700:	f815 4b01 	ldrb.w	r4, [r5], #1
   b7704:	e7e8      	b.n	b76d8 <_strtol_l.constprop.0+0x6c>
   b7706:	2c2b      	cmp	r4, #43	; 0x2b
   b7708:	bf04      	itt	eq
   b770a:	782c      	ldrbeq	r4, [r5, #0]
   b770c:	1cb5      	addeq	r5, r6, #2
   b770e:	e7ca      	b.n	b76a6 <_strtol_l.constprop.0+0x3a>
   b7710:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b7714:	f1be 0f19 	cmp.w	lr, #25
   b7718:	d801      	bhi.n	b771e <_strtol_l.constprop.0+0xb2>
   b771a:	3c37      	subs	r4, #55	; 0x37
   b771c:	e7e2      	b.n	b76e4 <_strtol_l.constprop.0+0x78>
   b771e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b7722:	f1be 0f19 	cmp.w	lr, #25
   b7726:	d804      	bhi.n	b7732 <_strtol_l.constprop.0+0xc6>
   b7728:	3c57      	subs	r4, #87	; 0x57
   b772a:	e7db      	b.n	b76e4 <_strtol_l.constprop.0+0x78>
   b772c:	f04f 3cff 	mov.w	ip, #4294967295
   b7730:	e7e6      	b.n	b7700 <_strtol_l.constprop.0+0x94>
   b7732:	f1bc 0f00 	cmp.w	ip, #0
   b7736:	da05      	bge.n	b7744 <_strtol_l.constprop.0+0xd8>
   b7738:	2322      	movs	r3, #34	; 0x22
   b773a:	6003      	str	r3, [r0, #0]
   b773c:	4646      	mov	r6, r8
   b773e:	b942      	cbnz	r2, b7752 <_strtol_l.constprop.0+0xe6>
   b7740:	4630      	mov	r0, r6
   b7742:	e79e      	b.n	b7682 <_strtol_l.constprop.0+0x16>
   b7744:	b107      	cbz	r7, b7748 <_strtol_l.constprop.0+0xdc>
   b7746:	4276      	negs	r6, r6
   b7748:	2a00      	cmp	r2, #0
   b774a:	d0f9      	beq.n	b7740 <_strtol_l.constprop.0+0xd4>
   b774c:	f1bc 0f00 	cmp.w	ip, #0
   b7750:	d000      	beq.n	b7754 <_strtol_l.constprop.0+0xe8>
   b7752:	1e69      	subs	r1, r5, #1
   b7754:	6011      	str	r1, [r2, #0]
   b7756:	e7f3      	b.n	b7740 <_strtol_l.constprop.0+0xd4>
   b7758:	2430      	movs	r4, #48	; 0x30
   b775a:	2b00      	cmp	r3, #0
   b775c:	d1b1      	bne.n	b76c2 <_strtol_l.constprop.0+0x56>
   b775e:	2308      	movs	r3, #8
   b7760:	e7af      	b.n	b76c2 <_strtol_l.constprop.0+0x56>
   b7762:	2c30      	cmp	r4, #48	; 0x30
   b7764:	d0a5      	beq.n	b76b2 <_strtol_l.constprop.0+0x46>
   b7766:	230a      	movs	r3, #10
   b7768:	e7ab      	b.n	b76c2 <_strtol_l.constprop.0+0x56>
   b776a:	bf00      	nop
   b776c:	000b7fae 	.word	0x000b7fae

000b7770 <strtol>:
   b7770:	4613      	mov	r3, r2
   b7772:	460a      	mov	r2, r1
   b7774:	4601      	mov	r1, r0
   b7776:	4802      	ldr	r0, [pc, #8]	; (b7780 <strtol+0x10>)
   b7778:	6800      	ldr	r0, [r0, #0]
   b777a:	f7ff bf77 	b.w	b766c <_strtol_l.constprop.0>
   b777e:	bf00      	nop
   b7780:	2002fa44 	.word	0x2002fa44

000b7784 <__register_exitproc>:
   b7784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7788:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b7844 <__register_exitproc+0xc0>
   b778c:	4606      	mov	r6, r0
   b778e:	f8d8 0000 	ldr.w	r0, [r8]
   b7792:	461f      	mov	r7, r3
   b7794:	460d      	mov	r5, r1
   b7796:	4691      	mov	r9, r2
   b7798:	f000 f856 	bl	b7848 <__retarget_lock_acquire_recursive>
   b779c:	4b25      	ldr	r3, [pc, #148]	; (b7834 <__register_exitproc+0xb0>)
   b779e:	681c      	ldr	r4, [r3, #0]
   b77a0:	b934      	cbnz	r4, b77b0 <__register_exitproc+0x2c>
   b77a2:	4c25      	ldr	r4, [pc, #148]	; (b7838 <__register_exitproc+0xb4>)
   b77a4:	601c      	str	r4, [r3, #0]
   b77a6:	4b25      	ldr	r3, [pc, #148]	; (b783c <__register_exitproc+0xb8>)
   b77a8:	b113      	cbz	r3, b77b0 <__register_exitproc+0x2c>
   b77aa:	681b      	ldr	r3, [r3, #0]
   b77ac:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b77b0:	6863      	ldr	r3, [r4, #4]
   b77b2:	2b1f      	cmp	r3, #31
   b77b4:	dd07      	ble.n	b77c6 <__register_exitproc+0x42>
   b77b6:	f8d8 0000 	ldr.w	r0, [r8]
   b77ba:	f000 f847 	bl	b784c <__retarget_lock_release_recursive>
   b77be:	f04f 30ff 	mov.w	r0, #4294967295
   b77c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b77c6:	b34e      	cbz	r6, b781c <__register_exitproc+0x98>
   b77c8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b77cc:	b988      	cbnz	r0, b77f2 <__register_exitproc+0x6e>
   b77ce:	4b1c      	ldr	r3, [pc, #112]	; (b7840 <__register_exitproc+0xbc>)
   b77d0:	b923      	cbnz	r3, b77dc <__register_exitproc+0x58>
   b77d2:	f8d8 0000 	ldr.w	r0, [r8]
   b77d6:	f000 f838 	bl	b784a <__retarget_lock_release>
   b77da:	e7f0      	b.n	b77be <__register_exitproc+0x3a>
   b77dc:	f44f 7084 	mov.w	r0, #264	; 0x108
   b77e0:	f7fd fe26 	bl	b5430 <malloc>
   b77e4:	2800      	cmp	r0, #0
   b77e6:	d0f4      	beq.n	b77d2 <__register_exitproc+0x4e>
   b77e8:	2300      	movs	r3, #0
   b77ea:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b77ee:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b77f2:	6863      	ldr	r3, [r4, #4]
   b77f4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b77f8:	2201      	movs	r2, #1
   b77fa:	409a      	lsls	r2, r3
   b77fc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b7800:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7804:	4313      	orrs	r3, r2
   b7806:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b780a:	2e02      	cmp	r6, #2
   b780c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b7810:	bf02      	ittt	eq
   b7812:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b7816:	4313      	orreq	r3, r2
   b7818:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b781c:	6863      	ldr	r3, [r4, #4]
   b781e:	f8d8 0000 	ldr.w	r0, [r8]
   b7822:	1c5a      	adds	r2, r3, #1
   b7824:	3302      	adds	r3, #2
   b7826:	6062      	str	r2, [r4, #4]
   b7828:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b782c:	f000 f80e 	bl	b784c <__retarget_lock_release_recursive>
   b7830:	2000      	movs	r0, #0
   b7832:	e7c6      	b.n	b77c2 <__register_exitproc+0x3e>
   b7834:	2003e7e8 	.word	0x2003e7e8
   b7838:	2003e75c 	.word	0x2003e75c
   b783c:	00000000 	.word	0x00000000
   b7840:	000b5431 	.word	0x000b5431
   b7844:	2002faa8 	.word	0x2002faa8

000b7848 <__retarget_lock_acquire_recursive>:
   b7848:	4770      	bx	lr

000b784a <__retarget_lock_release>:
   b784a:	4770      	bx	lr

000b784c <__retarget_lock_release_recursive>:
   b784c:	4770      	bx	lr

000b784e <link_code_end>:
	...

000b7850 <dynalib_user>:
   b7850:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b7860:	0000 0000 6542 6967 6e6e 6e69 2067 6f43     ....Beginning Co
   b7870:	6d6d 6e61 7364 0a20 4100 0d54 000a 7741     mmands ..AT...Aw
   b7880:	6961 6974 676e 5220 7065 796c 000a 6552     aiting Reply..Re
   b7890:	6c70 3a79 2520 0a73 4100 2b54 4441 5244     ply: %s..AT+ADDR
   b78a0:	5345 3d53 6925 0a0d 4100 6177 7469 6e69     ESS=%i...Awaitin
   b78b0:	2067 6552 6c70 2079 7266 6d6f 6120 6464     g Reply from add
   b78c0:	6572 7373 000a 6552 6c70 2079 6461 7264     ress..Reply addr
   b78d0:	7365 3a73 2520 0a73 4100 2b54 454e 5754     ess: %s..AT+NETW
   b78e0:	524f 494b 3d44 6925 0a0d 4100 6177 7469     ORKID=%i...Await
   b78f0:	6e69 2067 6552 6c70 2079 7266 6d6f 6e20     ing Reply from n
   b7900:	7465 6f77 6b72 6469 000a 6552 6c70 2079     etworkid..Reply 
   b7910:	656e 7774 726f 3a6b 2520 0a73 4100 2b54     network: %s..AT+
   b7920:	4441 5244 5345 3f53 0a0d 5200 7065 796c     ADDRESS?...Reply
   b7930:	6720 7465 6120 6464 6572 7373 203a 7325      get address: %s
   b7940:	000a 5441 4e2b 5445 4f57 4b52 4449 0d3f     ..AT+NETWORKID?.
   b7950:	000a 6552 6c70 2079 6567 2074 656e 7774     ..Reply get netw
   b7960:	726f 3a6b 2520 0a73 4100 2b54 5043 4e49     ork: %s..AT+CPIN
   b7970:	0d3f 000a 6552 6c70 2079 6567 2074 6170     ?...Reply get pa
   b7980:	7373 6f77 6472 203a 7325 000a 5441 532b     ssword: %s..AT+S
   b7990:	4e45 3d44 3838 2c38 2c31 0d35 000a 6d20     END=888,1,5... m
   b79a0:	766f 6465 7453 7065 6570 0072 5441 532b     ovedStepper.AT+S
   b79b0:	4e45 3d44 3838 2c38 2c31 0d39 000a 7320     END=888,1,9... s
   b79c0:	6e65 6964 676e 3920 0a00 5220 7065 796c     ending 9.. Reply
   b79d0:	7420 206f 6573 646e 3a20 2520 0a73 6d00      to send : %s..m
   b79e0:	766f 6465 7420 206f 6925 202c 6925 000a     oved to %i, %i..
   b79f0:	7270 6e69 5374 6174 7472 000a 6925 252c     printStart..%i,%
   b7a00:	2c69 6925 252c 0a69 7300 6e69 6c67 5865     i,%i,%i..singleX
   b7a10:	203d 6925 202c 6973 676e 656c 3d59 6925     = %i, singleY=%i
   b7a20:	000a 2078 203d 6925 202c 3d79 2520 2069     ..x = %i, y= %i 
   b7a30:	000a 3278 3d20 2520 2c69 7920 3d32 2520     ..x2 = %i, y2= %
   b7a40:	2069 000a 7741 6961 6974 676e 4920 636e     i ..Awaiting Inc
   b7a50:	6d6f 6e69 2067 654d 7373 6761 0065 6e49     oming Message.In
   b7a60:	6f63 696d 676e 4d20 7365 6173 6567 203b     coming Message; 
   b7a70:	7325 250a 0a73 7325 250a 0a73 7325 000a     %s.%s.%s.%s.%s..
   b7a80:	6e49 6f63 696d 676e 4c20 6e65 2520 2c69     Incoming Len %i,
   b7a90:	4920 636e 6d6f 6e69 4467 7461 2061 6925      IncomingData %i
   b7aa0:	000a 6353 6e61 6420 6469 6e20 746f 7720     ..Scan did not w
   b7ab0:	726f 0a6b 3600 3445 3030 3030 2d31 3542     ork..6E400001-B5
   b7ac0:	3341 462d 3933 2d33 3045 3941 452d 3035     A3-F393-E0A9-E50
   b7ad0:	3245 4434 4343 3941 0045 4536 3034 3030     E24DCCA9E.6E4000
   b7ae0:	3230 422d 4135 2d33 3346 3339 452d 4130     02-B5A3-F393-E0A
   b7af0:	2d39 3545 4530 3432 4344 4143 4539 3600     9-E50E24DCCA9E.6
   b7b00:	3445 3030 3030 2d33 3542 3341 462d 3933     E400003-B5A3-F39
   b7b10:	2d33 3045 3941 452d 3035 3245 4434 4343     3-E0A9-E50E24DCC
   b7b20:	3941 0045 7874 7200 0078 0000               A9E.tx.rx...

000b7b2c <_ZTVN5spark13EthernetClassE>:
	...
   b7b34:	550f 000b 5505 000b 54fb 000b 54f1 000b     .U...U...T...T..
   b7b44:	54e5 000b 54d9 000b 6fed 000b 6ff5 000b     .T...T...o...o..
   b7b54:	54cd 000b 54c5 000b 54bb 000b 54b1 000b     .T...T...T...T..
   b7b64:	7025 000b 6977 6972 676e 622e 656c 5300     %p..wiring.ble.S
   b7b74:	6174 7472 6420 7369 6f63 6576 6972 676e     tart discovering
   b7b84:	7320 7265 6976 6563 2e73 5000 6565 2072      services..Peer 
   b7b94:	6564 6976 6563 6920 2073 696d 7373 6e69     device is missin
   b7ba4:	2167 4600 6961 656c 2064 6f74 6120 7070     g!.Failed to app
   b7bb4:	6e65 2064 6570 7265 4320 6e65 7274 6c61     end peer Central
   b7bc4:	6420 7665 6369 2e65 4300 6e6f 656e 7463      device..Connect
   b7bd4:	6465 6220 2079 6543 746e 6172 206c 6564     ed by Central de
   b7be4:	6976 6563 002e 6944 6373 6e6f 656e 7463     vice..Disconnect
   b7bf4:	6465 6220 2079 6572 6f6d 6574 6420 7665     ed by remote dev
   b7c04:	6369 2e65 4400 7075 696c 6163 6574 2064     ice..Duplicated 
   b7c14:	6863 7261 6361 6574 6972 7473 6369 6320     characteristic c
   b7c24:	6e61 6f6e 2074 6562 6120 6464 6465 002e     annot be added..
   b7c34:	6146 6c69 6465 7420 206f 7061 6570 646e     Failed to append
   b7c44:	6c20 636f 6c61 6320 6168 6172 7463 7265      local character
   b7c54:	7369 6974 2e63 0000                         istic...

000b7c5c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b7c64:	5719 000b 577d 000b 585f 000b 57a7 000b     .W..}W.._X...W..
   b7c74:	571d 000b                                   .W..

000b7c78 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b7c80:	5715 000b 578b 000b 5717 000b 57ad 000b     .W...W...W...W..
   b7c90:	573d 000b                                   =W..

000b7c94 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b7c9c:	5713 000b 5799 000b 5f29 000b 57b3 000b     .W...W..)_...W..
   b7cac:	575d 000b                                   ]W..

000b7cb0 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b7cbc:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000b7cce <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   b7cce:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000b7cde <_ZN8particle7BleUuid9BASE_UUIDE>:
   b7cde:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
   b7cee:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   b7cfe:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.
	...

000b7d10 <_ZTV9IPAddress>:
	...
   b7d18:	6c25 000b 6c15 000b 6c17 000b               %l...l...l..

000b7d24 <_ZTV9USBSerial>:
	...
   b7d2c:	6d0b 000b 6d73 000b 6d49 000b 6931 000b     .m..sm..Im..1i..
   b7d3c:	6d3b 000b 6d0d 000b 6d1d 000b 6d6d 000b     ;m...m...m..mm..
   b7d4c:	6d2d 000b 6d05 000b                         -m...m..

000b7d54 <_ZTV11USARTSerial>:
	...
   b7d5c:	6e0d 000b 6e79 000b 6e51 000b 6931 000b     .n..yn..Qn..1i..
   b7d6c:	6e21 000b 6e3d 000b 6e2f 000b 6e4b 000b     !n..=n../n..Kn..
   b7d7c:	6e0f 000b 6e13 000b                         .n...n..

000b7d84 <_ZTV7TwoWire>:
	...
   b7d8c:	6ebf 000b 6f09 000b 6ee1 000b 6ec1 000b     .n...o...n...n..
   b7d9c:	6ee9 000b 6ef1 000b 6ef9 000b 6f01 000b     .n...n...n...o..

000b7dac <_ZTVN5spark9WiFiClassE>:
	...
   b7db4:	6f8f 000b 6f85 000b 6f7b 000b 6f3d 000b     .o...o..{o..=o..
   b7dc4:	6a99 000b 6f6f 000b 6fed 000b 6ff5 000b     .j..oo...o...o..
   b7dd4:	6f63 000b 6f5b 000b 6f51 000b 6f47 000b     co..[o..Qo..Go..
   b7de4:	7025 000b                                   %p..

000b7de8 <_ZTVN5spark12NetworkClassE>:
	...
   b7df0:	6fad 000b 6fb7 000b 6fc1 000b 6fcb 000b     .o...o...o...o..
   b7e00:	6fd5 000b 6fe1 000b 6fed 000b 6ff5 000b     .o...o...o...o..
   b7e10:	6ffd 000b 7009 000b 7011 000b 701b 000b     .o...p...p...p..
   b7e20:	7025 000b                                   %p..

000b7e24 <_ZSt7nothrow>:
	...

000b7e25 <_ZTSSt19_Sp_make_shared_tag>:
   b7e25:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b7e35:	6572 5f64 6174 0067 0000                     red_tag....

000b7e40 <_ZTISt19_Sp_make_shared_tag>:
   b7e40:	7e80 000b 7e25 000b                         .~..%~..

000b7e48 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b7e48:	7ee0 000b 7e54 000b 7f04 000b               .~..T~......

000b7e54 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b7e54:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b7e64:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b7e74:	0045 0000                                   E...

000b7e78 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b7e78:	0000 0000 7e48 000b 7331 000b 7345 000b     ....H~..1s..Es..
   b7e88:	74d9 000b 74d9 000b 73af 000b 72f1 000b     .t...t...s...r..
   b7e98:	7397 000b 7359 000b 7323 000b               .s..Ys..#s..

000b7ea4 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b7ea4:	7ee0 000b 7eb0 000b 7e48 000b               .~...~..H~..

000b7eb0 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b7eb0:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b7ec0:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b7ed0:	666e 456f 0000 0000                         nfoE....

000b7ed8 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b7ed8:	0000 0000 7ea4 000b 73d9 000b 73ed 000b     .....~...s...s..
   b7ee8:	74d9 000b 74d9 000b 73af 000b 72f1 000b     .t...t...s...r..
   b7ef8:	74ad 000b 7439 000b 7401 000b               .t..9t...t..

000b7f04 <_ZTISt9type_info>:
   b7f04:	7e80 000b 7f0c 000b                         .~......

000b7f0c <_ZTSSt9type_info>:
   b7f0c:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b7f1c:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b7f2c:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   b7f3c:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   b7f4c:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   b7f5c:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b7f6c:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b7f7c:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   b7f8c:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b7f9c:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b7fad <_ctype_>:
   b7fad:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b7fbd:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b7fcd:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b7fdd:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b7fed:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b7ffd:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b800d:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b801d:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b802d:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b80ae <link_const_variable_data_end>:
	...

000b80b0 <link_constructors_location>:
   b80b0:	000b4be1 	.word	0x000b4be1
   b80b4:	000b5519 	.word	0x000b5519
   b80b8:	000b5541 	.word	0x000b5541
   b80bc:	000b6921 	.word	0x000b6921
   b80c0:	000b6aa5 	.word	0x000b6aa5
   b80c4:	000b6ab5 	.word	0x000b6ab5
   b80c8:	000b6ad1 	.word	0x000b6ad1
   b80cc:	000b6f99 	.word	0x000b6f99
   b80d0:	000b70fd 	.word	0x000b70fd

000b80d4 <link_constructors_end>:
	...
