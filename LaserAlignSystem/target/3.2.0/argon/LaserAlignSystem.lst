
c:/Users/Arjun/Documents/IOT/IOTCapstone/LaserAlignSystem/target/3.2.0/argon/LaserAlignSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003484  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000b74a0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e580  000b74a4  0001e580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000204  2003e5ec  2003e5ec  0002e5ec  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000b7510  000b7510  00027510  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000b7538  000b7538  00027538  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0011115e  00000000  00000000  0002753c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00012123  00000000  00000000  0013869a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    00034e76  00000000  00000000  0014a7bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002d10  00000000  00000000  0017f633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00009d60  00000000  00000000  00182343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00038d37  00000000  00000000  0018c0a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0003aead  00000000  00000000  001c4dda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001283ff  00000000  00000000  001ffc87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00007ee4  00000000  00000000  00328088  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f002 fe6d 	bl	b6d0c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f002 fe8f 	bl	b6d5c <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e580 	.word	0x2003e580
   b4048:	000b74a4 	.word	0x000b74a4
   b404c:	2003e5ec 	.word	0x2003e5ec
   b4050:	2003e5ec 	.word	0x2003e5ec
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f002 f997 	bl	b6390 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b747c 	.word	0x000b747c
   b407c:	000b74a0 	.word	0x000b74a0

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b824 	b.w	b40cc <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f8a3 	bl	b41d0 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f002 b937 	b.w	b6300 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f000 be4d 	b.w	b4d30 <malloc>

000b4096 <_Znaj>:
   b4096:	f000 be4b 	b.w	b4d30 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f000 be51 	b.w	b4d40 <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr

000b40ae <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40ae:	b40e      	push	{r1, r2, r3}
   b40b0:	b503      	push	{r0, r1, lr}
   b40b2:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40b4:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40b6:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40ba:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40bc:	f002 f8a3 	bl	b6206 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40c0:	b002      	add	sp, #8
   b40c2:	f85d eb04 	ldr.w	lr, [sp], #4
   b40c6:	b003      	add	sp, #12
   b40c8:	4770      	bx	lr
	...

000b40cc <setup>:

const int PHOTODIODE = A0;
int photodioideReading;
unsigned int timer;

void setup() {
   b40cc:	b570      	push	{r4, r5, r6, lr}
   b40ce:	b08e      	sub	sp, #56	; 0x38

    Serial.begin();
   b40d0:	f002 fa6a 	bl	b65a8 <_Z16_fetch_usbserialv>
   b40d4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b40d8:	f002 fa56 	bl	b6588 <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b40dc:	2000      	movs	r0, #0
   b40de:	f000 fc53 	bl	b4988 <hal_timer_millis>
        while (_while() && !_condition()) {
   b40e2:	f643 2598 	movw	r5, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
   b40e6:	4604      	mov	r4, r0
   b40e8:	2000      	movs	r0, #0
   b40ea:	f000 fc4d 	bl	b4988 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b40ee:	1b00      	subs	r0, r0, r4
   b40f0:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b40f4:	42a8      	cmp	r0, r5
   b40f6:	f171 0300 	sbcs.w	r3, r1, #0
   b40fa:	d207      	bcs.n	b410c <setup+0x40>
    waitFor(Serial.isConnected, 15000);
   b40fc:	f002 fa54 	bl	b65a8 <_Z16_fetch_usbserialv>
   b4100:	f002 fa46 	bl	b6590 <_ZN9USBSerial11isConnectedEv>
   b4104:	b910      	cbnz	r0, b410c <setup+0x40>
            spark_process();
   b4106:	f000 fe03 	bl	b4d10 <spark_process>
        while (_while() && !_condition()) {
   b410a:	e7ed      	b.n	b40e8 <setup+0x1c>
   b410c:	f002 fa4c 	bl	b65a8 <_Z16_fetch_usbserialv>
   b4110:	f002 fa3e 	bl	b6590 <_ZN9USBSerial11isConnectedEv>

    BLE.on();
   b4114:	f001 fa02 	bl	b551c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4118:	f001 fa4a 	bl	b55b0 <_ZNK8particle14BleLocalDevice2onEv>
    BLE.addCharacteristic(txCharacteristic);
   b411c:	f001 f9fe 	bl	b551c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4120:	4a25      	ldr	r2, [pc, #148]	; (b41b8 <setup+0xec>)
   b4122:	4c26      	ldr	r4, [pc, #152]	; (b41bc <setup+0xf0>)
   b4124:	4601      	mov	r1, r0
   b4126:	a809      	add	r0, sp, #36	; 0x24
   b4128:	f001 ff08 	bl	b5f3c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b412c:	a809      	add	r0, sp, #36	; 0x24
   b412e:	f001 fae6 	bl	b56fe <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(rxCharacteristic);
   b4132:	f001 f9f3 	bl	b551c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4136:	4a22      	ldr	r2, [pc, #136]	; (b41c0 <setup+0xf4>)
   b4138:	4601      	mov	r1, r0
   b413a:	a809      	add	r0, sp, #36	; 0x24
   b413c:	f001 fefe 	bl	b5f3c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4140:	a809      	add	r0, sp, #36	; 0x24
   b4142:	f001 fadc 	bl	b56fe <_ZN8particle17BleCharacteristicD1Ev>
    data.appendServiceUUID(serviceUuid);
   b4146:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4148:	ad04      	add	r5, sp, #16
   b414a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b414c:	ad04      	add	r5, sp, #16
   b414e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4150:	6826      	ldr	r6, [r4, #0]
   b4152:	ac09      	add	r4, sp, #36	; 0x24
   b4154:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4156:	a809      	add	r0, sp, #36	; 0x24
        BleUuid tempUUID(uuid);
   b4158:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b415a:	f001 f859 	bl	b5210 <_ZNK8particle7BleUuid4typeEv>
   b415e:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b4160:	a809      	add	r0, sp, #36	; 0x24
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4162:	bb04      	cbnz	r4, b41a6 <setup+0xda>
            uint16_t uuid16 = tempUUID.shorted();
   b4164:	f001 f870 	bl	b5248 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4168:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b416a:	f8ad 000e 	strh.w	r0, [sp, #14]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b416e:	2302      	movs	r3, #2
   b4170:	f10d 020e 	add.w	r2, sp, #14
   b4174:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b4176:	4813      	ldr	r0, [pc, #76]	; (b41c4 <setup+0xf8>)
   b4178:	f001 fbe8 	bl	b594c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    BLE.advertise(&data);
   b417c:	f001 f9ce 	bl	b551c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4180:	2200      	movs	r2, #0
   b4182:	4910      	ldr	r1, [pc, #64]	; (b41c4 <setup+0xf8>)
   b4184:	f001 fa5e 	bl	b5644 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>

    tipStepper.setSpeed(RPM);
   b4188:	480f      	ldr	r0, [pc, #60]	; (b41c8 <setup+0xfc>)
   b418a:	210a      	movs	r1, #10
   b418c:	f000 faa2 	bl	b46d4 <_ZN7Stepper8setSpeedEl>
    tiltStepper.setSpeed(RPM);
   b4190:	480e      	ldr	r0, [pc, #56]	; (b41cc <setup+0x100>)
   b4192:	210a      	movs	r1, #10
   b4194:	f000 fa9e 	bl	b46d4 <_ZN7Stepper8setSpeedEl>

    pinMode(PHOTODIODE, INPUT);
   b4198:	2100      	movs	r1, #0
   b419a:	2013      	movs	r0, #19
}
   b419c:	b00e      	add	sp, #56	; 0x38
   b419e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pinMode(PHOTODIODE, INPUT);
   b41a2:	f002 bbdf 	b.w	b6964 <pinMode>
   b41a6:	f001 f851 	bl	b524c <_ZNK8particle7BleUuid8rawBytesEv>
   b41aa:	2300      	movs	r3, #0
   b41ac:	9300      	str	r3, [sp, #0]
   b41ae:	4602      	mov	r2, r0
   b41b0:	2310      	movs	r3, #16
   b41b2:	2107      	movs	r1, #7
   b41b4:	e7df      	b.n	b4176 <setup+0xaa>
   b41b6:	bf00      	nop
   b41b8:	2003e6a4 	.word	0x2003e6a4
   b41bc:	2003e5f8 	.word	0x2003e5f8
   b41c0:	2003e644 	.word	0x2003e644
   b41c4:	2003e638 	.word	0x2003e638
   b41c8:	2003e678 	.word	0x2003e678
   b41cc:	2003e64c 	.word	0x2003e64c

000b41d0 <loop>:

void loop() {
}
   b41d0:	4770      	bx	lr
	...

000b41d4 <_Z18ScanBeamHorizontalv>:

    Serial.printf("\n");
    Serial.printf("Message: %s \n", (char *)data);
}

void ScanBeamHorizontal() {
   b41d4:	b570      	push	{r4, r5, r6, lr}
    int totalHorizontalSteps = 50; // maintain even step sizes
    int totalVerticalSteps = 50;
    int i;
    int n = 1;
    tiltStepper.step(totalHorizontalSteps / 2); // move to the left from current position
   b41d6:	4812      	ldr	r0, [pc, #72]	; (b4220 <_Z18ScanBeamHorizontalv+0x4c>)
   b41d8:	2119      	movs	r1, #25
   b41da:	f000 fb4d 	bl	b4878 <_ZN7Stepper4stepEi>
    tipStepper.step(totalVerticalSteps / 2);    // move upwards from current position
   b41de:	4811      	ldr	r0, [pc, #68]	; (b4224 <_Z18ScanBeamHorizontalv+0x50>)
   b41e0:	2119      	movs	r1, #25
   b41e2:	f000 fb49 	bl	b4878 <_ZN7Stepper4stepEi>
   b41e6:	2432      	movs	r4, #50	; 0x32
    int n = 1;
   b41e8:	2501      	movs	r5, #1
    for (i = 0; i < totalVerticalSteps; i++) {
        n = n * -1;
        tiltStepper.step(totalHorizontalSteps * n);
   b41ea:	f06f 0631 	mvn.w	r6, #49	; 0x31
   b41ee:	4629      	mov	r1, r5
   b41f0:	480b      	ldr	r0, [pc, #44]	; (b4220 <_Z18ScanBeamHorizontalv+0x4c>)
   b41f2:	4371      	muls	r1, r6
   b41f4:	f000 fb40 	bl	b4878 <_ZN7Stepper4stepEi>
        tipStepper.step(-1);
   b41f8:	480a      	ldr	r0, [pc, #40]	; (b4224 <_Z18ScanBeamHorizontalv+0x50>)
   b41fa:	f04f 31ff 	mov.w	r1, #4294967295
   b41fe:	f000 fb3b 	bl	b4878 <_ZN7Stepper4stepEi>
    for (i = 0; i < totalVerticalSteps; i++) {
   b4202:	3c01      	subs	r4, #1
        tiltStepper.step(totalHorizontalSteps * n);
   b4204:	f1c5 0500 	rsb	r5, r5, #0
    for (i = 0; i < totalVerticalSteps; i++) {
   b4208:	d1f1      	bne.n	b41ee <_Z18ScanBeamHorizontalv+0x1a>
    }
    tiltStepper.step(-totalHorizontalSteps / 2); // move to the right to reset to current position
   b420a:	4805      	ldr	r0, [pc, #20]	; (b4220 <_Z18ScanBeamHorizontalv+0x4c>)
   b420c:	f06f 0118 	mvn.w	r1, #24
   b4210:	f000 fb32 	bl	b4878 <_ZN7Stepper4stepEi>
    tipStepper.step(totalVerticalSteps / 2);     // move downwards to reset to current position
}
   b4214:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tipStepper.step(totalVerticalSteps / 2);     // move downwards to reset to current position
   b4218:	4802      	ldr	r0, [pc, #8]	; (b4224 <_Z18ScanBeamHorizontalv+0x50>)
   b421a:	2119      	movs	r1, #25
   b421c:	f000 bb2c 	b.w	b4878 <_ZN7Stepper4stepEi>
   b4220:	2003e64c 	.word	0x2003e64c
   b4224:	2003e678 	.word	0x2003e678

000b4228 <_Z10ScanSpiralv>:

void ScanSpiral() {
   b4228:	b5f0      	push	{r4, r5, r6, r7, lr}
    int i;
    int motorSpeed;

    for (i = 0; i < totalSteps; i++) {
        motorSpeed = map(i, 0, totalSteps, 3, 10);
        tiltStepper.setSpeed(motorSpeed);
   b422a:	4d1e      	ldr	r5, [pc, #120]	; (b42a4 <_Z10ScanSpiralv+0x7c>)
        tipStepper.setSpeed(motorSpeed);
   b422c:	4e1e      	ldr	r6, [pc, #120]	; (b42a8 <_Z10ScanSpiralv+0x80>)
void ScanSpiral() {
   b422e:	b085      	sub	sp, #20
    for (i = 0; i < totalSteps; i++) {
   b4230:	2400      	movs	r4, #0
        motorSpeed = map(i, 0, totalSteps, 3, 10);
   b4232:	270a      	movs	r7, #10
   b4234:	2303      	movs	r3, #3
   b4236:	2232      	movs	r2, #50	; 0x32
   b4238:	2100      	movs	r1, #0
   b423a:	9700      	str	r7, [sp, #0]
   b423c:	4620      	mov	r0, r4
   b423e:	f002 f82b 	bl	b6298 <_Z3mapiiiii>
   b4242:	4601      	mov	r1, r0
        tiltStepper.setSpeed(motorSpeed);
   b4244:	9003      	str	r0, [sp, #12]
   b4246:	4628      	mov	r0, r5
   b4248:	f000 fa44 	bl	b46d4 <_ZN7Stepper8setSpeedEl>
        tipStepper.setSpeed(motorSpeed);
   b424c:	9903      	ldr	r1, [sp, #12]
   b424e:	4630      	mov	r0, r6
   b4250:	f000 fa40 	bl	b46d4 <_ZN7Stepper8setSpeedEl>
        if (i % 2 == 0) {
   b4254:	07e3      	lsls	r3, r4, #31
   b4256:	d41d      	bmi.n	b4294 <_Z10ScanSpiralv+0x6c>
            tiltStepper.step(i);
   b4258:	4621      	mov	r1, r4
   b425a:	4628      	mov	r0, r5
   b425c:	f000 fb0c 	bl	b4878 <_ZN7Stepper4stepEi>
            tipStepper.step(i);
   b4260:	4621      	mov	r1, r4
        }
        if (i % 2 == 1) {
            tiltStepper.step(-i);
            tipStepper.step(-i);
   b4262:	4630      	mov	r0, r6
    for (i = 0; i < totalSteps; i++) {
   b4264:	3401      	adds	r4, #1
            tipStepper.step(-i);
   b4266:	f000 fb07 	bl	b4878 <_ZN7Stepper4stepEi>
    for (i = 0; i < totalSteps; i++) {
   b426a:	2c32      	cmp	r4, #50	; 0x32
   b426c:	d1e2      	bne.n	b4234 <_Z10ScanSpiralv+0xc>
        }
    }
       tiltStepper.setSpeed(RPM);
   b426e:	480d      	ldr	r0, [pc, #52]	; (b42a4 <_Z10ScanSpiralv+0x7c>)
   b4270:	210a      	movs	r1, #10
   b4272:	f000 fa2f 	bl	b46d4 <_ZN7Stepper8setSpeedEl>
        tiltStepper.setSpeed(RPM);
   b4276:	480b      	ldr	r0, [pc, #44]	; (b42a4 <_Z10ScanSpiralv+0x7c>)
   b4278:	210a      	movs	r1, #10
   b427a:	f000 fa2b 	bl	b46d4 <_ZN7Stepper8setSpeedEl>
        tiltStepper.step(totalSteps / 2);
   b427e:	4809      	ldr	r0, [pc, #36]	; (b42a4 <_Z10ScanSpiralv+0x7c>)
   b4280:	2119      	movs	r1, #25
   b4282:	f000 faf9 	bl	b4878 <_ZN7Stepper4stepEi>
        tipStepper.step(totalSteps / 2);
   b4286:	4808      	ldr	r0, [pc, #32]	; (b42a8 <_Z10ScanSpiralv+0x80>)
   b4288:	2119      	movs	r1, #25
}
   b428a:	b005      	add	sp, #20
   b428c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        tipStepper.step(totalSteps / 2);
   b4290:	f000 baf2 	b.w	b4878 <_ZN7Stepper4stepEi>
            tiltStepper.step(-i);
   b4294:	4261      	negs	r1, r4
   b4296:	4628      	mov	r0, r5
   b4298:	9103      	str	r1, [sp, #12]
   b429a:	f000 faed 	bl	b4878 <_ZN7Stepper4stepEi>
            tipStepper.step(-i);
   b429e:	9903      	ldr	r1, [sp, #12]
   b42a0:	e7df      	b.n	b4262 <_Z10ScanSpiralv+0x3a>
   b42a2:	bf00      	nop
   b42a4:	2003e64c 	.word	0x2003e64c
   b42a8:	2003e678 	.word	0x2003e678

000b42ac <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void onDataReceived(const uint8_t *data, size_t len, const BlePeerDevice &peer, void *context) {
   b42ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b42b0:	b092      	sub	sp, #72	; 0x48
   b42b2:	4615      	mov	r5, r2
   b42b4:	460e      	mov	r6, r1
   b42b6:	4604      	mov	r4, r0
    Serial.printf("Recieved data from; %02X:%02X:%02X:%02X:%02X:%02X \n", peer.address()[0], peer.address()[1], peer.address()[2], peer.address()[3], peer.address()[4], peer.address()[5]);
   b42b8:	f002 f976 	bl	b65a8 <_Z16_fetch_usbserialv>
   b42bc:	4629      	mov	r1, r5
   b42be:	4607      	mov	r7, r0
   b42c0:	a806      	add	r0, sp, #24
   b42c2:	f001 f8c7 	bl	b5454 <_ZNK8particle13BlePeerDevice7addressEv>
   b42c6:	2100      	movs	r1, #0
   b42c8:	a806      	add	r0, sp, #24
   b42ca:	f000 ff29 	bl	b5120 <_ZNK8particle10BleAddressixEh>
   b42ce:	4629      	mov	r1, r5
   b42d0:	9005      	str	r0, [sp, #20]
   b42d2:	a808      	add	r0, sp, #32
   b42d4:	f001 f8be 	bl	b5454 <_ZNK8particle13BlePeerDevice7addressEv>
   b42d8:	2101      	movs	r1, #1
   b42da:	a808      	add	r0, sp, #32
   b42dc:	f000 ff20 	bl	b5120 <_ZNK8particle10BleAddressixEh>
   b42e0:	4629      	mov	r1, r5
   b42e2:	9004      	str	r0, [sp, #16]
   b42e4:	a80a      	add	r0, sp, #40	; 0x28
   b42e6:	f001 f8b5 	bl	b5454 <_ZNK8particle13BlePeerDevice7addressEv>
   b42ea:	2102      	movs	r1, #2
   b42ec:	a80a      	add	r0, sp, #40	; 0x28
   b42ee:	f000 ff17 	bl	b5120 <_ZNK8particle10BleAddressixEh>
   b42f2:	4629      	mov	r1, r5
   b42f4:	4680      	mov	r8, r0
   b42f6:	a80c      	add	r0, sp, #48	; 0x30
   b42f8:	f001 f8ac 	bl	b5454 <_ZNK8particle13BlePeerDevice7addressEv>
   b42fc:	2103      	movs	r1, #3
   b42fe:	a80c      	add	r0, sp, #48	; 0x30
   b4300:	f000 ff0e 	bl	b5120 <_ZNK8particle10BleAddressixEh>
   b4304:	4629      	mov	r1, r5
   b4306:	4681      	mov	r9, r0
   b4308:	a80e      	add	r0, sp, #56	; 0x38
   b430a:	f001 f8a3 	bl	b5454 <_ZNK8particle13BlePeerDevice7addressEv>
   b430e:	2104      	movs	r1, #4
   b4310:	a80e      	add	r0, sp, #56	; 0x38
   b4312:	f000 ff05 	bl	b5120 <_ZNK8particle10BleAddressixEh>
   b4316:	4629      	mov	r1, r5
   b4318:	4682      	mov	sl, r0
   b431a:	a810      	add	r0, sp, #64	; 0x40
   b431c:	f001 f89a 	bl	b5454 <_ZNK8particle13BlePeerDevice7addressEv>
   b4320:	2105      	movs	r1, #5
   b4322:	a810      	add	r0, sp, #64	; 0x40
   b4324:	f000 fefc 	bl	b5120 <_ZNK8particle10BleAddressixEh>
   b4328:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   b432c:	496f      	ldr	r1, [pc, #444]	; (b44ec <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x240>)
   b432e:	e9cd a002 	strd	sl, r0, [sp, #8]
   b4332:	e9cd 8900 	strd	r8, r9, [sp]
   b4336:	4638      	mov	r0, r7
   b4338:	f7ff feb9 	bl	b40ae <_ZN5Print6printfEPKcz>
    Serial.printf("Bytes:");
   b433c:	f002 f934 	bl	b65a8 <_Z16_fetch_usbserialv>
   b4340:	496b      	ldr	r1, [pc, #428]	; (b44f0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x244>)
        Serial.printf("%02X", data[i]);
   b4342:	f8df 81e0 	ldr.w	r8, [pc, #480]	; b4524 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x278>
    Serial.printf("Bytes:");
   b4346:	f7ff feb2 	bl	b40ae <_ZN5Print6printfEPKcz>
   b434a:	2500      	movs	r5, #0
    for (i = 0; i < len; i++) {
   b434c:	b2ef      	uxtb	r7, r5
   b434e:	42be      	cmp	r6, r7
   b4350:	f105 0501 	add.w	r5, r5, #1
   b4354:	d906      	bls.n	b4364 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xb8>
        Serial.printf("%02X", data[i]);
   b4356:	f002 f927 	bl	b65a8 <_Z16_fetch_usbserialv>
   b435a:	5de2      	ldrb	r2, [r4, r7]
   b435c:	4641      	mov	r1, r8
   b435e:	f7ff fea6 	bl	b40ae <_ZN5Print6printfEPKcz>
    for (i = 0; i < len; i++) {
   b4362:	e7f3      	b.n	b434c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa0>
    if (data[0] == 0x21 && data[1] == 0x42 && data[2] == 0x35 && data[3] == 0x31) {
   b4364:	7823      	ldrb	r3, [r4, #0]
   b4366:	2b21      	cmp	r3, #33	; 0x21
   b4368:	d118      	bne.n	b439c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xf0>
   b436a:	7863      	ldrb	r3, [r4, #1]
   b436c:	2b42      	cmp	r3, #66	; 0x42
   b436e:	d115      	bne.n	b439c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xf0>
   b4370:	78a3      	ldrb	r3, [r4, #2]
   b4372:	2b35      	cmp	r3, #53	; 0x35
   b4374:	d120      	bne.n	b43b8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x10c>
   b4376:	78e3      	ldrb	r3, [r4, #3]
   b4378:	2b31      	cmp	r3, #49	; 0x31
   b437a:	d11d      	bne.n	b43b8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x10c>
        Serial.printf("\nUp Arrow");
   b437c:	f002 f914 	bl	b65a8 <_Z16_fetch_usbserialv>
   b4380:	495c      	ldr	r1, [pc, #368]	; (b44f4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x248>)
   b4382:	f7ff fe94 	bl	b40ae <_ZN5Print6printfEPKcz>
        tipStepper.step(stepSize);
   b4386:	4b5c      	ldr	r3, [pc, #368]	; (b44f8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x24c>)
   b4388:	485c      	ldr	r0, [pc, #368]	; (b44fc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x250>)
   b438a:	6819      	ldr	r1, [r3, #0]
   b438c:	f000 fa74 	bl	b4878 <_ZN7Stepper4stepEi>
    if (data[0] == 0x21 && data[1] == 0x42 && data[2] == 0x36 && data[3] == 0x31) {
   b4390:	7823      	ldrb	r3, [r4, #0]
   b4392:	2b21      	cmp	r3, #33	; 0x21
   b4394:	d102      	bne.n	b439c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xf0>
   b4396:	7863      	ldrb	r3, [r4, #1]
   b4398:	2b42      	cmp	r3, #66	; 0x42
   b439a:	d00d      	beq.n	b43b8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x10c>
    Serial.printf("\n");
   b439c:	f002 f904 	bl	b65a8 <_Z16_fetch_usbserialv>
   b43a0:	4957      	ldr	r1, [pc, #348]	; (b4500 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x254>)
   b43a2:	f7ff fe84 	bl	b40ae <_ZN5Print6printfEPKcz>
    Serial.printf("Message: %s \n", (char *)data);
   b43a6:	f002 f8ff 	bl	b65a8 <_Z16_fetch_usbserialv>
   b43aa:	4956      	ldr	r1, [pc, #344]	; (b4504 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x258>)
   b43ac:	4622      	mov	r2, r4
   b43ae:	f7ff fe7e 	bl	b40ae <_ZN5Print6printfEPKcz>
}
   b43b2:	b012      	add	sp, #72	; 0x48
   b43b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (data[0] == 0x21 && data[1] == 0x42 && data[2] == 0x36 && data[3] == 0x31) {
   b43b8:	78a3      	ldrb	r3, [r4, #2]
   b43ba:	2b36      	cmp	r3, #54	; 0x36
   b43bc:	d113      	bne.n	b43e6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x13a>
   b43be:	78e3      	ldrb	r3, [r4, #3]
   b43c0:	2b31      	cmp	r3, #49	; 0x31
   b43c2:	d110      	bne.n	b43e6 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x13a>
        Serial.printf("\nDown Arrow");
   b43c4:	f002 f8f0 	bl	b65a8 <_Z16_fetch_usbserialv>
   b43c8:	494f      	ldr	r1, [pc, #316]	; (b4508 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x25c>)
   b43ca:	f7ff fe70 	bl	b40ae <_ZN5Print6printfEPKcz>
        tipStepper.step(-stepSize);
   b43ce:	4b4a      	ldr	r3, [pc, #296]	; (b44f8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x24c>)
   b43d0:	484a      	ldr	r0, [pc, #296]	; (b44fc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x250>)
   b43d2:	6819      	ldr	r1, [r3, #0]
   b43d4:	4249      	negs	r1, r1
   b43d6:	f000 fa4f 	bl	b4878 <_ZN7Stepper4stepEi>
    if (data[0] == 0x21 && data[1] == 0x42 && data[2] == 0x38 && data[3] == 0x31) {
   b43da:	7823      	ldrb	r3, [r4, #0]
   b43dc:	2b21      	cmp	r3, #33	; 0x21
   b43de:	d1dd      	bne.n	b439c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xf0>
   b43e0:	7863      	ldrb	r3, [r4, #1]
   b43e2:	2b42      	cmp	r3, #66	; 0x42
   b43e4:	d1da      	bne.n	b439c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xf0>
   b43e6:	78a3      	ldrb	r3, [r4, #2]
   b43e8:	2b38      	cmp	r3, #56	; 0x38
   b43ea:	d113      	bne.n	b4414 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x168>
   b43ec:	78e3      	ldrb	r3, [r4, #3]
   b43ee:	2b31      	cmp	r3, #49	; 0x31
   b43f0:	d110      	bne.n	b4414 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x168>
        Serial.printf("\nRight Arrow");
   b43f2:	f002 f8d9 	bl	b65a8 <_Z16_fetch_usbserialv>
   b43f6:	4945      	ldr	r1, [pc, #276]	; (b450c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x260>)
   b43f8:	f7ff fe59 	bl	b40ae <_ZN5Print6printfEPKcz>
        tiltStepper.step(-stepSize);
   b43fc:	4b3e      	ldr	r3, [pc, #248]	; (b44f8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x24c>)
   b43fe:	4844      	ldr	r0, [pc, #272]	; (b4510 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x264>)
   b4400:	6819      	ldr	r1, [r3, #0]
   b4402:	4249      	negs	r1, r1
   b4404:	f000 fa38 	bl	b4878 <_ZN7Stepper4stepEi>
    if (data[0] == 0x21 && data[1] == 0x42 && data[2] == 0x37 && data[3] == 0x31) {
   b4408:	7823      	ldrb	r3, [r4, #0]
   b440a:	2b21      	cmp	r3, #33	; 0x21
   b440c:	d1c6      	bne.n	b439c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xf0>
   b440e:	7863      	ldrb	r3, [r4, #1]
   b4410:	2b42      	cmp	r3, #66	; 0x42
   b4412:	d1c3      	bne.n	b439c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xf0>
   b4414:	78a3      	ldrb	r3, [r4, #2]
   b4416:	2b37      	cmp	r3, #55	; 0x37
   b4418:	d112      	bne.n	b4440 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x194>
   b441a:	78e3      	ldrb	r3, [r4, #3]
   b441c:	2b31      	cmp	r3, #49	; 0x31
   b441e:	d10f      	bne.n	b4440 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x194>
        Serial.printf("\nLeft Arrow");
   b4420:	f002 f8c2 	bl	b65a8 <_Z16_fetch_usbserialv>
   b4424:	493b      	ldr	r1, [pc, #236]	; (b4514 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x268>)
   b4426:	f7ff fe42 	bl	b40ae <_ZN5Print6printfEPKcz>
        tiltStepper.step(stepSize);
   b442a:	4b33      	ldr	r3, [pc, #204]	; (b44f8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x24c>)
   b442c:	4838      	ldr	r0, [pc, #224]	; (b4510 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x264>)
   b442e:	6819      	ldr	r1, [r3, #0]
   b4430:	f000 fa22 	bl	b4878 <_ZN7Stepper4stepEi>
    if (data[0] == 0x21 && data[1] == 0x42 && data[2] == 0x31 && data[3] == 0x31) {
   b4434:	7823      	ldrb	r3, [r4, #0]
   b4436:	2b21      	cmp	r3, #33	; 0x21
   b4438:	d1b0      	bne.n	b439c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xf0>
   b443a:	7863      	ldrb	r3, [r4, #1]
   b443c:	2b42      	cmp	r3, #66	; 0x42
   b443e:	d1ad      	bne.n	b439c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xf0>
   b4440:	78a3      	ldrb	r3, [r4, #2]
   b4442:	2b31      	cmp	r3, #49	; 0x31
   b4444:	d112      	bne.n	b446c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1c0>
   b4446:	78e3      	ldrb	r3, [r4, #3]
   b4448:	2b31      	cmp	r3, #49	; 0x31
   b444a:	d10f      	bne.n	b446c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1c0>
        stepSize++;
   b444c:	4d2a      	ldr	r5, [pc, #168]	; (b44f8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x24c>)
   b444e:	682b      	ldr	r3, [r5, #0]
   b4450:	3301      	adds	r3, #1
   b4452:	602b      	str	r3, [r5, #0]
        Serial.printf("stepsize = %i", stepSize);
   b4454:	f002 f8a8 	bl	b65a8 <_Z16_fetch_usbserialv>
   b4458:	682a      	ldr	r2, [r5, #0]
   b445a:	492f      	ldr	r1, [pc, #188]	; (b4518 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x26c>)
   b445c:	f7ff fe27 	bl	b40ae <_ZN5Print6printfEPKcz>
    if (data[0] == 0x21 && data[1] == 0x42 && data[2] == 0x32 && data[3] == 0x31) {
   b4460:	7823      	ldrb	r3, [r4, #0]
   b4462:	2b21      	cmp	r3, #33	; 0x21
   b4464:	d19a      	bne.n	b439c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xf0>
   b4466:	7863      	ldrb	r3, [r4, #1]
   b4468:	2b42      	cmp	r3, #66	; 0x42
   b446a:	d197      	bne.n	b439c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xf0>
   b446c:	78a3      	ldrb	r3, [r4, #2]
   b446e:	2b32      	cmp	r3, #50	; 0x32
   b4470:	d116      	bne.n	b44a0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1f4>
   b4472:	78e3      	ldrb	r3, [r4, #3]
   b4474:	2b31      	cmp	r3, #49	; 0x31
   b4476:	d113      	bne.n	b44a0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1f4>
        stepSize--;
   b4478:	4d1f      	ldr	r5, [pc, #124]	; (b44f8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x24c>)
   b447a:	682b      	ldr	r3, [r5, #0]
   b447c:	3b01      	subs	r3, #1
        if (stepSize < 1) {
   b447e:	2b00      	cmp	r3, #0
            stepSize = 1;
   b4480:	bfd8      	it	le
   b4482:	2301      	movle	r3, #1
   b4484:	602b      	str	r3, [r5, #0]
        Serial.printf("stepsize = %i", stepSize);
   b4486:	f002 f88f 	bl	b65a8 <_Z16_fetch_usbserialv>
   b448a:	682a      	ldr	r2, [r5, #0]
   b448c:	4922      	ldr	r1, [pc, #136]	; (b4518 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x26c>)
   b448e:	f7ff fe0e 	bl	b40ae <_ZN5Print6printfEPKcz>
    if (data[0] == 0x21 && data[1] == 0x42 && data[2] == 0x33 && data[3] == 0x31) {
   b4492:	7823      	ldrb	r3, [r4, #0]
   b4494:	2b21      	cmp	r3, #33	; 0x21
   b4496:	d181      	bne.n	b439c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xf0>
   b4498:	7863      	ldrb	r3, [r4, #1]
   b449a:	2b42      	cmp	r3, #66	; 0x42
   b449c:	f47f af7e 	bne.w	b439c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xf0>
   b44a0:	78a3      	ldrb	r3, [r4, #2]
   b44a2:	2b33      	cmp	r3, #51	; 0x33
   b44a4:	d111      	bne.n	b44ca <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x21e>
   b44a6:	78e3      	ldrb	r3, [r4, #3]
   b44a8:	2b31      	cmp	r3, #49	; 0x31
   b44aa:	d10e      	bne.n	b44ca <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x21e>
        Serial.printf("\nbutton3");
   b44ac:	f002 f87c 	bl	b65a8 <_Z16_fetch_usbserialv>
   b44b0:	491a      	ldr	r1, [pc, #104]	; (b451c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x270>)
   b44b2:	f7ff fdfc 	bl	b40ae <_ZN5Print6printfEPKcz>
        ScanBeamHorizontal();
   b44b6:	f7ff fe8d 	bl	b41d4 <_Z18ScanBeamHorizontalv>
    if (data[0] == 0x21 && data[1] == 0x42 && data[2] == 0x34 && data[3] == 0x31) {
   b44ba:	7823      	ldrb	r3, [r4, #0]
   b44bc:	2b21      	cmp	r3, #33	; 0x21
   b44be:	f47f af6d 	bne.w	b439c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xf0>
   b44c2:	7863      	ldrb	r3, [r4, #1]
   b44c4:	2b42      	cmp	r3, #66	; 0x42
   b44c6:	f47f af69 	bne.w	b439c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xf0>
   b44ca:	78a3      	ldrb	r3, [r4, #2]
   b44cc:	2b34      	cmp	r3, #52	; 0x34
   b44ce:	f47f af65 	bne.w	b439c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xf0>
   b44d2:	78e3      	ldrb	r3, [r4, #3]
   b44d4:	2b31      	cmp	r3, #49	; 0x31
   b44d6:	f47f af61 	bne.w	b439c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xf0>
        Serial.printf("\nbutton4");
   b44da:	f002 f865 	bl	b65a8 <_Z16_fetch_usbserialv>
   b44de:	4910      	ldr	r1, [pc, #64]	; (b4520 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x274>)
   b44e0:	f7ff fde5 	bl	b40ae <_ZN5Print6printfEPKcz>
        ScanSpiral();
   b44e4:	f7ff fea0 	bl	b4228 <_Z10ScanSpiralv>
   b44e8:	e758      	b.n	b439c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xf0>
   b44ea:	bf00      	nop
   b44ec:	000b6ee4 	.word	0x000b6ee4
   b44f0:	000b6f18 	.word	0x000b6f18
   b44f4:	000b6f24 	.word	0x000b6f24
   b44f8:	2003e634 	.word	0x2003e634
   b44fc:	2003e678 	.word	0x2003e678
   b4500:	000b6f16 	.word	0x000b6f16
   b4504:	000b6f73 	.word	0x000b6f73
   b4508:	000b6f2e 	.word	0x000b6f2e
   b450c:	000b6f3a 	.word	0x000b6f3a
   b4510:	2003e64c 	.word	0x2003e64c
   b4514:	000b6f47 	.word	0x000b6f47
   b4518:	000b6f53 	.word	0x000b6f53
   b451c:	000b6f61 	.word	0x000b6f61
   b4520:	000b6f6a 	.word	0x000b6f6a
   b4524:	000b6f1f 	.word	0x000b6f1f

000b4528 <_GLOBAL__sub_I_SystemMode>:
}
   b4528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
              error_(SYSTEM_ERROR_NONE) {
   b452c:	4b48      	ldr	r3, [pc, #288]	; (b4650 <_GLOBAL__sub_I_SystemMode+0x128>)
    SleepResult() {}
   b452e:	4a49      	ldr	r2, [pc, #292]	; (b4654 <_GLOBAL__sub_I_SystemMode+0x12c>)
   b4530:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4532:	2700      	movs	r7, #0
   b4534:	b098      	sub	sp, #96	; 0x60
   b4536:	e9c3 7700 	strd	r7, r7, [r3]
        set_system_mode(mode);
   b453a:	2002      	movs	r0, #2
   b453c:	f000 fb6c 	bl	b4c18 <set_system_mode>
Stepper tipStepper(stepsPerRevolution, D8, D6, D7, D5);
   b4540:	2307      	movs	r3, #7
   b4542:	2205      	movs	r2, #5
   b4544:	e9cd 3200 	strd	r3, r2, [sp]
   b4548:	f44f 6100 	mov.w	r1, #2048	; 0x800
   b454c:	2306      	movs	r3, #6
   b454e:	2208      	movs	r2, #8
   b4550:	4841      	ldr	r0, [pc, #260]	; (b4658 <_GLOBAL__sub_I_SystemMode+0x130>)
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b4552:	4c42      	ldr	r4, [pc, #264]	; (b465c <_GLOBAL__sub_I_SystemMode+0x134>)
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b4554:	4d42      	ldr	r5, [pc, #264]	; (b4660 <_GLOBAL__sub_I_SystemMode+0x138>)
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b4556:	4e43      	ldr	r6, [pc, #268]	; (b4664 <_GLOBAL__sub_I_SystemMode+0x13c>)
Stepper tipStepper(stepsPerRevolution, D8, D6, D7, D5);
   b4558:	f000 f89a 	bl	b4690 <_ZN7StepperC1Eiiiii>
Stepper tiltStepper(stepsPerRevolution, A5, D12, D13, D11);
   b455c:	230d      	movs	r3, #13
   b455e:	210b      	movs	r1, #11
   b4560:	220e      	movs	r2, #14
   b4562:	e9cd 3100 	strd	r3, r1, [sp]
   b4566:	4840      	ldr	r0, [pc, #256]	; (b4668 <_GLOBAL__sub_I_SystemMode+0x140>)
   b4568:	230c      	movs	r3, #12
   b456a:	f44f 6100 	mov.w	r1, #2048	; 0x800
   b456e:	f000 f88f 	bl	b4690 <_ZN7StepperC1Eiiiii>
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b4572:	493e      	ldr	r1, [pc, #248]	; (b466c <_GLOBAL__sub_I_SystemMode+0x144>)
   b4574:	4620      	mov	r0, r4
   b4576:	f000 fee9 	bl	b534c <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b457a:	493d      	ldr	r1, [pc, #244]	; (b4670 <_GLOBAL__sub_I_SystemMode+0x148>)
   b457c:	4628      	mov	r0, r5
   b457e:	f000 fee5 	bl	b534c <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b4582:	493c      	ldr	r1, [pc, #240]	; (b4674 <_GLOBAL__sub_I_SystemMode+0x14c>)
   b4584:	4630      	mov	r0, r6
   b4586:	f000 fee1 	bl	b534c <_ZN8particle7BleUuidC1EPKc>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags()
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
   b458a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b458c:	f10d 0c10 	add.w	ip, sp, #16
   b4590:	46a0      	mov	r8, r4
   b4592:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b4596:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
   b459a:	f8d6 a000 	ldr.w	sl, [r6]
   b459e:	f8cc a000 	str.w	sl, [ip]
   b45a2:	ae09      	add	r6, sp, #36	; 0x24
   b45a4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   b45a6:	f10d 0c10 	add.w	ip, sp, #16
   b45aa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b45ae:	f8d8 9000 	ldr.w	r9, [r8]
   b45b2:	f8c6 9000 	str.w	r9, [r6]
   b45b6:	ae0e      	add	r6, sp, #56	; 0x38
   b45b8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b45ba:	f8df e0cc 	ldr.w	lr, [pc, #204]	; b4688 <_GLOBAL__sub_I_SystemMode+0x160>
   b45be:	f8c6 a000 	str.w	sl, [r6]
        BleUuid sUuid(svcUuid);
   b45c2:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
      constexpr __shared_count() noexcept : _M_pi(0)
   b45c6:	e9ce 7700 	strd	r7, r7, [lr]
   b45ca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b45ce:	ae13      	add	r6, sp, #76	; 0x4c
   b45d0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b45d2:	f8c6 9000 	str.w	r9, [r6]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b45d6:	ae13      	add	r6, sp, #76	; 0x4c
   b45d8:	ab0e      	add	r3, sp, #56	; 0x38
   b45da:	4670      	mov	r0, lr
   b45dc:	e9cd 7701 	strd	r7, r7, [sp, #4]
   b45e0:	4925      	ldr	r1, [pc, #148]	; (b4678 <_GLOBAL__sub_I_SystemMode+0x150>)
   b45e2:	9600      	str	r6, [sp, #0]
   b45e4:	f04f 0210 	mov.w	r2, #16
   b45e8:	f001 fb82 	bl	b5cf0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   b45ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b45ee:	f10d 0c10 	add.w	ip, sp, #16
   b45f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b45f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b45f8:	f8d5 e000 	ldr.w	lr, [r5]
   b45fc:	f8d8 8000 	ldr.w	r8, [r8]
   b4600:	f8cc e000 	str.w	lr, [ip]
   b4604:	ad09      	add	r5, sp, #36	; 0x24
   b4606:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4608:	f8c5 8000 	str.w	r8, [r5]
        BleUuid cUuid(charUuid);
   b460c:	ad04      	add	r5, sp, #16
   b460e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4610:	ac0e      	add	r4, sp, #56	; 0x38
   b4612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
      : _M_ptr(0), _M_refcount()
   b4614:	f8df c074 	ldr.w	ip, [pc, #116]	; b468c <_GLOBAL__sub_I_SystemMode+0x164>
   b4618:	f8c4 e000 	str.w	lr, [r4]
        BleUuid sUuid(svcUuid);
   b461c:	ad09      	add	r5, sp, #36	; 0x24
      constexpr __shared_count() noexcept : _M_pi(0)
   b461e:	e9cc 7700 	strd	r7, r7, [ip]
   b4622:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4624:	4634      	mov	r4, r6
   b4626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b4628:	4b14      	ldr	r3, [pc, #80]	; (b467c <_GLOBAL__sub_I_SystemMode+0x154>)
        BleUuid sUuid(svcUuid);
   b462a:	f8c4 8000 	str.w	r8, [r4]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b462e:	4660      	mov	r0, ip
   b4630:	e9cd 6300 	strd	r6, r3, [sp]
   b4634:	4912      	ldr	r1, [pc, #72]	; (b4680 <_GLOBAL__sub_I_SystemMode+0x158>)
   b4636:	9702      	str	r7, [sp, #8]
   b4638:	ab0e      	add	r3, sp, #56	; 0x38
   b463a:	f04f 0204 	mov.w	r2, #4
   b463e:	f001 fb57 	bl	b5cf0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
BleAdvertisingData data;
   b4642:	4810      	ldr	r0, [pc, #64]	; (b4684 <_GLOBAL__sub_I_SystemMode+0x15c>)
}
   b4644:	b018      	add	sp, #96	; 0x60
   b4646:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
BleAdvertisingData data;
   b464a:	f001 b98a 	b.w	b5962 <_ZN8particle18BleAdvertisingDataC1Ev>
   b464e:	bf00      	nop
   b4650:	2003e5ec 	.word	0x2003e5ec
   b4654:	ffff0000 	.word	0xffff0000
   b4658:	2003e678 	.word	0x2003e678
   b465c:	2003e5f8 	.word	0x2003e5f8
   b4660:	2003e60c 	.word	0x2003e60c
   b4664:	2003e620 	.word	0x2003e620
   b4668:	2003e64c 	.word	0x2003e64c
   b466c:	000b6f81 	.word	0x000b6f81
   b4670:	000b6fa6 	.word	0x000b6fa6
   b4674:	000b6fcb 	.word	0x000b6fcb
   b4678:	000b6ff0 	.word	0x000b6ff0
   b467c:	000b42ad 	.word	0x000b42ad
   b4680:	000b6ff3 	.word	0x000b6ff3
   b4684:	2003e638 	.word	0x2003e638
   b4688:	2003e6a4 	.word	0x2003e6a4
   b468c:	2003e644 	.word	0x2003e644

000b4690 <_ZN7StepperC1Eiiiii>:

/*
 *   constructor for four-pin version
 *   Sets which wires should control the motor.
 */
Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2,
   b4690:	b538      	push	{r3, r4, r5, lr}
  this->last_step_time = 0; // time stamp in us of the last step taken
  this->number_of_steps = number_of_steps; // total number of steps for this motor

  // Arduino pins for the motor control connection:
  this->motor_pin_1 = motor_pin_1;
  this->motor_pin_2 = motor_pin_2;
   b4692:	e9c0 2305 	strd	r2, r3, [r0, #20]
  this->motor_pin_3 = motor_pin_3;
   b4696:	9b04      	ldr	r3, [sp, #16]
   b4698:	61c3      	str	r3, [r0, #28]
Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2,
   b469a:	4604      	mov	r4, r0
  this->motor_pin_4 = motor_pin_4;
   b469c:	9b05      	ldr	r3, [sp, #20]
   b469e:	6203      	str	r3, [r0, #32]
  this->step_number = 0;    // which step the motor is on
   b46a0:	2500      	movs	r5, #0
   b46a2:	6105      	str	r5, [r0, #16]
  this->direction = 0;      // motor direction
   b46a4:	6005      	str	r5, [r0, #0]
  this->last_step_time = 0; // time stamp in us of the last step taken
   b46a6:	6285      	str	r5, [r0, #40]	; 0x28
  this->number_of_steps = number_of_steps; // total number of steps for this motor
   b46a8:	6081      	str	r1, [r0, #8]

  // setup the pins on the microcontroller:
  pinMode(this->motor_pin_1, OUTPUT);
   b46aa:	b290      	uxth	r0, r2
   b46ac:	2101      	movs	r1, #1
   b46ae:	f002 f959 	bl	b6964 <pinMode>
  pinMode(this->motor_pin_2, OUTPUT);
   b46b2:	8b20      	ldrh	r0, [r4, #24]
   b46b4:	2101      	movs	r1, #1
   b46b6:	f002 f955 	bl	b6964 <pinMode>
  pinMode(this->motor_pin_3, OUTPUT);
   b46ba:	8ba0      	ldrh	r0, [r4, #28]
   b46bc:	2101      	movs	r1, #1
   b46be:	f002 f951 	bl	b6964 <pinMode>
  pinMode(this->motor_pin_4, OUTPUT);
   b46c2:	8c20      	ldrh	r0, [r4, #32]
   b46c4:	2101      	movs	r1, #1
   b46c6:	f002 f94d 	bl	b6964 <pinMode>

  // When there are 4 pins, set the others to 0:
  this->motor_pin_5 = 0;

  // pin_count is used by the stepMotor() method:
  this->pin_count = 4;
   b46ca:	2304      	movs	r3, #4
  this->motor_pin_5 = 0;
   b46cc:	6265      	str	r5, [r4, #36]	; 0x24
  this->pin_count = 4;
   b46ce:	60e3      	str	r3, [r4, #12]
}
   b46d0:	4620      	mov	r0, r4
   b46d2:	bd38      	pop	{r3, r4, r5, pc}

000b46d4 <_ZN7Stepper8setSpeedEl>:
/*
 * Sets the speed in revs per minute
 */
void Stepper::setSpeed(long whatSpeed)
{
  this->step_delay = 60L * 1000L * 1000L / this->number_of_steps / whatSpeed;
   b46d4:	6882      	ldr	r2, [r0, #8]
   b46d6:	4b03      	ldr	r3, [pc, #12]	; (b46e4 <_ZN7Stepper8setSpeedEl+0x10>)
   b46d8:	fb93 f3f2 	sdiv	r3, r3, r2
   b46dc:	fb93 f1f1 	sdiv	r1, r3, r1
   b46e0:	6041      	str	r1, [r0, #4]
}
   b46e2:	4770      	bx	lr
   b46e4:	03938700 	.word	0x03938700

000b46e8 <_ZN7Stepper9stepMotorEi>:

/*
 * Moves the motor forward or backwards.
 */
void Stepper::stepMotor(int thisStep)
{
   b46e8:	b538      	push	{r3, r4, r5, lr}
  if (this->pin_count == 2) {
   b46ea:	68c3      	ldr	r3, [r0, #12]
   b46ec:	2b02      	cmp	r3, #2
{
   b46ee:	4604      	mov	r4, r0
   b46f0:	460d      	mov	r5, r1
  if (this->pin_count == 2) {
   b46f2:	d10d      	bne.n	b4710 <_ZN7Stepper9stepMotorEi+0x28>
    switch (thisStep) {
   b46f4:	2903      	cmp	r1, #3
   b46f6:	d80b      	bhi.n	b4710 <_ZN7Stepper9stepMotorEi+0x28>
   b46f8:	e8df f001 	tbb	[pc, r1]
   b46fc:	1b151302 	.word	0x1b151302
      case 0:  // 01
        digitalWrite(motor_pin_1, LOW);
   b4700:	2100      	movs	r1, #0
        digitalWrite(motor_pin_2, HIGH);
      break;
      case 1:  // 11
        digitalWrite(motor_pin_1, HIGH);
   b4702:	8aa0      	ldrh	r0, [r4, #20]
   b4704:	f002 f93f 	bl	b6986 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
   b4708:	2101      	movs	r1, #1
        digitalWrite(motor_pin_1, HIGH);
        digitalWrite(motor_pin_2, LOW);
      break;
      case 3:  // 00
        digitalWrite(motor_pin_1, LOW);
        digitalWrite(motor_pin_2, LOW);
   b470a:	8b20      	ldrh	r0, [r4, #24]
   b470c:	f002 f93b 	bl	b6986 <digitalWrite>
      break;
    }
  }
  if (this->pin_count == 4) {
   b4710:	68e3      	ldr	r3, [r4, #12]
   b4712:	2b04      	cmp	r3, #4
   b4714:	d11f      	bne.n	b4756 <_ZN7Stepper9stepMotorEi+0x6e>
    switch (thisStep) {
   b4716:	2d03      	cmp	r5, #3
   b4718:	d81d      	bhi.n	b4756 <_ZN7Stepper9stepMotorEi+0x6e>
   b471a:	e8df f005 	tbb	[pc, r5]
   b471e:	2a0c      	.short	0x2a0c
   b4720:	3e30      	.short	0x3e30
        digitalWrite(motor_pin_1, HIGH);
   b4722:	2101      	movs	r1, #1
   b4724:	e7ed      	b.n	b4702 <_ZN7Stepper9stepMotorEi+0x1a>
        digitalWrite(motor_pin_1, HIGH);
   b4726:	2101      	movs	r1, #1
        digitalWrite(motor_pin_1, LOW);
   b4728:	8aa0      	ldrh	r0, [r4, #20]
   b472a:	f002 f92c 	bl	b6986 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
   b472e:	2100      	movs	r1, #0
   b4730:	e7eb      	b.n	b470a <_ZN7Stepper9stepMotorEi+0x22>
        digitalWrite(motor_pin_1, LOW);
   b4732:	2100      	movs	r1, #0
   b4734:	e7f8      	b.n	b4728 <_ZN7Stepper9stepMotorEi+0x40>
      case 0:  // 1010
        digitalWrite(motor_pin_1, HIGH);
   b4736:	2101      	movs	r1, #1
   b4738:	8aa0      	ldrh	r0, [r4, #20]
   b473a:	f002 f924 	bl	b6986 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
   b473e:	2100      	movs	r1, #0
        digitalWrite(motor_pin_3, HIGH);
        digitalWrite(motor_pin_4, LOW);
      break;
      case 1:  // 0110
        digitalWrite(motor_pin_1, LOW);
        digitalWrite(motor_pin_2, HIGH);
   b4740:	8b20      	ldrh	r0, [r4, #24]
   b4742:	f002 f920 	bl	b6986 <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
   b4746:	2101      	movs	r1, #1
   b4748:	8ba0      	ldrh	r0, [r4, #28]
   b474a:	f002 f91c 	bl	b6986 <digitalWrite>
        digitalWrite(motor_pin_4, LOW);
   b474e:	2100      	movs	r1, #0
      break;
      case 3:  //1001
        digitalWrite(motor_pin_1, HIGH);
        digitalWrite(motor_pin_2, LOW);
        digitalWrite(motor_pin_3, LOW);
        digitalWrite(motor_pin_4, HIGH);
   b4750:	8c20      	ldrh	r0, [r4, #32]
   b4752:	f002 f918 	bl	b6986 <digitalWrite>
      break;
    }
  }

  if (this->pin_count == 5) {
   b4756:	68e3      	ldr	r3, [r4, #12]
   b4758:	2b05      	cmp	r3, #5
   b475a:	f040 808c 	bne.w	b4876 <_ZN7Stepper9stepMotorEi+0x18e>
    switch (thisStep) {
   b475e:	2d09      	cmp	r5, #9
   b4760:	f200 8089 	bhi.w	b4876 <_ZN7Stepper9stepMotorEi+0x18e>
   b4764:	e8df f005 	tbb	[pc, r5]
   b4768:	4937291f 	.word	0x4937291f
   b476c:	7167615f 	.word	0x7167615f
   b4770:	857f      	.short	0x857f
        digitalWrite(motor_pin_1, LOW);
   b4772:	2100      	movs	r1, #0
   b4774:	8aa0      	ldrh	r0, [r4, #20]
   b4776:	f002 f906 	bl	b6986 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
   b477a:	2101      	movs	r1, #1
   b477c:	e7e0      	b.n	b4740 <_ZN7Stepper9stepMotorEi+0x58>
        digitalWrite(motor_pin_1, LOW);
   b477e:	2100      	movs	r1, #0
   b4780:	8aa0      	ldrh	r0, [r4, #20]
   b4782:	f002 f900 	bl	b6986 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
   b4786:	2101      	movs	r1, #1
        digitalWrite(motor_pin_2, LOW);
   b4788:	8b20      	ldrh	r0, [r4, #24]
   b478a:	f002 f8fc 	bl	b6986 <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
   b478e:	2100      	movs	r1, #0
   b4790:	8ba0      	ldrh	r0, [r4, #28]
   b4792:	f002 f8f8 	bl	b6986 <digitalWrite>
        digitalWrite(motor_pin_4, HIGH);
   b4796:	2101      	movs	r1, #1
   b4798:	e7da      	b.n	b4750 <_ZN7Stepper9stepMotorEi+0x68>
        digitalWrite(motor_pin_1, HIGH);
   b479a:	2101      	movs	r1, #1
   b479c:	8aa0      	ldrh	r0, [r4, #20]
   b479e:	f002 f8f2 	bl	b6986 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
   b47a2:	2100      	movs	r1, #0
   b47a4:	e7f0      	b.n	b4788 <_ZN7Stepper9stepMotorEi+0xa0>
      case 0:  // 01101
        digitalWrite(motor_pin_1, LOW);
   b47a6:	2100      	movs	r1, #0
   b47a8:	8aa0      	ldrh	r0, [r4, #20]
   b47aa:	f002 f8ec 	bl	b6986 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
   b47ae:	2101      	movs	r1, #1
        digitalWrite(motor_pin_4, LOW);
        digitalWrite(motor_pin_5, HIGH);
        break;
      case 9:  // 00101
        digitalWrite(motor_pin_1, LOW);
        digitalWrite(motor_pin_2, LOW);
   b47b0:	8b20      	ldrh	r0, [r4, #24]
   b47b2:	f002 f8e8 	bl	b6986 <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
   b47b6:	2101      	movs	r1, #1
   b47b8:	e008      	b.n	b47cc <_ZN7Stepper9stepMotorEi+0xe4>
        digitalWrite(motor_pin_1, LOW);
   b47ba:	8aa0      	ldrh	r0, [r4, #20]
   b47bc:	2100      	movs	r1, #0
   b47be:	f002 f8e2 	bl	b6986 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
   b47c2:	2101      	movs	r1, #1
   b47c4:	8b20      	ldrh	r0, [r4, #24]
   b47c6:	f002 f8de 	bl	b6986 <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
   b47ca:	2100      	movs	r1, #0
        digitalWrite(motor_pin_3, HIGH);
   b47cc:	8ba0      	ldrh	r0, [r4, #28]
   b47ce:	f002 f8da 	bl	b6986 <digitalWrite>
        digitalWrite(motor_pin_4, LOW);
   b47d2:	2100      	movs	r1, #0
   b47d4:	e00c      	b.n	b47f0 <_ZN7Stepper9stepMotorEi+0x108>
        digitalWrite(motor_pin_1, LOW);
   b47d6:	8aa0      	ldrh	r0, [r4, #20]
   b47d8:	2100      	movs	r1, #0
   b47da:	f002 f8d4 	bl	b6986 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
   b47de:	8b20      	ldrh	r0, [r4, #24]
   b47e0:	2101      	movs	r1, #1
   b47e2:	f002 f8d0 	bl	b6986 <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
   b47e6:	2100      	movs	r1, #0
   b47e8:	8ba0      	ldrh	r0, [r4, #28]
   b47ea:	f002 f8cc 	bl	b6986 <digitalWrite>
        digitalWrite(motor_pin_4, HIGH);
   b47ee:	2101      	movs	r1, #1
        digitalWrite(motor_pin_4, LOW);
   b47f0:	8c20      	ldrh	r0, [r4, #32]
   b47f2:	f002 f8c8 	bl	b6986 <digitalWrite>
        digitalWrite(motor_pin_5, HIGH);
   b47f6:	2101      	movs	r1, #1
   b47f8:	e010      	b.n	b481c <_ZN7Stepper9stepMotorEi+0x134>
        digitalWrite(motor_pin_1, LOW);
   b47fa:	2100      	movs	r1, #0
        digitalWrite(motor_pin_1, HIGH);
   b47fc:	8aa0      	ldrh	r0, [r4, #20]
   b47fe:	f002 f8c2 	bl	b6986 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
   b4802:	2101      	movs	r1, #1
        digitalWrite(motor_pin_2, LOW);
   b4804:	8b20      	ldrh	r0, [r4, #24]
   b4806:	f002 f8be 	bl	b6986 <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
   b480a:	2100      	movs	r1, #0
        digitalWrite(motor_pin_3, HIGH);
   b480c:	8ba0      	ldrh	r0, [r4, #28]
   b480e:	f002 f8ba 	bl	b6986 <digitalWrite>
        digitalWrite(motor_pin_4, HIGH);
   b4812:	2101      	movs	r1, #1
        digitalWrite(motor_pin_4, LOW);
   b4814:	8c20      	ldrh	r0, [r4, #32]
   b4816:	f002 f8b6 	bl	b6986 <digitalWrite>
        digitalWrite(motor_pin_5, LOW);
   b481a:	2100      	movs	r1, #0
        digitalWrite(motor_pin_5, HIGH);
   b481c:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
        break;
    }
  }
}
   b481e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        digitalWrite(motor_pin_5, HIGH);
   b4822:	f002 b8b0 	b.w	b6986 <digitalWrite>
        digitalWrite(motor_pin_1, HIGH);
   b4826:	2101      	movs	r1, #1
   b4828:	e7e8      	b.n	b47fc <_ZN7Stepper9stepMotorEi+0x114>
        digitalWrite(motor_pin_1, HIGH);
   b482a:	2101      	movs	r1, #1
   b482c:	8aa0      	ldrh	r0, [r4, #20]
   b482e:	f002 f8aa 	bl	b6986 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
   b4832:	2100      	movs	r1, #0
   b4834:	e7e6      	b.n	b4804 <_ZN7Stepper9stepMotorEi+0x11c>
        digitalWrite(motor_pin_1, HIGH);
   b4836:	8aa0      	ldrh	r0, [r4, #20]
   b4838:	2101      	movs	r1, #1
   b483a:	f002 f8a4 	bl	b6986 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
   b483e:	2100      	movs	r1, #0
   b4840:	8b20      	ldrh	r0, [r4, #24]
   b4842:	f002 f8a0 	bl	b6986 <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
   b4846:	2101      	movs	r1, #1
   b4848:	e7e0      	b.n	b480c <_ZN7Stepper9stepMotorEi+0x124>
        digitalWrite(motor_pin_1, HIGH);
   b484a:	8aa0      	ldrh	r0, [r4, #20]
   b484c:	2101      	movs	r1, #1
   b484e:	f002 f89a 	bl	b6986 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
   b4852:	8b20      	ldrh	r0, [r4, #24]
   b4854:	2100      	movs	r1, #0
   b4856:	f002 f896 	bl	b6986 <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
   b485a:	2101      	movs	r1, #1
   b485c:	8ba0      	ldrh	r0, [r4, #28]
   b485e:	f002 f892 	bl	b6986 <digitalWrite>
        digitalWrite(motor_pin_4, LOW);
   b4862:	2100      	movs	r1, #0
   b4864:	e7d6      	b.n	b4814 <_ZN7Stepper9stepMotorEi+0x12c>
        digitalWrite(motor_pin_1, HIGH);
   b4866:	2101      	movs	r1, #1
        digitalWrite(motor_pin_1, LOW);
   b4868:	8aa0      	ldrh	r0, [r4, #20]
   b486a:	f002 f88c 	bl	b6986 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
   b486e:	2100      	movs	r1, #0
   b4870:	e79e      	b.n	b47b0 <_ZN7Stepper9stepMotorEi+0xc8>
        digitalWrite(motor_pin_1, LOW);
   b4872:	2100      	movs	r1, #0
   b4874:	e7f8      	b.n	b4868 <_ZN7Stepper9stepMotorEi+0x180>
}
   b4876:	bd38      	pop	{r3, r4, r5, pc}

000b4878 <_ZN7Stepper4stepEi>:
{
   b4878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (steps_to_move > 0) { this->direction = 1; }
   b487a:	2900      	cmp	r1, #0
  int steps_left = abs(steps_to_move);  // how many steps to take
   b487c:	ea81 75e1 	eor.w	r5, r1, r1, asr #31
{
   b4880:	4604      	mov	r4, r0
  int steps_left = abs(steps_to_move);  // how many steps to take
   b4882:	eba5 75e1 	sub.w	r5, r5, r1, asr #31
  if (steps_to_move > 0) { this->direction = 1; }
   b4886:	dd24      	ble.n	b48d2 <_ZN7Stepper4stepEi+0x5a>
   b4888:	2301      	movs	r3, #1
   b488a:	6023      	str	r3, [r4, #0]
          this->step_number = 0;
   b488c:	2700      	movs	r7, #0
        stepMotor(this->step_number % 10);
   b488e:	260a      	movs	r6, #10
  while (steps_left > 0)
   b4890:	b385      	cbz	r5, b48f4 <_ZN7Stepper4stepEi+0x7c>
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b4892:	f000 f869 	bl	b4968 <HAL_Timer_Get_Micro_Seconds>
    if (now - this->last_step_time >= this->step_delay)
   b4896:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b4898:	6862      	ldr	r2, [r4, #4]
   b489a:	1ac3      	subs	r3, r0, r3
   b489c:	4293      	cmp	r3, r2
   b489e:	d3f7      	bcc.n	b4890 <_ZN7Stepper4stepEi+0x18>
      if (this->direction == 1)
   b48a0:	6822      	ldr	r2, [r4, #0]
        this->step_number++;
   b48a2:	6923      	ldr	r3, [r4, #16]
      this->last_step_time = now;
   b48a4:	62a0      	str	r0, [r4, #40]	; 0x28
      if (this->direction == 1)
   b48a6:	2a01      	cmp	r2, #1
   b48a8:	d116      	bne.n	b48d8 <_ZN7Stepper4stepEi+0x60>
        if (this->step_number == this->number_of_steps) {
   b48aa:	68a2      	ldr	r2, [r4, #8]
        this->step_number++;
   b48ac:	3301      	adds	r3, #1
        if (this->step_number == this->number_of_steps) {
   b48ae:	4293      	cmp	r3, r2
          this->step_number = 0;
   b48b0:	bf08      	it	eq
   b48b2:	463b      	moveq	r3, r7
        this->step_number--;
   b48b4:	6123      	str	r3, [r4, #16]
      if (this->pin_count == 5)
   b48b6:	e9d4 3103 	ldrd	r3, r1, [r4, #12]
   b48ba:	2b05      	cmp	r3, #5
      steps_left--;
   b48bc:	f105 35ff 	add.w	r5, r5, #4294967295
      if (this->pin_count == 5)
   b48c0:	d110      	bne.n	b48e4 <_ZN7Stepper4stepEi+0x6c>
        stepMotor(this->step_number % 10);
   b48c2:	fb91 f3f6 	sdiv	r3, r1, r6
   b48c6:	fb06 1113 	mls	r1, r6, r3, r1
        stepMotor(this->step_number % 4);
   b48ca:	4620      	mov	r0, r4
   b48cc:	f7ff ff0c 	bl	b46e8 <_ZN7Stepper9stepMotorEi>
   b48d0:	e7de      	b.n	b4890 <_ZN7Stepper4stepEi+0x18>
  if (steps_to_move < 0) { this->direction = 0; }
   b48d2:	d0db      	beq.n	b488c <_ZN7Stepper4stepEi+0x14>
   b48d4:	2300      	movs	r3, #0
   b48d6:	e7d8      	b.n	b488a <_ZN7Stepper4stepEi+0x12>
        if (this->step_number == 0) {
   b48d8:	b90b      	cbnz	r3, b48de <_ZN7Stepper4stepEi+0x66>
          this->step_number = this->number_of_steps;
   b48da:	68a3      	ldr	r3, [r4, #8]
   b48dc:	6123      	str	r3, [r4, #16]
        this->step_number--;
   b48de:	6923      	ldr	r3, [r4, #16]
   b48e0:	3b01      	subs	r3, #1
   b48e2:	e7e7      	b.n	b48b4 <_ZN7Stepper4stepEi+0x3c>
        stepMotor(this->step_number % 4);
   b48e4:	424b      	negs	r3, r1
   b48e6:	f003 0303 	and.w	r3, r3, #3
   b48ea:	f001 0103 	and.w	r1, r1, #3
   b48ee:	bf58      	it	pl
   b48f0:	4259      	negpl	r1, r3
   b48f2:	e7ea      	b.n	b48ca <_ZN7Stepper4stepEi+0x52>
}
   b48f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000b48f8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b48f8:	b508      	push	{r3, lr}
   b48fa:	4b02      	ldr	r3, [pc, #8]	; (b4904 <netdb_freeaddrinfo+0xc>)
   b48fc:	681b      	ldr	r3, [r3, #0]
   b48fe:	689b      	ldr	r3, [r3, #8]
   b4900:	9301      	str	r3, [sp, #4]
   b4902:	bd08      	pop	{r3, pc}
   b4904:	00030268 	.word	0x00030268

000b4908 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4908:	b508      	push	{r3, lr}
   b490a:	4b02      	ldr	r3, [pc, #8]	; (b4914 <netdb_getaddrinfo+0xc>)
   b490c:	681b      	ldr	r3, [r3, #0]
   b490e:	68db      	ldr	r3, [r3, #12]
   b4910:	9301      	str	r3, [sp, #4]
   b4912:	bd08      	pop	{r3, pc}
   b4914:	00030268 	.word	0x00030268

000b4918 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4918:	b508      	push	{r3, lr}
   b491a:	4b02      	ldr	r3, [pc, #8]	; (b4924 <HAL_Pin_Mode+0xc>)
   b491c:	681b      	ldr	r3, [r3, #0]
   b491e:	689b      	ldr	r3, [r3, #8]
   b4920:	9301      	str	r3, [sp, #4]
   b4922:	bd08      	pop	{r3, pc}
   b4924:	0003022c 	.word	0x0003022c

000b4928 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b4928:	b508      	push	{r3, lr}
   b492a:	4b02      	ldr	r3, [pc, #8]	; (b4934 <HAL_Get_Pin_Mode+0xc>)
   b492c:	681b      	ldr	r3, [r3, #0]
   b492e:	68db      	ldr	r3, [r3, #12]
   b4930:	9301      	str	r3, [sp, #4]
   b4932:	bd08      	pop	{r3, pc}
   b4934:	0003022c 	.word	0x0003022c

000b4938 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b4938:	b508      	push	{r3, lr}
   b493a:	4b02      	ldr	r3, [pc, #8]	; (b4944 <HAL_GPIO_Write+0xc>)
   b493c:	681b      	ldr	r3, [r3, #0]
   b493e:	691b      	ldr	r3, [r3, #16]
   b4940:	9301      	str	r3, [sp, #4]
   b4942:	bd08      	pop	{r3, pc}
   b4944:	0003022c 	.word	0x0003022c

000b4948 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4948:	b508      	push	{r3, lr}
   b494a:	4b02      	ldr	r3, [pc, #8]	; (b4954 <HAL_RNG_GetRandomNumber+0xc>)
   b494c:	681b      	ldr	r3, [r3, #0]
   b494e:	685b      	ldr	r3, [r3, #4]
   b4950:	9301      	str	r3, [sp, #4]
   b4952:	bd08      	pop	{r3, pc}
   b4954:	00030218 	.word	0x00030218

000b4958 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4958:	b508      	push	{r3, lr}
   b495a:	4b02      	ldr	r3, [pc, #8]	; (b4964 <HAL_Delay_Microseconds+0xc>)
   b495c:	681b      	ldr	r3, [r3, #0]
   b495e:	68db      	ldr	r3, [r3, #12]
   b4960:	9301      	str	r3, [sp, #4]
   b4962:	bd08      	pop	{r3, pc}
   b4964:	00030218 	.word	0x00030218

000b4968 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b4968:	b508      	push	{r3, lr}
   b496a:	4b02      	ldr	r3, [pc, #8]	; (b4974 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b496c:	681b      	ldr	r3, [r3, #0]
   b496e:	691b      	ldr	r3, [r3, #16]
   b4970:	9301      	str	r3, [sp, #4]
   b4972:	bd08      	pop	{r3, pc}
   b4974:	00030218 	.word	0x00030218

000b4978 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4978:	b508      	push	{r3, lr}
   b497a:	4b02      	ldr	r3, [pc, #8]	; (b4984 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b497c:	681b      	ldr	r3, [r3, #0]
   b497e:	695b      	ldr	r3, [r3, #20]
   b4980:	9301      	str	r3, [sp, #4]
   b4982:	bd08      	pop	{r3, pc}
   b4984:	00030218 	.word	0x00030218

000b4988 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b4988:	b508      	push	{r3, lr}
   b498a:	4b02      	ldr	r3, [pc, #8]	; (b4994 <hal_timer_millis+0xc>)
   b498c:	681b      	ldr	r3, [r3, #0]
   b498e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b4990:	9301      	str	r3, [sp, #4]
   b4992:	bd08      	pop	{r3, pc}
   b4994:	00030218 	.word	0x00030218

000b4998 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b4998:	b508      	push	{r3, lr}
   b499a:	4b02      	ldr	r3, [pc, #8]	; (b49a4 <hal_ble_stack_init+0xc>)
   b499c:	681b      	ldr	r3, [r3, #0]
   b499e:	689b      	ldr	r3, [r3, #8]
   b49a0:	9301      	str	r3, [sp, #4]
   b49a2:	bd08      	pop	{r3, pc}
   b49a4:	00030278 	.word	0x00030278

000b49a8 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b49a8:	b508      	push	{r3, lr}
   b49aa:	4b02      	ldr	r3, [pc, #8]	; (b49b4 <hal_ble_gap_set_advertising_data+0xc>)
   b49ac:	681b      	ldr	r3, [r3, #0]
   b49ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b49b0:	9301      	str	r3, [sp, #4]
   b49b2:	bd08      	pop	{r3, pc}
   b49b4:	00030278 	.word	0x00030278

000b49b8 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b49b8:	b508      	push	{r3, lr}
   b49ba:	4b02      	ldr	r3, [pc, #8]	; (b49c4 <hal_ble_gap_set_scan_response_data+0xc>)
   b49bc:	681b      	ldr	r3, [r3, #0]
   b49be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b49c0:	9301      	str	r3, [sp, #4]
   b49c2:	bd08      	pop	{r3, pc}
   b49c4:	00030278 	.word	0x00030278

000b49c8 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b49c8:	b508      	push	{r3, lr}
   b49ca:	4b02      	ldr	r3, [pc, #8]	; (b49d4 <hal_ble_gap_start_advertising+0xc>)
   b49cc:	681b      	ldr	r3, [r3, #0]
   b49ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b49d0:	9301      	str	r3, [sp, #4]
   b49d2:	bd08      	pop	{r3, pc}
   b49d4:	00030278 	.word	0x00030278

000b49d8 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b49d8:	b508      	push	{r3, lr}
   b49da:	4b03      	ldr	r3, [pc, #12]	; (b49e8 <hal_ble_gap_disconnect+0x10>)
   b49dc:	681b      	ldr	r3, [r3, #0]
   b49de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b49e2:	9301      	str	r3, [sp, #4]
   b49e4:	bd08      	pop	{r3, pc}
   b49e6:	0000      	.short	0x0000
   b49e8:	00030278 	.word	0x00030278

000b49ec <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b49ec:	b508      	push	{r3, lr}
   b49ee:	4b03      	ldr	r3, [pc, #12]	; (b49fc <hal_ble_gatt_server_add_service+0x10>)
   b49f0:	681b      	ldr	r3, [r3, #0]
   b49f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b49f6:	9301      	str	r3, [sp, #4]
   b49f8:	bd08      	pop	{r3, pc}
   b49fa:	0000      	.short	0x0000
   b49fc:	00030278 	.word	0x00030278

000b4a00 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b4a00:	b508      	push	{r3, lr}
   b4a02:	4b03      	ldr	r3, [pc, #12]	; (b4a10 <hal_ble_gatt_server_add_characteristic+0x10>)
   b4a04:	681b      	ldr	r3, [r3, #0]
   b4a06:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b4a0a:	9301      	str	r3, [sp, #4]
   b4a0c:	bd08      	pop	{r3, pc}
   b4a0e:	0000      	.short	0x0000
   b4a10:	00030278 	.word	0x00030278

000b4a14 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b4a14:	b508      	push	{r3, lr}
   b4a16:	4b03      	ldr	r3, [pc, #12]	; (b4a24 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b4a18:	681b      	ldr	r3, [r3, #0]
   b4a1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b4a1e:	9301      	str	r3, [sp, #4]
   b4a20:	bd08      	pop	{r3, pc}
   b4a22:	0000      	.short	0x0000
   b4a24:	00030278 	.word	0x00030278

000b4a28 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4a28:	b508      	push	{r3, lr}
   b4a2a:	4b02      	ldr	r3, [pc, #8]	; (b4a34 <os_mutex_recursive_create+0xc>)
   b4a2c:	681b      	ldr	r3, [r3, #0]
   b4a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4a30:	9301      	str	r3, [sp, #4]
   b4a32:	bd08      	pop	{r3, pc}
   b4a34:	00030248 	.word	0x00030248

000b4a38 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b4a38:	b508      	push	{r3, lr}
   b4a3a:	4b02      	ldr	r3, [pc, #8]	; (b4a44 <os_mutex_recursive_lock+0xc>)
   b4a3c:	681b      	ldr	r3, [r3, #0]
   b4a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4a40:	9301      	str	r3, [sp, #4]
   b4a42:	bd08      	pop	{r3, pc}
   b4a44:	00030248 	.word	0x00030248

000b4a48 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b4a48:	b508      	push	{r3, lr}
   b4a4a:	4b02      	ldr	r3, [pc, #8]	; (b4a54 <os_mutex_recursive_unlock+0xc>)
   b4a4c:	681b      	ldr	r3, [r3, #0]
   b4a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4a50:	9301      	str	r3, [sp, #4]
   b4a52:	bd08      	pop	{r3, pc}
   b4a54:	00030248 	.word	0x00030248

000b4a58 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4a58:	b508      	push	{r3, lr}
   b4a5a:	4b02      	ldr	r3, [pc, #8]	; (b4a64 <inet_inet_ntop+0xc>)
   b4a5c:	681b      	ldr	r3, [r3, #0]
   b4a5e:	695b      	ldr	r3, [r3, #20]
   b4a60:	9301      	str	r3, [sp, #4]
   b4a62:	bd08      	pop	{r3, pc}
   b4a64:	00030264 	.word	0x00030264

000b4a68 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4a68:	b508      	push	{r3, lr}
   b4a6a:	4b02      	ldr	r3, [pc, #8]	; (b4a74 <hal_usart_write+0xc>)
   b4a6c:	681b      	ldr	r3, [r3, #0]
   b4a6e:	68db      	ldr	r3, [r3, #12]
   b4a70:	9301      	str	r3, [sp, #4]
   b4a72:	bd08      	pop	{r3, pc}
   b4a74:	0003023c 	.word	0x0003023c

000b4a78 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4a78:	b508      	push	{r3, lr}
   b4a7a:	4b02      	ldr	r3, [pc, #8]	; (b4a84 <hal_usart_available+0xc>)
   b4a7c:	681b      	ldr	r3, [r3, #0]
   b4a7e:	691b      	ldr	r3, [r3, #16]
   b4a80:	9301      	str	r3, [sp, #4]
   b4a82:	bd08      	pop	{r3, pc}
   b4a84:	0003023c 	.word	0x0003023c

000b4a88 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4a88:	b508      	push	{r3, lr}
   b4a8a:	4b02      	ldr	r3, [pc, #8]	; (b4a94 <hal_usart_read+0xc>)
   b4a8c:	681b      	ldr	r3, [r3, #0]
   b4a8e:	695b      	ldr	r3, [r3, #20]
   b4a90:	9301      	str	r3, [sp, #4]
   b4a92:	bd08      	pop	{r3, pc}
   b4a94:	0003023c 	.word	0x0003023c

000b4a98 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4a98:	b508      	push	{r3, lr}
   b4a9a:	4b02      	ldr	r3, [pc, #8]	; (b4aa4 <hal_usart_peek+0xc>)
   b4a9c:	681b      	ldr	r3, [r3, #0]
   b4a9e:	699b      	ldr	r3, [r3, #24]
   b4aa0:	9301      	str	r3, [sp, #4]
   b4aa2:	bd08      	pop	{r3, pc}
   b4aa4:	0003023c 	.word	0x0003023c

000b4aa8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4aa8:	b508      	push	{r3, lr}
   b4aaa:	4b02      	ldr	r3, [pc, #8]	; (b4ab4 <hal_usart_flush+0xc>)
   b4aac:	681b      	ldr	r3, [r3, #0]
   b4aae:	69db      	ldr	r3, [r3, #28]
   b4ab0:	9301      	str	r3, [sp, #4]
   b4ab2:	bd08      	pop	{r3, pc}
   b4ab4:	0003023c 	.word	0x0003023c

000b4ab8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4ab8:	b508      	push	{r3, lr}
   b4aba:	4b02      	ldr	r3, [pc, #8]	; (b4ac4 <hal_usart_is_enabled+0xc>)
   b4abc:	681b      	ldr	r3, [r3, #0]
   b4abe:	6a1b      	ldr	r3, [r3, #32]
   b4ac0:	9301      	str	r3, [sp, #4]
   b4ac2:	bd08      	pop	{r3, pc}
   b4ac4:	0003023c 	.word	0x0003023c

000b4ac8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4ac8:	b508      	push	{r3, lr}
   b4aca:	4b02      	ldr	r3, [pc, #8]	; (b4ad4 <hal_usart_available_data_for_write+0xc>)
   b4acc:	681b      	ldr	r3, [r3, #0]
   b4ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4ad0:	9301      	str	r3, [sp, #4]
   b4ad2:	bd08      	pop	{r3, pc}
   b4ad4:	0003023c 	.word	0x0003023c

000b4ad8 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4ad8:	b508      	push	{r3, lr}
   b4ada:	4b02      	ldr	r3, [pc, #8]	; (b4ae4 <hal_usart_init_ex+0xc>)
   b4adc:	681b      	ldr	r3, [r3, #0]
   b4ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4ae0:	9301      	str	r3, [sp, #4]
   b4ae2:	bd08      	pop	{r3, pc}
   b4ae4:	0003023c 	.word	0x0003023c

000b4ae8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4ae8:	b508      	push	{r3, lr}
   b4aea:	4b02      	ldr	r3, [pc, #8]	; (b4af4 <hal_i2c_write+0xc>)
   b4aec:	681b      	ldr	r3, [r3, #0]
   b4aee:	6a1b      	ldr	r3, [r3, #32]
   b4af0:	9301      	str	r3, [sp, #4]
   b4af2:	bd08      	pop	{r3, pc}
   b4af4:	00030228 	.word	0x00030228

000b4af8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4af8:	b508      	push	{r3, lr}
   b4afa:	4b02      	ldr	r3, [pc, #8]	; (b4b04 <hal_i2c_available+0xc>)
   b4afc:	681b      	ldr	r3, [r3, #0]
   b4afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4b00:	9301      	str	r3, [sp, #4]
   b4b02:	bd08      	pop	{r3, pc}
   b4b04:	00030228 	.word	0x00030228

000b4b08 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4b08:	b508      	push	{r3, lr}
   b4b0a:	4b02      	ldr	r3, [pc, #8]	; (b4b14 <hal_i2c_read+0xc>)
   b4b0c:	681b      	ldr	r3, [r3, #0]
   b4b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4b10:	9301      	str	r3, [sp, #4]
   b4b12:	bd08      	pop	{r3, pc}
   b4b14:	00030228 	.word	0x00030228

000b4b18 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4b18:	b508      	push	{r3, lr}
   b4b1a:	4b02      	ldr	r3, [pc, #8]	; (b4b24 <hal_i2c_peek+0xc>)
   b4b1c:	681b      	ldr	r3, [r3, #0]
   b4b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4b20:	9301      	str	r3, [sp, #4]
   b4b22:	bd08      	pop	{r3, pc}
   b4b24:	00030228 	.word	0x00030228

000b4b28 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4b28:	b508      	push	{r3, lr}
   b4b2a:	4b02      	ldr	r3, [pc, #8]	; (b4b34 <hal_i2c_flush+0xc>)
   b4b2c:	681b      	ldr	r3, [r3, #0]
   b4b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4b30:	9301      	str	r3, [sp, #4]
   b4b32:	bd08      	pop	{r3, pc}
   b4b34:	00030228 	.word	0x00030228

000b4b38 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4b38:	b508      	push	{r3, lr}
   b4b3a:	4b02      	ldr	r3, [pc, #8]	; (b4b44 <hal_i2c_is_enabled+0xc>)
   b4b3c:	681b      	ldr	r3, [r3, #0]
   b4b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4b40:	9301      	str	r3, [sp, #4]
   b4b42:	bd08      	pop	{r3, pc}
   b4b44:	00030228 	.word	0x00030228

000b4b48 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4b48:	b508      	push	{r3, lr}
   b4b4a:	4b02      	ldr	r3, [pc, #8]	; (b4b54 <hal_i2c_init+0xc>)
   b4b4c:	681b      	ldr	r3, [r3, #0]
   b4b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4b50:	9301      	str	r3, [sp, #4]
   b4b52:	bd08      	pop	{r3, pc}
   b4b54:	00030228 	.word	0x00030228

000b4b58 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4b58:	b508      	push	{r3, lr}
   b4b5a:	4b02      	ldr	r3, [pc, #8]	; (b4b64 <hal_spi_init+0xc>)
   b4b5c:	681b      	ldr	r3, [r3, #0]
   b4b5e:	69db      	ldr	r3, [r3, #28]
   b4b60:	9301      	str	r3, [sp, #4]
   b4b62:	bd08      	pop	{r3, pc}
   b4b64:	00030230 	.word	0x00030230

000b4b68 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4b68:	b508      	push	{r3, lr}
   b4b6a:	4b02      	ldr	r3, [pc, #8]	; (b4b74 <hal_spi_is_enabled+0xc>)
   b4b6c:	681b      	ldr	r3, [r3, #0]
   b4b6e:	6a1b      	ldr	r3, [r3, #32]
   b4b70:	9301      	str	r3, [sp, #4]
   b4b72:	bd08      	pop	{r3, pc}
   b4b74:	00030230 	.word	0x00030230

000b4b78 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4b78:	b508      	push	{r3, lr}
   b4b7a:	4b02      	ldr	r3, [pc, #8]	; (b4b84 <HAL_USB_USART_Init+0xc>)
   b4b7c:	681b      	ldr	r3, [r3, #0]
   b4b7e:	681b      	ldr	r3, [r3, #0]
   b4b80:	9301      	str	r3, [sp, #4]
   b4b82:	bd08      	pop	{r3, pc}
   b4b84:	0003024c 	.word	0x0003024c

000b4b88 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4b88:	b508      	push	{r3, lr}
   b4b8a:	4b02      	ldr	r3, [pc, #8]	; (b4b94 <HAL_USB_USART_Begin+0xc>)
   b4b8c:	681b      	ldr	r3, [r3, #0]
   b4b8e:	685b      	ldr	r3, [r3, #4]
   b4b90:	9301      	str	r3, [sp, #4]
   b4b92:	bd08      	pop	{r3, pc}
   b4b94:	0003024c 	.word	0x0003024c

000b4b98 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4b98:	b508      	push	{r3, lr}
   b4b9a:	4b02      	ldr	r3, [pc, #8]	; (b4ba4 <HAL_USB_USART_Available_Data+0xc>)
   b4b9c:	681b      	ldr	r3, [r3, #0]
   b4b9e:	691b      	ldr	r3, [r3, #16]
   b4ba0:	9301      	str	r3, [sp, #4]
   b4ba2:	bd08      	pop	{r3, pc}
   b4ba4:	0003024c 	.word	0x0003024c

000b4ba8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4ba8:	b508      	push	{r3, lr}
   b4baa:	4b02      	ldr	r3, [pc, #8]	; (b4bb4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4bac:	681b      	ldr	r3, [r3, #0]
   b4bae:	695b      	ldr	r3, [r3, #20]
   b4bb0:	9301      	str	r3, [sp, #4]
   b4bb2:	bd08      	pop	{r3, pc}
   b4bb4:	0003024c 	.word	0x0003024c

000b4bb8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4bb8:	b508      	push	{r3, lr}
   b4bba:	4b02      	ldr	r3, [pc, #8]	; (b4bc4 <HAL_USB_USART_Receive_Data+0xc>)
   b4bbc:	681b      	ldr	r3, [r3, #0]
   b4bbe:	699b      	ldr	r3, [r3, #24]
   b4bc0:	9301      	str	r3, [sp, #4]
   b4bc2:	bd08      	pop	{r3, pc}
   b4bc4:	0003024c 	.word	0x0003024c

000b4bc8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4bc8:	b508      	push	{r3, lr}
   b4bca:	4b02      	ldr	r3, [pc, #8]	; (b4bd4 <HAL_USB_USART_Send_Data+0xc>)
   b4bcc:	681b      	ldr	r3, [r3, #0]
   b4bce:	69db      	ldr	r3, [r3, #28]
   b4bd0:	9301      	str	r3, [sp, #4]
   b4bd2:	bd08      	pop	{r3, pc}
   b4bd4:	0003024c 	.word	0x0003024c

000b4bd8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4bd8:	b508      	push	{r3, lr}
   b4bda:	4b02      	ldr	r3, [pc, #8]	; (b4be4 <HAL_USB_USART_Flush_Data+0xc>)
   b4bdc:	681b      	ldr	r3, [r3, #0]
   b4bde:	6a1b      	ldr	r3, [r3, #32]
   b4be0:	9301      	str	r3, [sp, #4]
   b4be2:	bd08      	pop	{r3, pc}
   b4be4:	0003024c 	.word	0x0003024c

000b4be8 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b4be8:	b508      	push	{r3, lr}
   b4bea:	4b02      	ldr	r3, [pc, #8]	; (b4bf4 <HAL_USB_USART_Is_Connected+0xc>)
   b4bec:	681b      	ldr	r3, [r3, #0]
   b4bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4bf0:	9301      	str	r3, [sp, #4]
   b4bf2:	bd08      	pop	{r3, pc}
   b4bf4:	0003024c 	.word	0x0003024c

000b4bf8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b4bf8:	b508      	push	{r3, lr}
   b4bfa:	4b02      	ldr	r3, [pc, #8]	; (b4c04 <panic_+0xc>)
   b4bfc:	681b      	ldr	r3, [r3, #0]
   b4bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4c00:	9301      	str	r3, [sp, #4]
   b4c02:	bd08      	pop	{r3, pc}
   b4c04:	00030260 	.word	0x00030260

000b4c08 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b4c08:	b508      	push	{r3, lr}
   b4c0a:	4b02      	ldr	r3, [pc, #8]	; (b4c14 <log_message+0xc>)
   b4c0c:	681b      	ldr	r3, [r3, #0]
   b4c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4c10:	9301      	str	r3, [sp, #4]
   b4c12:	bd08      	pop	{r3, pc}
   b4c14:	00030260 	.word	0x00030260

000b4c18 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4c18:	b508      	push	{r3, lr}
   b4c1a:	4b02      	ldr	r3, [pc, #8]	; (b4c24 <set_system_mode+0xc>)
   b4c1c:	681b      	ldr	r3, [r3, #0]
   b4c1e:	685b      	ldr	r3, [r3, #4]
   b4c20:	9301      	str	r3, [sp, #4]
   b4c22:	bd08      	pop	{r3, pc}
   b4c24:	00030220 	.word	0x00030220

000b4c28 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4c28:	b508      	push	{r3, lr}
   b4c2a:	4b03      	ldr	r3, [pc, #12]	; (b4c38 <system_ctrl_set_app_request_handler+0x10>)
   b4c2c:	681b      	ldr	r3, [r3, #0]
   b4c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4c32:	9301      	str	r3, [sp, #4]
   b4c34:	bd08      	pop	{r3, pc}
   b4c36:	0000      	.short	0x0000
   b4c38:	00030220 	.word	0x00030220

000b4c3c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4c3c:	b508      	push	{r3, lr}
   b4c3e:	4b03      	ldr	r3, [pc, #12]	; (b4c4c <system_ctrl_set_result+0x10>)
   b4c40:	681b      	ldr	r3, [r3, #0]
   b4c42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4c46:	9301      	str	r3, [sp, #4]
   b4c48:	bd08      	pop	{r3, pc}
   b4c4a:	0000      	.short	0x0000
   b4c4c:	00030220 	.word	0x00030220

000b4c50 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4c50:	b508      	push	{r3, lr}
   b4c52:	4b02      	ldr	r3, [pc, #8]	; (b4c5c <network_connect+0xc>)
   b4c54:	681b      	ldr	r3, [r3, #0]
   b4c56:	685b      	ldr	r3, [r3, #4]
   b4c58:	9301      	str	r3, [sp, #4]
   b4c5a:	bd08      	pop	{r3, pc}
   b4c5c:	00030240 	.word	0x00030240

000b4c60 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4c60:	b508      	push	{r3, lr}
   b4c62:	4b02      	ldr	r3, [pc, #8]	; (b4c6c <network_connecting+0xc>)
   b4c64:	681b      	ldr	r3, [r3, #0]
   b4c66:	689b      	ldr	r3, [r3, #8]
   b4c68:	9301      	str	r3, [sp, #4]
   b4c6a:	bd08      	pop	{r3, pc}
   b4c6c:	00030240 	.word	0x00030240

000b4c70 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4c70:	b508      	push	{r3, lr}
   b4c72:	4b02      	ldr	r3, [pc, #8]	; (b4c7c <network_disconnect+0xc>)
   b4c74:	681b      	ldr	r3, [r3, #0]
   b4c76:	68db      	ldr	r3, [r3, #12]
   b4c78:	9301      	str	r3, [sp, #4]
   b4c7a:	bd08      	pop	{r3, pc}
   b4c7c:	00030240 	.word	0x00030240

000b4c80 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4c80:	b508      	push	{r3, lr}
   b4c82:	4b02      	ldr	r3, [pc, #8]	; (b4c8c <network_ready+0xc>)
   b4c84:	681b      	ldr	r3, [r3, #0]
   b4c86:	691b      	ldr	r3, [r3, #16]
   b4c88:	9301      	str	r3, [sp, #4]
   b4c8a:	bd08      	pop	{r3, pc}
   b4c8c:	00030240 	.word	0x00030240

000b4c90 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4c90:	b508      	push	{r3, lr}
   b4c92:	4b02      	ldr	r3, [pc, #8]	; (b4c9c <network_on+0xc>)
   b4c94:	681b      	ldr	r3, [r3, #0]
   b4c96:	695b      	ldr	r3, [r3, #20]
   b4c98:	9301      	str	r3, [sp, #4]
   b4c9a:	bd08      	pop	{r3, pc}
   b4c9c:	00030240 	.word	0x00030240

000b4ca0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4ca0:	b508      	push	{r3, lr}
   b4ca2:	4b02      	ldr	r3, [pc, #8]	; (b4cac <network_off+0xc>)
   b4ca4:	681b      	ldr	r3, [r3, #0]
   b4ca6:	699b      	ldr	r3, [r3, #24]
   b4ca8:	9301      	str	r3, [sp, #4]
   b4caa:	bd08      	pop	{r3, pc}
   b4cac:	00030240 	.word	0x00030240

000b4cb0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4cb0:	b508      	push	{r3, lr}
   b4cb2:	4b02      	ldr	r3, [pc, #8]	; (b4cbc <network_listen+0xc>)
   b4cb4:	681b      	ldr	r3, [r3, #0]
   b4cb6:	69db      	ldr	r3, [r3, #28]
   b4cb8:	9301      	str	r3, [sp, #4]
   b4cba:	bd08      	pop	{r3, pc}
   b4cbc:	00030240 	.word	0x00030240

000b4cc0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4cc0:	b508      	push	{r3, lr}
   b4cc2:	4b02      	ldr	r3, [pc, #8]	; (b4ccc <network_listening+0xc>)
   b4cc4:	681b      	ldr	r3, [r3, #0]
   b4cc6:	6a1b      	ldr	r3, [r3, #32]
   b4cc8:	9301      	str	r3, [sp, #4]
   b4cca:	bd08      	pop	{r3, pc}
   b4ccc:	00030240 	.word	0x00030240

000b4cd0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4cd0:	b508      	push	{r3, lr}
   b4cd2:	4b02      	ldr	r3, [pc, #8]	; (b4cdc <network_set_listen_timeout+0xc>)
   b4cd4:	681b      	ldr	r3, [r3, #0]
   b4cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4cd8:	9301      	str	r3, [sp, #4]
   b4cda:	bd08      	pop	{r3, pc}
   b4cdc:	00030240 	.word	0x00030240

000b4ce0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4ce0:	b508      	push	{r3, lr}
   b4ce2:	4b02      	ldr	r3, [pc, #8]	; (b4cec <network_get_listen_timeout+0xc>)
   b4ce4:	681b      	ldr	r3, [r3, #0]
   b4ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4ce8:	9301      	str	r3, [sp, #4]
   b4cea:	bd08      	pop	{r3, pc}
   b4cec:	00030240 	.word	0x00030240

000b4cf0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4cf0:	b508      	push	{r3, lr}
   b4cf2:	4b02      	ldr	r3, [pc, #8]	; (b4cfc <network_is_on+0xc>)
   b4cf4:	681b      	ldr	r3, [r3, #0]
   b4cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4cf8:	9301      	str	r3, [sp, #4]
   b4cfa:	bd08      	pop	{r3, pc}
   b4cfc:	00030240 	.word	0x00030240

000b4d00 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4d00:	b508      	push	{r3, lr}
   b4d02:	4b02      	ldr	r3, [pc, #8]	; (b4d0c <network_is_off+0xc>)
   b4d04:	681b      	ldr	r3, [r3, #0]
   b4d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4d08:	9301      	str	r3, [sp, #4]
   b4d0a:	bd08      	pop	{r3, pc}
   b4d0c:	00030240 	.word	0x00030240

000b4d10 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b4d10:	b508      	push	{r3, lr}
   b4d12:	4b02      	ldr	r3, [pc, #8]	; (b4d1c <spark_process+0xc>)
   b4d14:	681b      	ldr	r3, [r3, #0]
   b4d16:	689b      	ldr	r3, [r3, #8]
   b4d18:	9301      	str	r3, [sp, #4]
   b4d1a:	bd08      	pop	{r3, pc}
   b4d1c:	00030244 	.word	0x00030244

000b4d20 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4d20:	b508      	push	{r3, lr}
   b4d22:	4b02      	ldr	r3, [pc, #8]	; (b4d2c <spark_set_random_seed_from_cloud_handler+0xc>)
   b4d24:	681b      	ldr	r3, [r3, #0]
   b4d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4d28:	9301      	str	r3, [sp, #4]
   b4d2a:	bd08      	pop	{r3, pc}
   b4d2c:	00030244 	.word	0x00030244

000b4d30 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4d30:	b508      	push	{r3, lr}
   b4d32:	4b02      	ldr	r3, [pc, #8]	; (b4d3c <malloc+0xc>)
   b4d34:	681b      	ldr	r3, [r3, #0]
   b4d36:	681b      	ldr	r3, [r3, #0]
   b4d38:	9301      	str	r3, [sp, #4]
   b4d3a:	bd08      	pop	{r3, pc}
   b4d3c:	0003021c 	.word	0x0003021c

000b4d40 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4d40:	b508      	push	{r3, lr}
   b4d42:	4b02      	ldr	r3, [pc, #8]	; (b4d4c <free+0xc>)
   b4d44:	681b      	ldr	r3, [r3, #0]
   b4d46:	685b      	ldr	r3, [r3, #4]
   b4d48:	9301      	str	r3, [sp, #4]
   b4d4a:	bd08      	pop	{r3, pc}
   b4d4c:	0003021c 	.word	0x0003021c

000b4d50 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4d50:	b508      	push	{r3, lr}
   b4d52:	4b02      	ldr	r3, [pc, #8]	; (b4d5c <realloc+0xc>)
   b4d54:	681b      	ldr	r3, [r3, #0]
   b4d56:	689b      	ldr	r3, [r3, #8]
   b4d58:	9301      	str	r3, [sp, #4]
   b4d5a:	bd08      	pop	{r3, pc}
   b4d5c:	0003021c 	.word	0x0003021c

000b4d60 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b4d60:	b508      	push	{r3, lr}
   b4d62:	4b02      	ldr	r3, [pc, #8]	; (b4d6c <vsnprintf+0xc>)
   b4d64:	681b      	ldr	r3, [r3, #0]
   b4d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4d68:	9301      	str	r3, [sp, #4]
   b4d6a:	bd08      	pop	{r3, pc}
   b4d6c:	0003021c 	.word	0x0003021c

000b4d70 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b4d70:	b508      	push	{r3, lr}
   b4d72:	4b02      	ldr	r3, [pc, #8]	; (b4d7c <abort+0xc>)
   b4d74:	681b      	ldr	r3, [r3, #0]
   b4d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4d78:	9301      	str	r3, [sp, #4]
   b4d7a:	bd08      	pop	{r3, pc}
   b4d7c:	0003021c 	.word	0x0003021c

000b4d80 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4d80:	b508      	push	{r3, lr}
   b4d82:	4b02      	ldr	r3, [pc, #8]	; (b4d8c <__assert_func+0xc>)
   b4d84:	681b      	ldr	r3, [r3, #0]
   b4d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4d88:	9301      	str	r3, [sp, #4]
   b4d8a:	bd08      	pop	{r3, pc}
   b4d8c:	0003021c 	.word	0x0003021c

000b4d90 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4d90:	b508      	push	{r3, lr}
   b4d92:	4b02      	ldr	r3, [pc, #8]	; (b4d9c <newlib_impure_ptr_callback+0xc>)
   b4d94:	681b      	ldr	r3, [r3, #0]
   b4d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4d98:	9301      	str	r3, [sp, #4]
   b4d9a:	bd08      	pop	{r3, pc}
   b4d9c:	0003021c 	.word	0x0003021c

000b4da0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4da0:	2200      	movs	r2, #0
   b4da2:	6840      	ldr	r0, [r0, #4]
   b4da4:	4611      	mov	r1, r2
   b4da6:	f7ff bf8b 	b.w	b4cc0 <network_listening>

000b4daa <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4daa:	2200      	movs	r2, #0
   b4dac:	6840      	ldr	r0, [r0, #4]
   b4dae:	4611      	mov	r1, r2
   b4db0:	f7ff bf96 	b.w	b4ce0 <network_get_listen_timeout>

000b4db4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4db4:	6840      	ldr	r0, [r0, #4]
   b4db6:	2200      	movs	r2, #0
   b4db8:	f7ff bf8a 	b.w	b4cd0 <network_set_listen_timeout>

000b4dbc <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4dbc:	6840      	ldr	r0, [r0, #4]
   b4dbe:	2200      	movs	r2, #0
   b4dc0:	f081 0101 	eor.w	r1, r1, #1
   b4dc4:	f7ff bf74 	b.w	b4cb0 <network_listen>

000b4dc8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4dc8:	2300      	movs	r3, #0
   b4dca:	6840      	ldr	r0, [r0, #4]
   b4dcc:	461a      	mov	r2, r3
   b4dce:	4619      	mov	r1, r3
   b4dd0:	f7ff bf66 	b.w	b4ca0 <network_off>

000b4dd4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4dd4:	2300      	movs	r3, #0
   b4dd6:	6840      	ldr	r0, [r0, #4]
   b4dd8:	461a      	mov	r2, r3
   b4dda:	4619      	mov	r1, r3
   b4ddc:	f7ff bf58 	b.w	b4c90 <network_on>

000b4de0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4de0:	2200      	movs	r2, #0
   b4de2:	6840      	ldr	r0, [r0, #4]
   b4de4:	4611      	mov	r1, r2
   b4de6:	f7ff bf4b 	b.w	b4c80 <network_ready>

000b4dea <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4dea:	2200      	movs	r2, #0
   b4dec:	6840      	ldr	r0, [r0, #4]
   b4dee:	4611      	mov	r1, r2
   b4df0:	f7ff bf36 	b.w	b4c60 <network_connecting>

000b4df4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4df4:	6840      	ldr	r0, [r0, #4]
   b4df6:	2200      	movs	r2, #0
   b4df8:	2102      	movs	r1, #2
   b4dfa:	f7ff bf39 	b.w	b4c70 <network_disconnect>

000b4dfe <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4dfe:	2300      	movs	r3, #0
   b4e00:	6840      	ldr	r0, [r0, #4]
   b4e02:	461a      	mov	r2, r3
   b4e04:	f7ff bf24 	b.w	b4c50 <network_connect>

000b4e08 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4e08:	4b02      	ldr	r3, [pc, #8]	; (b4e14 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4e0a:	2203      	movs	r2, #3
   b4e0c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4e0e:	4a02      	ldr	r2, [pc, #8]	; (b4e18 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4e10:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4e12:	4770      	bx	lr
   b4e14:	2003e6ac 	.word	0x2003e6ac
   b4e18:	000b7000 	.word	0x000b7000

000b4e1c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b4e1c:	b510      	push	{r4, lr}
   b4e1e:	4604      	mov	r4, r0
   b4e20:	4608      	mov	r0, r1
{
    _spi = spi;
   b4e22:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b4e24:	f7ff fe98 	bl	b4b58 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b4e28:	2300      	movs	r3, #0
   b4e2a:	6063      	str	r3, [r4, #4]
}
   b4e2c:	4620      	mov	r0, r4
   b4e2e:	bd10      	pop	{r4, pc}

000b4e30 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4e30:	4b05      	ldr	r3, [pc, #20]	; (b4e48 <_GLOBAL__sub_I_System+0x18>)
   b4e32:	2202      	movs	r2, #2
   b4e34:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4e36:	4b05      	ldr	r3, [pc, #20]	; (b4e4c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4e38:	4a05      	ldr	r2, [pc, #20]	; (b4e50 <_GLOBAL__sub_I_System+0x20>)
   b4e3a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4e3c:	2000      	movs	r0, #0
   b4e3e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4e42:	f7ff bee9 	b.w	b4c18 <set_system_mode>
   b4e46:	bf00      	nop
   b4e48:	2003e6c0 	.word	0x2003e6c0
   b4e4c:	2003e6b4 	.word	0x2003e6b4
   b4e50:	ffff0000 	.word	0xffff0000

000b4e54 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b4e54:	b510      	push	{r4, lr}
   b4e56:	4604      	mov	r4, r0
{
	free(buffer);
   b4e58:	6800      	ldr	r0, [r0, #0]
   b4e5a:	f7ff ff71 	bl	b4d40 <free>
}
   b4e5e:	4620      	mov	r0, r4
   b4e60:	bd10      	pop	{r4, pc}

000b4e62 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b4e62:	b510      	push	{r4, lr}
   b4e64:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b4e66:	6800      	ldr	r0, [r0, #0]
   b4e68:	b108      	cbz	r0, b4e6e <_ZN6String10invalidateEv+0xc>
   b4e6a:	f7ff ff69 	bl	b4d40 <free>
	buffer = NULL;
   b4e6e:	2300      	movs	r3, #0
	capacity = len = 0;
   b4e70:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b4e74:	6023      	str	r3, [r4, #0]
}
   b4e76:	bd10      	pop	{r4, pc}

000b4e78 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b4e78:	b538      	push	{r3, r4, r5, lr}
   b4e7a:	4604      	mov	r4, r0
   b4e7c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b4e7e:	6800      	ldr	r0, [r0, #0]
   b4e80:	3101      	adds	r1, #1
   b4e82:	f7ff ff65 	bl	b4d50 <realloc>
	if (newbuffer) {
   b4e86:	b110      	cbz	r0, b4e8e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b4e88:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b4e8c:	2001      	movs	r0, #1
	}
	return 0;
}
   b4e8e:	bd38      	pop	{r3, r4, r5, pc}

000b4e90 <_ZN6String7reserveEj>:
{
   b4e90:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b4e92:	6803      	ldr	r3, [r0, #0]
{
   b4e94:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b4e96:	b123      	cbz	r3, b4ea2 <_ZN6String7reserveEj+0x12>
   b4e98:	6843      	ldr	r3, [r0, #4]
   b4e9a:	428b      	cmp	r3, r1
   b4e9c:	d301      	bcc.n	b4ea2 <_ZN6String7reserveEj+0x12>
   b4e9e:	2001      	movs	r0, #1
}
   b4ea0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b4ea2:	4620      	mov	r0, r4
   b4ea4:	f7ff ffe8 	bl	b4e78 <_ZN6String12changeBufferEj>
   b4ea8:	2800      	cmp	r0, #0
   b4eaa:	d0f9      	beq.n	b4ea0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b4eac:	68a3      	ldr	r3, [r4, #8]
   b4eae:	2b00      	cmp	r3, #0
   b4eb0:	d1f5      	bne.n	b4e9e <_ZN6String7reserveEj+0xe>
   b4eb2:	6822      	ldr	r2, [r4, #0]
   b4eb4:	7013      	strb	r3, [r2, #0]
   b4eb6:	e7f2      	b.n	b4e9e <_ZN6String7reserveEj+0xe>

000b4eb8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b4eb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4eba:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b4ebc:	4611      	mov	r1, r2
   b4ebe:	9201      	str	r2, [sp, #4]
{
   b4ec0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b4ec2:	f7ff ffe5 	bl	b4e90 <_ZN6String7reserveEj>
   b4ec6:	9a01      	ldr	r2, [sp, #4]
   b4ec8:	b928      	cbnz	r0, b4ed6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b4eca:	4620      	mov	r0, r4
   b4ecc:	f7ff ffc9 	bl	b4e62 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b4ed0:	4620      	mov	r0, r4
   b4ed2:	b003      	add	sp, #12
   b4ed4:	bd30      	pop	{r4, r5, pc}
	len = length;
   b4ed6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b4ed8:	4629      	mov	r1, r5
   b4eda:	6820      	ldr	r0, [r4, #0]
   b4edc:	f001 ff16 	bl	b6d0c <memcpy>
	buffer[len] = 0;
   b4ee0:	6822      	ldr	r2, [r4, #0]
   b4ee2:	68a3      	ldr	r3, [r4, #8]
   b4ee4:	2100      	movs	r1, #0
   b4ee6:	54d1      	strb	r1, [r2, r3]
	return *this;
   b4ee8:	e7f2      	b.n	b4ed0 <_ZN6String4copyEPKcj+0x18>

000b4eea <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b4eea:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b4eec:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b4eee:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b4ef2:	4604      	mov	r4, r0
	len = 0;
   b4ef4:	6083      	str	r3, [r0, #8]
	flags = 0;
   b4ef6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b4ef8:	b141      	cbz	r1, b4f0c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b4efa:	4608      	mov	r0, r1
   b4efc:	9101      	str	r1, [sp, #4]
   b4efe:	f001 ff6d 	bl	b6ddc <strlen>
   b4f02:	9901      	ldr	r1, [sp, #4]
   b4f04:	4602      	mov	r2, r0
   b4f06:	4620      	mov	r0, r4
   b4f08:	f7ff ffd6 	bl	b4eb8 <_ZN6String4copyEPKcj>
}
   b4f0c:	4620      	mov	r0, r4
   b4f0e:	b002      	add	sp, #8
   b4f10:	bd10      	pop	{r4, pc}

000b4f12 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b4f12:	b513      	push	{r0, r1, r4, lr}
   b4f14:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b4f16:	b159      	cbz	r1, b4f30 <_ZN6StringaSEPKc+0x1e>
   b4f18:	4608      	mov	r0, r1
   b4f1a:	9101      	str	r1, [sp, #4]
   b4f1c:	f001 ff5e 	bl	b6ddc <strlen>
   b4f20:	9901      	ldr	r1, [sp, #4]
   b4f22:	4602      	mov	r2, r0
   b4f24:	4620      	mov	r0, r4
   b4f26:	f7ff ffc7 	bl	b4eb8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b4f2a:	4620      	mov	r0, r4
   b4f2c:	b002      	add	sp, #8
   b4f2e:	bd10      	pop	{r4, pc}
	else invalidate();
   b4f30:	f7ff ff97 	bl	b4e62 <_ZN6String10invalidateEv>
   b4f34:	e7f9      	b.n	b4f2a <_ZN6StringaSEPKc+0x18>

000b4f36 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b4f36:	4770      	bx	lr

000b4f38 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b4f38:	4770      	bx	lr

000b4f3a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b4f3a:	4770      	bx	lr

000b4f3c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b4f3c:	4770      	bx	lr
	...

000b4f40 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b4f40:	4b06      	ldr	r3, [pc, #24]	; (b4f5c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b4f42:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b4f44:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b4f46:	f100 040c 	add.w	r4, r0, #12
	    ||
   b4f4a:	d005      	beq.n	b4f58 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b4f4c:	4608      	mov	r0, r1
   b4f4e:	f001 fdb5 	bl	b6abc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b4f52:	2800      	cmp	r0, #0
   b4f54:	bf08      	it	eq
   b4f56:	2400      	moveq	r4, #0
      }
   b4f58:	4620      	mov	r0, r4
   b4f5a:	bd10      	pop	{r4, pc}
   b4f5c:	000b717c 	.word	0x000b717c

000b4f60 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b4f60:	4b06      	ldr	r3, [pc, #24]	; (b4f7c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b4f62:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b4f64:	b510      	push	{r4, lr}
   b4f66:	f100 040c 	add.w	r4, r0, #12
	    ||
   b4f6a:	d005      	beq.n	b4f78 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b4f6c:	4608      	mov	r0, r1
   b4f6e:	f001 fda5 	bl	b6abc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b4f72:	2800      	cmp	r0, #0
   b4f74:	bf08      	it	eq
   b4f76:	2400      	moveq	r4, #0
      }
   b4f78:	4620      	mov	r0, r4
   b4f7a:	bd10      	pop	{r4, pc}
   b4f7c:	000b717c 	.word	0x000b717c

000b4f80 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b4f80:	4b06      	ldr	r3, [pc, #24]	; (b4f9c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b4f82:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b4f84:	b510      	push	{r4, lr}
   b4f86:	f100 040c 	add.w	r4, r0, #12
	    ||
   b4f8a:	d005      	beq.n	b4f98 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b4f8c:	4608      	mov	r0, r1
   b4f8e:	f001 fd95 	bl	b6abc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b4f92:	2800      	cmp	r0, #0
   b4f94:	bf08      	it	eq
   b4f96:	2400      	moveq	r4, #0
      }
   b4f98:	4620      	mov	r0, r4
   b4f9a:	bd10      	pop	{r4, pc}
   b4f9c:	000b717c 	.word	0x000b717c

000b4fa0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b4fa0:	b510      	push	{r4, lr}
   b4fa2:	2168      	movs	r1, #104	; 0x68
   b4fa4:	4604      	mov	r4, r0
   b4fa6:	f7ff f878 	bl	b409a <_ZdlPvj>
   b4faa:	4620      	mov	r0, r4
   b4fac:	bd10      	pop	{r4, pc}

000b4fae <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b4fae:	b510      	push	{r4, lr}
   b4fb0:	2128      	movs	r1, #40	; 0x28
   b4fb2:	4604      	mov	r4, r0
   b4fb4:	f7ff f871 	bl	b409a <_ZdlPvj>
   b4fb8:	4620      	mov	r0, r4
   b4fba:	bd10      	pop	{r4, pc}

000b4fbc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b4fbc:	b510      	push	{r4, lr}
   b4fbe:	2130      	movs	r1, #48	; 0x30
   b4fc0:	4604      	mov	r4, r0
   b4fc2:	f7ff f86a 	bl	b409a <_ZdlPvj>
   b4fc6:	4620      	mov	r0, r4
   b4fc8:	bd10      	pop	{r4, pc}

000b4fca <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b4fca:	2168      	movs	r1, #104	; 0x68
   b4fcc:	f7ff b865 	b.w	b409a <_ZdlPvj>

000b4fd0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b4fd0:	2128      	movs	r1, #40	; 0x28
   b4fd2:	f7ff b862 	b.w	b409a <_ZdlPvj>

000b4fd6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b4fd6:	2130      	movs	r1, #48	; 0x30
   b4fd8:	f7ff b85f 	b.w	b409a <_ZdlPvj>

000b4fdc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b4fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b4fde:	2500      	movs	r5, #0
   b4fe0:	1cec      	adds	r4, r5, #3
   b4fe2:	428c      	cmp	r4, r1
   b4fe4:	d80d      	bhi.n	b5002 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b4fe6:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b4fe8:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b4fea:	5d87      	ldrb	r7, [r0, r6]
   b4fec:	4297      	cmp	r7, r2
   b4fee:	d105      	bne.n	b4ffc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b4ff0:	4426      	add	r6, r4
   b4ff2:	42b1      	cmp	r1, r6
   b4ff4:	d305      	bcc.n	b5002 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b4ff6:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b4ff8:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b4ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b4ffc:	3401      	adds	r4, #1
   b4ffe:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b5000:	e7ee      	b.n	b4fe0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b5002:	2000      	movs	r0, #0
   b5004:	e7f9      	b.n	b4ffa <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b5008 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b5008:	4a02      	ldr	r2, [pc, #8]	; (b5014 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b500a:	2100      	movs	r1, #0
   b500c:	200a      	movs	r0, #10
   b500e:	f7ff bdf3 	b.w	b4bf8 <panic_>
   b5012:	bf00      	nop
   b5014:	000b4959 	.word	0x000b4959

000b5018 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5018:	b430      	push	{r4, r5}
   b501a:	460d      	mov	r5, r1
   b501c:	4611      	mov	r1, r2
   b501e:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b5020:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b5022:	6809      	ldr	r1, [r1, #0]
   b5024:	6828      	ldr	r0, [r5, #0]
   b5026:	e9d3 4300 	ldrd	r4, r3, [r3]
   b502a:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b502c:	bc30      	pop	{r4, r5}
   b502e:	4760      	bx	ip

000b5030 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b5030:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5032:	b538      	push	{r3, r4, r5, lr}
   b5034:	4604      	mov	r4, r0
	switch (__op)
   b5036:	d102      	bne.n	b503e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b5038:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b503a:	6023      	str	r3, [r4, #0]
	}
   b503c:	e003      	b.n	b5046 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b503e:	2a02      	cmp	r2, #2
   b5040:	d003      	beq.n	b504a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b5042:	2a03      	cmp	r2, #3
   b5044:	d00d      	beq.n	b5062 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b5046:	2000      	movs	r0, #0
   b5048:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b504a:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b504c:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b504e:	f7ff f820 	bl	b4092 <_Znwj>
   b5052:	4603      	mov	r3, r0
   b5054:	2800      	cmp	r0, #0
   b5056:	d0f0      	beq.n	b503a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b5058:	e895 0003 	ldmia.w	r5, {r0, r1}
   b505c:	e883 0003 	stmia.w	r3, {r0, r1}
   b5060:	e7eb      	b.n	b503a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b5062:	6800      	ldr	r0, [r0, #0]
   b5064:	2800      	cmp	r0, #0
   b5066:	d0ee      	beq.n	b5046 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b5068:	2108      	movs	r1, #8
   b506a:	f7ff f816 	bl	b409a <_ZdlPvj>
   b506e:	e7ea      	b.n	b5046 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b5070 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b5070:	b510      	push	{r4, lr}
      if (_M_manager)
   b5072:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b5074:	4604      	mov	r4, r0
      if (_M_manager)
   b5076:	b113      	cbz	r3, b507e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5078:	2203      	movs	r2, #3
   b507a:	4601      	mov	r1, r0
   b507c:	4798      	blx	r3
    }
   b507e:	4620      	mov	r0, r4
   b5080:	bd10      	pop	{r4, pc}

000b5082 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b5082:	b510      	push	{r4, lr}
   b5084:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b5086:	3058      	adds	r0, #88	; 0x58
   b5088:	f7ff fff2 	bl	b5070 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b508c:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b5090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5094:	f7ff bede 	b.w	b4e54 <_ZN6StringD1Ev>

000b5098 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b5098:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b509a:	6843      	ldr	r3, [r0, #4]
   b509c:	3b01      	subs	r3, #1
    {
   b509e:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b50a0:	6043      	str	r3, [r0, #4]
   b50a2:	b963      	cbnz	r3, b50be <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b50a4:	6803      	ldr	r3, [r0, #0]
   b50a6:	689b      	ldr	r3, [r3, #8]
   b50a8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b50aa:	68a3      	ldr	r3, [r4, #8]
   b50ac:	3b01      	subs	r3, #1
   b50ae:	60a3      	str	r3, [r4, #8]
   b50b0:	b92b      	cbnz	r3, b50be <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b50b2:	6823      	ldr	r3, [r4, #0]
   b50b4:	4620      	mov	r0, r4
   b50b6:	68db      	ldr	r3, [r3, #12]
    }
   b50b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b50bc:	4718      	bx	r3
    }
   b50be:	bd10      	pop	{r4, pc}

000b50c0 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b50c0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b50c4:	b2da      	uxtb	r2, r3
   b50c6:	2a09      	cmp	r2, #9
   b50c8:	d801      	bhi.n	b50ce <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b50ca:	4618      	mov	r0, r3
   b50cc:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b50ce:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b50d2:	2b05      	cmp	r3, #5
   b50d4:	d801      	bhi.n	b50da <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b50d6:	3857      	subs	r0, #87	; 0x57
   b50d8:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b50da:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b50de:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b50e0:	bf94      	ite	ls
   b50e2:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b50e4:	f04f 30ff 	movhi.w	r0, #4294967295
}
   b50e8:	4770      	bx	lr
	...

000b50ec <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b50ec:	b510      	push	{r4, lr}
            locked_(false) {
   b50ee:	2300      	movs	r3, #0
   b50f0:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b50f2:	4b04      	ldr	r3, [pc, #16]	; (b5104 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b50f4:	4604      	mov	r4, r0
   b50f6:	6818      	ldr	r0, [r3, #0]
   b50f8:	f7ff fc9e 	bl	b4a38 <os_mutex_recursive_lock>
        locked_ = true;
   b50fc:	2301      	movs	r3, #1
   b50fe:	7023      	strb	r3, [r4, #0]
    }
   b5100:	4620      	mov	r0, r4
   b5102:	bd10      	pop	{r4, pc}
   b5104:	2003e6cc 	.word	0x2003e6cc

000b5108 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b5108:	b510      	push	{r4, lr}
        if (locked_) {
   b510a:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b510c:	4604      	mov	r4, r0
        if (locked_) {
   b510e:	b11b      	cbz	r3, b5118 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b5110:	4b02      	ldr	r3, [pc, #8]	; (b511c <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b5112:	6818      	ldr	r0, [r3, #0]
   b5114:	f7ff fc98 	bl	b4a48 <os_mutex_recursive_unlock>
    }
   b5118:	4620      	mov	r0, r4
   b511a:	bd10      	pop	{r4, pc}
   b511c:	2003e6cc 	.word	0x2003e6cc

000b5120 <_ZNK8particle10BleAddressixEh>:
    if (i >= BLE_SIG_ADDR_LEN) {
   b5120:	2905      	cmp	r1, #5
    return address_.addr[i];
   b5122:	bf94      	ite	ls
   b5124:	5c40      	ldrbls	r0, [r0, r1]
        return 0;
   b5126:	2000      	movhi	r0, #0
}
   b5128:	4770      	bx	lr

000b512a <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b512a:	b082      	sub	sp, #8
   b512c:	4603      	mov	r3, r0
    address_ = addr;
   b512e:	6808      	ldr	r0, [r1, #0]
   b5130:	6849      	ldr	r1, [r1, #4]
   b5132:	466a      	mov	r2, sp
   b5134:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b5136:	466a      	mov	r2, sp
   b5138:	ca03      	ldmia	r2!, {r0, r1}
   b513a:	6018      	str	r0, [r3, #0]
}
   b513c:	4618      	mov	r0, r3
    address_ = addr.address_;
   b513e:	6059      	str	r1, [r3, #4]
}
   b5140:	b002      	add	sp, #8
   b5142:	4770      	bx	lr

000b5144 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b5144:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b5146:	7982      	ldrb	r2, [r0, #6]
   b5148:	798b      	ldrb	r3, [r1, #6]
   b514a:	429a      	cmp	r2, r3
   b514c:	d106      	bne.n	b515c <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b514e:	2206      	movs	r2, #6
   b5150:	f001 fdcc 	bl	b6cec <memcmp>
   b5154:	fab0 f080 	clz	r0, r0
   b5158:	0940      	lsrs	r0, r0, #5
}
   b515a:	bd08      	pop	{r3, pc}
    return false;
   b515c:	2000      	movs	r0, #0
   b515e:	e7fc      	b.n	b515a <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b5160 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b5160:	f04f 33ff 	mov.w	r3, #4294967295
   b5164:	6003      	str	r3, [r0, #0]
   b5166:	8083      	strh	r3, [r0, #4]
}
   b5168:	2000      	movs	r0, #0
   b516a:	4770      	bx	lr

000b516c <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b516c:	b508      	push	{r3, lr}
   b516e:	4602      	mov	r2, r0
        : address_{} {
   b5170:	2100      	movs	r1, #0
   b5172:	6001      	str	r1, [r0, #0]
   b5174:	6041      	str	r1, [r0, #4]
    clear();
   b5176:	f7ff fff3 	bl	b5160 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b517a:	7191      	strb	r1, [r2, #6]
}
   b517c:	4610      	mov	r0, r2
   b517e:	bd08      	pop	{r3, pc}

000b5180 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b5180:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b5182:	2301      	movs	r3, #1
   b5184:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b5186:	4b05      	ldr	r3, [pc, #20]	; (b519c <_ZN8particle7BleUuidC1Ev+0x1c>)
   b5188:	4602      	mov	r2, r0
   b518a:	f103 0110 	add.w	r1, r3, #16
   b518e:	f853 4b04 	ldr.w	r4, [r3], #4
   b5192:	f842 4b04 	str.w	r4, [r2], #4
   b5196:	428b      	cmp	r3, r1
   b5198:	d1f9      	bne.n	b518e <_ZN8particle7BleUuidC1Ev+0xe>
}
   b519a:	bd10      	pop	{r4, pc}
   b519c:	000b718a 	.word	0x000b718a

000b51a0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b51a0:	b510      	push	{r4, lr}
    if (uuid128) {
   b51a2:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b51a4:	4604      	mov	r4, r0
    if (uuid128) {
   b51a6:	b1b1      	cbz	r1, b51d6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b51a8:	2a01      	cmp	r2, #1
   b51aa:	f101 0210 	add.w	r2, r1, #16
   b51ae:	d10a      	bne.n	b51c6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b51b0:	4601      	mov	r1, r0
   b51b2:	f853 0b04 	ldr.w	r0, [r3], #4
   b51b6:	f841 0b04 	str.w	r0, [r1], #4
   b51ba:	4293      	cmp	r3, r2
   b51bc:	d1f9      	bne.n	b51b2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b51be:	2301      	movs	r3, #1
   b51c0:	6123      	str	r3, [r4, #16]
}
   b51c2:	4620      	mov	r0, r4
   b51c4:	bd10      	pop	{r4, pc}
   b51c6:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b51c8:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b51cc:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b51d0:	429a      	cmp	r2, r3
   b51d2:	d1f9      	bne.n	b51c8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b51d4:	e7f3      	b.n	b51be <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b51d6:	2210      	movs	r2, #16
   b51d8:	f001 fdc0 	bl	b6d5c <memset>
   b51dc:	e7f1      	b.n	b51c2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b51de <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b51de:	b538      	push	{r3, r4, r5, lr}
   b51e0:	4604      	mov	r4, r0
   b51e2:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b51e4:	461a      	mov	r2, r3
   b51e6:	f7ff ffdb 	bl	b51a0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b51ea:	81a5      	strh	r5, [r4, #12]
}
   b51ec:	4620      	mov	r0, r4
   b51ee:	bd38      	pop	{r3, r4, r5, pc}

000b51f0 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b51f0:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b51f2:	6902      	ldr	r2, [r0, #16]
   b51f4:	b922      	cbnz	r2, b5200 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b51f6:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b51f8:	3800      	subs	r0, #0
   b51fa:	bf18      	it	ne
   b51fc:	2001      	movne	r0, #1
}
   b51fe:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b5200:	4902      	ldr	r1, [pc, #8]	; (b520c <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b5202:	2210      	movs	r2, #16
   b5204:	f001 fd72 	bl	b6cec <memcmp>
   b5208:	e7f6      	b.n	b51f8 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b520a:	bf00      	nop
   b520c:	000b71aa 	.word	0x000b71aa

000b5210 <_ZNK8particle7BleUuid4typeEv>:
}
   b5210:	6900      	ldr	r0, [r0, #16]
   b5212:	4770      	bx	lr

000b5214 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b5214:	b538      	push	{r3, r4, r5, lr}
   b5216:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b5218:	2214      	movs	r2, #20
   b521a:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b521c:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b521e:	f001 fd9d 	bl	b6d5c <memset>
    if (type_ == BleUuidType::SHORT) {
   b5222:	6923      	ldr	r3, [r4, #16]
   b5224:	b91b      	cbnz	r3, b522e <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b5226:	89a3      	ldrh	r3, [r4, #12]
   b5228:	802b      	strh	r3, [r5, #0]
}
   b522a:	4628      	mov	r0, r5
   b522c:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b522e:	2301      	movs	r3, #1
   b5230:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b5232:	4621      	mov	r1, r4
   b5234:	462b      	mov	r3, r5
   b5236:	f104 0210 	add.w	r2, r4, #16
   b523a:	f851 0b04 	ldr.w	r0, [r1], #4
   b523e:	f843 0b04 	str.w	r0, [r3], #4
   b5242:	4291      	cmp	r1, r2
   b5244:	d1f9      	bne.n	b523a <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b5246:	e7f0      	b.n	b522a <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b5248 <_ZNK8particle7BleUuid7shortedEv>:
}
   b5248:	8980      	ldrh	r0, [r0, #12]
   b524a:	4770      	bx	lr

000b524c <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b524c:	4770      	bx	lr

000b524e <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b524e:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b5250:	6902      	ldr	r2, [r0, #16]
   b5252:	690b      	ldr	r3, [r1, #16]
   b5254:	429a      	cmp	r2, r3
   b5256:	d106      	bne.n	b5266 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b5258:	2210      	movs	r2, #16
   b525a:	f001 fd47 	bl	b6cec <memcmp>
   b525e:	fab0 f080 	clz	r0, r0
   b5262:	0940      	lsrs	r0, r0, #5
}
   b5264:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b5266:	2000      	movs	r0, #0
   b5268:	e7fc      	b.n	b5264 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b526c <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b526c:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b526e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b5272:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b5274:	4b34      	ldr	r3, [pc, #208]	; (b5348 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b5276:	460c      	mov	r4, r1
   b5278:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b527a:	4602      	mov	r2, r0
   b527c:	f103 0110 	add.w	r1, r3, #16
   b5280:	f853 0b04 	ldr.w	r0, [r3], #4
   b5284:	f842 0b04 	str.w	r0, [r2], #4
   b5288:	428b      	cmp	r3, r1
   b528a:	d1f9      	bne.n	b5280 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b528c:	b344      	cbz	r4, b52e0 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b528e:	2124      	movs	r1, #36	; 0x24
   b5290:	4620      	mov	r0, r4
   b5292:	f001 fdab 	bl	b6dec <strnlen>
   b5296:	2804      	cmp	r0, #4
   b5298:	f04f 0500 	mov.w	r5, #0
   b529c:	d123      	bne.n	b52e6 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b529e:	f8ad 5004 	strh.w	r5, [sp, #4]
   b52a2:	af01      	add	r7, sp, #4
   b52a4:	1ca5      	adds	r5, r4, #2
   b52a6:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b52a8:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b52ac:	f7ff ff08 	bl	b50c0 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b52b0:	f1b0 0800 	subs.w	r8, r0, #0
   b52b4:	db12      	blt.n	b52dc <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b52b6:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b52ba:	f7ff ff01 	bl	b50c0 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b52be:	2800      	cmp	r0, #0
   b52c0:	db0c      	blt.n	b52dc <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b52c2:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b52c4:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b52c8:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b52ca:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b52ce:	d1eb      	bne.n	b52a8 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b52d0:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b52d4:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b52d6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b52da:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b52dc:	2300      	movs	r3, #0
   b52de:	6133      	str	r3, [r6, #16]
}
   b52e0:	b002      	add	sp, #8
   b52e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b52e6:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b52ea:	2124      	movs	r1, #36	; 0x24
   b52ec:	4620      	mov	r0, r4
   b52ee:	f001 fd7d 	bl	b6dec <strnlen>
   b52f2:	42a8      	cmp	r0, r5
   b52f4:	d807      	bhi.n	b5306 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b52f6:	4642      	mov	r2, r8
   b52f8:	2100      	movs	r1, #0
   b52fa:	4630      	mov	r0, r6
}
   b52fc:	b002      	add	sp, #8
   b52fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b5302:	f001 bd2b 	b.w	b6d5c <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b5306:	f1b8 0f00 	cmp.w	r8, #0
   b530a:	d0e9      	beq.n	b52e0 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b530c:	5d60      	ldrb	r0, [r4, r5]
   b530e:	f7ff fed7 	bl	b50c0 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b5312:	0603      	lsls	r3, r0, #24
   b5314:	d415      	bmi.n	b5342 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b5316:	0100      	lsls	r0, r0, #4
   b5318:	f108 38ff 	add.w	r8, r8, #4294967295
   b531c:	b2c7      	uxtb	r7, r0
   b531e:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b5322:	2124      	movs	r1, #36	; 0x24
   b5324:	4620      	mov	r0, r4
   b5326:	f001 fd61 	bl	b6dec <strnlen>
   b532a:	3501      	adds	r5, #1
   b532c:	42a8      	cmp	r0, r5
   b532e:	d908      	bls.n	b5342 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b5330:	5d60      	ldrb	r0, [r4, r5]
   b5332:	f7ff fec5 	bl	b50c0 <_ZN8particle11hexToNibbleEc>
   b5336:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b5338:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b533a:	bfa4      	itt	ge
   b533c:	4338      	orrge	r0, r7
   b533e:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b5342:	3501      	adds	r5, #1
   b5344:	e7d1      	b.n	b52ea <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b5346:	bf00      	nop
   b5348:	000b718a 	.word	0x000b718a

000b534c <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b534c:	b513      	push	{r0, r1, r4, lr}
   b534e:	4604      	mov	r4, r0
   b5350:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b5352:	f7ff ff15 	bl	b5180 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b5356:	4620      	mov	r0, r4
   b5358:	9901      	ldr	r1, [sp, #4]
   b535a:	f7ff ff87 	bl	b526c <_ZN8particle7BleUuid9constructEPKc>
}
   b535e:	4620      	mov	r0, r4
   b5360:	b002      	add	sp, #8
   b5362:	bd10      	pop	{r4, pc}

000b5364 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b5364:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b5366:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b536a:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b536c:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b536e:	8043      	strh	r3, [r0, #2]
   b5370:	220e      	movs	r2, #14
   b5372:	4629      	mov	r1, r5
   b5374:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b5376:	7105      	strb	r5, [r0, #4]
   b5378:	3006      	adds	r0, #6
   b537a:	f001 fcef 	bl	b6d5c <memset>
   b537e:	f104 0014 	add.w	r0, r4, #20
   b5382:	f7ff fefd 	bl	b5180 <_ZN8particle7BleUuidC1Ev>
   b5386:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b538a:	f7ff fef9 	bl	b5180 <_ZN8particle7BleUuidC1Ev>
   b538e:	4904      	ldr	r1, [pc, #16]	; (b53a0 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b5390:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b5394:	f7ff fda9 	bl	b4eea <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b5398:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b539a:	4620      	mov	r0, r4
   b539c:	bd38      	pop	{r3, r4, r5, pc}
   b539e:	bf00      	nop
   b53a0:	000b6f17 	.word	0x000b6f17

000b53a4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b53a4:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b53a6:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b53aa:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b53ae:	4293      	cmp	r3, r2
   b53b0:	4618      	mov	r0, r3
   b53b2:	d006      	beq.n	b53c2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b53b4:	6804      	ldr	r4, [r0, #0]
   b53b6:	8824      	ldrh	r4, [r4, #0]
   b53b8:	428c      	cmp	r4, r1
   b53ba:	f103 0308 	add.w	r3, r3, #8
   b53be:	d1f6      	bne.n	b53ae <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b53c0:	bd10      	pop	{r4, pc}
        return nullptr;
   b53c2:	2000      	movs	r0, #0
   b53c4:	e7fc      	b.n	b53c0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b53c8 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b53c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b53cc:	2600      	movs	r6, #0
   b53ce:	6006      	str	r6, [r0, #0]
   b53d0:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b53d2:	2028      	movs	r0, #40	; 0x28
   b53d4:	460c      	mov	r4, r1
   b53d6:	f7fe fe5c 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b53da:	1e05      	subs	r5, r0, #0
   b53dc:	f105 080c 	add.w	r8, r5, #12
   b53e0:	d00f      	beq.n	b5402 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b53e2:	2301      	movs	r3, #1
   b53e4:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b53e8:	4b08      	ldr	r3, [pc, #32]	; (b540c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b53ea:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b53ec:	4640      	mov	r0, r8
   b53ee:	f7ff fec7 	bl	b5180 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b53f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b53f4:	622e      	str	r6, [r5, #32]
   b53f6:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b53fa:	4646      	mov	r6, r8
   b53fc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b53fe:	6823      	ldr	r3, [r4, #0]
   b5400:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b5402:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b5406:	4638      	mov	r0, r7
   b5408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b540c:	000b714c 	.word	0x000b714c

000b5410 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b5410:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b5412:	2500      	movs	r5, #0
   b5414:	6005      	str	r5, [r0, #0]
   b5416:	4606      	mov	r6, r0
   b5418:	2030      	movs	r0, #48	; 0x30
   b541a:	f7fe fe3a 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b541e:	4604      	mov	r4, r0
   b5420:	b188      	cbz	r0, b5446 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b5422:	2301      	movs	r3, #1
   b5424:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b5428:	4b09      	ldr	r3, [pc, #36]	; (b5450 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b542a:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b542c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b5430:	8183      	strh	r3, [r0, #12]
   b5432:	300e      	adds	r0, #14
   b5434:	f7ff fe9a 	bl	b516c <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b5438:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b543c:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b5440:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b5444:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b5446:	6074      	str	r4, [r6, #4]
   b5448:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b544a:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b544c:	4630      	mov	r0, r6
   b544e:	bd70      	pop	{r4, r5, r6, pc}
   b5450:	000b7168 	.word	0x000b7168

000b5454 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b5454:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5456:	460d      	mov	r5, r1
   b5458:	4604      	mov	r4, r0
    WiringBleLock lk;
   b545a:	a801      	add	r0, sp, #4
   b545c:	f7ff fe46 	bl	b50ec <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b5460:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b5462:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b5466:	6023      	str	r3, [r4, #0]
   b5468:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b546c:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b546e:	a801      	add	r0, sp, #4
   b5470:	f7ff fe4a 	bl	b5108 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b5474:	4620      	mov	r0, r4
   b5476:	b003      	add	sp, #12
   b5478:	bd30      	pop	{r4, r5, pc}

000b547a <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b547a:	b530      	push	{r4, r5, lr}
   b547c:	4605      	mov	r5, r0
   b547e:	b087      	sub	sp, #28
   b5480:	460c      	mov	r4, r1
    WiringBleLock lk;
   b5482:	a801      	add	r0, sp, #4
   b5484:	f7ff fe32 	bl	b50ec <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b5488:	682a      	ldr	r2, [r5, #0]
   b548a:	6823      	ldr	r3, [r4, #0]
   b548c:	8812      	ldrh	r2, [r2, #0]
   b548e:	881b      	ldrh	r3, [r3, #0]
   b5490:	429a      	cmp	r2, r3
   b5492:	d10d      	bne.n	b54b0 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b5494:	4629      	mov	r1, r5
   b5496:	a802      	add	r0, sp, #8
   b5498:	f7ff ffdc 	bl	b5454 <_ZNK8particle13BlePeerDevice7addressEv>
   b549c:	4621      	mov	r1, r4
   b549e:	a804      	add	r0, sp, #16
   b54a0:	f7ff ffd8 	bl	b5454 <_ZNK8particle13BlePeerDevice7addressEv>
   b54a4:	a904      	add	r1, sp, #16
   b54a6:	a802      	add	r0, sp, #8
   b54a8:	f7ff fe4c 	bl	b5144 <_ZNK8particle10BleAddresseqERKS0_>
   b54ac:	4604      	mov	r4, r0
   b54ae:	b900      	cbnz	r0, b54b2 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b54b0:	2400      	movs	r4, #0
    WiringBleLock lk;
   b54b2:	a801      	add	r0, sp, #4
   b54b4:	f7ff fe28 	bl	b5108 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b54b8:	4620      	mov	r0, r4
   b54ba:	b007      	add	sp, #28
   b54bc:	bd30      	pop	{r4, r5, pc}
	...

000b54c0 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b54c0:	b510      	push	{r4, lr}
   b54c2:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b54c4:	2054      	movs	r0, #84	; 0x54
   b54c6:	f7fe fde4 	bl	b4092 <_Znwj>
   b54ca:	4601      	mov	r1, r0
   b54cc:	b160      	cbz	r0, b54e8 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b54ce:	2300      	movs	r3, #0
   b54d0:	e9c0 3300 	strd	r3, r3, [r0]
   b54d4:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b54d8:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b54dc:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b54e0:	6203      	str	r3, [r0, #32]
   b54e2:	62c3      	str	r3, [r0, #44]	; 0x2c
   b54e4:	63c3      	str	r3, [r0, #60]	; 0x3c
   b54e6:	64c3      	str	r3, [r0, #76]	; 0x4c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b54e8:	6021      	str	r1, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b54ea:	b919      	cbnz	r1, b54f4 <_ZN8particle14BleLocalDeviceC1Ev+0x34>
        SPARK_ASSERT(false);
   b54ec:	4a09      	ldr	r2, [pc, #36]	; (b5514 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   b54ee:	200a      	movs	r0, #10
   b54f0:	f7ff fb82 	bl	b4bf8 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b54f4:	2000      	movs	r0, #0
   b54f6:	f7ff fa4f 	bl	b4998 <hal_ble_stack_init>
   b54fa:	b120      	cbz	r0, b5506 <_ZN8particle14BleLocalDeviceC1Ev+0x46>
   b54fc:	4a05      	ldr	r2, [pc, #20]	; (b5514 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   b54fe:	2100      	movs	r1, #0
   b5500:	200a      	movs	r0, #10
   b5502:	f7ff fb79 	bl	b4bf8 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b5506:	6821      	ldr	r1, [r4, #0]
   b5508:	4803      	ldr	r0, [pc, #12]	; (b5518 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b550a:	2200      	movs	r2, #0
   b550c:	f7ff fa82 	bl	b4a14 <hal_ble_set_callback_on_periph_link_events>
}
   b5510:	4620      	mov	r0, r4
   b5512:	bd10      	pop	{r4, pc}
   b5514:	000b4959 	.word	0x000b4959
   b5518:	000b5a95 	.word	0x000b5a95

000b551c <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b551c:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b551e:	4c0a      	ldr	r4, [pc, #40]	; (b5548 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b5520:	7823      	ldrb	r3, [r4, #0]
   b5522:	f3bf 8f5b 	dmb	ish
   b5526:	07db      	lsls	r3, r3, #31
   b5528:	d40c      	bmi.n	b5544 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b552a:	4620      	mov	r0, r4
   b552c:	f7fe fdb7 	bl	b409e <__cxa_guard_acquire>
   b5530:	b140      	cbz	r0, b5544 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b5532:	4806      	ldr	r0, [pc, #24]	; (b554c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b5534:	f7ff ffc4 	bl	b54c0 <_ZN8particle14BleLocalDeviceC1Ev>
   b5538:	4620      	mov	r0, r4
   b553a:	f7fe fdb5 	bl	b40a8 <__cxa_guard_release>
   b553e:	4804      	ldr	r0, [pc, #16]	; (b5550 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b5540:	f001 fbce 	bl	b6ce0 <atexit>
    return instance;
}
   b5544:	4801      	ldr	r0, [pc, #4]	; (b554c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b5546:	bd10      	pop	{r4, pc}
   b5548:	2003e6c4 	.word	0x2003e6c4
   b554c:	2003e6d0 	.word	0x2003e6d0
   b5550:	000b5769 	.word	0x000b5769

000b5554 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b5554:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b5556:	6803      	ldr	r3, [r0, #0]
   b5558:	3b09      	subs	r3, #9
   b555a:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b555c:	b08d      	sub	sp, #52	; 0x34
   b555e:	4604      	mov	r4, r0
   b5560:	460d      	mov	r5, r1
    switch (event->type) {
   b5562:	d811      	bhi.n	b5588 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b5564:	f7ff ffda 	bl	b551c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5568:	88a1      	ldrh	r1, [r4, #4]
   b556a:	6800      	ldr	r0, [r0, #0]
   b556c:	f7ff ff1a 	bl	b53a4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b5570:	4603      	mov	r3, r0
   b5572:	b958      	cbnz	r0, b558c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b5574:	2220      	movs	r2, #32
   b5576:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b557a:	4a0b      	ldr	r2, [pc, #44]	; (b55a8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b557c:	9200      	str	r2, [sp, #0]
   b557e:	490b      	ldr	r1, [pc, #44]	; (b55ac <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b5580:	aa04      	add	r2, sp, #16
   b5582:	2032      	movs	r0, #50	; 0x32
   b5584:	f7ff fb40 	bl	b4c08 <log_message>
}
   b5588:	b00d      	add	sp, #52	; 0x34
   b558a:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b558c:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b558e:	2a00      	cmp	r2, #0
   b5590:	d0fa      	beq.n	b5588 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b5592:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5596:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b559a:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b559e:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b55a0:	aa04      	add	r2, sp, #16
   b55a2:	a903      	add	r1, sp, #12
   b55a4:	47a0      	blx	r4
}
   b55a6:	e7ef      	b.n	b5588 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b55a8:	000b705b 	.word	0x000b705b
   b55ac:	000b7034 	.word	0x000b7034

000b55b0 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b55b0:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b55b2:	2000      	movs	r0, #0
   b55b4:	f7ff f9f0 	bl	b4998 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b55b8:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b55bc:	bd08      	pop	{r3, pc}

000b55be <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b55be:	b919      	cbnz	r1, b55c8 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b55c0:	460a      	mov	r2, r1
   b55c2:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b55c4:	f7ff b9f0 	b.w	b49a8 <hal_ble_gap_set_advertising_data>
   b55c8:	e9d1 0100 	ldrd	r0, r1, [r1]
   b55cc:	2200      	movs	r2, #0
   b55ce:	e7f9      	b.n	b55c4 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b55d0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b55d0:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b55d2:	1e14      	subs	r4, r2, #0
   b55d4:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b55d6:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b55d8:	db02      	blt.n	b55e0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b55da:	1862      	adds	r2, r4, r1
   b55dc:	429a      	cmp	r2, r3
   b55de:	dd00      	ble.n	b55e2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b55e0:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b55e2:	682a      	ldr	r2, [r5, #0]
   b55e4:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b55e6:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b55e8:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b55ea:	1a52      	subs	r2, r2, r1
   b55ec:	f001 fb9c 	bl	b6d28 <memmove>
    size_ -= n;
   b55f0:	686a      	ldr	r2, [r5, #4]
   b55f2:	1b12      	subs	r2, r2, r4
   b55f4:	606a      	str	r2, [r5, #4]
}
   b55f6:	bd38      	pop	{r3, r4, r5, pc}

000b55f8 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b55f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b55fa:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b55fc:	4604      	mov	r4, r0
   b55fe:	460d      	mov	r5, r1
   b5600:	ab01      	add	r3, sp, #4
   b5602:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5606:	f7ff fce9 	bl	b4fdc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b560a:	4602      	mov	r2, r0
   b560c:	b138      	cbz	r0, b561e <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b560e:	9901      	ldr	r1, [sp, #4]
   b5610:	4620      	mov	r0, r4
   b5612:	f7ff ffdd 	bl	b55d0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b5616:	4629      	mov	r1, r5
   b5618:	4620      	mov	r0, r4
   b561a:	f7ff ffed 	bl	b55f8 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b561e:	b003      	add	sp, #12
   b5620:	bd30      	pop	{r4, r5, pc}

000b5622 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b5622:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b5624:	460c      	mov	r4, r1
   b5626:	b929      	cbnz	r1, b5634 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b5628:	460a      	mov	r2, r1
   b562a:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b562c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b5630:	f7ff b9c2 	b.w	b49b8 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b5634:	2101      	movs	r1, #1
   b5636:	4620      	mov	r0, r4
   b5638:	f7ff ffde 	bl	b55f8 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b563c:	e9d4 0100 	ldrd	r0, r1, [r4]
   b5640:	2200      	movs	r2, #0
   b5642:	e7f3      	b.n	b562c <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b5644 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b5644:	b538      	push	{r3, r4, r5, lr}
   b5646:	4604      	mov	r4, r0
   b5648:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b564a:	f7ff ffb8 	bl	b55be <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b564e:	2800      	cmp	r0, #0
   b5650:	db0a      	blt.n	b5668 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b5652:	4629      	mov	r1, r5
   b5654:	4620      	mov	r0, r4
   b5656:	f7ff ffe4 	bl	b5622 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b565a:	2800      	cmp	r0, #0
   b565c:	db04      	blt.n	b5668 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b565e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b5662:	2000      	movs	r0, #0
   b5664:	f7ff b9b0 	b.w	b49c8 <hal_ble_gap_start_advertising>
}
   b5668:	bd38      	pop	{r3, r4, r5, pc}
	...

000b566c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b566c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b566e:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b5670:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b5672:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5674:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b5676:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5678:	f7fe fd0b 	bl	b4092 <_Znwj>
   b567c:	b118      	cbz	r0, b5686 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b567e:	682b      	ldr	r3, [r5, #0]
   b5680:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5682:	686b      	ldr	r3, [r5, #4]
   b5684:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b5686:	4b03      	ldr	r3, [pc, #12]	; (b5694 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b5688:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b568a:	4b03      	ldr	r3, [pc, #12]	; (b5698 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b568c:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b568e:	60a3      	str	r3, [r4, #8]
      }
   b5690:	4620      	mov	r0, r4
   b5692:	bd38      	pop	{r3, r4, r5, pc}
   b5694:	000b5019 	.word	0x000b5019
   b5698:	000b5031 	.word	0x000b5031

000b569c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b569c:	680b      	ldr	r3, [r1, #0]
   b569e:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b56a0:	b113      	cbz	r3, b56a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b56a2:	685a      	ldr	r2, [r3, #4]
   b56a4:	3201      	adds	r2, #1
   b56a6:	605a      	str	r2, [r3, #4]
      }
   b56a8:	4770      	bx	lr

000b56aa <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b56aa:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b56ac:	f851 3b04 	ldr.w	r3, [r1], #4
   b56b0:	4604      	mov	r4, r0
   b56b2:	f840 3b04 	str.w	r3, [r0], #4
   b56b6:	f7ff fff1 	bl	b569c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b56ba:	6823      	ldr	r3, [r4, #0]
   b56bc:	b90b      	cbnz	r3, b56c2 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b56be:	f7ff fca3 	bl	b5008 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b56c2:	4620      	mov	r0, r4
   b56c4:	bd10      	pop	{r4, pc}

000b56c6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b56c6:	b510      	push	{r4, lr}
   b56c8:	f851 3b04 	ldr.w	r3, [r1], #4
   b56cc:	4604      	mov	r4, r0
   b56ce:	f840 3b04 	str.w	r3, [r0], #4
   b56d2:	f7ff ffe3 	bl	b569c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b56d6:	4620      	mov	r0, r4
   b56d8:	bd10      	pop	{r4, pc}

000b56da <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b56da:	b510      	push	{r4, lr}
   b56dc:	f851 3b04 	ldr.w	r3, [r1], #4
   b56e0:	4604      	mov	r4, r0
   b56e2:	f840 3b04 	str.w	r3, [r0], #4
   b56e6:	f7ff ffd9 	bl	b569c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b56ea:	4620      	mov	r0, r4
   b56ec:	bd10      	pop	{r4, pc}

000b56ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b56ee:	b510      	push	{r4, lr}
   b56f0:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b56f2:	6800      	ldr	r0, [r0, #0]
   b56f4:	b108      	cbz	r0, b56fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b56f6:	f7ff fccf 	bl	b5098 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b56fa:	4620      	mov	r0, r4
   b56fc:	bd10      	pop	{r4, pc}

000b56fe <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b56fe:	b510      	push	{r4, lr}
   b5700:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b5702:	3004      	adds	r0, #4
   b5704:	f7ff fff3 	bl	b56ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5708:	4620      	mov	r0, r4
   b570a:	bd10      	pop	{r4, pc}

000b570c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b570c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b570e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5712:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5714:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b5718:	42ae      	cmp	r6, r5
   b571a:	d004      	beq.n	b5726 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b571c:	1d28      	adds	r0, r5, #4
   b571e:	f7ff ffe6 	bl	b56ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5722:	3508      	adds	r5, #8
   b5724:	e7f8      	b.n	b5718 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b5726:	6820      	ldr	r0, [r4, #0]
   b5728:	f7ff fb0a 	bl	b4d40 <free>
}
   b572c:	4620      	mov	r0, r4
   b572e:	bd70      	pop	{r4, r5, r6, pc}

000b5730 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5730:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5732:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5736:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5738:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b573c:	42ae      	cmp	r6, r5
   b573e:	d004      	beq.n	b574a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b5740:	1d28      	adds	r0, r5, #4
   b5742:	f7ff ffd4 	bl	b56ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5746:	3508      	adds	r5, #8
   b5748:	e7f8      	b.n	b573c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b574a:	6820      	ldr	r0, [r4, #0]
   b574c:	f7ff faf8 	bl	b4d40 <free>
}
   b5750:	4620      	mov	r0, r4
   b5752:	bd70      	pop	{r4, r5, r6, pc}

000b5754 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b5754:	b510      	push	{r4, lr}
   b5756:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b5758:	3024      	adds	r0, #36	; 0x24
   b575a:	f7ff ffe9 	bl	b5730 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b575e:	f104 0018 	add.w	r0, r4, #24
   b5762:	f7ff ffd3 	bl	b570c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b5766:	bd10      	pop	{r4, pc}

000b5768 <__tcf_0>:
    static BleLocalDevice instance;
   b5768:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b576a:	4b15      	ldr	r3, [pc, #84]	; (b57c0 <__tcf_0+0x58>)
   b576c:	681c      	ldr	r4, [r3, #0]
   b576e:	b334      	cbz	r4, b57be <__tcf_0+0x56>
    class function<_Res(_ArgTypes...)>
   b5770:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b5774:	f7ff fc7c 	bl	b5070 <_ZNSt14_Function_baseD1Ev>
   b5778:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b577c:	f7ff fc78 	bl	b5070 <_ZNSt14_Function_baseD1Ev>
   b5780:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b5784:	f7ff fc74 	bl	b5070 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b5788:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b578c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b5790:	42ae      	cmp	r6, r5
   b5792:	d004      	beq.n	b579e <__tcf_0+0x36>
      ~__shared_ptr() = default;
   b5794:	1d28      	adds	r0, r5, #4
   b5796:	f7ff ffaa 	bl	b56ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b579a:	3508      	adds	r5, #8
   b579c:	e7f8      	b.n	b5790 <__tcf_0+0x28>
    ::free(ptr);
   b579e:	69a0      	ldr	r0, [r4, #24]
   b57a0:	f7ff face 	bl	b4d40 <free>
    ~BleLocalDeviceImpl() = default;
   b57a4:	f104 000c 	add.w	r0, r4, #12
   b57a8:	f7ff ffc2 	bl	b5730 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b57ac:	4620      	mov	r0, r4
   b57ae:	f7ff ffad 	bl	b570c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b57b2:	4620      	mov	r0, r4
   b57b4:	2154      	movs	r1, #84	; 0x54
    static BleLocalDevice instance;
   b57b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b57ba:	f7fe bc6e 	b.w	b409a <_ZdlPvj>
   b57be:	bd70      	pop	{r4, r5, r6, pc}
   b57c0:	2003e6d0 	.word	0x2003e6d0

000b57c4 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b57c4:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b57c6:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b57c8:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b57cc:	e9c1 3300 	strd	r3, r3, [r1]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b57d0:	6803      	ldr	r3, [r0, #0]
   b57d2:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b57d4:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b57d6:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b57d8:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b57da:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b57dc:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b57de:	f7ff ff86 	bl	b56ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b57e2:	b002      	add	sp, #8
   b57e4:	bd10      	pop	{r4, pc}

000b57e6 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b57e6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b57e8:	b510      	push	{r4, lr}
      if (_M_empty())
   b57ea:	b90a      	cbnz	r2, b57f0 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b57ec:	f001 f962 	bl	b6ab4 <_ZSt25__throw_bad_function_callv>
    }
   b57f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b57f4:	68c3      	ldr	r3, [r0, #12]
   b57f6:	4718      	bx	r3

000b57f8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b57f8:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b57fa:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b57fc:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b57fe:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b5800:	dd03      	ble.n	b580a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b5802:	f7ff faa5 	bl	b4d50 <realloc>
            if (!d) {
   b5806:	b918      	cbnz	r0, b5810 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b5808:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b580a:	f7ff fa99 	bl	b4d40 <free>
        T* d = nullptr;
   b580e:	2000      	movs	r0, #0
        data_ = d;
   b5810:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b5812:	60a5      	str	r5, [r4, #8]
        return true;
   b5814:	2001      	movs	r0, #1
   b5816:	e7f7      	b.n	b5808 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b5818 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b5818:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b581a:	6883      	ldr	r3, [r0, #8]
   b581c:	428b      	cmp	r3, r1
   b581e:	da02      	bge.n	b5826 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b5820:	f7ff ffea 	bl	b57f8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b5824:	bd08      	pop	{r3, pc}
    return true;
   b5826:	2001      	movs	r0, #1
   b5828:	e7fc      	b.n	b5824 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b582a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b582a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b582e:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b5830:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b5832:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b5834:	4419      	add	r1, r3
   b5836:	6883      	ldr	r3, [r0, #8]
   b5838:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b583a:	4604      	mov	r4, r0
   b583c:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b583e:	dc12      	bgt.n	b5866 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b5840:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5842:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5844:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5846:	1bd2      	subs	r2, r2, r7
   b5848:	4631      	mov	r1, r6
   b584a:	1970      	adds	r0, r6, r5
   b584c:	f001 fa6c 	bl	b6d28 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b5850:	462a      	mov	r2, r5
   b5852:	4641      	mov	r1, r8
   b5854:	4630      	mov	r0, r6
   b5856:	f001 fa59 	bl	b6d0c <memcpy>
    size_ += n;
   b585a:	6863      	ldr	r3, [r4, #4]
   b585c:	442b      	add	r3, r5
   b585e:	6063      	str	r3, [r4, #4]
    return true;
   b5860:	2001      	movs	r0, #1
}
   b5862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b5866:	f7ff ffc7 	bl	b57f8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b586a:	2800      	cmp	r0, #0
   b586c:	d1e8      	bne.n	b5840 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b586e:	e7f8      	b.n	b5862 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b5870 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b5870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5872:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5874:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b5878:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b587a:	4604      	mov	r4, r0
   b587c:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b587e:	da0b      	bge.n	b5898 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b5880:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5882:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5884:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5886:	1b52      	subs	r2, r2, r5
   b5888:	1c48      	adds	r0, r1, #1
   b588a:	f001 fa4d 	bl	b6d28 <memmove>
    new(p) T(std::move(value));
   b588e:	557e      	strb	r6, [r7, r5]
    ++size_;
   b5890:	6863      	ldr	r3, [r4, #4]
   b5892:	3301      	adds	r3, #1
   b5894:	6063      	str	r3, [r4, #4]
}
   b5896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5898:	3101      	adds	r1, #1
   b589a:	f7ff ffad 	bl	b57f8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b589e:	2800      	cmp	r0, #0
   b58a0:	d1ee      	bne.n	b5880 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b58a2:	e7f8      	b.n	b5896 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b58a4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b58a4:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b58a6:	6841      	ldr	r1, [r0, #4]
   b58a8:	f7ff bfe2 	b.w	b5870 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b58ac <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b58ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b58b0:	4604      	mov	r4, r0
   b58b2:	461d      	mov	r5, r3
   b58b4:	460f      	mov	r7, r1
   b58b6:	ab01      	add	r3, sp, #4
   b58b8:	4690      	mov	r8, r2
   b58ba:	460a      	mov	r2, r1
   b58bc:	e9d0 0100 	ldrd	r0, r1, [r0]
   b58c0:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b58c4:	f7ff fb8a 	bl	b4fdc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b58c8:	1cae      	adds	r6, r5, #2
   b58ca:	6863      	ldr	r3, [r4, #4]
   b58cc:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b58ce:	f1b9 0f00 	cmp.w	r9, #0
   b58d2:	d126      	bne.n	b5922 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b58d4:	b328      	cbz	r0, b5922 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b58d6:	4433      	add	r3, r6
   b58d8:	1a1b      	subs	r3, r3, r0
   b58da:	2bff      	cmp	r3, #255	; 0xff
   b58dc:	d809      	bhi.n	b58f2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b58de:	9901      	ldr	r1, [sp, #4]
   b58e0:	4620      	mov	r0, r4
   b58e2:	f7ff fe75 	bl	b55d0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b58e6:	6861      	ldr	r1, [r4, #4]
   b58e8:	4620      	mov	r0, r4
   b58ea:	4431      	add	r1, r6
   b58ec:	f7ff ff94 	bl	b5818 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b58f0:	b918      	cbnz	r0, b58fa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b58f2:	6860      	ldr	r0, [r4, #4]
}
   b58f4:	b003      	add	sp, #12
   b58f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b58fa:	1c6a      	adds	r2, r5, #1
   b58fc:	9901      	ldr	r1, [sp, #4]
   b58fe:	b2d2      	uxtb	r2, r2
   b5900:	4620      	mov	r0, r4
   b5902:	f7ff ffb5 	bl	b5870 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b5906:	9901      	ldr	r1, [sp, #4]
   b5908:	463a      	mov	r2, r7
   b590a:	3101      	adds	r1, #1
   b590c:	4620      	mov	r0, r4
   b590e:	f7ff ffaf 	bl	b5870 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b5912:	9901      	ldr	r1, [sp, #4]
   b5914:	462b      	mov	r3, r5
   b5916:	4642      	mov	r2, r8
   b5918:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b591a:	4620      	mov	r0, r4
   b591c:	f7ff ff85 	bl	b582a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b5920:	e7e7      	b.n	b58f2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b5922:	18f1      	adds	r1, r6, r3
   b5924:	29ff      	cmp	r1, #255	; 0xff
   b5926:	d8e4      	bhi.n	b58f2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b5928:	4620      	mov	r0, r4
   b592a:	f7ff ff75 	bl	b5818 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b592e:	2800      	cmp	r0, #0
   b5930:	d0df      	beq.n	b58f2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b5932:	1c69      	adds	r1, r5, #1
   b5934:	b2c9      	uxtb	r1, r1
   b5936:	4620      	mov	r0, r4
   b5938:	f7ff ffb4 	bl	b58a4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b593c:	4639      	mov	r1, r7
   b593e:	4620      	mov	r0, r4
   b5940:	f7ff ffb0 	bl	b58a4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b5944:	6861      	ldr	r1, [r4, #4]
   b5946:	462b      	mov	r3, r5
   b5948:	4642      	mov	r2, r8
   b594a:	e7e6      	b.n	b591a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b594c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b594c:	b430      	push	{r4, r5}
   b594e:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b5952:	b11a      	cbz	r2, b595c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b5954:	9502      	str	r5, [sp, #8]
}
   b5956:	bc30      	pop	{r4, r5}
   b5958:	f7ff bfa8 	b.w	b58ac <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b595c:	6840      	ldr	r0, [r0, #4]
}
   b595e:	bc30      	pop	{r4, r5}
   b5960:	4770      	bx	lr

000b5962 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b5962:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b5964:	2300      	movs	r3, #0
   b5966:	e9c0 3300 	strd	r3, r3, [r0]
   b596a:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b596c:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b596e:	9300      	str	r3, [sp, #0]
   b5970:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b5972:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b5976:	4619      	mov	r1, r3
   b5978:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b597c:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b597e:	f7ff ffe5 	bl	b594c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b5982:	4620      	mov	r0, r4
   b5984:	b004      	add	sp, #16
   b5986:	bd10      	pop	{r4, pc}

000b5988 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b5988:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b598a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b598c:	4604      	mov	r4, r0
   b598e:	460d      	mov	r5, r1
   b5990:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5992:	d914      	bls.n	b59be <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b5994:	4290      	cmp	r0, r2
   b5996:	d213      	bcs.n	b59c0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b5998:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b599c:	1a75      	subs	r5, r6, r1
   b599e:	f1a1 0708 	sub.w	r7, r1, #8
   b59a2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b59a4:	42b7      	cmp	r7, r6
   b59a6:	d018      	beq.n	b59da <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b59a8:	b11c      	cbz	r4, b59b2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b59aa:	4631      	mov	r1, r6
   b59ac:	4620      	mov	r0, r4
   b59ae:	f7ff fe94 	bl	b56da <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b59b2:	1d30      	adds	r0, r6, #4
   b59b4:	f7ff fe9b 	bl	b56ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b59b8:	3e08      	subs	r6, #8
   b59ba:	3c08      	subs	r4, #8
   b59bc:	e7f2      	b.n	b59a4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b59be:	d00c      	beq.n	b59da <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b59c0:	42b5      	cmp	r5, r6
   b59c2:	d00a      	beq.n	b59da <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b59c4:	b11c      	cbz	r4, b59ce <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b59c6:	4629      	mov	r1, r5
   b59c8:	4620      	mov	r0, r4
   b59ca:	f7ff fe86 	bl	b56da <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b59ce:	1d28      	adds	r0, r5, #4
   b59d0:	f7ff fe8d 	bl	b56ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b59d4:	3508      	adds	r5, #8
   b59d6:	3408      	adds	r4, #8
   b59d8:	e7f2      	b.n	b59c0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b59da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b59dc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b59dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b59de:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b59e0:	6846      	ldr	r6, [r0, #4]
   b59e2:	4668      	mov	r0, sp
   b59e4:	f7ff fe79 	bl	b56da <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b59e8:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b59ec:	429f      	cmp	r7, r3
   b59ee:	db12      	blt.n	b5a16 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b59f0:	3701      	adds	r7, #1
        if (n > 0) {
   b59f2:	2f00      	cmp	r7, #0
   b59f4:	dd29      	ble.n	b5a4a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b59f6:	00f8      	lsls	r0, r7, #3
   b59f8:	f7ff f99a 	bl	b4d30 <malloc>
            if (!d) {
   b59fc:	4605      	mov	r5, r0
   b59fe:	b1f0      	cbz	r0, b5a3e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b5a00:	e9d4 1200 	ldrd	r1, r2, [r4]
   b5a04:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b5a08:	f7ff ffbe 	bl	b5988 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b5a0c:	6820      	ldr	r0, [r4, #0]
   b5a0e:	f7ff f997 	bl	b4d40 <free>
        data_ = d;
   b5a12:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b5a14:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b5a16:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b5a18:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5a1a:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b5a1e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b5a22:	4631      	mov	r1, r6
   b5a24:	f106 0008 	add.w	r0, r6, #8
   b5a28:	f7ff ffae 	bl	b5988 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b5a2c:	b11e      	cbz	r6, b5a36 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b5a2e:	4669      	mov	r1, sp
   b5a30:	4630      	mov	r0, r6
   b5a32:	f7ff fe52 	bl	b56da <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b5a36:	6863      	ldr	r3, [r4, #4]
   b5a38:	3301      	adds	r3, #1
   b5a3a:	6063      	str	r3, [r4, #4]
    return true;
   b5a3c:	2501      	movs	r5, #1
   b5a3e:	a801      	add	r0, sp, #4
   b5a40:	f7ff fe55 	bl	b56ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5a44:	4628      	mov	r0, r5
   b5a46:	b003      	add	sp, #12
   b5a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b5a4a:	2500      	movs	r5, #0
   b5a4c:	e7de      	b.n	b5a0c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b5a4e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5a4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b5a50:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5a54:	4605      	mov	r5, r0
   b5a56:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b5a58:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b5a5c:	42a6      	cmp	r6, r4
   b5a5e:	d005      	beq.n	b5a6c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b5a60:	4639      	mov	r1, r7
   b5a62:	4620      	mov	r0, r4
   b5a64:	f7ff fd09 	bl	b547a <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b5a68:	b108      	cbz	r0, b5a6e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b5a6a:	b914      	cbnz	r4, b5a72 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b5a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b5a6e:	3408      	adds	r4, #8
   b5a70:	e7f4      	b.n	b5a5c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b5a72:	1d20      	adds	r0, r4, #4
   b5a74:	f7ff fe3b 	bl	b56ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b5a78:	e9d5 3200 	ldrd	r3, r2, [r5]
   b5a7c:	f104 0108 	add.w	r1, r4, #8
   b5a80:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b5a84:	4620      	mov	r0, r4
   b5a86:	f7ff ff7f 	bl	b5988 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b5a8a:	686b      	ldr	r3, [r5, #4]
   b5a8c:	3b01      	subs	r3, #1
   b5a8e:	606b      	str	r3, [r5, #4]
    return true;
   b5a90:	e7ec      	b.n	b5a6c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b5a94 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b5a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5a98:	4605      	mov	r5, r0
   b5a9a:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b5a9c:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b5a9e:	460c      	mov	r4, r1
        WiringBleLock lk;
   b5aa0:	f7ff fb24 	bl	b50ec <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b5aa4:	682e      	ldr	r6, [r5, #0]
   b5aa6:	2e04      	cmp	r6, #4
   b5aa8:	d075      	beq.n	b5b96 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
   b5aaa:	d807      	bhi.n	b5abc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x28>
   b5aac:	2e03      	cmp	r6, #3
   b5aae:	d032      	beq.n	b5b16 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x82>
        WiringBleLock lk;
   b5ab0:	a803      	add	r0, sp, #12
   b5ab2:	f7ff fb29 	bl	b5108 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b5ab6:	b00e      	add	sp, #56	; 0x38
   b5ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (event->type) {
   b5abc:	f1a6 030c 	sub.w	r3, r6, #12
   b5ac0:	2b04      	cmp	r3, #4
   b5ac2:	d8f5      	bhi.n	b5ab0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b5ac4:	89a9      	ldrh	r1, [r5, #12]
   b5ac6:	4620      	mov	r0, r4
   b5ac8:	f7ff fc6c 	bl	b53a4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b5acc:	2800      	cmp	r0, #0
   b5ace:	d0ef      	beq.n	b5ab0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                    if (impl->pairingEventCallback_) {
   b5ad0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b5ad2:	2b00      	cmp	r3, #0
   b5ad4:	d0ec      	beq.n	b5ab0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        BlePairingEventPayload payload = {};
   b5ad6:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b5ad8:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b5ada:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b5ade:	d002      	beq.n	b5ae6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x52>
   b5ae0:	2e10      	cmp	r6, #16
   b5ae2:	f040 80a0 	bne.w	b5c26 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x192>
                        BlePairingEventPayload payload = {};
   b5ae6:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b5ae8:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b5aea:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b5aec:	2506      	movs	r5, #6
                        };
   b5aee:	f88d 3015 	strb.w	r3, [sp, #21]
   b5af2:	9104      	str	r1, [sp, #16]
   b5af4:	f88d 2014 	strb.w	r2, [sp, #20]
   b5af8:	9006      	str	r0, [sp, #24]
   b5afa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b5afe:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b5b00:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b5b04:	9508      	str	r5, [sp, #32]
   b5b06:	e883 0003 	stmia.w	r3, {r0, r1}
   b5b0a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b5b0c:	a906      	add	r1, sp, #24
   b5b0e:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b5b12:	4798      	blx	r3
   b5b14:	e7cc      	b.n	b5ab0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice peer;
   b5b16:	a804      	add	r0, sp, #16
   b5b18:	f7ff fc7a 	bl	b5410 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b5b1c:	9b04      	ldr	r3, [sp, #16]
   b5b1e:	89aa      	ldrh	r2, [r5, #12]
   b5b20:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b5b22:	6869      	ldr	r1, [r5, #4]
   b5b24:	9804      	ldr	r0, [sp, #16]
   b5b26:	3108      	adds	r1, #8
   b5b28:	3002      	adds	r0, #2
   b5b2a:	f7ff fafe 	bl	b512a <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b5b2e:	a904      	add	r1, sp, #16
   b5b30:	a806      	add	r0, sp, #24
   b5b32:	f7ff fdd2 	bl	b56da <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b5b36:	a906      	add	r1, sp, #24
   b5b38:	f104 0018 	add.w	r0, r4, #24
   b5b3c:	f7ff ff4e 	bl	b59dc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b5b40:	4605      	mov	r5, r0
   b5b42:	a807      	add	r0, sp, #28
   b5b44:	f7ff fdd3 	bl	b56ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5b48:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b5b4a:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b5b4c:	b98d      	cbnz	r5, b5b72 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xde>
                    LOG(ERROR, "Failed to append peer Central device.");
   b5b4e:	4b3d      	ldr	r3, [pc, #244]	; (b5c44 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1b0>)
   b5b50:	493d      	ldr	r1, [pc, #244]	; (b5c48 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1b4>)
   b5b52:	9300      	str	r3, [sp, #0]
   b5b54:	2032      	movs	r0, #50	; 0x32
   b5b56:	462b      	mov	r3, r5
   b5b58:	aa06      	add	r2, sp, #24
   b5b5a:	9507      	str	r5, [sp, #28]
   b5b5c:	f7ff f854 	bl	b4c08 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b5b60:	9b04      	ldr	r3, [sp, #16]
   b5b62:	4629      	mov	r1, r5
   b5b64:	8818      	ldrh	r0, [r3, #0]
   b5b66:	f7fe ff37 	bl	b49d8 <hal_ble_gap_disconnect>
   b5b6a:	a805      	add	r0, sp, #20
   b5b6c:	f7ff fdbf 	bl	b56ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5b70:	e79e      	b.n	b5ab0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                LOG(TRACE, "Connected by Central device.");
   b5b72:	4a36      	ldr	r2, [pc, #216]	; (b5c4c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1b8>)
   b5b74:	9200      	str	r2, [sp, #0]
   b5b76:	2300      	movs	r3, #0
   b5b78:	4933      	ldr	r1, [pc, #204]	; (b5c48 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1b4>)
   b5b7a:	9307      	str	r3, [sp, #28]
   b5b7c:	aa06      	add	r2, sp, #24
   b5b7e:	2001      	movs	r0, #1
   b5b80:	f7ff f842 	bl	b4c08 <log_message>
                if (impl->connectedCallback_) {
   b5b84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b5b86:	2b00      	cmp	r3, #0
   b5b88:	d0ef      	beq.n	b5b6a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd6>
                    impl->connectedCallback_(peer);
   b5b8a:	a904      	add	r1, sp, #16
   b5b8c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b5b90:	f7ff fe29 	bl	b57e6 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b5b94:	e7e9      	b.n	b5b6a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd6>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b5b96:	89a9      	ldrh	r1, [r5, #12]
   b5b98:	4620      	mov	r0, r4
   b5b9a:	f7ff fc03 	bl	b53a4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b5b9e:	4606      	mov	r6, r0
   b5ba0:	2800      	cmp	r0, #0
   b5ba2:	d085      	beq.n	b5ab0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
      { return _M_ptr; }
   b5ba4:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b5ba6:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b5baa:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b5bae:	8029      	strh	r1, [r5, #0]
   b5bb0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b5bb4:	429a      	cmp	r2, r3
   b5bb6:	d003      	beq.n	b5bc0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   b5bb8:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b5bbc:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b5bbe:	e7f9      	b.n	b5bb4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x120>
    destruct(data_, data_ + size_);
   b5bc0:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b5bc4:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b5bc8:	45b8      	cmp	r8, r7
   b5bca:	d004      	beq.n	b5bd6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x142>
      ~__shared_ptr() = default;
   b5bcc:	1d38      	adds	r0, r7, #4
   b5bce:	f7ff fd8e 	bl	b56ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5bd2:	3708      	adds	r7, #8
   b5bd4:	e7f8      	b.n	b5bc8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x134>
    size_ = 0;
   b5bd6:	2300      	movs	r3, #0
   b5bd8:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b5bda:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b5bde:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b5be2:	45b8      	cmp	r8, r7
   b5be4:	d004      	beq.n	b5bf0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x15c>
   b5be6:	1d38      	adds	r0, r7, #4
   b5be8:	f7ff fd81 	bl	b56ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5bec:	3708      	adds	r7, #8
   b5bee:	e7f8      	b.n	b5be2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x14e>
    size_ = 0;
   b5bf0:	2300      	movs	r3, #0
   b5bf2:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b5bf4:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b5bf6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b5bf8:	b123      	cbz	r3, b5c04 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x170>
                        impl->disconnectedCallback_(*peer);
   b5bfa:	4631      	mov	r1, r6
   b5bfc:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b5c00:	f7ff fdf1 	bl	b57e6 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b5c04:	2300      	movs	r3, #0
   b5c06:	2220      	movs	r2, #32
   b5c08:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b5c0c:	4a10      	ldr	r2, [pc, #64]	; (b5c50 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1bc>)
   b5c0e:	9200      	str	r2, [sp, #0]
   b5c10:	490d      	ldr	r1, [pc, #52]	; (b5c48 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1b4>)
   b5c12:	aa06      	add	r2, sp, #24
   b5c14:	2001      	movs	r0, #1
   b5c16:	f7fe fff7 	bl	b4c08 <log_message>
                    impl->peers_.removeOne(*peer);
   b5c1a:	4631      	mov	r1, r6
   b5c1c:	f104 0018 	add.w	r0, r4, #24
   b5c20:	f7ff ff15 	bl	b5a4e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b5c24:	e744      	b.n	b5ab0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b5c26:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b5c28:	bf01      	itttt	eq
   b5c2a:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b5c2c:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b5c2e:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b5c32:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b5c34:	bf0f      	iteee	eq
   b5c36:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b5c3a:	461a      	movne	r2, r3
   b5c3c:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b5c3e:	461d      	movne	r5, r3
   b5c40:	e755      	b.n	b5aee <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x5a>
   b5c42:	bf00      	nop
   b5c44:	000b7073 	.word	0x000b7073
   b5c48:	000b7034 	.word	0x000b7034
   b5c4c:	000b7099 	.word	0x000b7099
   b5c50:	000b70b6 	.word	0x000b70b6

000b5c54 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b5c54:	b513      	push	{r0, r1, r4, lr}
   b5c56:	460b      	mov	r3, r1
   b5c58:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5c5a:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5c5e:	466c      	mov	r4, sp
   b5c60:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5c64:	e893 0003 	ldmia.w	r3, {r0, r1}
   b5c68:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b5c6c:	e894 0003 	ldmia.w	r4, {r0, r1}
   b5c70:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b5c74:	b002      	add	sp, #8
   b5c76:	bd10      	pop	{r4, pc}

000b5c78 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b5c78:	b538      	push	{r3, r4, r5, lr}
   b5c7a:	4605      	mov	r5, r0
   b5c7c:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b5c7e:	f7ff ffe9 	bl	b5c54 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5c82:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b5c84:	68a2      	ldr	r2, [r4, #8]
   b5c86:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5c88:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5c8a:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b5c8c:	68e2      	ldr	r2, [r4, #12]
   b5c8e:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5c90:	60e3      	str	r3, [r4, #12]
      }
   b5c92:	bd38      	pop	{r3, r4, r5, pc}

000b5c94 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b5c94:	b570      	push	{r4, r5, r6, lr}
   b5c96:	4604      	mov	r4, r0
   b5c98:	b08c      	sub	sp, #48	; 0x30
   b5c9a:	460e      	mov	r6, r1
   b5c9c:	9201      	str	r2, [sp, #4]
   b5c9e:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b5ca0:	f7ff fb60 	bl	b5364 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b5ca4:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b5ca6:	9901      	ldr	r1, [sp, #4]
   b5ca8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b5cac:	f7ff f931 	bl	b4f12 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b5cb0:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b5cb4:	b1cd      	cbz	r5, b5cea <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b5cb6:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5cb8:	9502      	str	r5, [sp, #8]
   b5cba:	a902      	add	r1, sp, #8
   b5cbc:	a804      	add	r0, sp, #16
   b5cbe:	9303      	str	r3, [sp, #12]
   b5cc0:	f7ff fcd4 	bl	b566c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b5cc4:	2300      	movs	r3, #0
	__x.swap(*this);
   b5cc6:	a908      	add	r1, sp, #32
   b5cc8:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b5cca:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b5ccc:	f7ff ffd4 	bl	b5c78 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b5cd0:	4631      	mov	r1, r6
   b5cd2:	a808      	add	r0, sp, #32
   b5cd4:	f7ff ffd0 	bl	b5c78 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b5cd8:	a808      	add	r0, sp, #32
   b5cda:	f7ff f9c9 	bl	b5070 <_ZNSt14_Function_baseD1Ev>
   b5cde:	a804      	add	r0, sp, #16
   b5ce0:	f7ff f9c6 	bl	b5070 <_ZNSt14_Function_baseD1Ev>
    }
   b5ce4:	4620      	mov	r0, r4
   b5ce6:	b00c      	add	sp, #48	; 0x30
   b5ce8:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b5cea:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b5cec:	e7ea      	b.n	b5cc4 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b5cf0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b5cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5cf4:	b087      	sub	sp, #28
   b5cf6:	461d      	mov	r5, r3
   b5cf8:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b5cfc:	4680      	mov	r8, r0
   b5cfe:	468b      	mov	fp, r1
   b5d00:	4692      	mov	sl, r2
   b5d02:	9912      	ldr	r1, [sp, #72]	; 0x48
   b5d04:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b5d06:	2200      	movs	r2, #0
   b5d08:	2068      	movs	r0, #104	; 0x68
   b5d0a:	9102      	str	r1, [sp, #8]
   b5d0c:	9204      	str	r2, [sp, #16]
   b5d0e:	f7fe f9c0 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b5d12:	1e06      	subs	r6, r0, #0
   b5d14:	f106 090c 	add.w	r9, r6, #12
   b5d18:	d018      	beq.n	b5d4c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b5d1a:	2201      	movs	r2, #1
	: _M_impl(__a)
   b5d1c:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b5d1e:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b5d22:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b5d24:	4a14      	ldr	r2, [pc, #80]	; (b5d78 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x88>)
   b5d26:	f847 2b20 	str.w	r2, [r7], #32
   b5d2a:	9b03      	ldr	r3, [sp, #12]
   b5d2c:	9100      	str	r1, [sp, #0]
   b5d2e:	465a      	mov	r2, fp
   b5d30:	4651      	mov	r1, sl
   b5d32:	4648      	mov	r0, r9
   b5d34:	f7ff ffae 	bl	b5c94 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b5d38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5d3a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b5d3c:	682b      	ldr	r3, [r5, #0]
   b5d3e:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b5d40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5d42:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b5d46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5d48:	6823      	ldr	r3, [r4, #0]
   b5d4a:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b5d4c:	a904      	add	r1, sp, #16
   b5d4e:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b5d50:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b5d54:	f7ff fd36 	bl	b57c4 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b5d58:	a805      	add	r0, sp, #20
   b5d5a:	f7ff fcc8 	bl	b56ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b5d5e:	f8d8 1000 	ldr.w	r1, [r8]
   b5d62:	b931      	cbnz	r1, b5d72 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x82>
        SPARK_ASSERT(false);
   b5d64:	4a05      	ldr	r2, [pc, #20]	; (b5d7c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b5d66:	200a      	movs	r0, #10
}
   b5d68:	b007      	add	sp, #28
   b5d6a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b5d6e:	f7fe bf43 	b.w	b4bf8 <panic_>
}
   b5d72:	b007      	add	sp, #28
   b5d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5d78:	000b7130 	.word	0x000b7130
   b5d7c:	000b4959 	.word	0x000b4959

000b5d80 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b5d80:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5d82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5d84:	4604      	mov	r4, r0
   b5d86:	460d      	mov	r5, r1
   b5d88:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5d8a:	d914      	bls.n	b5db6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b5d8c:	4290      	cmp	r0, r2
   b5d8e:	d213      	bcs.n	b5db8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b5d90:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b5d94:	1a75      	subs	r5, r6, r1
   b5d96:	f1a1 0708 	sub.w	r7, r1, #8
   b5d9a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5d9c:	42b7      	cmp	r7, r6
   b5d9e:	d018      	beq.n	b5dd2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b5da0:	b11c      	cbz	r4, b5daa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b5da2:	4631      	mov	r1, r6
   b5da4:	4620      	mov	r0, r4
   b5da6:	f7ff fc8e 	bl	b56c6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b5daa:	1d30      	adds	r0, r6, #4
   b5dac:	f7ff fc9f 	bl	b56ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b5db0:	3e08      	subs	r6, #8
   b5db2:	3c08      	subs	r4, #8
   b5db4:	e7f2      	b.n	b5d9c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b5db6:	d00c      	beq.n	b5dd2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b5db8:	42b5      	cmp	r5, r6
   b5dba:	d00a      	beq.n	b5dd2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b5dbc:	b11c      	cbz	r4, b5dc6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b5dbe:	4629      	mov	r1, r5
   b5dc0:	4620      	mov	r0, r4
   b5dc2:	f7ff fc80 	bl	b56c6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b5dc6:	1d28      	adds	r0, r5, #4
   b5dc8:	f7ff fc91 	bl	b56ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b5dcc:	3508      	adds	r5, #8
   b5dce:	3408      	adds	r4, #8
   b5dd0:	e7f2      	b.n	b5db8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b5dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5dd4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b5dd4:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b5dd6:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b5dd8:	4605      	mov	r5, r0
        if (n > 0) {
   b5dda:	dd11      	ble.n	b5e00 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b5ddc:	00f0      	lsls	r0, r6, #3
   b5dde:	f7fe ffa7 	bl	b4d30 <malloc>
            if (!d) {
   b5de2:	4604      	mov	r4, r0
   b5de4:	b158      	cbz	r0, b5dfe <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b5de6:	e9d5 1200 	ldrd	r1, r2, [r5]
   b5dea:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b5dee:	f7ff ffc7 	bl	b5d80 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b5df2:	6828      	ldr	r0, [r5, #0]
   b5df4:	f7fe ffa4 	bl	b4d40 <free>
        data_ = d;
   b5df8:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b5dfa:	60ae      	str	r6, [r5, #8]
        return true;
   b5dfc:	2001      	movs	r0, #1
    }
   b5dfe:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b5e00:	2400      	movs	r4, #0
   b5e02:	e7f6      	b.n	b5df2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b5e04 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5e04:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5e06:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b5e08:	6845      	ldr	r5, [r0, #4]
   b5e0a:	4668      	mov	r0, sp
   b5e0c:	f7ff fc5b 	bl	b56c6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5e10:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b5e14:	4299      	cmp	r1, r3
   b5e16:	da10      	bge.n	b5e3a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b5e18:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b5e1a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5e1c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b5e20:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b5e24:	4629      	mov	r1, r5
   b5e26:	f105 0008 	add.w	r0, r5, #8
   b5e2a:	f7ff ffa9 	bl	b5d80 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b5e2e:	b98d      	cbnz	r5, b5e54 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b5e30:	6863      	ldr	r3, [r4, #4]
   b5e32:	3301      	adds	r3, #1
   b5e34:	6063      	str	r3, [r4, #4]
    return true;
   b5e36:	2601      	movs	r6, #1
   b5e38:	e006      	b.n	b5e48 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5e3a:	3101      	adds	r1, #1
   b5e3c:	4620      	mov	r0, r4
   b5e3e:	f7ff ffc9 	bl	b5dd4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b5e42:	4606      	mov	r6, r0
   b5e44:	2800      	cmp	r0, #0
   b5e46:	d1e7      	bne.n	b5e18 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b5e48:	a801      	add	r0, sp, #4
   b5e4a:	f7ff fc50 	bl	b56ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5e4e:	4630      	mov	r0, r6
   b5e50:	b002      	add	sp, #8
   b5e52:	bd70      	pop	{r4, r5, r6, pc}
   b5e54:	4669      	mov	r1, sp
   b5e56:	4628      	mov	r0, r5
   b5e58:	f7ff fc35 	bl	b56c6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b5e5c:	e7e8      	b.n	b5e30 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b5e5e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b5e5e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5e62:	4604      	mov	r4, r0
   b5e64:	460d      	mov	r5, r1
   b5e66:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5e68:	d914      	bls.n	b5e94 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b5e6a:	4290      	cmp	r0, r2
   b5e6c:	d213      	bcs.n	b5e96 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b5e6e:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b5e72:	1a75      	subs	r5, r6, r1
   b5e74:	f1a1 0708 	sub.w	r7, r1, #8
   b5e78:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5e7a:	42b7      	cmp	r7, r6
   b5e7c:	d018      	beq.n	b5eb0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b5e7e:	b11c      	cbz	r4, b5e88 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b5e80:	4631      	mov	r1, r6
   b5e82:	4620      	mov	r0, r4
   b5e84:	f7ff fc11 	bl	b56aa <_ZN8particle17BleCharacteristicC1ERKS0_>
   b5e88:	1d30      	adds	r0, r6, #4
   b5e8a:	f7ff fc30 	bl	b56ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b5e8e:	3e08      	subs	r6, #8
   b5e90:	3c08      	subs	r4, #8
   b5e92:	e7f2      	b.n	b5e7a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b5e94:	d00c      	beq.n	b5eb0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b5e96:	42b5      	cmp	r5, r6
   b5e98:	d00a      	beq.n	b5eb0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b5e9a:	b11c      	cbz	r4, b5ea4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b5e9c:	4629      	mov	r1, r5
   b5e9e:	4620      	mov	r0, r4
   b5ea0:	f7ff fc03 	bl	b56aa <_ZN8particle17BleCharacteristicC1ERKS0_>
   b5ea4:	1d28      	adds	r0, r5, #4
   b5ea6:	f7ff fc22 	bl	b56ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b5eaa:	3508      	adds	r5, #8
   b5eac:	3408      	adds	r4, #8
   b5eae:	e7f2      	b.n	b5e96 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b5eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5eb2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b5eb2:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b5eb4:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b5eb6:	4605      	mov	r5, r0
        if (n > 0) {
   b5eb8:	dd11      	ble.n	b5ede <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b5eba:	00f0      	lsls	r0, r6, #3
   b5ebc:	f7fe ff38 	bl	b4d30 <malloc>
            if (!d) {
   b5ec0:	4604      	mov	r4, r0
   b5ec2:	b158      	cbz	r0, b5edc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b5ec4:	e9d5 1200 	ldrd	r1, r2, [r5]
   b5ec8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b5ecc:	f7ff ffc7 	bl	b5e5e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b5ed0:	6828      	ldr	r0, [r5, #0]
   b5ed2:	f7fe ff35 	bl	b4d40 <free>
        data_ = d;
   b5ed6:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b5ed8:	60ae      	str	r6, [r5, #8]
        return true;
   b5eda:	2001      	movs	r0, #1
    }
   b5edc:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b5ede:	2400      	movs	r4, #0
   b5ee0:	e7f6      	b.n	b5ed0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b5ee2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5ee2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5ee4:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b5ee6:	6845      	ldr	r5, [r0, #4]
   b5ee8:	4668      	mov	r0, sp
   b5eea:	f7ff fbde 	bl	b56aa <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5eee:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b5ef2:	4299      	cmp	r1, r3
   b5ef4:	da10      	bge.n	b5f18 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b5ef6:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b5ef8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5efa:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b5efe:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b5f02:	4629      	mov	r1, r5
   b5f04:	f105 0008 	add.w	r0, r5, #8
   b5f08:	f7ff ffa9 	bl	b5e5e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b5f0c:	b98d      	cbnz	r5, b5f32 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b5f0e:	6863      	ldr	r3, [r4, #4]
   b5f10:	3301      	adds	r3, #1
   b5f12:	6063      	str	r3, [r4, #4]
    return true;
   b5f14:	2601      	movs	r6, #1
   b5f16:	e006      	b.n	b5f26 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5f18:	3101      	adds	r1, #1
   b5f1a:	4620      	mov	r0, r4
   b5f1c:	f7ff ffc9 	bl	b5eb2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b5f20:	4606      	mov	r6, r0
   b5f22:	2800      	cmp	r0, #0
   b5f24:	d1e7      	bne.n	b5ef6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b5f26:	a801      	add	r0, sp, #4
   b5f28:	f7ff fbe1 	bl	b56ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5f2c:	4630      	mov	r0, r6
   b5f2e:	b002      	add	sp, #8
   b5f30:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b5f32:	4669      	mov	r1, sp
   b5f34:	4628      	mov	r0, r5
   b5f36:	f7ff fbb8 	bl	b56aa <_ZN8particle17BleCharacteristicC1ERKS0_>
   b5f3a:	e7e8      	b.n	b5f0e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b5f3c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b5f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5f40:	4617      	mov	r7, r2
   b5f42:	b0a1      	sub	sp, #132	; 0x84
   b5f44:	4680      	mov	r8, r0
    WiringBleLock lk;
   b5f46:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b5f48:	460e      	mov	r6, r1
    WiringBleLock lk;
   b5f4a:	f7ff f8cf 	bl	b50ec <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b5f4e:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b5f50:	7923      	ldrb	r3, [r4, #4]
   b5f52:	b953      	cbnz	r3, b5f6a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b5f54:	4639      	mov	r1, r7
   b5f56:	4640      	mov	r0, r8
   b5f58:	f7ff fba7 	bl	b56aa <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b5f5c:	a80a      	add	r0, sp, #40	; 0x28
   b5f5e:	f7ff f8d3 	bl	b5108 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b5f62:	4640      	mov	r0, r8
   b5f64:	b021      	add	sp, #132	; 0x84
   b5f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b5f6a:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b5f6c:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b5f70:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b5f74:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b5f76:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b5f7a:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b5f7e:	9b03      	ldr	r3, [sp, #12]
   b5f80:	429d      	cmp	r5, r3
   b5f82:	d021      	beq.n	b5fc8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b5f84:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b5f88:	4658      	mov	r0, fp
   b5f8a:	f109 0114 	add.w	r1, r9, #20
   b5f8e:	f7ff f95e 	bl	b524e <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b5f92:	b1b8      	cbz	r0, b5fc4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b5f94:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b5f98:	4650      	mov	r0, sl
   b5f9a:	f7ff f958 	bl	b524e <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b5f9e:	b188      	cbz	r0, b5fc4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b5fa0:	6823      	ldr	r3, [r4, #0]
   b5fa2:	f8d9 2000 	ldr.w	r2, [r9]
   b5fa6:	4053      	eors	r3, r2
   b5fa8:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b5fac:	d10a      	bne.n	b5fc4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b5fae:	2220      	movs	r2, #32
   b5fb0:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b5fb4:	4a5e      	ldr	r2, [pc, #376]	; (b6130 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b5fb6:	9200      	str	r2, [sp, #0]
   b5fb8:	aa15      	add	r2, sp, #84	; 0x54
   b5fba:	495e      	ldr	r1, [pc, #376]	; (b6134 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b5fbc:	2032      	movs	r0, #50	; 0x32
   b5fbe:	f7fe fe23 	bl	b4c08 <log_message>
   b5fc2:	e7c7      	b.n	b5f54 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b5fc4:	3508      	adds	r5, #8
   b5fc6:	e7da      	b.n	b5f7e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b5fc8:	4650      	mov	r0, sl
   b5fca:	f7ff f911 	bl	b51f0 <_ZNK8particle7BleUuid7isValidEv>
   b5fce:	b960      	cbnz	r0, b5fea <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b5fd0:	4959      	ldr	r1, [pc, #356]	; (b6138 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b5fd2:	2201      	movs	r2, #1
   b5fd4:	a815      	add	r0, sp, #84	; 0x54
   b5fd6:	ad15      	add	r5, sp, #84	; 0x54
   b5fd8:	f7ff f8e2 	bl	b51a0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b5fdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5fde:	46d4      	mov	ip, sl
   b5fe0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5fe4:	682b      	ldr	r3, [r5, #0]
   b5fe6:	f8cc 3000 	str.w	r3, [ip]
   b5fea:	6833      	ldr	r3, [r6, #0]
   b5fec:	e9d3 5300 	ldrd	r5, r3, [r3]
   b5ff0:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b5ff4:	455d      	cmp	r5, fp
   b5ff6:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b5ff8:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b5ffa:	d06e      	beq.n	b60da <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b5ffc:	f855 0b08 	ldr.w	r0, [r5], #8
   b6000:	f7ff f925 	bl	b524e <_ZNK8particle7BleUuideqERKS0_>
   b6004:	2800      	cmp	r0, #0
   b6006:	d0f5      	beq.n	b5ff4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b6008:	f104 0a14 	add.w	sl, r4, #20
   b600c:	4650      	mov	r0, sl
   b600e:	f7ff f8ef 	bl	b51f0 <_ZNK8particle7BleUuid7isValidEv>
   b6012:	b988      	cbnz	r0, b6038 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b6014:	4b49      	ldr	r3, [pc, #292]	; (b613c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b6016:	4948      	ldr	r1, [pc, #288]	; (b6138 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b6018:	881a      	ldrh	r2, [r3, #0]
   b601a:	3201      	adds	r2, #1
   b601c:	b292      	uxth	r2, r2
   b601e:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b6020:	a815      	add	r0, sp, #84	; 0x54
   b6022:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b6024:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b6026:	f7ff f8da 	bl	b51de <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b602a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b602c:	46d4      	mov	ip, sl
   b602e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6032:	682b      	ldr	r3, [r5, #0]
   b6034:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b6038:	4b41      	ldr	r3, [pc, #260]	; (b6140 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b603a:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b603c:	2228      	movs	r2, #40	; 0x28
   b603e:	2100      	movs	r1, #0
   b6040:	a816      	add	r0, sp, #88	; 0x58
   b6042:	f000 fe8b 	bl	b6d5c <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b6046:	4651      	mov	r1, sl
   b6048:	a804      	add	r0, sp, #16
   b604a:	f7ff f8e3 	bl	b5214 <_ZN8particle7BleUuid7halUUIDEv>
   b604e:	ab04      	add	r3, sp, #16
   b6050:	aa18      	add	r2, sp, #96	; 0x60
   b6052:	f10d 0c20 	add.w	ip, sp, #32
   b6056:	6818      	ldr	r0, [r3, #0]
   b6058:	6859      	ldr	r1, [r3, #4]
   b605a:	4615      	mov	r5, r2
   b605c:	c503      	stmia	r5!, {r0, r1}
   b605e:	3308      	adds	r3, #8
   b6060:	4563      	cmp	r3, ip
   b6062:	462a      	mov	r2, r5
   b6064:	d1f7      	bne.n	b6056 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b6066:	6818      	ldr	r0, [r3, #0]
   b6068:	6028      	str	r0, [r5, #0]
    return *this;
}

template<typename T>
inline typename std::underlying_type_t<T> particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::value() const {
    return value_;
   b606a:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b606c:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b6070:	f8d9 3000 	ldr.w	r3, [r9]
   b6074:	8a9b      	ldrh	r3, [r3, #20]
   b6076:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b607a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b607c:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b607e:	4b31      	ldr	r3, [pc, #196]	; (b6144 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b6080:	2200      	movs	r2, #0
   b6082:	1da1      	adds	r1, r4, #6
   b6084:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b6086:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b608a:	f7fe fcb9 	bl	b4a00 <hal_ble_gatt_server_add_characteristic>
   b608e:	2800      	cmp	r0, #0
   b6090:	f47f af60 	bne.w	b5f54 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b6094:	2301      	movs	r3, #1
   b6096:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b6098:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b609a:	4639      	mov	r1, r7
        return characteristics_;
   b609c:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b609e:	a80d      	add	r0, sp, #52	; 0x34
   b60a0:	f7ff fb03 	bl	b56aa <_ZN8particle17BleCharacteristicC1ERKS0_>
   b60a4:	4620      	mov	r0, r4
   b60a6:	a90d      	add	r1, sp, #52	; 0x34
   b60a8:	f7ff ff1b 	bl	b5ee2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b60ac:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b60ae:	a80e      	add	r0, sp, #56	; 0x38
   b60b0:	f7ff fb1d 	bl	b56ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b60b4:	2c00      	cmp	r4, #0
   b60b6:	f47f af4d 	bne.w	b5f54 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b60ba:	2320      	movs	r3, #32
   b60bc:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b60c0:	4b21      	ldr	r3, [pc, #132]	; (b6148 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b60c2:	9300      	str	r3, [sp, #0]
   b60c4:	aa0d      	add	r2, sp, #52	; 0x34
   b60c6:	4623      	mov	r3, r4
   b60c8:	e777      	b.n	b5fba <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b60ca:	4639      	mov	r1, r7
   b60cc:	4640      	mov	r0, r8
   b60ce:	f7ff faec 	bl	b56aa <_ZN8particle17BleCharacteristicC1ERKS0_>
   b60d2:	a80c      	add	r0, sp, #48	; 0x30
   b60d4:	f7ff fb0b 	bl	b56ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b60d8:	e740      	b.n	b5f5c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b60da:	a80b      	add	r0, sp, #44	; 0x2c
   b60dc:	f7ff f974 	bl	b53c8 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b60e0:	4651      	mov	r1, sl
   b60e2:	a815      	add	r0, sp, #84	; 0x54
   b60e4:	f7ff f896 	bl	b5214 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b60e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b60ea:	2300      	movs	r3, #0
   b60ec:	3214      	adds	r2, #20
   b60ee:	a915      	add	r1, sp, #84	; 0x54
   b60f0:	2001      	movs	r0, #1
   b60f2:	f7fe fc7b 	bl	b49ec <hal_ble_gatt_server_add_service>
   b60f6:	2800      	cmp	r0, #0
   b60f8:	d1e7      	bne.n	b60ca <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b60fa:	6835      	ldr	r5, [r6, #0]
   b60fc:	a90b      	add	r1, sp, #44	; 0x2c
   b60fe:	a80d      	add	r0, sp, #52	; 0x34
   b6100:	f7ff fae1 	bl	b56c6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b6104:	4628      	mov	r0, r5
   b6106:	a90d      	add	r1, sp, #52	; 0x34
   b6108:	f7ff fe7c 	bl	b5e04 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b610c:	4605      	mov	r5, r0
   b610e:	a80e      	add	r0, sp, #56	; 0x38
   b6110:	f7ff faed 	bl	b56ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6114:	2d00      	cmp	r5, #0
   b6116:	d0d8      	beq.n	b60ca <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b6118:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b611a:	6853      	ldr	r3, [r2, #4]
   b611c:	6812      	ldr	r2, [r2, #0]
   b611e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b6122:	3b01      	subs	r3, #1
   b6124:	a80c      	add	r0, sp, #48	; 0x30
   b6126:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b612a:	f7ff fae0 	bl	b56ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b612e:	e76b      	b.n	b6008 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b6130:	000b70d5 	.word	0x000b70d5
   b6134:	000b7034 	.word	0x000b7034
   b6138:	000b719a 	.word	0x000b719a
   b613c:	2003e6c8 	.word	0x2003e6c8
   b6140:	002c0003 	.word	0x002c0003
   b6144:	000b5555 	.word	0x000b5555
   b6148:	000b7100 	.word	0x000b7100

000b614c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b614c:	4802      	ldr	r0, [pc, #8]	; (b6158 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b614e:	2300      	movs	r3, #0
   b6150:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b6152:	f7fe bc69 	b.w	b4a28 <os_mutex_recursive_create>
   b6156:	bf00      	nop
   b6158:	2003e6cc 	.word	0x2003e6cc

000b615c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b615c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b615e:	4606      	mov	r6, r0
   b6160:	460d      	mov	r5, r1
  size_t n = 0;
   b6162:	188f      	adds	r7, r1, r2
   b6164:	2400      	movs	r4, #0
  while (size--) {
   b6166:	42bd      	cmp	r5, r7
   b6168:	d00c      	beq.n	b6184 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b616a:	6833      	ldr	r3, [r6, #0]
   b616c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6170:	689b      	ldr	r3, [r3, #8]
   b6172:	4630      	mov	r0, r6
   b6174:	4798      	blx	r3
     if (chunk>=0)
   b6176:	1e03      	subs	r3, r0, #0
   b6178:	db01      	blt.n	b617e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b617a:	441c      	add	r4, r3
  while (size--) {
   b617c:	e7f3      	b.n	b6166 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b617e:	2c00      	cmp	r4, #0
   b6180:	bf08      	it	eq
   b6182:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6184:	4620      	mov	r0, r4
   b6186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6188 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b6188:	b513      	push	{r0, r1, r4, lr}
   b618a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b618c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b618e:	b159      	cbz	r1, b61a8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6190:	9101      	str	r1, [sp, #4]
   b6192:	f000 fe23 	bl	b6ddc <strlen>
   b6196:	6823      	ldr	r3, [r4, #0]
   b6198:	9901      	ldr	r1, [sp, #4]
   b619a:	68db      	ldr	r3, [r3, #12]
   b619c:	4602      	mov	r2, r0
   b619e:	4620      	mov	r0, r4
    }
   b61a0:	b002      	add	sp, #8
   b61a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b61a6:	4718      	bx	r3
    }
   b61a8:	b002      	add	sp, #8
   b61aa:	bd10      	pop	{r4, pc}

000b61ac <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b61ac:	6803      	ldr	r3, [r0, #0]
   b61ae:	689b      	ldr	r3, [r3, #8]
   b61b0:	4718      	bx	r3

000b61b2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b61b2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b61b4:	210d      	movs	r1, #13
{
   b61b6:	4605      	mov	r5, r0
  size_t n = print('\r');
   b61b8:	f7ff fff8 	bl	b61ac <_ZN5Print5printEc>
  n += print('\n');
   b61bc:	210a      	movs	r1, #10
  size_t n = print('\r');
   b61be:	4604      	mov	r4, r0
  n += print('\n');
   b61c0:	4628      	mov	r0, r5
   b61c2:	f7ff fff3 	bl	b61ac <_ZN5Print5printEc>
  return n;
}
   b61c6:	4420      	add	r0, r4
   b61c8:	bd38      	pop	{r3, r4, r5, pc}

000b61ca <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b61ca:	b530      	push	{r4, r5, lr}
   b61cc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b61ce:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b61d0:	2a01      	cmp	r2, #1
  *str = '\0';
   b61d2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b61d6:	bf98      	it	ls
   b61d8:	220a      	movls	r2, #10
   b61da:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b61dc:	460d      	mov	r5, r1
   b61de:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b61e2:	fb01 5312 	mls	r3, r1, r2, r5
   b61e6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b61ea:	2b09      	cmp	r3, #9
   b61ec:	bf94      	ite	ls
   b61ee:	3330      	addls	r3, #48	; 0x30
   b61f0:	3337      	addhi	r3, #55	; 0x37
   b61f2:	b2db      	uxtb	r3, r3
  } while(n);
   b61f4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b61f6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b61fa:	d9ef      	bls.n	b61dc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b61fc:	4621      	mov	r1, r4
   b61fe:	f7ff ffc3 	bl	b6188 <_ZN5Print5writeEPKc>
}
   b6202:	b00b      	add	sp, #44	; 0x2c
   b6204:	bd30      	pop	{r4, r5, pc}

000b6206 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b6206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b620a:	b086      	sub	sp, #24
   b620c:	af00      	add	r7, sp, #0
   b620e:	4605      	mov	r5, r0
   b6210:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b6212:	1d38      	adds	r0, r7, #4
   b6214:	2114      	movs	r1, #20
{
   b6216:	4614      	mov	r4, r2
    va_copy(args2, args);
   b6218:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b621a:	f7fe fda1 	bl	b4d60 <vsnprintf>

    if (n<bufsize)
   b621e:	2813      	cmp	r0, #19
   b6220:	d80e      	bhi.n	b6240 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b6222:	1d39      	adds	r1, r7, #4
   b6224:	4628      	mov	r0, r5
   b6226:	f7ff ffaf 	bl	b6188 <_ZN5Print5writeEPKc>
   b622a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b622c:	b11e      	cbz	r6, b6236 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b622e:	4628      	mov	r0, r5
   b6230:	f7ff ffbf 	bl	b61b2 <_ZN5Print7printlnEv>
   b6234:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b6236:	4620      	mov	r0, r4
   b6238:	3718      	adds	r7, #24
   b623a:	46bd      	mov	sp, r7
   b623c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b6240:	f100 0308 	add.w	r3, r0, #8
   b6244:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b6248:	46e8      	mov	r8, sp
        char bigger[n+1];
   b624a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b624e:	4622      	mov	r2, r4
   b6250:	1c41      	adds	r1, r0, #1
   b6252:	683b      	ldr	r3, [r7, #0]
   b6254:	4668      	mov	r0, sp
   b6256:	f7fe fd83 	bl	b4d60 <vsnprintf>
  return write(str);
   b625a:	4669      	mov	r1, sp
   b625c:	4628      	mov	r0, r5
   b625e:	f7ff ff93 	bl	b6188 <_ZN5Print5writeEPKc>
   b6262:	4604      	mov	r4, r0
   b6264:	46c5      	mov	sp, r8
   b6266:	e7e1      	b.n	b622c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b6268 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b6268:	2300      	movs	r3, #0
   b626a:	6840      	ldr	r0, [r0, #4]
   b626c:	461a      	mov	r2, r3
   b626e:	4619      	mov	r1, r3
   b6270:	f7fe bd0e 	b.w	b4c90 <network_on>

000b6274 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b6274:	4b01      	ldr	r3, [pc, #4]	; (b627c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b6276:	4a02      	ldr	r2, [pc, #8]	; (b6280 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6278:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b627a:	4770      	bx	lr
   b627c:	2003e6d4 	.word	0x2003e6d4
   b6280:	000b71ba 	.word	0x000b71ba

000b6284 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b6284:	4b02      	ldr	r3, [pc, #8]	; (b6290 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b6286:	681a      	ldr	r2, [r3, #0]
   b6288:	4b02      	ldr	r3, [pc, #8]	; (b6294 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b628a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b628c:	4770      	bx	lr
   b628e:	bf00      	nop
   b6290:	2003e580 	.word	0x2003e580
   b6294:	2003e6d8 	.word	0x2003e6d8

000b6298 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   b6298:	428a      	cmp	r2, r1
{
   b629a:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   b629c:	d007      	beq.n	b62ae <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   b629e:	1a44      	subs	r4, r0, r1
   b62a0:	9802      	ldr	r0, [sp, #8]
   b62a2:	1ac0      	subs	r0, r0, r3
   b62a4:	4344      	muls	r4, r0
   b62a6:	1a50      	subs	r0, r2, r1
   b62a8:	fb94 f0f0 	sdiv	r0, r4, r0
   b62ac:	4418      	add	r0, r3
}
   b62ae:	bd10      	pop	{r4, pc}

000b62b0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b62b0:	4b01      	ldr	r3, [pc, #4]	; (b62b8 <_GLOBAL__sub_I_RGB+0x8>)
   b62b2:	2200      	movs	r2, #0
   b62b4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b62b6:	4770      	bx	lr
   b62b8:	2003e6dc 	.word	0x2003e6dc

000b62bc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b62bc:	4b01      	ldr	r3, [pc, #4]	; (b62c4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b62be:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b62c0:	4770      	bx	lr
   b62c2:	bf00      	nop
   b62c4:	2003e584 	.word	0x2003e584

000b62c8 <serialEventRun>:
{
   b62c8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b62ca:	4b0b      	ldr	r3, [pc, #44]	; (b62f8 <serialEventRun+0x30>)
   b62cc:	b143      	cbz	r3, b62e0 <serialEventRun+0x18>
   b62ce:	f000 f96b 	bl	b65a8 <_Z16_fetch_usbserialv>
   b62d2:	6803      	ldr	r3, [r0, #0]
   b62d4:	691b      	ldr	r3, [r3, #16]
   b62d6:	4798      	blx	r3
   b62d8:	2800      	cmp	r0, #0
   b62da:	dd01      	ble.n	b62e0 <serialEventRun+0x18>
        serialEvent();
   b62dc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b62e0:	4b06      	ldr	r3, [pc, #24]	; (b62fc <serialEventRun+0x34>)
   b62e2:	b143      	cbz	r3, b62f6 <serialEventRun+0x2e>
   b62e4:	f000 fb84 	bl	b69f0 <_Z22__fetch_global_Serial1v>
   b62e8:	6803      	ldr	r3, [r0, #0]
   b62ea:	691b      	ldr	r3, [r3, #16]
   b62ec:	4798      	blx	r3
   b62ee:	2800      	cmp	r0, #0
   b62f0:	dd01      	ble.n	b62f6 <serialEventRun+0x2e>
        serialEvent1();
   b62f2:	f3af 8000 	nop.w
}
   b62f6:	bd08      	pop	{r3, pc}
	...

000b6300 <_post_loop>:
{
   b6300:	b508      	push	{r3, lr}
	serialEventRun();
   b6302:	f7ff ffe1 	bl	b62c8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b6306:	f7fe fb37 	bl	b4978 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b630a:	4b01      	ldr	r3, [pc, #4]	; (b6310 <_post_loop+0x10>)
   b630c:	6018      	str	r0, [r3, #0]
}
   b630e:	bd08      	pop	{r3, pc}
   b6310:	2003e740 	.word	0x2003e740

000b6314 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6314:	4805      	ldr	r0, [pc, #20]	; (b632c <_Z33system_initialize_user_backup_ramv+0x18>)
   b6316:	4a06      	ldr	r2, [pc, #24]	; (b6330 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b6318:	4906      	ldr	r1, [pc, #24]	; (b6334 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b631a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b631c:	1a12      	subs	r2, r2, r0
   b631e:	f000 fcf5 	bl	b6d0c <memcpy>
    __backup_sram_signature = signature;
   b6322:	4b05      	ldr	r3, [pc, #20]	; (b6338 <_Z33system_initialize_user_backup_ramv+0x24>)
   b6324:	4a05      	ldr	r2, [pc, #20]	; (b633c <_Z33system_initialize_user_backup_ramv+0x28>)
   b6326:	601a      	str	r2, [r3, #0]
}
   b6328:	bd08      	pop	{r3, pc}
   b632a:	bf00      	nop
   b632c:	2003f400 	.word	0x2003f400
   b6330:	2003f404 	.word	0x2003f404
   b6334:	000b74a0 	.word	0x000b74a0
   b6338:	2003f400 	.word	0x2003f400
   b633c:	9a271c1e 	.word	0x9a271c1e

000b6340 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b6340:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6342:	2300      	movs	r3, #0
   b6344:	9300      	str	r3, [sp, #0]
   b6346:	461a      	mov	r2, r3
   b6348:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b634c:	f7fe fc76 	bl	b4c3c <system_ctrl_set_result>
}
   b6350:	b003      	add	sp, #12
   b6352:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6358 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b6358:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b635a:	8843      	ldrh	r3, [r0, #2]
   b635c:	2b0a      	cmp	r3, #10
   b635e:	d008      	beq.n	b6372 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6360:	2b50      	cmp	r3, #80	; 0x50
   b6362:	d10b      	bne.n	b637c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b6364:	4b09      	ldr	r3, [pc, #36]	; (b638c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b6366:	681b      	ldr	r3, [r3, #0]
   b6368:	b14b      	cbz	r3, b637e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b636a:	b003      	add	sp, #12
   b636c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6370:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b6372:	f7ff ffe5 	bl	b6340 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b6376:	b003      	add	sp, #12
   b6378:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b637c:	2300      	movs	r3, #0
   b637e:	9300      	str	r3, [sp, #0]
   b6380:	461a      	mov	r2, r3
   b6382:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6386:	f7fe fc59 	bl	b4c3c <system_ctrl_set_result>
}
   b638a:	e7f4      	b.n	b6376 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b638c:	2003e6f0 	.word	0x2003e6f0

000b6390 <module_user_init_hook>:
{
   b6390:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b6392:	4812      	ldr	r0, [pc, #72]	; (b63dc <module_user_init_hook+0x4c>)
   b6394:	2100      	movs	r1, #0
   b6396:	f7fe fcfb 	bl	b4d90 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b639a:	4b11      	ldr	r3, [pc, #68]	; (b63e0 <module_user_init_hook+0x50>)
   b639c:	681a      	ldr	r2, [r3, #0]
   b639e:	4b11      	ldr	r3, [pc, #68]	; (b63e4 <module_user_init_hook+0x54>)
   b63a0:	429a      	cmp	r2, r3
   b63a2:	4b11      	ldr	r3, [pc, #68]	; (b63e8 <module_user_init_hook+0x58>)
   b63a4:	bf0c      	ite	eq
   b63a6:	2201      	moveq	r2, #1
   b63a8:	2200      	movne	r2, #0
   b63aa:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b63ac:	d001      	beq.n	b63b2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b63ae:	f7ff ffb1 	bl	b6314 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b63b2:	f7fe fac9 	bl	b4948 <HAL_RNG_GetRandomNumber>
   b63b6:	4604      	mov	r4, r0
    srand(seed);
   b63b8:	f000 fcd8 	bl	b6d6c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b63bc:	4b0b      	ldr	r3, [pc, #44]	; (b63ec <module_user_init_hook+0x5c>)
   b63be:	b113      	cbz	r3, b63c6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b63c0:	4620      	mov	r0, r4
   b63c2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b63c6:	2100      	movs	r1, #0
   b63c8:	4808      	ldr	r0, [pc, #32]	; (b63ec <module_user_init_hook+0x5c>)
   b63ca:	f7fe fca9 	bl	b4d20 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b63ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b63d2:	4807      	ldr	r0, [pc, #28]	; (b63f0 <module_user_init_hook+0x60>)
   b63d4:	2100      	movs	r1, #0
   b63d6:	f7fe bc27 	b.w	b4c28 <system_ctrl_set_app_request_handler>
   b63da:	bf00      	nop
   b63dc:	000b62bd 	.word	0x000b62bd
   b63e0:	2003f400 	.word	0x2003f400
   b63e4:	9a271c1e 	.word	0x9a271c1e
   b63e8:	2003e6ec 	.word	0x2003e6ec
   b63ec:	00000000 	.word	0x00000000
   b63f0:	000b6359 	.word	0x000b6359

000b63f4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b63f4:	4770      	bx	lr

000b63f6 <_ZN9IPAddressD0Ev>:
   b63f6:	b510      	push	{r4, lr}
   b63f8:	2118      	movs	r1, #24
   b63fa:	4604      	mov	r4, r0
   b63fc:	f7fd fe4d 	bl	b409a <_ZdlPvj>
   b6400:	4620      	mov	r0, r4
   b6402:	bd10      	pop	{r4, pc}

000b6404 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6404:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b6406:	7d03      	ldrb	r3, [r0, #20]
   b6408:	2b06      	cmp	r3, #6
{
   b640a:	b08d      	sub	sp, #52	; 0x34
   b640c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b640e:	f100 0704 	add.w	r7, r0, #4
   b6412:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b6416:	d012      	beq.n	b643e <_ZNK9IPAddress7printToER5Print+0x3a>
   b6418:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b641c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6420:	220a      	movs	r2, #10
   b6422:	4630      	mov	r0, r6
   b6424:	f7ff fed1 	bl	b61ca <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6428:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b642a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b642c:	d019      	beq.n	b6462 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b642e:	2c00      	cmp	r4, #0
   b6430:	d0f4      	beq.n	b641c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6432:	212e      	movs	r1, #46	; 0x2e
   b6434:	4630      	mov	r0, r6
   b6436:	f7ff feb9 	bl	b61ac <_ZN5Print5printEc>
   b643a:	4404      	add	r4, r0
   b643c:	e7ee      	b.n	b641c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b643e:	232f      	movs	r3, #47	; 0x2f
   b6440:	466a      	mov	r2, sp
   b6442:	4639      	mov	r1, r7
   b6444:	200a      	movs	r0, #10
		buf[0] = 0;
   b6446:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b644a:	f7fe fb05 	bl	b4a58 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b644e:	4668      	mov	r0, sp
   b6450:	f000 fcc4 	bl	b6ddc <strlen>
   b6454:	6833      	ldr	r3, [r6, #0]
   b6456:	4602      	mov	r2, r0
   b6458:	68db      	ldr	r3, [r3, #12]
   b645a:	4669      	mov	r1, sp
   b645c:	4630      	mov	r0, r6
   b645e:	4798      	blx	r3
   b6460:	4604      	mov	r4, r0
    }
    return n;
}
   b6462:	4620      	mov	r0, r4
   b6464:	b00d      	add	sp, #52	; 0x34
   b6466:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6468 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6468:	b510      	push	{r4, lr}
   b646a:	4b05      	ldr	r3, [pc, #20]	; (b6480 <_ZN9IPAddressC1Ev+0x18>)
   b646c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b646e:	2211      	movs	r2, #17
   b6470:	f840 3b04 	str.w	r3, [r0], #4
   b6474:	2100      	movs	r1, #0
   b6476:	f000 fc71 	bl	b6d5c <memset>
}
   b647a:	4620      	mov	r0, r4
   b647c:	bd10      	pop	{r4, pc}
   b647e:	bf00      	nop
   b6480:	000b71e4 	.word	0x000b71e4

000b6484 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6484:	4603      	mov	r3, r0
   b6486:	4a07      	ldr	r2, [pc, #28]	; (b64a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6488:	b510      	push	{r4, lr}
   b648a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b648e:	f101 0210 	add.w	r2, r1, #16
   b6492:	f851 4b04 	ldr.w	r4, [r1], #4
   b6496:	f843 4b04 	str.w	r4, [r3], #4
   b649a:	4291      	cmp	r1, r2
   b649c:	d1f9      	bne.n	b6492 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b649e:	780a      	ldrb	r2, [r1, #0]
   b64a0:	701a      	strb	r2, [r3, #0]
}
   b64a2:	bd10      	pop	{r4, pc}
   b64a4:	000b71e4 	.word	0x000b71e4

000b64a8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b64a8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b64aa:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b64ae:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b64b2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b64b6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b64ba:	2304      	movs	r3, #4
   b64bc:	6041      	str	r1, [r0, #4]
   b64be:	7503      	strb	r3, [r0, #20]
}
   b64c0:	bd10      	pop	{r4, pc}
	...

000b64c4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b64c4:	b507      	push	{r0, r1, r2, lr}
   b64c6:	4b06      	ldr	r3, [pc, #24]	; (b64e0 <_ZN9IPAddressC1EPKh+0x1c>)
   b64c8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b64ca:	78cb      	ldrb	r3, [r1, #3]
   b64cc:	9300      	str	r3, [sp, #0]
   b64ce:	788b      	ldrb	r3, [r1, #2]
   b64d0:	784a      	ldrb	r2, [r1, #1]
   b64d2:	7809      	ldrb	r1, [r1, #0]
   b64d4:	f7ff ffe8 	bl	b64a8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b64d8:	b003      	add	sp, #12
   b64da:	f85d fb04 	ldr.w	pc, [sp], #4
   b64de:	bf00      	nop
   b64e0:	000b71e4 	.word	0x000b71e4

000b64e4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b64e4:	7441      	strb	r1, [r0, #17]
}
   b64e6:	4770      	bx	lr

000b64e8 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b64e8:	4770      	bx	lr

000b64ea <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b64ea:	4770      	bx	lr

000b64ec <_ZN9USBSerial4readEv>:
{
   b64ec:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b64ee:	2100      	movs	r1, #0
   b64f0:	7c00      	ldrb	r0, [r0, #16]
   b64f2:	f7fe fb61 	bl	b4bb8 <HAL_USB_USART_Receive_Data>
}
   b64f6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b64fa:	bd08      	pop	{r3, pc}

000b64fc <_ZN9USBSerial4peekEv>:
{
   b64fc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b64fe:	2101      	movs	r1, #1
   b6500:	7c00      	ldrb	r0, [r0, #16]
   b6502:	f7fe fb59 	bl	b4bb8 <HAL_USB_USART_Receive_Data>
}
   b6506:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b650a:	bd08      	pop	{r3, pc}

000b650c <_ZN9USBSerial17availableForWriteEv>:
{
   b650c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b650e:	7c00      	ldrb	r0, [r0, #16]
   b6510:	f7fe fb4a 	bl	b4ba8 <HAL_USB_USART_Available_Data_For_Write>
}
   b6514:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6518:	bd08      	pop	{r3, pc}

000b651a <_ZN9USBSerial9availableEv>:
{
   b651a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b651c:	7c00      	ldrb	r0, [r0, #16]
   b651e:	f7fe fb3b 	bl	b4b98 <HAL_USB_USART_Available_Data>
}
   b6522:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6526:	bd08      	pop	{r3, pc}

000b6528 <_ZN9USBSerial5writeEh>:
{
   b6528:	b513      	push	{r0, r1, r4, lr}
   b652a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b652c:	7c00      	ldrb	r0, [r0, #16]
{
   b652e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6530:	f7fe fb3a 	bl	b4ba8 <HAL_USB_USART_Available_Data_For_Write>
   b6534:	2800      	cmp	r0, #0
   b6536:	9901      	ldr	r1, [sp, #4]
   b6538:	dc01      	bgt.n	b653e <_ZN9USBSerial5writeEh+0x16>
   b653a:	7c60      	ldrb	r0, [r4, #17]
   b653c:	b120      	cbz	r0, b6548 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b653e:	7c20      	ldrb	r0, [r4, #16]
   b6540:	f7fe fb42 	bl	b4bc8 <HAL_USB_USART_Send_Data>
   b6544:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6548:	b002      	add	sp, #8
   b654a:	bd10      	pop	{r4, pc}

000b654c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b654c:	7c00      	ldrb	r0, [r0, #16]
   b654e:	f7fe bb43 	b.w	b4bd8 <HAL_USB_USART_Flush_Data>

000b6552 <_ZN9USBSerialD0Ev>:
   b6552:	b510      	push	{r4, lr}
   b6554:	2114      	movs	r1, #20
   b6556:	4604      	mov	r4, r0
   b6558:	f7fd fd9f 	bl	b409a <_ZdlPvj>
   b655c:	4620      	mov	r0, r4
   b655e:	bd10      	pop	{r4, pc}

000b6560 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6560:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6562:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6566:	4604      	mov	r4, r0
   b6568:	4608      	mov	r0, r1
   b656a:	2100      	movs	r1, #0
   b656c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6570:	4b04      	ldr	r3, [pc, #16]	; (b6584 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b6572:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6574:	2301      	movs	r3, #1
  _serial = serial;
   b6576:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6578:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b657a:	4611      	mov	r1, r2
   b657c:	f7fe fafc 	bl	b4b78 <HAL_USB_USART_Init>
}
   b6580:	4620      	mov	r0, r4
   b6582:	bd10      	pop	{r4, pc}
   b6584:	000b71f8 	.word	0x000b71f8

000b6588 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b6588:	7c00      	ldrb	r0, [r0, #16]
   b658a:	2200      	movs	r2, #0
   b658c:	f7fe bafc 	b.w	b4b88 <HAL_USB_USART_Begin>

000b6590 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b6590:	7c00      	ldrb	r0, [r0, #16]
   b6592:	f7fe bb29 	b.w	b4be8 <HAL_USB_USART_Is_Connected>

000b6596 <_Z19acquireSerialBufferv>:
{
   b6596:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b6598:	2214      	movs	r2, #20
{
   b659a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b659c:	2100      	movs	r1, #0
   b659e:	f000 fbdd 	bl	b6d5c <memset>
}
   b65a2:	4620      	mov	r0, r4
   b65a4:	bd10      	pop	{r4, pc}
	...

000b65a8 <_Z16_fetch_usbserialv>:
{
   b65a8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b65aa:	4c0f      	ldr	r4, [pc, #60]	; (b65e8 <_Z16_fetch_usbserialv+0x40>)
{
   b65ac:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b65ae:	a803      	add	r0, sp, #12
   b65b0:	f7ff fff1 	bl	b6596 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b65b4:	7821      	ldrb	r1, [r4, #0]
   b65b6:	f3bf 8f5b 	dmb	ish
   b65ba:	f011 0101 	ands.w	r1, r1, #1
   b65be:	d10f      	bne.n	b65e0 <_Z16_fetch_usbserialv+0x38>
   b65c0:	4620      	mov	r0, r4
   b65c2:	9101      	str	r1, [sp, #4]
   b65c4:	f7fd fd6b 	bl	b409e <__cxa_guard_acquire>
   b65c8:	9901      	ldr	r1, [sp, #4]
   b65ca:	b148      	cbz	r0, b65e0 <_Z16_fetch_usbserialv+0x38>
   b65cc:	aa03      	add	r2, sp, #12
   b65ce:	4807      	ldr	r0, [pc, #28]	; (b65ec <_Z16_fetch_usbserialv+0x44>)
   b65d0:	f7ff ffc6 	bl	b6560 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b65d4:	4620      	mov	r0, r4
   b65d6:	f7fd fd67 	bl	b40a8 <__cxa_guard_release>
   b65da:	4805      	ldr	r0, [pc, #20]	; (b65f0 <_Z16_fetch_usbserialv+0x48>)
   b65dc:	f000 fb80 	bl	b6ce0 <atexit>
	return _usbserial;
}
   b65e0:	4802      	ldr	r0, [pc, #8]	; (b65ec <_Z16_fetch_usbserialv+0x44>)
   b65e2:	b008      	add	sp, #32
   b65e4:	bd10      	pop	{r4, pc}
   b65e6:	bf00      	nop
   b65e8:	2003e6f4 	.word	0x2003e6f4
   b65ec:	2003e6f8 	.word	0x2003e6f8
   b65f0:	000b64e9 	.word	0x000b64e9

000b65f4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b65f4:	4770      	bx	lr

000b65f6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b65f6:	7441      	strb	r1, [r0, #17]
}
   b65f8:	4770      	bx	lr

000b65fa <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b65fa:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b65fc:	7c00      	ldrb	r0, [r0, #16]
   b65fe:	f7fe fa63 	bl	b4ac8 <hal_usart_available_data_for_write>
}
   b6602:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6606:	bd08      	pop	{r3, pc}

000b6608 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6608:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b660a:	7c00      	ldrb	r0, [r0, #16]
   b660c:	f7fe fa34 	bl	b4a78 <hal_usart_available>
}
   b6610:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6614:	bd08      	pop	{r3, pc}

000b6616 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6616:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6618:	7c00      	ldrb	r0, [r0, #16]
   b661a:	f7fe fa3d 	bl	b4a98 <hal_usart_peek>
}
   b661e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6622:	bd08      	pop	{r3, pc}

000b6624 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6624:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6626:	7c00      	ldrb	r0, [r0, #16]
   b6628:	f7fe fa2e 	bl	b4a88 <hal_usart_read>
}
   b662c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6630:	bd08      	pop	{r3, pc}

000b6632 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6632:	7c00      	ldrb	r0, [r0, #16]
   b6634:	f7fe ba38 	b.w	b4aa8 <hal_usart_flush>

000b6638 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6638:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b663a:	7c45      	ldrb	r5, [r0, #17]
{
   b663c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b663e:	b12d      	cbz	r5, b664c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6640:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6642:	b003      	add	sp, #12
   b6644:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6648:	f7fe ba0e 	b.w	b4a68 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b664c:	7c00      	ldrb	r0, [r0, #16]
   b664e:	9101      	str	r1, [sp, #4]
   b6650:	f7fe fa3a 	bl	b4ac8 <hal_usart_available_data_for_write>
   b6654:	2800      	cmp	r0, #0
   b6656:	9901      	ldr	r1, [sp, #4]
   b6658:	dcf2      	bgt.n	b6640 <_ZN11USARTSerial5writeEh+0x8>
}
   b665a:	4628      	mov	r0, r5
   b665c:	b003      	add	sp, #12
   b665e:	bd30      	pop	{r4, r5, pc}

000b6660 <_ZN11USARTSerialD0Ev>:
   b6660:	b510      	push	{r4, lr}
   b6662:	2114      	movs	r1, #20
   b6664:	4604      	mov	r4, r0
   b6666:	f7fd fd18 	bl	b409a <_ZdlPvj>
   b666a:	4620      	mov	r0, r4
   b666c:	bd10      	pop	{r4, pc}
	...

000b6670 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6670:	b510      	push	{r4, lr}
   b6672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6676:	4604      	mov	r4, r0
   b6678:	4608      	mov	r0, r1
   b667a:	4611      	mov	r1, r2
   b667c:	2200      	movs	r2, #0
   b667e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6682:	4b04      	ldr	r3, [pc, #16]	; (b6694 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6684:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6686:	2301      	movs	r3, #1
  _serial = serial;
   b6688:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b668a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b668c:	f7fe fa24 	bl	b4ad8 <hal_usart_init_ex>
}
   b6690:	4620      	mov	r0, r4
   b6692:	bd10      	pop	{r4, pc}
   b6694:	000b7228 	.word	0x000b7228

000b6698 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6698:	4770      	bx	lr

000b669a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b669a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b669c:	4606      	mov	r6, r0
   b669e:	4615      	mov	r5, r2
   b66a0:	460c      	mov	r4, r1
   b66a2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b66a4:	42bc      	cmp	r4, r7
   b66a6:	d006      	beq.n	b66b6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b66a8:	6833      	ldr	r3, [r6, #0]
   b66aa:	f814 1b01 	ldrb.w	r1, [r4], #1
   b66ae:	689b      	ldr	r3, [r3, #8]
   b66b0:	4630      	mov	r0, r6
   b66b2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b66b4:	e7f6      	b.n	b66a4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b66b6:	4628      	mov	r0, r5
   b66b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b66ba <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b66ba:	7c00      	ldrb	r0, [r0, #16]
   b66bc:	2200      	movs	r2, #0
   b66be:	f7fe ba13 	b.w	b4ae8 <hal_i2c_write>

000b66c2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b66c2:	7c00      	ldrb	r0, [r0, #16]
   b66c4:	2100      	movs	r1, #0
   b66c6:	f7fe ba17 	b.w	b4af8 <hal_i2c_available>

000b66ca <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b66ca:	7c00      	ldrb	r0, [r0, #16]
   b66cc:	2100      	movs	r1, #0
   b66ce:	f7fe ba1b 	b.w	b4b08 <hal_i2c_read>

000b66d2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b66d2:	7c00      	ldrb	r0, [r0, #16]
   b66d4:	2100      	movs	r1, #0
   b66d6:	f7fe ba1f 	b.w	b4b18 <hal_i2c_peek>

000b66da <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b66da:	7c00      	ldrb	r0, [r0, #16]
   b66dc:	2100      	movs	r1, #0
   b66de:	f7fe ba23 	b.w	b4b28 <hal_i2c_flush>

000b66e2 <_ZN7TwoWireD0Ev>:
   b66e2:	b510      	push	{r4, lr}
   b66e4:	2114      	movs	r1, #20
   b66e6:	4604      	mov	r4, r0
   b66e8:	f7fd fcd7 	bl	b409a <_ZdlPvj>
   b66ec:	4620      	mov	r0, r4
   b66ee:	bd10      	pop	{r4, pc}

000b66f0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b66f0:	b510      	push	{r4, lr}
   b66f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b66f6:	4604      	mov	r4, r0
   b66f8:	4608      	mov	r0, r1
   b66fa:	2100      	movs	r1, #0
   b66fc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6700:	4b03      	ldr	r3, [pc, #12]	; (b6710 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b6702:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b6704:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b6706:	4611      	mov	r1, r2
   b6708:	f7fe fa1e 	bl	b4b48 <hal_i2c_init>
}
   b670c:	4620      	mov	r0, r4
   b670e:	bd10      	pop	{r4, pc}
   b6710:	000b7258 	.word	0x000b7258

000b6714 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b6714:	2200      	movs	r2, #0
   b6716:	6840      	ldr	r0, [r0, #4]
   b6718:	4611      	mov	r1, r2
   b671a:	f7fe bab1 	b.w	b4c80 <network_ready>

000b671e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b671e:	2200      	movs	r2, #0
   b6720:	6840      	ldr	r0, [r0, #4]
   b6722:	4611      	mov	r1, r2
   b6724:	f7fe bacc 	b.w	b4cc0 <network_listening>

000b6728 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6728:	2200      	movs	r2, #0
   b672a:	6840      	ldr	r0, [r0, #4]
   b672c:	4611      	mov	r1, r2
   b672e:	f7fe bad7 	b.w	b4ce0 <network_get_listen_timeout>

000b6732 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6732:	6840      	ldr	r0, [r0, #4]
   b6734:	2200      	movs	r2, #0
   b6736:	f7fe bacb 	b.w	b4cd0 <network_set_listen_timeout>

000b673a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b673a:	6840      	ldr	r0, [r0, #4]
   b673c:	2200      	movs	r2, #0
   b673e:	f081 0101 	eor.w	r1, r1, #1
   b6742:	f7fe bab5 	b.w	b4cb0 <network_listen>

000b6746 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6746:	2300      	movs	r3, #0
   b6748:	6840      	ldr	r0, [r0, #4]
   b674a:	461a      	mov	r2, r3
   b674c:	4619      	mov	r1, r3
   b674e:	f7fe baa7 	b.w	b4ca0 <network_off>

000b6752 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6752:	2200      	movs	r2, #0
   b6754:	6840      	ldr	r0, [r0, #4]
   b6756:	4611      	mov	r1, r2
   b6758:	f7fe ba82 	b.w	b4c60 <network_connecting>

000b675c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b675c:	6840      	ldr	r0, [r0, #4]
   b675e:	2200      	movs	r2, #0
   b6760:	2102      	movs	r1, #2
   b6762:	f7fe ba85 	b.w	b4c70 <network_disconnect>

000b6766 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6766:	2300      	movs	r3, #0
   b6768:	6840      	ldr	r0, [r0, #4]
   b676a:	461a      	mov	r2, r3
   b676c:	f7fe ba70 	b.w	b4c50 <network_connect>

000b6770 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6770:	4b02      	ldr	r3, [pc, #8]	; (b677c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b6772:	2204      	movs	r2, #4
   b6774:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b6776:	4a02      	ldr	r2, [pc, #8]	; (b6780 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b6778:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b677a:	4770      	bx	lr
   b677c:	2003e70c 	.word	0x2003e70c
   b6780:	000b7280 	.word	0x000b7280

000b6784 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6784:	2300      	movs	r3, #0
   b6786:	6840      	ldr	r0, [r0, #4]
   b6788:	461a      	mov	r2, r3
   b678a:	f7fe ba61 	b.w	b4c50 <network_connect>

000b678e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b678e:	6840      	ldr	r0, [r0, #4]
   b6790:	2200      	movs	r2, #0
   b6792:	2102      	movs	r1, #2
   b6794:	f7fe ba6c 	b.w	b4c70 <network_disconnect>

000b6798 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6798:	2200      	movs	r2, #0
   b679a:	6840      	ldr	r0, [r0, #4]
   b679c:	4611      	mov	r1, r2
   b679e:	f7fe ba5f 	b.w	b4c60 <network_connecting>

000b67a2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b67a2:	2200      	movs	r2, #0
   b67a4:	6840      	ldr	r0, [r0, #4]
   b67a6:	4611      	mov	r1, r2
   b67a8:	f7fe ba6a 	b.w	b4c80 <network_ready>

000b67ac <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b67ac:	2300      	movs	r3, #0
   b67ae:	6840      	ldr	r0, [r0, #4]
   b67b0:	461a      	mov	r2, r3
   b67b2:	4619      	mov	r1, r3
   b67b4:	f7fe ba6c 	b.w	b4c90 <network_on>

000b67b8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b67b8:	2300      	movs	r3, #0
   b67ba:	6840      	ldr	r0, [r0, #4]
   b67bc:	461a      	mov	r2, r3
   b67be:	4619      	mov	r1, r3
   b67c0:	f7fe ba6e 	b.w	b4ca0 <network_off>

000b67c4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b67c4:	6840      	ldr	r0, [r0, #4]
   b67c6:	2100      	movs	r1, #0
   b67c8:	f7fe ba92 	b.w	b4cf0 <network_is_on>

000b67cc <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b67cc:	6840      	ldr	r0, [r0, #4]
   b67ce:	2100      	movs	r1, #0
   b67d0:	f7fe ba96 	b.w	b4d00 <network_is_off>

000b67d4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b67d4:	6840      	ldr	r0, [r0, #4]
   b67d6:	2200      	movs	r2, #0
   b67d8:	f081 0101 	eor.w	r1, r1, #1
   b67dc:	f7fe ba68 	b.w	b4cb0 <network_listen>

000b67e0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b67e0:	6840      	ldr	r0, [r0, #4]
   b67e2:	2200      	movs	r2, #0
   b67e4:	f7fe ba74 	b.w	b4cd0 <network_set_listen_timeout>

000b67e8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b67e8:	2200      	movs	r2, #0
   b67ea:	6840      	ldr	r0, [r0, #4]
   b67ec:	4611      	mov	r1, r2
   b67ee:	f7fe ba77 	b.w	b4ce0 <network_get_listen_timeout>

000b67f2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b67f2:	2200      	movs	r2, #0
   b67f4:	6840      	ldr	r0, [r0, #4]
   b67f6:	4611      	mov	r1, r2
   b67f8:	f7fe ba62 	b.w	b4cc0 <network_listening>

000b67fc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b67fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6800:	b095      	sub	sp, #84	; 0x54
   b6802:	4614      	mov	r4, r2
   b6804:	460d      	mov	r5, r1
   b6806:	4607      	mov	r7, r0
    IPAddress addr;
   b6808:	f7ff fe2e 	bl	b6468 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b680c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b680e:	221c      	movs	r2, #28
   b6810:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6812:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6814:	f000 faa2 	bl	b6d5c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6818:	2340      	movs	r3, #64	; 0x40
   b681a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b681c:	4620      	mov	r0, r4
   b681e:	466b      	mov	r3, sp
   b6820:	aa0c      	add	r2, sp, #48	; 0x30
   b6822:	2100      	movs	r1, #0
   b6824:	f7fe f870 	bl	b4908 <netdb_getaddrinfo>
    if (!r) {
   b6828:	4604      	mov	r4, r0
   b682a:	2800      	cmp	r0, #0
   b682c:	d14b      	bne.n	b68c6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b682e:	4602      	mov	r2, r0
   b6830:	2101      	movs	r1, #1
   b6832:	6868      	ldr	r0, [r5, #4]
   b6834:	f7fe fa24 	bl	b4c80 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6838:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b683a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b683c:	4622      	mov	r2, r4
   b683e:	6868      	ldr	r0, [r5, #4]
   b6840:	f7fe fa1e 	bl	b4c80 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6844:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6846:	4681      	mov	r9, r0
        bool ok = false;
   b6848:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b684a:	2e00      	cmp	r6, #0
   b684c:	d03b      	beq.n	b68c6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b684e:	2900      	cmp	r1, #0
   b6850:	d139      	bne.n	b68c6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6852:	6873      	ldr	r3, [r6, #4]
   b6854:	2b02      	cmp	r3, #2
   b6856:	d003      	beq.n	b6860 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6858:	2b0a      	cmp	r3, #10
   b685a:	d011      	beq.n	b6880 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b685c:	69f6      	ldr	r6, [r6, #28]
   b685e:	e7f4      	b.n	b684a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6860:	f1b8 0f00 	cmp.w	r8, #0
   b6864:	d0fa      	beq.n	b685c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b6866:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6868:	a806      	add	r0, sp, #24
   b686a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b686c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b686e:	f7ff fe29 	bl	b64c4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6872:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6874:	1d3c      	adds	r4, r7, #4
   b6876:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6878:	682b      	ldr	r3, [r5, #0]
   b687a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b687c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b687e:	e7ed      	b.n	b685c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6880:	f1b9 0f00 	cmp.w	r9, #0
   b6884:	d0ea      	beq.n	b685c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6886:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6888:	2210      	movs	r2, #16
   b688a:	a801      	add	r0, sp, #4
   b688c:	f000 fa66 	bl	b6d5c <memset>
                    a.v = 6;
   b6890:	2306      	movs	r3, #6
   b6892:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6896:	ad01      	add	r5, sp, #4
   b6898:	f104 0308 	add.w	r3, r4, #8
   b689c:	3418      	adds	r4, #24
   b689e:	6818      	ldr	r0, [r3, #0]
   b68a0:	6859      	ldr	r1, [r3, #4]
   b68a2:	462a      	mov	r2, r5
   b68a4:	c203      	stmia	r2!, {r0, r1}
   b68a6:	3308      	adds	r3, #8
   b68a8:	42a3      	cmp	r3, r4
   b68aa:	4615      	mov	r5, r2
   b68ac:	d1f7      	bne.n	b689e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b68ae:	a901      	add	r1, sp, #4
   b68b0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b68b2:	ad07      	add	r5, sp, #28
   b68b4:	f7ff fde6 	bl	b6484 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b68b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b68ba:	1d3c      	adds	r4, r7, #4
   b68bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b68be:	682b      	ldr	r3, [r5, #0]
   b68c0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b68c2:	4649      	mov	r1, r9
   b68c4:	e7ca      	b.n	b685c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b68c6:	9800      	ldr	r0, [sp, #0]
   b68c8:	f7fe f816 	bl	b48f8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b68cc:	4638      	mov	r0, r7
   b68ce:	b015      	add	sp, #84	; 0x54
   b68d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b68d4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b68d4:	4b02      	ldr	r3, [pc, #8]	; (b68e0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b68d6:	4a03      	ldr	r2, [pc, #12]	; (b68e4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b68d8:	601a      	str	r2, [r3, #0]
   b68da:	2200      	movs	r2, #0
   b68dc:	605a      	str	r2, [r3, #4]

} // spark
   b68de:	4770      	bx	lr
   b68e0:	2003e714 	.word	0x2003e714
   b68e4:	000b72bc 	.word	0x000b72bc

000b68e8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b68e8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b68ea:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b68ec:	d902      	bls.n	b68f4 <pinAvailable+0xc>
    return false;
   b68ee:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b68f0:	b002      	add	sp, #8
   b68f2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b68f4:	f1a0 030b 	sub.w	r3, r0, #11
   b68f8:	2b02      	cmp	r3, #2
   b68fa:	d81a      	bhi.n	b6932 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b68fc:	4c17      	ldr	r4, [pc, #92]	; (b695c <pinAvailable+0x74>)
   b68fe:	7821      	ldrb	r1, [r4, #0]
   b6900:	f3bf 8f5b 	dmb	ish
   b6904:	f011 0101 	ands.w	r1, r1, #1
   b6908:	d10b      	bne.n	b6922 <pinAvailable+0x3a>
   b690a:	4620      	mov	r0, r4
   b690c:	9101      	str	r1, [sp, #4]
   b690e:	f7fd fbc6 	bl	b409e <__cxa_guard_acquire>
   b6912:	9901      	ldr	r1, [sp, #4]
   b6914:	b128      	cbz	r0, b6922 <pinAvailable+0x3a>
   b6916:	4812      	ldr	r0, [pc, #72]	; (b6960 <pinAvailable+0x78>)
   b6918:	f7fe fa80 	bl	b4e1c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b691c:	4620      	mov	r0, r4
   b691e:	f7fd fbc3 	bl	b40a8 <__cxa_guard_release>
   b6922:	4b0f      	ldr	r3, [pc, #60]	; (b6960 <pinAvailable+0x78>)
   b6924:	7818      	ldrb	r0, [r3, #0]
   b6926:	f7fe f91f 	bl	b4b68 <hal_spi_is_enabled>
   b692a:	2800      	cmp	r0, #0
   b692c:	d1df      	bne.n	b68ee <pinAvailable+0x6>
  return true; // 'pin' is available
   b692e:	2001      	movs	r0, #1
   b6930:	e7de      	b.n	b68f0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b6932:	2801      	cmp	r0, #1
   b6934:	d809      	bhi.n	b694a <pinAvailable+0x62>
   b6936:	f000 f897 	bl	b6a68 <_Z19__fetch_global_Wirev>
   b693a:	2100      	movs	r1, #0
   b693c:	7c00      	ldrb	r0, [r0, #16]
   b693e:	f7fe f8fb 	bl	b4b38 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b6942:	f080 0001 	eor.w	r0, r0, #1
   b6946:	b2c0      	uxtb	r0, r0
   b6948:	e7d2      	b.n	b68f0 <pinAvailable+0x8>
   b694a:	3809      	subs	r0, #9
   b694c:	2801      	cmp	r0, #1
   b694e:	d8ee      	bhi.n	b692e <pinAvailable+0x46>
   b6950:	f000 f84e 	bl	b69f0 <_Z22__fetch_global_Serial1v>
   b6954:	7c00      	ldrb	r0, [r0, #16]
   b6956:	f7fe f8af 	bl	b4ab8 <hal_usart_is_enabled>
   b695a:	e7f2      	b.n	b6942 <pinAvailable+0x5a>
   b695c:	2003e71c 	.word	0x2003e71c
   b6960:	2003e720 	.word	0x2003e720

000b6964 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6964:	2823      	cmp	r0, #35	; 0x23
{
   b6966:	b538      	push	{r3, r4, r5, lr}
   b6968:	4604      	mov	r4, r0
   b696a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b696c:	d80a      	bhi.n	b6984 <pinMode+0x20>
   b696e:	29ff      	cmp	r1, #255	; 0xff
   b6970:	d008      	beq.n	b6984 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b6972:	f7ff ffb9 	bl	b68e8 <pinAvailable>
   b6976:	b128      	cbz	r0, b6984 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b6978:	4629      	mov	r1, r5
   b697a:	4620      	mov	r0, r4
}
   b697c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b6980:	f7fd bfca 	b.w	b4918 <HAL_Pin_Mode>
}
   b6984:	bd38      	pop	{r3, r4, r5, pc}

000b6986 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b6986:	b538      	push	{r3, r4, r5, lr}
   b6988:	4604      	mov	r4, r0
   b698a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b698c:	f7fd ffcc 	bl	b4928 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b6990:	28ff      	cmp	r0, #255	; 0xff
   b6992:	d010      	beq.n	b69b6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b6994:	2806      	cmp	r0, #6
   b6996:	d804      	bhi.n	b69a2 <digitalWrite+0x1c>
   b6998:	234d      	movs	r3, #77	; 0x4d
   b699a:	fa23 f000 	lsr.w	r0, r3, r0
   b699e:	07c3      	lsls	r3, r0, #31
   b69a0:	d409      	bmi.n	b69b6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b69a2:	4620      	mov	r0, r4
   b69a4:	f7ff ffa0 	bl	b68e8 <pinAvailable>
   b69a8:	b128      	cbz	r0, b69b6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b69aa:	4629      	mov	r1, r5
   b69ac:	4620      	mov	r0, r4
}
   b69ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b69b2:	f7fd bfc1 	b.w	b4938 <HAL_GPIO_Write>
}
   b69b6:	bd38      	pop	{r3, r4, r5, pc}

000b69b8 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b69b8:	4770      	bx	lr
	...

000b69bc <_Z20acquireSerial1Bufferv>:
{
   b69bc:	b538      	push	{r3, r4, r5, lr}
   b69be:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b69c0:	2514      	movs	r5, #20
   b69c2:	462a      	mov	r2, r5
   b69c4:	2100      	movs	r1, #0
   b69c6:	f000 f9c9 	bl	b6d5c <memset>
   b69ca:	8025      	strh	r5, [r4, #0]
   b69cc:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b69ce:	4907      	ldr	r1, [pc, #28]	; (b69ec <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b69d0:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b69d2:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b69d4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b69d6:	f000 f86b 	bl	b6ab0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b69da:	4904      	ldr	r1, [pc, #16]	; (b69ec <_Z20acquireSerial1Bufferv+0x30>)
    };
   b69dc:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b69de:	4628      	mov	r0, r5
   b69e0:	f000 f866 	bl	b6ab0 <_ZnajRKSt9nothrow_t>
    };
   b69e4:	60e0      	str	r0, [r4, #12]
}
   b69e6:	4620      	mov	r0, r4
   b69e8:	bd38      	pop	{r3, r4, r5, pc}
   b69ea:	bf00      	nop
   b69ec:	000b72f0 	.word	0x000b72f0

000b69f0 <_Z22__fetch_global_Serial1v>:
{
   b69f0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b69f2:	4d0e      	ldr	r5, [pc, #56]	; (b6a2c <_Z22__fetch_global_Serial1v+0x3c>)
   b69f4:	7829      	ldrb	r1, [r5, #0]
   b69f6:	f3bf 8f5b 	dmb	ish
   b69fa:	f011 0401 	ands.w	r4, r1, #1
{
   b69fe:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6a00:	d111      	bne.n	b6a26 <_Z22__fetch_global_Serial1v+0x36>
   b6a02:	4628      	mov	r0, r5
   b6a04:	f7fd fb4b 	bl	b409e <__cxa_guard_acquire>
   b6a08:	b168      	cbz	r0, b6a26 <_Z22__fetch_global_Serial1v+0x36>
   b6a0a:	a801      	add	r0, sp, #4
   b6a0c:	f7ff ffd6 	bl	b69bc <_Z20acquireSerial1Bufferv>
   b6a10:	aa01      	add	r2, sp, #4
   b6a12:	4621      	mov	r1, r4
   b6a14:	4806      	ldr	r0, [pc, #24]	; (b6a30 <_Z22__fetch_global_Serial1v+0x40>)
   b6a16:	f7ff fe2b 	bl	b6670 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b6a1a:	4628      	mov	r0, r5
   b6a1c:	f7fd fb44 	bl	b40a8 <__cxa_guard_release>
   b6a20:	4804      	ldr	r0, [pc, #16]	; (b6a34 <_Z22__fetch_global_Serial1v+0x44>)
   b6a22:	f000 f95d 	bl	b6ce0 <atexit>
    return serial1;
}
   b6a26:	4802      	ldr	r0, [pc, #8]	; (b6a30 <_Z22__fetch_global_Serial1v+0x40>)
   b6a28:	b007      	add	sp, #28
   b6a2a:	bd30      	pop	{r4, r5, pc}
   b6a2c:	2003e728 	.word	0x2003e728
   b6a30:	2003e72c 	.word	0x2003e72c
   b6a34:	000b69b9 	.word	0x000b69b9

000b6a38 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6a38:	4770      	bx	lr
	...

000b6a3c <_Z17acquireWireBufferv>:
{
   b6a3c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b6a3e:	2520      	movs	r5, #32
   b6a40:	2314      	movs	r3, #20
{
   b6a42:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b6a44:	6003      	str	r3, [r0, #0]
   b6a46:	6085      	str	r5, [r0, #8]
   b6a48:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6a4a:	4906      	ldr	r1, [pc, #24]	; (b6a64 <_Z17acquireWireBufferv+0x28>)
   b6a4c:	4628      	mov	r0, r5
   b6a4e:	f000 f82f 	bl	b6ab0 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6a52:	4904      	ldr	r1, [pc, #16]	; (b6a64 <_Z17acquireWireBufferv+0x28>)
	};
   b6a54:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6a56:	4628      	mov	r0, r5
   b6a58:	f000 f82a 	bl	b6ab0 <_ZnajRKSt9nothrow_t>
	};
   b6a5c:	60e0      	str	r0, [r4, #12]
}
   b6a5e:	4620      	mov	r0, r4
   b6a60:	bd38      	pop	{r3, r4, r5, pc}
   b6a62:	bf00      	nop
   b6a64:	000b72f0 	.word	0x000b72f0

000b6a68 <_Z19__fetch_global_Wirev>:
{
   b6a68:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6a6a:	4d0e      	ldr	r5, [pc, #56]	; (b6aa4 <_Z19__fetch_global_Wirev+0x3c>)
   b6a6c:	7829      	ldrb	r1, [r5, #0]
   b6a6e:	f3bf 8f5b 	dmb	ish
   b6a72:	f011 0401 	ands.w	r4, r1, #1
{
   b6a76:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6a78:	d111      	bne.n	b6a9e <_Z19__fetch_global_Wirev+0x36>
   b6a7a:	4628      	mov	r0, r5
   b6a7c:	f7fd fb0f 	bl	b409e <__cxa_guard_acquire>
   b6a80:	b168      	cbz	r0, b6a9e <_Z19__fetch_global_Wirev+0x36>
   b6a82:	a801      	add	r0, sp, #4
   b6a84:	f7ff ffda 	bl	b6a3c <_Z17acquireWireBufferv>
   b6a88:	aa01      	add	r2, sp, #4
   b6a8a:	4621      	mov	r1, r4
   b6a8c:	4806      	ldr	r0, [pc, #24]	; (b6aa8 <_Z19__fetch_global_Wirev+0x40>)
   b6a8e:	f7ff fe2f 	bl	b66f0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b6a92:	4628      	mov	r0, r5
   b6a94:	f7fd fb08 	bl	b40a8 <__cxa_guard_release>
   b6a98:	4804      	ldr	r0, [pc, #16]	; (b6aac <_Z19__fetch_global_Wirev+0x44>)
   b6a9a:	f000 f921 	bl	b6ce0 <atexit>
	return wire;
}
   b6a9e:	4802      	ldr	r0, [pc, #8]	; (b6aa8 <_Z19__fetch_global_Wirev+0x40>)
   b6aa0:	b007      	add	sp, #28
   b6aa2:	bd30      	pop	{r4, r5, pc}
   b6aa4:	2003e744 	.word	0x2003e744
   b6aa8:	2003e748 	.word	0x2003e748
   b6aac:	000b6a39 	.word	0x000b6a39

000b6ab0 <_ZnajRKSt9nothrow_t>:
   b6ab0:	f7fd baf1 	b.w	b4096 <_Znaj>

000b6ab4 <_ZSt25__throw_bad_function_callv>:
   b6ab4:	b508      	push	{r3, lr}
   b6ab6:	f7fe f95b 	bl	b4d70 <abort>
	...

000b6abc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b6abc:	4901      	ldr	r1, [pc, #4]	; (b6ac4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b6abe:	f000 b8f9 	b.w	b6cb4 <_ZNKSt9type_infoeqERKS_>
   b6ac2:	bf00      	nop
   b6ac4:	000b730c 	.word	0x000b730c

000b6ac8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b6ac8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b6aca:	2400      	movs	r4, #0
   b6acc:	2310      	movs	r3, #16
   b6ace:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b6ad2:	6803      	ldr	r3, [r0, #0]
   b6ad4:	4615      	mov	r5, r2
   b6ad6:	699e      	ldr	r6, [r3, #24]
   b6ad8:	6812      	ldr	r2, [r2, #0]
   b6ada:	466b      	mov	r3, sp
   b6adc:	e9cd 4400 	strd	r4, r4, [sp]
   b6ae0:	47b0      	blx	r6
   b6ae2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b6ae6:	f003 0306 	and.w	r3, r3, #6
   b6aea:	2b06      	cmp	r3, #6
   b6aec:	bf03      	ittte	eq
   b6aee:	9b00      	ldreq	r3, [sp, #0]
   b6af0:	602b      	streq	r3, [r5, #0]
   b6af2:	2001      	moveq	r0, #1
   b6af4:	4620      	movne	r0, r4
   b6af6:	b004      	add	sp, #16
   b6af8:	bd70      	pop	{r4, r5, r6, pc}

000b6afa <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b6afa:	9800      	ldr	r0, [sp, #0]
   b6afc:	4290      	cmp	r0, r2
   b6afe:	bf14      	ite	ne
   b6b00:	2001      	movne	r0, #1
   b6b02:	2006      	moveq	r0, #6
   b6b04:	4770      	bx	lr
	...

000b6b08 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b6b08:	b510      	push	{r4, lr}
   b6b0a:	4b03      	ldr	r3, [pc, #12]	; (b6b18 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b6b0c:	6003      	str	r3, [r0, #0]
   b6b0e:	4604      	mov	r4, r0
   b6b10:	f000 f8cd 	bl	b6cae <_ZNSt9type_infoD1Ev>
   b6b14:	4620      	mov	r0, r4
   b6b16:	bd10      	pop	{r4, pc}
   b6b18:	000b734c 	.word	0x000b734c

000b6b1c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b6b1c:	b510      	push	{r4, lr}
   b6b1e:	4604      	mov	r4, r0
   b6b20:	f7ff fff2 	bl	b6b08 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b6b24:	4620      	mov	r0, r4
   b6b26:	2108      	movs	r1, #8
   b6b28:	f7fd fab7 	bl	b409a <_ZdlPvj>
   b6b2c:	4620      	mov	r0, r4
   b6b2e:	bd10      	pop	{r4, pc}

000b6b30 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b6b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6b34:	461f      	mov	r7, r3
   b6b36:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b6b3a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b6b3e:	4598      	cmp	r8, r3
   b6b40:	4606      	mov	r6, r0
   b6b42:	4615      	mov	r5, r2
   b6b44:	d107      	bne.n	b6b56 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b6b46:	9907      	ldr	r1, [sp, #28]
   b6b48:	f000 f8b4 	bl	b6cb4 <_ZNKSt9type_infoeqERKS_>
   b6b4c:	b118      	cbz	r0, b6b56 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b6b4e:	7165      	strb	r5, [r4, #5]
   b6b50:	2000      	movs	r0, #0
   b6b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6b56:	4639      	mov	r1, r7
   b6b58:	4630      	mov	r0, r6
   b6b5a:	f000 f8ab 	bl	b6cb4 <_ZNKSt9type_infoeqERKS_>
   b6b5e:	2800      	cmp	r0, #0
   b6b60:	d0f6      	beq.n	b6b50 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b6b62:	2301      	movs	r3, #1
   b6b64:	f8c4 8000 	str.w	r8, [r4]
   b6b68:	7125      	strb	r5, [r4, #4]
   b6b6a:	71a3      	strb	r3, [r4, #6]
   b6b6c:	e7f0      	b.n	b6b50 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b6b6e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b6b6e:	b538      	push	{r3, r4, r5, lr}
   b6b70:	4615      	mov	r5, r2
   b6b72:	461c      	mov	r4, r3
   b6b74:	f000 f89e 	bl	b6cb4 <_ZNKSt9type_infoeqERKS_>
   b6b78:	b120      	cbz	r0, b6b84 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b6b7a:	2308      	movs	r3, #8
   b6b7c:	60e3      	str	r3, [r4, #12]
   b6b7e:	2306      	movs	r3, #6
   b6b80:	6025      	str	r5, [r4, #0]
   b6b82:	7123      	strb	r3, [r4, #4]
   b6b84:	bd38      	pop	{r3, r4, r5, pc}

000b6b86 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b6b86:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6b88:	4605      	mov	r5, r0
   b6b8a:	460c      	mov	r4, r1
   b6b8c:	9201      	str	r2, [sp, #4]
   b6b8e:	461e      	mov	r6, r3
   b6b90:	f000 f890 	bl	b6cb4 <_ZNKSt9type_infoeqERKS_>
   b6b94:	b950      	cbnz	r0, b6bac <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b6b96:	2e03      	cmp	r6, #3
   b6b98:	d808      	bhi.n	b6bac <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b6b9a:	6823      	ldr	r3, [r4, #0]
   b6b9c:	9a01      	ldr	r2, [sp, #4]
   b6b9e:	695b      	ldr	r3, [r3, #20]
   b6ba0:	4629      	mov	r1, r5
   b6ba2:	4620      	mov	r0, r4
   b6ba4:	b002      	add	sp, #8
   b6ba6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b6baa:	4718      	bx	r3
   b6bac:	b002      	add	sp, #8
   b6bae:	bd70      	pop	{r4, r5, r6, pc}

000b6bb0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b6bb0:	b510      	push	{r4, lr}
   b6bb2:	4b03      	ldr	r3, [pc, #12]	; (b6bc0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b6bb4:	6003      	str	r3, [r0, #0]
   b6bb6:	4604      	mov	r4, r0
   b6bb8:	f7ff ffa6 	bl	b6b08 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b6bbc:	4620      	mov	r0, r4
   b6bbe:	bd10      	pop	{r4, pc}
   b6bc0:	000b73ac 	.word	0x000b73ac

000b6bc4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b6bc4:	b510      	push	{r4, lr}
   b6bc6:	4604      	mov	r4, r0
   b6bc8:	f7ff fff2 	bl	b6bb0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b6bcc:	4620      	mov	r0, r4
   b6bce:	210c      	movs	r1, #12
   b6bd0:	f7fd fa63 	bl	b409a <_ZdlPvj>
   b6bd4:	4620      	mov	r0, r4
   b6bd6:	bd10      	pop	{r4, pc}

000b6bd8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b6bd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6bda:	9f08      	ldr	r7, [sp, #32]
   b6bdc:	4297      	cmp	r7, r2
   b6bde:	4605      	mov	r5, r0
   b6be0:	460e      	mov	r6, r1
   b6be2:	4614      	mov	r4, r2
   b6be4:	d00a      	beq.n	b6bfc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b6be6:	68a8      	ldr	r0, [r5, #8]
   b6be8:	6802      	ldr	r2, [r0, #0]
   b6bea:	9708      	str	r7, [sp, #32]
   b6bec:	6a15      	ldr	r5, [r2, #32]
   b6bee:	4631      	mov	r1, r6
   b6bf0:	4622      	mov	r2, r4
   b6bf2:	46ac      	mov	ip, r5
   b6bf4:	b003      	add	sp, #12
   b6bf6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b6bfa:	4760      	bx	ip
   b6bfc:	4619      	mov	r1, r3
   b6bfe:	9301      	str	r3, [sp, #4]
   b6c00:	f000 f858 	bl	b6cb4 <_ZNKSt9type_infoeqERKS_>
   b6c04:	9b01      	ldr	r3, [sp, #4]
   b6c06:	2800      	cmp	r0, #0
   b6c08:	d0ed      	beq.n	b6be6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b6c0a:	2006      	movs	r0, #6
   b6c0c:	b003      	add	sp, #12
   b6c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6c10 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b6c10:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6c14:	460d      	mov	r5, r1
   b6c16:	4619      	mov	r1, r3
   b6c18:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b6c1c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b6c20:	4681      	mov	r9, r0
   b6c22:	4617      	mov	r7, r2
   b6c24:	4698      	mov	r8, r3
   b6c26:	f000 f845 	bl	b6cb4 <_ZNKSt9type_infoeqERKS_>
   b6c2a:	b190      	cbz	r0, b6c52 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b6c2c:	2d00      	cmp	r5, #0
   b6c2e:	6034      	str	r4, [r6, #0]
   b6c30:	7137      	strb	r7, [r6, #4]
   b6c32:	db09      	blt.n	b6c48 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b6c34:	1961      	adds	r1, r4, r5
   b6c36:	458a      	cmp	sl, r1
   b6c38:	bf0c      	ite	eq
   b6c3a:	2106      	moveq	r1, #6
   b6c3c:	2101      	movne	r1, #1
   b6c3e:	71b1      	strb	r1, [r6, #6]
   b6c40:	2000      	movs	r0, #0
   b6c42:	b001      	add	sp, #4
   b6c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6c48:	3502      	adds	r5, #2
   b6c4a:	d1f9      	bne.n	b6c40 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6c4c:	2301      	movs	r3, #1
   b6c4e:	71b3      	strb	r3, [r6, #6]
   b6c50:	e7f6      	b.n	b6c40 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6c52:	4554      	cmp	r4, sl
   b6c54:	d106      	bne.n	b6c64 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b6c56:	4659      	mov	r1, fp
   b6c58:	4648      	mov	r0, r9
   b6c5a:	f000 f82b 	bl	b6cb4 <_ZNKSt9type_infoeqERKS_>
   b6c5e:	b108      	cbz	r0, b6c64 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b6c60:	7177      	strb	r7, [r6, #5]
   b6c62:	e7ed      	b.n	b6c40 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6c64:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b6c68:	6803      	ldr	r3, [r0, #0]
   b6c6a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b6c6e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b6c72:	69dc      	ldr	r4, [r3, #28]
   b6c74:	463a      	mov	r2, r7
   b6c76:	4643      	mov	r3, r8
   b6c78:	4629      	mov	r1, r5
   b6c7a:	46a4      	mov	ip, r4
   b6c7c:	b001      	add	sp, #4
   b6c7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6c82:	4760      	bx	ip

000b6c84 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b6c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6c88:	4607      	mov	r7, r0
   b6c8a:	460c      	mov	r4, r1
   b6c8c:	4615      	mov	r5, r2
   b6c8e:	461e      	mov	r6, r3
   b6c90:	f7ff ff6d 	bl	b6b6e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b6c94:	b948      	cbnz	r0, b6caa <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b6c96:	68b8      	ldr	r0, [r7, #8]
   b6c98:	6803      	ldr	r3, [r0, #0]
   b6c9a:	699f      	ldr	r7, [r3, #24]
   b6c9c:	462a      	mov	r2, r5
   b6c9e:	4633      	mov	r3, r6
   b6ca0:	4621      	mov	r1, r4
   b6ca2:	46bc      	mov	ip, r7
   b6ca4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b6ca8:	4760      	bx	ip
   b6caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6cae <_ZNSt9type_infoD1Ev>:
   b6cae:	4770      	bx	lr

000b6cb0 <_ZNKSt9type_info14__is_pointer_pEv>:
   b6cb0:	2000      	movs	r0, #0
   b6cb2:	4770      	bx	lr

000b6cb4 <_ZNKSt9type_infoeqERKS_>:
   b6cb4:	4281      	cmp	r1, r0
   b6cb6:	b508      	push	{r3, lr}
   b6cb8:	d00e      	beq.n	b6cd8 <_ZNKSt9type_infoeqERKS_+0x24>
   b6cba:	6840      	ldr	r0, [r0, #4]
   b6cbc:	7803      	ldrb	r3, [r0, #0]
   b6cbe:	2b2a      	cmp	r3, #42	; 0x2a
   b6cc0:	d00c      	beq.n	b6cdc <_ZNKSt9type_infoeqERKS_+0x28>
   b6cc2:	6849      	ldr	r1, [r1, #4]
   b6cc4:	780b      	ldrb	r3, [r1, #0]
   b6cc6:	2b2a      	cmp	r3, #42	; 0x2a
   b6cc8:	bf08      	it	eq
   b6cca:	3101      	addeq	r1, #1
   b6ccc:	f000 f87c 	bl	b6dc8 <strcmp>
   b6cd0:	fab0 f080 	clz	r0, r0
   b6cd4:	0940      	lsrs	r0, r0, #5
   b6cd6:	bd08      	pop	{r3, pc}
   b6cd8:	2001      	movs	r0, #1
   b6cda:	e7fc      	b.n	b6cd6 <_ZNKSt9type_infoeqERKS_+0x22>
   b6cdc:	2000      	movs	r0, #0
   b6cde:	e7fa      	b.n	b6cd6 <_ZNKSt9type_infoeqERKS_+0x22>

000b6ce0 <atexit>:
   b6ce0:	2300      	movs	r3, #0
   b6ce2:	4601      	mov	r1, r0
   b6ce4:	461a      	mov	r2, r3
   b6ce6:	4618      	mov	r0, r3
   b6ce8:	f000 b88c 	b.w	b6e04 <__register_exitproc>

000b6cec <memcmp>:
   b6cec:	b510      	push	{r4, lr}
   b6cee:	3901      	subs	r1, #1
   b6cf0:	4402      	add	r2, r0
   b6cf2:	4290      	cmp	r0, r2
   b6cf4:	d101      	bne.n	b6cfa <memcmp+0xe>
   b6cf6:	2000      	movs	r0, #0
   b6cf8:	e005      	b.n	b6d06 <memcmp+0x1a>
   b6cfa:	7803      	ldrb	r3, [r0, #0]
   b6cfc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b6d00:	42a3      	cmp	r3, r4
   b6d02:	d001      	beq.n	b6d08 <memcmp+0x1c>
   b6d04:	1b18      	subs	r0, r3, r4
   b6d06:	bd10      	pop	{r4, pc}
   b6d08:	3001      	adds	r0, #1
   b6d0a:	e7f2      	b.n	b6cf2 <memcmp+0x6>

000b6d0c <memcpy>:
   b6d0c:	440a      	add	r2, r1
   b6d0e:	4291      	cmp	r1, r2
   b6d10:	f100 33ff 	add.w	r3, r0, #4294967295
   b6d14:	d100      	bne.n	b6d18 <memcpy+0xc>
   b6d16:	4770      	bx	lr
   b6d18:	b510      	push	{r4, lr}
   b6d1a:	f811 4b01 	ldrb.w	r4, [r1], #1
   b6d1e:	f803 4f01 	strb.w	r4, [r3, #1]!
   b6d22:	4291      	cmp	r1, r2
   b6d24:	d1f9      	bne.n	b6d1a <memcpy+0xe>
   b6d26:	bd10      	pop	{r4, pc}

000b6d28 <memmove>:
   b6d28:	4288      	cmp	r0, r1
   b6d2a:	b510      	push	{r4, lr}
   b6d2c:	eb01 0402 	add.w	r4, r1, r2
   b6d30:	d902      	bls.n	b6d38 <memmove+0x10>
   b6d32:	4284      	cmp	r4, r0
   b6d34:	4623      	mov	r3, r4
   b6d36:	d807      	bhi.n	b6d48 <memmove+0x20>
   b6d38:	1e43      	subs	r3, r0, #1
   b6d3a:	42a1      	cmp	r1, r4
   b6d3c:	d008      	beq.n	b6d50 <memmove+0x28>
   b6d3e:	f811 2b01 	ldrb.w	r2, [r1], #1
   b6d42:	f803 2f01 	strb.w	r2, [r3, #1]!
   b6d46:	e7f8      	b.n	b6d3a <memmove+0x12>
   b6d48:	4402      	add	r2, r0
   b6d4a:	4601      	mov	r1, r0
   b6d4c:	428a      	cmp	r2, r1
   b6d4e:	d100      	bne.n	b6d52 <memmove+0x2a>
   b6d50:	bd10      	pop	{r4, pc}
   b6d52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b6d56:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b6d5a:	e7f7      	b.n	b6d4c <memmove+0x24>

000b6d5c <memset>:
   b6d5c:	4402      	add	r2, r0
   b6d5e:	4603      	mov	r3, r0
   b6d60:	4293      	cmp	r3, r2
   b6d62:	d100      	bne.n	b6d66 <memset+0xa>
   b6d64:	4770      	bx	lr
   b6d66:	f803 1b01 	strb.w	r1, [r3], #1
   b6d6a:	e7f9      	b.n	b6d60 <memset+0x4>

000b6d6c <srand>:
   b6d6c:	b538      	push	{r3, r4, r5, lr}
   b6d6e:	4b10      	ldr	r3, [pc, #64]	; (b6db0 <srand+0x44>)
   b6d70:	681d      	ldr	r5, [r3, #0]
   b6d72:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6d74:	4604      	mov	r4, r0
   b6d76:	b9b3      	cbnz	r3, b6da6 <srand+0x3a>
   b6d78:	2018      	movs	r0, #24
   b6d7a:	f7fd ffd9 	bl	b4d30 <malloc>
   b6d7e:	4602      	mov	r2, r0
   b6d80:	63a8      	str	r0, [r5, #56]	; 0x38
   b6d82:	b920      	cbnz	r0, b6d8e <srand+0x22>
   b6d84:	4b0b      	ldr	r3, [pc, #44]	; (b6db4 <srand+0x48>)
   b6d86:	480c      	ldr	r0, [pc, #48]	; (b6db8 <srand+0x4c>)
   b6d88:	2142      	movs	r1, #66	; 0x42
   b6d8a:	f7fd fff9 	bl	b4d80 <__assert_func>
   b6d8e:	490b      	ldr	r1, [pc, #44]	; (b6dbc <srand+0x50>)
   b6d90:	4b0b      	ldr	r3, [pc, #44]	; (b6dc0 <srand+0x54>)
   b6d92:	e9c0 1300 	strd	r1, r3, [r0]
   b6d96:	4b0b      	ldr	r3, [pc, #44]	; (b6dc4 <srand+0x58>)
   b6d98:	6083      	str	r3, [r0, #8]
   b6d9a:	230b      	movs	r3, #11
   b6d9c:	8183      	strh	r3, [r0, #12]
   b6d9e:	2100      	movs	r1, #0
   b6da0:	2001      	movs	r0, #1
   b6da2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b6da6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6da8:	2200      	movs	r2, #0
   b6daa:	611c      	str	r4, [r3, #16]
   b6dac:	615a      	str	r2, [r3, #20]
   b6dae:	bd38      	pop	{r3, r4, r5, pc}
   b6db0:	2003e584 	.word	0x2003e584
   b6db4:	000b73e5 	.word	0x000b73e5
   b6db8:	000b73fc 	.word	0x000b73fc
   b6dbc:	abcd330e 	.word	0xabcd330e
   b6dc0:	e66d1234 	.word	0xe66d1234
   b6dc4:	0005deec 	.word	0x0005deec

000b6dc8 <strcmp>:
   b6dc8:	f810 2b01 	ldrb.w	r2, [r0], #1
   b6dcc:	f811 3b01 	ldrb.w	r3, [r1], #1
   b6dd0:	2a01      	cmp	r2, #1
   b6dd2:	bf28      	it	cs
   b6dd4:	429a      	cmpcs	r2, r3
   b6dd6:	d0f7      	beq.n	b6dc8 <strcmp>
   b6dd8:	1ad0      	subs	r0, r2, r3
   b6dda:	4770      	bx	lr

000b6ddc <strlen>:
   b6ddc:	4603      	mov	r3, r0
   b6dde:	f813 2b01 	ldrb.w	r2, [r3], #1
   b6de2:	2a00      	cmp	r2, #0
   b6de4:	d1fb      	bne.n	b6dde <strlen+0x2>
   b6de6:	1a18      	subs	r0, r3, r0
   b6de8:	3801      	subs	r0, #1
   b6dea:	4770      	bx	lr

000b6dec <strnlen>:
   b6dec:	b510      	push	{r4, lr}
   b6dee:	4602      	mov	r2, r0
   b6df0:	4401      	add	r1, r0
   b6df2:	428a      	cmp	r2, r1
   b6df4:	4613      	mov	r3, r2
   b6df6:	d003      	beq.n	b6e00 <strnlen+0x14>
   b6df8:	781c      	ldrb	r4, [r3, #0]
   b6dfa:	3201      	adds	r2, #1
   b6dfc:	2c00      	cmp	r4, #0
   b6dfe:	d1f8      	bne.n	b6df2 <strnlen+0x6>
   b6e00:	1a18      	subs	r0, r3, r0
   b6e02:	bd10      	pop	{r4, pc}

000b6e04 <__register_exitproc>:
   b6e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6e08:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b6ec4 <__register_exitproc+0xc0>
   b6e0c:	4606      	mov	r6, r0
   b6e0e:	f8d8 0000 	ldr.w	r0, [r8]
   b6e12:	461f      	mov	r7, r3
   b6e14:	460d      	mov	r5, r1
   b6e16:	4691      	mov	r9, r2
   b6e18:	f000 f856 	bl	b6ec8 <__retarget_lock_acquire_recursive>
   b6e1c:	4b25      	ldr	r3, [pc, #148]	; (b6eb4 <__register_exitproc+0xb0>)
   b6e1e:	681c      	ldr	r4, [r3, #0]
   b6e20:	b934      	cbnz	r4, b6e30 <__register_exitproc+0x2c>
   b6e22:	4c25      	ldr	r4, [pc, #148]	; (b6eb8 <__register_exitproc+0xb4>)
   b6e24:	601c      	str	r4, [r3, #0]
   b6e26:	4b25      	ldr	r3, [pc, #148]	; (b6ebc <__register_exitproc+0xb8>)
   b6e28:	b113      	cbz	r3, b6e30 <__register_exitproc+0x2c>
   b6e2a:	681b      	ldr	r3, [r3, #0]
   b6e2c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b6e30:	6863      	ldr	r3, [r4, #4]
   b6e32:	2b1f      	cmp	r3, #31
   b6e34:	dd07      	ble.n	b6e46 <__register_exitproc+0x42>
   b6e36:	f8d8 0000 	ldr.w	r0, [r8]
   b6e3a:	f000 f847 	bl	b6ecc <__retarget_lock_release_recursive>
   b6e3e:	f04f 30ff 	mov.w	r0, #4294967295
   b6e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6e46:	b34e      	cbz	r6, b6e9c <__register_exitproc+0x98>
   b6e48:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b6e4c:	b988      	cbnz	r0, b6e72 <__register_exitproc+0x6e>
   b6e4e:	4b1c      	ldr	r3, [pc, #112]	; (b6ec0 <__register_exitproc+0xbc>)
   b6e50:	b923      	cbnz	r3, b6e5c <__register_exitproc+0x58>
   b6e52:	f8d8 0000 	ldr.w	r0, [r8]
   b6e56:	f000 f838 	bl	b6eca <__retarget_lock_release>
   b6e5a:	e7f0      	b.n	b6e3e <__register_exitproc+0x3a>
   b6e5c:	f44f 7084 	mov.w	r0, #264	; 0x108
   b6e60:	f7fd ff66 	bl	b4d30 <malloc>
   b6e64:	2800      	cmp	r0, #0
   b6e66:	d0f4      	beq.n	b6e52 <__register_exitproc+0x4e>
   b6e68:	2300      	movs	r3, #0
   b6e6a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b6e6e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b6e72:	6863      	ldr	r3, [r4, #4]
   b6e74:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b6e78:	2201      	movs	r2, #1
   b6e7a:	409a      	lsls	r2, r3
   b6e7c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b6e80:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b6e84:	4313      	orrs	r3, r2
   b6e86:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b6e8a:	2e02      	cmp	r6, #2
   b6e8c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b6e90:	bf02      	ittt	eq
   b6e92:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b6e96:	4313      	orreq	r3, r2
   b6e98:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b6e9c:	6863      	ldr	r3, [r4, #4]
   b6e9e:	f8d8 0000 	ldr.w	r0, [r8]
   b6ea2:	1c5a      	adds	r2, r3, #1
   b6ea4:	3302      	adds	r3, #2
   b6ea6:	6062      	str	r2, [r4, #4]
   b6ea8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b6eac:	f000 f80e 	bl	b6ecc <__retarget_lock_release_recursive>
   b6eb0:	2000      	movs	r0, #0
   b6eb2:	e7c6      	b.n	b6e42 <__register_exitproc+0x3e>
   b6eb4:	2003e7e8 	.word	0x2003e7e8
   b6eb8:	2003e75c 	.word	0x2003e75c
   b6ebc:	00000000 	.word	0x00000000
   b6ec0:	000b4d31 	.word	0x000b4d31
   b6ec4:	2003e5e8 	.word	0x2003e5e8

000b6ec8 <__retarget_lock_acquire_recursive>:
   b6ec8:	4770      	bx	lr

000b6eca <__retarget_lock_release>:
   b6eca:	4770      	bx	lr

000b6ecc <__retarget_lock_release_recursive>:
   b6ecc:	4770      	bx	lr

000b6ece <link_code_end>:
	...

000b6ed0 <dynalib_user>:
   b6ed0:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b6ee0:	0000 0000 6552 6963 7665 6465 6420 7461     ....Recieved dat
   b6ef0:	2061 7266 6d6f 203b 3025 5832 253a 3230     a from; %02X:%02
   b6f00:	3a58 3025 5832 253a 3230 3a58 3025 5832     X:%02X:%02X:%02X
   b6f10:	253a 3230 2058 000a 7942 6574 3a73 2500     :%02X ..Bytes:.%
   b6f20:	3230 0058 550a 2070 7241 6f72 0077 440a     02X..Up Arrow..D
   b6f30:	776f 206e 7241 6f72 0077 520a 6769 7468     own Arrow..Right
   b6f40:	4120 7272 776f 0a00 654c 7466 4120 7272      Arrow..Left Arr
   b6f50:	776f 7300 6574 7370 7a69 2065 203d 6925     ow.stepsize = %i
   b6f60:	0a00 7562 7474 6e6f 0033 620a 7475 6f74     ..button3..butto
   b6f70:	346e 4d00 7365 6173 6567 203a 7325 0a20     n4.Message: %s .
   b6f80:	3600 3445 3030 3030 2d31 3542 3341 462d     .6E400001-B5A3-F
   b6f90:	3933 2d33 3045 3941 452d 3035 3245 4434     393-E0A9-E50E24D
   b6fa0:	4343 3941 0045 4536 3034 3030 3230 422d     CCA9E.6E400002-B
   b6fb0:	4135 2d33 3346 3339 452d 4130 2d39 3545     5A3-F393-E0A9-E5
   b6fc0:	4530 3432 4344 4143 4539 3600 3445 3030     0E24DCCA9E.6E400
   b6fd0:	3030 2d33 3542 3341 462d 3933 2d33 3045     003-B5A3-F393-E0
   b6fe0:	3941 452d 3035 3245 4434 4343 3941 0045     A9-E50E24DCCA9E.
   b6ff0:	7874 7200 0078 0000                         tx.rx...

000b6ff8 <_ZTVN5spark13EthernetClassE>:
	...
   b7000:	4dff 000b 4df5 000b 4deb 000b 4de1 000b     .M...M...M...M..
   b7010:	4dd5 000b 4dc9 000b 67c5 000b 67cd 000b     .M...M...g...g..
   b7020:	4dbd 000b 4db5 000b 4dab 000b 4da1 000b     .M...M...M...M..
   b7030:	67fd 000b 6977 6972 676e 622e 656c 5300     .g..wiring.ble.S
   b7040:	6174 7472 6420 7369 6f63 6576 6972 676e     tart discovering
   b7050:	7320 7265 6976 6563 2e73 5000 6565 2072      services..Peer 
   b7060:	6564 6976 6563 6920 2073 696d 7373 6e69     device is missin
   b7070:	2167 4600 6961 656c 2064 6f74 6120 7070     g!.Failed to app
   b7080:	6e65 2064 6570 7265 4320 6e65 7274 6c61     end peer Central
   b7090:	6420 7665 6369 2e65 4300 6e6f 656e 7463      device..Connect
   b70a0:	6465 6220 2079 6543 746e 6172 206c 6564     ed by Central de
   b70b0:	6976 6563 002e 6944 6373 6e6f 656e 7463     vice..Disconnect
   b70c0:	6465 6220 2079 6572 6f6d 6574 6420 7665     ed by remote dev
   b70d0:	6369 2e65 4400 7075 696c 6163 6574 2064     ice..Duplicated 
   b70e0:	6863 7261 6361 6574 6972 7473 6369 6320     characteristic c
   b70f0:	6e61 6f6e 2074 6562 6120 6464 6465 002e     annot be added..
   b7100:	6146 6c69 6465 7420 206f 7061 6570 646e     Failed to append
   b7110:	6c20 636f 6c61 6320 6168 6172 7463 7265      local character
   b7120:	7369 6974 2e63 0000                         istic...

000b7128 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b7130:	4f3d 000b 4fa1 000b 5083 000b 4fcb 000b     =O...O...P...O..
   b7140:	4f41 000b                                   AO..

000b7144 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b714c:	4f39 000b 4faf 000b 4f3b 000b 4fd1 000b     9O...O..;O...O..
   b715c:	4f61 000b                                   aO..

000b7160 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b7168:	4f37 000b 4fbd 000b 5755 000b 4fd7 000b     7O...O..UW...O..
   b7178:	4f81 000b                                   .O..

000b717c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b7188:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000b719a <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   b719a:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000b71aa <_ZN8particle7BleUuid9BASE_UUIDE>:
   b71aa:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
   b71ba:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   b71ca:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.
	...

000b71dc <_ZTV9IPAddress>:
	...
   b71e4:	6405 000b 63f5 000b 63f7 000b               .d...c...c..

000b71f0 <_ZTV9USBSerial>:
	...
   b71f8:	64eb 000b 6553 000b 6529 000b 615d 000b     .d..Se..)e..]a..
   b7208:	651b 000b 64ed 000b 64fd 000b 654d 000b     .e...d...d..Me..
   b7218:	650d 000b 64e5 000b                         .e...d..

000b7220 <_ZTV11USARTSerial>:
	...
   b7228:	65f5 000b 6661 000b 6639 000b 615d 000b     .e..af..9f..]a..
   b7238:	6609 000b 6625 000b 6617 000b 6633 000b     .f..%f...f..3f..
   b7248:	65f7 000b 65fb 000b                         .e...e..

000b7250 <_ZTV7TwoWire>:
	...
   b7258:	6699 000b 66e3 000b 66bb 000b 669b 000b     .f...f...f...f..
   b7268:	66c3 000b 66cb 000b 66d3 000b 66db 000b     .f...f...f...f..

000b7278 <_ZTVN5spark9WiFiClassE>:
	...
   b7280:	6767 000b 675d 000b 6753 000b 6715 000b     gg..]g..Sg...g..
   b7290:	6269 000b 6747 000b 67c5 000b 67cd 000b     ib..Gg...g...g..
   b72a0:	673b 000b 6733 000b 6729 000b 671f 000b     ;g..3g..)g...g..
   b72b0:	67fd 000b                                   .g..

000b72b4 <_ZTVN5spark12NetworkClassE>:
	...
   b72bc:	6785 000b 678f 000b 6799 000b 67a3 000b     .g...g...g...g..
   b72cc:	67ad 000b 67b9 000b 67c5 000b 67cd 000b     .g...g...g...g..
   b72dc:	67d5 000b 67e1 000b 67e9 000b 67f3 000b     .g...g...g...g..
   b72ec:	67fd 000b                                   .g..

000b72f0 <_ZSt7nothrow>:
	...

000b72f1 <_ZTSSt19_Sp_make_shared_tag>:
   b72f1:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b7301:	6572 5f64 6174 0067 0000                     red_tag....

000b730c <_ZTISt19_Sp_make_shared_tag>:
   b730c:	734c 000b 72f1 000b                         Ls...r..

000b7314 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b7314:	73ac 000b 7320 000b 73d0 000b               .s.. s...s..

000b7320 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b7320:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b7330:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b7340:	0045 0000                                   E...

000b7344 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b7344:	0000 0000 7314 000b 6b09 000b 6b1d 000b     .....s...k...k..
   b7354:	6cb1 000b 6cb1 000b 6b87 000b 6ac9 000b     .l...l...k...j..
   b7364:	6b6f 000b 6b31 000b 6afb 000b               ok..1k...j..

000b7370 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b7370:	73ac 000b 737c 000b 7314 000b               .s..|s...s..

000b737c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b737c:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b738c:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b739c:	666e 456f 0000 0000                         nfoE....

000b73a4 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b73a4:	0000 0000 7370 000b 6bb1 000b 6bc5 000b     ....ps...k...k..
   b73b4:	6cb1 000b 6cb1 000b 6b87 000b 6ac9 000b     .l...l...k...j..
   b73c4:	6c85 000b 6c11 000b 6bd9 000b               .l...l...k..

000b73d0 <_ZTISt9type_info>:
   b73d0:	734c 000b 73d8 000b                         Ls...s..

000b73d8 <_ZTSSt9type_info>:
   b73d8:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b73e8:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b73f8:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   b7408:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   b7418:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   b7428:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b7438:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b7448:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   b7458:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b7468:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b7479 <link_const_variable_data_end>:
   b7479:	00          	.byte	0x00
	...

000b747c <link_constructors_location>:
   b747c:	000b4529 	.word	0x000b4529
   b7480:	000b4e09 	.word	0x000b4e09
   b7484:	000b4e31 	.word	0x000b4e31
   b7488:	000b614d 	.word	0x000b614d
   b748c:	000b6275 	.word	0x000b6275
   b7490:	000b6285 	.word	0x000b6285
   b7494:	000b62b1 	.word	0x000b62b1
   b7498:	000b6771 	.word	0x000b6771
   b749c:	000b68d5 	.word	0x000b68d5
