
c:/Users/Arjun/Documents/IOT/IOTCapstone/LaserAlignSystem/target/3.2.0/argon/LaserAlignSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003f14  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000b7f30  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  2002fa4c  000b7f34  0000fa4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000ed30  2002fac0  2002fac0  0001fac0  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000b7fa8  000b7fa8  00017fa8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000b7fd0  000b7fd0  00017fd0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0011ac0f  00000000  00000000  00017fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00012c1f  00000000  00000000  00132be3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    000361a1  00000000  00000000  00145802  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002e00  00000000  00000000  0017b9a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00009e80  00000000  00000000  0017e7a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00039e0c  00000000  00000000  00188623  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0003d8b7  00000000  00000000  001c242f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00128740  00000000  00000000  001ffce6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  000082d0  00000000  00000000  00328428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f003 f9af 	bl	b7390 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f003 f9d1 	bl	b73e0 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2002fa4c 	.word	0x2002fa4c
   b4048:	000b7f34 	.word	0x000b7f34
   b404c:	2002fac0 	.word	0x2002fac0
   b4050:	2002fac0 	.word	0x2002fac0
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f002 fcd1 	bl	b6a04 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b7f08 	.word	0x000b7f08
   b407c:	000b7f2c 	.word	0x000b7f2c

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b824 	b.w	b40cc <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 fc09 	bl	b489c <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f002 bc71 	b.w	b6974 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f001 b8eb 	b.w	b526c <malloc>

000b4096 <_Znaj>:
   b4096:	f001 b8e9 	b.w	b526c <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f001 b8ef 	b.w	b527c <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr

000b40ae <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40ae:	b40e      	push	{r1, r2, r3}
   b40b0:	b503      	push	{r0, r1, lr}
   b40b2:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40b4:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40b6:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40ba:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40bc:	f002 fbab 	bl	b6816 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40c0:	b002      	add	sp, #8
   b40c2:	f85d eb04 	ldr.w	lr, [sp], #4
   b40c6:	b003      	add	sp, #12
   b40c8:	4770      	bx	lr
	...

000b40cc <setup>:
bool MoveToState;

bool StartTimer;
unsigned int storedTimer;

void setup() {
   b40cc:	b570      	push	{r4, r5, r6, lr}
   b40ce:	b08e      	sub	sp, #56	; 0x38

    Serial.begin(9600);
   b40d0:	f002 fda0 	bl	b6c14 <_Z16_fetch_usbserialv>
   b40d4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b40d8:	f002 fd90 	bl	b6bfc <_ZN9USBSerial5beginEl>
    delay(3000);
   b40dc:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b40e0:	f002 fc1c 	bl	b691c <delay>
    Serial.printf("Beginning Commands \n");
   b40e4:	f002 fd96 	bl	b6c14 <_Z16_fetch_usbserialv>
   b40e8:	49b5      	ldr	r1, [pc, #724]	; (b43c0 <setup+0x2f4>)
   b40ea:	f7ff ffe0 	bl	b40ae <_ZN5Print6printfEPKcz>

    Serial1.begin(115200);
   b40ee:	f002 ffbd 	bl	b706c <_Z22__fetch_global_Serial1v>
   b40f2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b40f6:	f002 fe09 	bl	b6d0c <_ZN11USARTSerial5beginEm>
    Serial1.printf("AT\r\n");
   b40fa:	f002 ffb7 	bl	b706c <_Z22__fetch_global_Serial1v>
   b40fe:	49b1      	ldr	r1, [pc, #708]	; (b43c4 <setup+0x2f8>)
   b4100:	f7ff ffd5 	bl	b40ae <_ZN5Print6printfEPKcz>
    delay(200);
   b4104:	20c8      	movs	r0, #200	; 0xc8
   b4106:	f002 fc09 	bl	b691c <delay>
    if (Serial1.available() > 0) {
   b410a:	f002 ffaf 	bl	b706c <_Z22__fetch_global_Serial1v>
   b410e:	6803      	ldr	r3, [r0, #0]
   b4110:	691b      	ldr	r3, [r3, #16]
   b4112:	4798      	blx	r3
   b4114:	2800      	cmp	r0, #0
   b4116:	dd19      	ble.n	b414c <setup+0x80>
        Serial.printf("Awaiting Reply\n");
   b4118:	f002 fd7c 	bl	b6c14 <_Z16_fetch_usbserialv>
   b411c:	49aa      	ldr	r1, [pc, #680]	; (b43c8 <setup+0x2fc>)
        reply = Serial1.readStringUntil('\n');
   b411e:	4cab      	ldr	r4, [pc, #684]	; (b43cc <setup+0x300>)
        Serial.printf("Awaiting Reply\n");
   b4120:	f7ff ffc5 	bl	b40ae <_ZN5Print6printfEPKcz>
        reply = Serial1.readStringUntil('\n');
   b4124:	f002 ffa2 	bl	b706c <_Z22__fetch_global_Serial1v>
   b4128:	220a      	movs	r2, #10
   b412a:	4601      	mov	r1, r0
   b412c:	a809      	add	r0, sp, #36	; 0x24
   b412e:	f002 fbb9 	bl	b68a4 <_ZN6Stream15readStringUntilEc>
   b4132:	a909      	add	r1, sp, #36	; 0x24
   b4134:	4620      	mov	r0, r4
   b4136:	f001 f9af 	bl	b5498 <_ZN6StringaSEOS_>
   b413a:	a809      	add	r0, sp, #36	; 0x24
   b413c:	f001 f930 	bl	b53a0 <_ZN6StringD1Ev>
        Serial.printf("Reply: %s\n", reply.c_str());
   b4140:	f002 fd68 	bl	b6c14 <_Z16_fetch_usbserialv>
   b4144:	6822      	ldr	r2, [r4, #0]
   b4146:	49a2      	ldr	r1, [pc, #648]	; (b43d0 <setup+0x304>)
   b4148:	f7ff ffb1 	bl	b40ae <_ZN5Print6printfEPKcz>
    //   Serial.printf("Awaiting Reply from password\n");
    //   reply = Serial1.readStringUntil('\n');
    //   Serial.printf("Reply: %s\n",reply.c_str());
    // }

    Serial1.printf("AT+ADDRESS=%i\r\n", addr); // correct
   b414c:	f002 ff8e 	bl	b706c <_Z22__fetch_global_Serial1v>
   b4150:	4ba0      	ldr	r3, [pc, #640]	; (b43d4 <setup+0x308>)
   b4152:	49a1      	ldr	r1, [pc, #644]	; (b43d8 <setup+0x30c>)
   b4154:	681a      	ldr	r2, [r3, #0]
   b4156:	f7ff ffaa 	bl	b40ae <_ZN5Print6printfEPKcz>
    delay(200);
   b415a:	20c8      	movs	r0, #200	; 0xc8
   b415c:	f002 fbde 	bl	b691c <delay>
    if (Serial1.available() > 0) {
   b4160:	f002 ff84 	bl	b706c <_Z22__fetch_global_Serial1v>
   b4164:	6803      	ldr	r3, [r0, #0]
   b4166:	691b      	ldr	r3, [r3, #16]
   b4168:	4798      	blx	r3
   b416a:	2800      	cmp	r0, #0
   b416c:	dd19      	ble.n	b41a2 <setup+0xd6>
        Serial.printf("Awaiting Reply from address\n");
   b416e:	f002 fd51 	bl	b6c14 <_Z16_fetch_usbserialv>
   b4172:	499a      	ldr	r1, [pc, #616]	; (b43dc <setup+0x310>)
        reply = Serial1.readStringUntil('\n');
   b4174:	4c95      	ldr	r4, [pc, #596]	; (b43cc <setup+0x300>)
        Serial.printf("Awaiting Reply from address\n");
   b4176:	f7ff ff9a 	bl	b40ae <_ZN5Print6printfEPKcz>
        reply = Serial1.readStringUntil('\n');
   b417a:	f002 ff77 	bl	b706c <_Z22__fetch_global_Serial1v>
   b417e:	220a      	movs	r2, #10
   b4180:	4601      	mov	r1, r0
   b4182:	a809      	add	r0, sp, #36	; 0x24
   b4184:	f002 fb8e 	bl	b68a4 <_ZN6Stream15readStringUntilEc>
   b4188:	a909      	add	r1, sp, #36	; 0x24
   b418a:	4620      	mov	r0, r4
   b418c:	f001 f984 	bl	b5498 <_ZN6StringaSEOS_>
   b4190:	a809      	add	r0, sp, #36	; 0x24
   b4192:	f001 f905 	bl	b53a0 <_ZN6StringD1Ev>
        Serial.printf("Reply address: %s\n", reply.c_str());
   b4196:	f002 fd3d 	bl	b6c14 <_Z16_fetch_usbserialv>
   b419a:	6822      	ldr	r2, [r4, #0]
   b419c:	4990      	ldr	r1, [pc, #576]	; (b43e0 <setup+0x314>)
   b419e:	f7ff ff86 	bl	b40ae <_ZN5Print6printfEPKcz>
    }

    Serial1.printf("AT+NETWORKID=%i\r\n", net); // correct
   b41a2:	f002 ff63 	bl	b706c <_Z22__fetch_global_Serial1v>
   b41a6:	4b8f      	ldr	r3, [pc, #572]	; (b43e4 <setup+0x318>)
   b41a8:	498f      	ldr	r1, [pc, #572]	; (b43e8 <setup+0x31c>)
   b41aa:	681a      	ldr	r2, [r3, #0]
   b41ac:	f7ff ff7f 	bl	b40ae <_ZN5Print6printfEPKcz>
    delay(200);
   b41b0:	20c8      	movs	r0, #200	; 0xc8
   b41b2:	f002 fbb3 	bl	b691c <delay>
    if (Serial1.available() > 0) {
   b41b6:	f002 ff59 	bl	b706c <_Z22__fetch_global_Serial1v>
   b41ba:	6803      	ldr	r3, [r0, #0]
   b41bc:	691b      	ldr	r3, [r3, #16]
   b41be:	4798      	blx	r3
   b41c0:	2800      	cmp	r0, #0
   b41c2:	dd19      	ble.n	b41f8 <setup+0x12c>
        Serial.printf("Awaiting Reply from networkid\n");
   b41c4:	f002 fd26 	bl	b6c14 <_Z16_fetch_usbserialv>
   b41c8:	4988      	ldr	r1, [pc, #544]	; (b43ec <setup+0x320>)
        reply = Serial1.readStringUntil('\n');
   b41ca:	4c80      	ldr	r4, [pc, #512]	; (b43cc <setup+0x300>)
        Serial.printf("Awaiting Reply from networkid\n");
   b41cc:	f7ff ff6f 	bl	b40ae <_ZN5Print6printfEPKcz>
        reply = Serial1.readStringUntil('\n');
   b41d0:	f002 ff4c 	bl	b706c <_Z22__fetch_global_Serial1v>
   b41d4:	220a      	movs	r2, #10
   b41d6:	4601      	mov	r1, r0
   b41d8:	a809      	add	r0, sp, #36	; 0x24
   b41da:	f002 fb63 	bl	b68a4 <_ZN6Stream15readStringUntilEc>
   b41de:	a909      	add	r1, sp, #36	; 0x24
   b41e0:	4620      	mov	r0, r4
   b41e2:	f001 f959 	bl	b5498 <_ZN6StringaSEOS_>
   b41e6:	a809      	add	r0, sp, #36	; 0x24
   b41e8:	f001 f8da 	bl	b53a0 <_ZN6StringD1Ev>
        Serial.printf("Reply network: %s\n", reply.c_str());
   b41ec:	f002 fd12 	bl	b6c14 <_Z16_fetch_usbserialv>
   b41f0:	6822      	ldr	r2, [r4, #0]
   b41f2:	497f      	ldr	r1, [pc, #508]	; (b43f0 <setup+0x324>)
   b41f4:	f7ff ff5b 	bl	b40ae <_ZN5Print6printfEPKcz>
    }

    Serial1.printf("AT+ADDRESS?\r\n"); // correct
   b41f8:	f002 ff38 	bl	b706c <_Z22__fetch_global_Serial1v>
   b41fc:	497d      	ldr	r1, [pc, #500]	; (b43f4 <setup+0x328>)
   b41fe:	f7ff ff56 	bl	b40ae <_ZN5Print6printfEPKcz>
    delay(200);
   b4202:	20c8      	movs	r0, #200	; 0xc8
   b4204:	f002 fb8a 	bl	b691c <delay>
    if (Serial1.available() > 0) {
   b4208:	f002 ff30 	bl	b706c <_Z22__fetch_global_Serial1v>
   b420c:	6803      	ldr	r3, [r0, #0]
   b420e:	691b      	ldr	r3, [r3, #16]
   b4210:	4798      	blx	r3
   b4212:	2800      	cmp	r0, #0
   b4214:	dd19      	ble.n	b424a <setup+0x17e>
        Serial.printf("Awaiting Reply\n");
   b4216:	f002 fcfd 	bl	b6c14 <_Z16_fetch_usbserialv>
   b421a:	496b      	ldr	r1, [pc, #428]	; (b43c8 <setup+0x2fc>)
        reply = Serial1.readStringUntil('\n');
   b421c:	4c6b      	ldr	r4, [pc, #428]	; (b43cc <setup+0x300>)
        Serial.printf("Awaiting Reply\n");
   b421e:	f7ff ff46 	bl	b40ae <_ZN5Print6printfEPKcz>
        reply = Serial1.readStringUntil('\n');
   b4222:	f002 ff23 	bl	b706c <_Z22__fetch_global_Serial1v>
   b4226:	220a      	movs	r2, #10
   b4228:	4601      	mov	r1, r0
   b422a:	a809      	add	r0, sp, #36	; 0x24
   b422c:	f002 fb3a 	bl	b68a4 <_ZN6Stream15readStringUntilEc>
   b4230:	a909      	add	r1, sp, #36	; 0x24
   b4232:	4620      	mov	r0, r4
   b4234:	f001 f930 	bl	b5498 <_ZN6StringaSEOS_>
   b4238:	a809      	add	r0, sp, #36	; 0x24
   b423a:	f001 f8b1 	bl	b53a0 <_ZN6StringD1Ev>
        Serial.printf("Reply get address: %s\n", reply.c_str());
   b423e:	f002 fce9 	bl	b6c14 <_Z16_fetch_usbserialv>
   b4242:	6822      	ldr	r2, [r4, #0]
   b4244:	496c      	ldr	r1, [pc, #432]	; (b43f8 <setup+0x32c>)
   b4246:	f7ff ff32 	bl	b40ae <_ZN5Print6printfEPKcz>
    }

    Serial1.printf("AT+NETWORKID?\r\n"); // correct
   b424a:	f002 ff0f 	bl	b706c <_Z22__fetch_global_Serial1v>
   b424e:	496b      	ldr	r1, [pc, #428]	; (b43fc <setup+0x330>)
   b4250:	f7ff ff2d 	bl	b40ae <_ZN5Print6printfEPKcz>
    delay(200);
   b4254:	20c8      	movs	r0, #200	; 0xc8
   b4256:	f002 fb61 	bl	b691c <delay>
    if (Serial1.available() > 0) {
   b425a:	f002 ff07 	bl	b706c <_Z22__fetch_global_Serial1v>
   b425e:	6803      	ldr	r3, [r0, #0]
   b4260:	691b      	ldr	r3, [r3, #16]
   b4262:	4798      	blx	r3
   b4264:	2800      	cmp	r0, #0
   b4266:	dd19      	ble.n	b429c <setup+0x1d0>
        Serial.printf("Awaiting Reply\n");
   b4268:	f002 fcd4 	bl	b6c14 <_Z16_fetch_usbserialv>
   b426c:	4956      	ldr	r1, [pc, #344]	; (b43c8 <setup+0x2fc>)
        reply = Serial1.readStringUntil('\n');
   b426e:	4c57      	ldr	r4, [pc, #348]	; (b43cc <setup+0x300>)
        Serial.printf("Awaiting Reply\n");
   b4270:	f7ff ff1d 	bl	b40ae <_ZN5Print6printfEPKcz>
        reply = Serial1.readStringUntil('\n');
   b4274:	f002 fefa 	bl	b706c <_Z22__fetch_global_Serial1v>
   b4278:	220a      	movs	r2, #10
   b427a:	4601      	mov	r1, r0
   b427c:	a809      	add	r0, sp, #36	; 0x24
   b427e:	f002 fb11 	bl	b68a4 <_ZN6Stream15readStringUntilEc>
   b4282:	a909      	add	r1, sp, #36	; 0x24
   b4284:	4620      	mov	r0, r4
   b4286:	f001 f907 	bl	b5498 <_ZN6StringaSEOS_>
   b428a:	a809      	add	r0, sp, #36	; 0x24
   b428c:	f001 f888 	bl	b53a0 <_ZN6StringD1Ev>
        Serial.printf("Reply get network: %s\n", reply.c_str());
   b4290:	f002 fcc0 	bl	b6c14 <_Z16_fetch_usbserialv>
   b4294:	6822      	ldr	r2, [r4, #0]
   b4296:	495a      	ldr	r1, [pc, #360]	; (b4400 <setup+0x334>)
   b4298:	f7ff ff09 	bl	b40ae <_ZN5Print6printfEPKcz>
    }

    Serial1.printf("AT+CPIN?\r\n"); // correct
   b429c:	f002 fee6 	bl	b706c <_Z22__fetch_global_Serial1v>
   b42a0:	4958      	ldr	r1, [pc, #352]	; (b4404 <setup+0x338>)
   b42a2:	f7ff ff04 	bl	b40ae <_ZN5Print6printfEPKcz>
    delay(500);
   b42a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b42aa:	f002 fb37 	bl	b691c <delay>
    if (Serial1.available() > 0) {
   b42ae:	f002 fedd 	bl	b706c <_Z22__fetch_global_Serial1v>
   b42b2:	6803      	ldr	r3, [r0, #0]
   b42b4:	691b      	ldr	r3, [r3, #16]
   b42b6:	4798      	blx	r3
   b42b8:	2800      	cmp	r0, #0
   b42ba:	dd1e      	ble.n	b42fa <setup+0x22e>
        Serial.printf("Awaiting Reply\n");
   b42bc:	f002 fcaa 	bl	b6c14 <_Z16_fetch_usbserialv>
   b42c0:	4941      	ldr	r1, [pc, #260]	; (b43c8 <setup+0x2fc>)
   b42c2:	f7ff fef4 	bl	b40ae <_ZN5Print6printfEPKcz>
        reply = Serial1.readStringUntil('\n');
   b42c6:	f002 fed1 	bl	b706c <_Z22__fetch_global_Serial1v>
   b42ca:	220a      	movs	r2, #10
   b42cc:	4601      	mov	r1, r0
   b42ce:	a809      	add	r0, sp, #36	; 0x24
   b42d0:	f002 fae8 	bl	b68a4 <_ZN6Stream15readStringUntilEc>
   b42d4:	a909      	add	r1, sp, #36	; 0x24
   b42d6:	483d      	ldr	r0, [pc, #244]	; (b43cc <setup+0x300>)
   b42d8:	f001 f8de 	bl	b5498 <_ZN6StringaSEOS_>
   b42dc:	a809      	add	r0, sp, #36	; 0x24
   b42de:	f001 f85f 	bl	b53a0 <_ZN6StringD1Ev>
        reply.getBytes(buf, 40);
   b42e2:	4949      	ldr	r1, [pc, #292]	; (b4408 <setup+0x33c>)
   b42e4:	4839      	ldr	r0, [pc, #228]	; (b43cc <setup+0x300>)
   b42e6:	2228      	movs	r2, #40	; 0x28
   b42e8:	2300      	movs	r3, #0
   b42ea:	f001 f913 	bl	b5514 <_ZNK6String8getBytesEPhjj>
        Serial.printf("Reply get password: %s\n", (char *)buf);
   b42ee:	f002 fc91 	bl	b6c14 <_Z16_fetch_usbserialv>
   b42f2:	4a45      	ldr	r2, [pc, #276]	; (b4408 <setup+0x33c>)
   b42f4:	4945      	ldr	r1, [pc, #276]	; (b440c <setup+0x340>)
   b42f6:	f7ff feda 	bl	b40ae <_ZN5Print6printfEPKcz>
   

    // pinMode(D2, INPUT);
    // attachInterrupt(D2, getSingleVal, RISING);

    BLE.on();
   b42fa:	f001 fc17 	bl	b5b2c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b42fe:	f001 fc5f 	bl	b5bc0 <_ZNK8particle14BleLocalDevice2onEv>
    BLE.addCharacteristic(txCharacteristic);
   b4302:	f001 fc13 	bl	b5b2c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4306:	4a42      	ldr	r2, [pc, #264]	; (b4410 <setup+0x344>)
   b4308:	4c42      	ldr	r4, [pc, #264]	; (b4414 <setup+0x348>)
   b430a:	4601      	mov	r1, r0
   b430c:	a809      	add	r0, sp, #36	; 0x24
   b430e:	f002 f91d 	bl	b654c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4312:	a809      	add	r0, sp, #36	; 0x24
   b4314:	f001 fcfb 	bl	b5d0e <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(rxCharacteristic);
   b4318:	f001 fc08 	bl	b5b2c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b431c:	4a3e      	ldr	r2, [pc, #248]	; (b4418 <setup+0x34c>)
   b431e:	4601      	mov	r1, r0
   b4320:	a809      	add	r0, sp, #36	; 0x24
   b4322:	f002 f913 	bl	b654c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4326:	a809      	add	r0, sp, #36	; 0x24
   b4328:	f001 fcf1 	bl	b5d0e <_ZN8particle17BleCharacteristicD1Ev>
    data.appendServiceUUID(serviceUuid);
   b432c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b432e:	ad04      	add	r5, sp, #16
   b4330:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b4332:	ad04      	add	r5, sp, #16
   b4334:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4336:	6826      	ldr	r6, [r4, #0]
   b4338:	ac09      	add	r4, sp, #36	; 0x24
   b433a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b433c:	a809      	add	r0, sp, #36	; 0x24
        BleUuid tempUUID(uuid);
   b433e:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4340:	f001 fa6e 	bl	b5820 <_ZNK8particle7BleUuid4typeEv>
   b4344:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b4346:	a809      	add	r0, sp, #36	; 0x24
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4348:	bb8c      	cbnz	r4, b43ae <setup+0x2e2>
            uint16_t uuid16 = tempUUID.shorted();
   b434a:	f001 fa85 	bl	b5858 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b434e:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b4350:	f8ad 000e 	strh.w	r0, [sp, #14]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4354:	2302      	movs	r3, #2
   b4356:	f10d 020e 	add.w	r2, sp, #14
   b435a:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b435c:	482f      	ldr	r0, [pc, #188]	; (b441c <setup+0x350>)
   b435e:	f001 fdfd 	bl	b5f5c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    BLE.advertise(&data);
   b4362:	f001 fbe3 	bl	b5b2c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4366:	2200      	movs	r2, #0
   b4368:	492c      	ldr	r1, [pc, #176]	; (b441c <setup+0x350>)
   b436a:	f001 fc73 	bl	b5c54 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>

    tipStepper.setSpeed(RPM);
   b436e:	482c      	ldr	r0, [pc, #176]	; (b4420 <setup+0x354>)
   b4370:	210a      	movs	r1, #10
   b4372:	f000 fc55 	bl	b4c20 <_ZN7Stepper8setSpeedEl>
    tiltStepper.setSpeed(RPM);
   b4376:	482b      	ldr	r0, [pc, #172]	; (b4424 <setup+0x358>)
   b4378:	210a      	movs	r1, #10
   b437a:	f000 fc51 	bl	b4c20 <_ZN7Stepper8setSpeedEl>

    pinMode(PHOTODIODE, INPUT); // delete this later only for quick testing purposes of photodioide pin on TX side
   b437e:	2100      	movs	r1, #0
   b4380:	2013      	movs	r0, #19
   b4382:	f002 fe2d 	bl	b6fe0 <pinMode>

    pinMode(D3, INPUT); // bit 2
   b4386:	2100      	movs	r1, #0
   b4388:	2003      	movs	r0, #3
   b438a:	f002 fe29 	bl	b6fe0 <pinMode>
    pinMode(D4, INPUT); // bit 1
   b438e:	2100      	movs	r1, #0
   b4390:	2004      	movs	r0, #4
   b4392:	f002 fe25 	bl	b6fe0 <pinMode>
    pinMode(A1, OUTPUT); // reset pd values with a HIGH/LOW SIGNAL to an interrupt ( it will trigger an interrupt on the other side )
   b4396:	2101      	movs	r1, #1
   b4398:	2012      	movs	r0, #18
   b439a:	f002 fe21 	bl	b6fe0 <pinMode>

    ScanToggle = false;
   b439e:	4b22      	ldr	r3, [pc, #136]	; (b4428 <setup+0x35c>)
   b43a0:	2200      	movs	r2, #0
   b43a2:	701a      	strb	r2, [r3, #0]
    MoveToState= true;
   b43a4:	4b21      	ldr	r3, [pc, #132]	; (b442c <setup+0x360>)
   b43a6:	2201      	movs	r2, #1
   b43a8:	701a      	strb	r2, [r3, #0]
}
   b43aa:	b00e      	add	sp, #56	; 0x38
   b43ac:	bd70      	pop	{r4, r5, r6, pc}
   b43ae:	f001 fa55 	bl	b585c <_ZNK8particle7BleUuid8rawBytesEv>
   b43b2:	2300      	movs	r3, #0
   b43b4:	9300      	str	r3, [sp, #0]
   b43b6:	4602      	mov	r2, r0
   b43b8:	2310      	movs	r3, #16
   b43ba:	2107      	movs	r1, #7
   b43bc:	e7ce      	b.n	b435c <setup+0x290>
   b43be:	bf00      	nop
   b43c0:	000b76b8 	.word	0x000b76b8
   b43c4:	000b76cd 	.word	0x000b76cd
   b43c8:	000b76d2 	.word	0x000b76d2
   b43cc:	2002fbb0 	.word	0x2002fbb0
   b43d0:	000b76e2 	.word	0x000b76e2
   b43d4:	2002fa4c 	.word	0x2002fa4c
   b43d8:	000b76ed 	.word	0x000b76ed
   b43dc:	000b76fd 	.word	0x000b76fd
   b43e0:	000b771a 	.word	0x000b771a
   b43e4:	2002fa50 	.word	0x2002fa50
   b43e8:	000b772d 	.word	0x000b772d
   b43ec:	000b773f 	.word	0x000b773f
   b43f0:	000b775e 	.word	0x000b775e
   b43f4:	000b7771 	.word	0x000b7771
   b43f8:	000b777f 	.word	0x000b777f
   b43fc:	000b7796 	.word	0x000b7796
   b4400:	000b77a6 	.word	0x000b77a6
   b4404:	000b77bd 	.word	0x000b77bd
   b4408:	2002fb10 	.word	0x2002fb10
   b440c:	000b77c8 	.word	0x000b77c8
   b4410:	2003e6a4 	.word	0x2003e6a4
   b4414:	2002fad0 	.word	0x2002fad0
   b4418:	2002fbc0 	.word	0x2002fbc0
   b441c:	2002fb40 	.word	0x2002fb40
   b4420:	2003e678 	.word	0x2003e678
   b4424:	2003e64c 	.word	0x2003e64c
   b4428:	2002fac1 	.word	0x2002fac1
   b442c:	2002fac0 	.word	0x2002fac0

000b4430 <_Z10ScanSpiralv>:

    // Serial.printf("\n");
    // Serial.printf("Message: %s \n", (char *)data);
}

void ScanSpiral() {
   b4430:	b5f0      	push	{r4, r5, r6, r7, lr}
    int i;
    int motorSpeed;

    for (i = 0; i < totalSteps; i++) {
        motorSpeed = map(i, 0, totalSteps, 3, 10);
        tiltStepper.setSpeed(motorSpeed);
   b4432:	4d1e      	ldr	r5, [pc, #120]	; (b44ac <_Z10ScanSpiralv+0x7c>)
        tipStepper.setSpeed(motorSpeed);
   b4434:	4e1e      	ldr	r6, [pc, #120]	; (b44b0 <_Z10ScanSpiralv+0x80>)
void ScanSpiral() {
   b4436:	b085      	sub	sp, #20
    for (i = 0; i < totalSteps; i++) {
   b4438:	2400      	movs	r4, #0
        motorSpeed = map(i, 0, totalSteps, 3, 10);
   b443a:	270a      	movs	r7, #10
   b443c:	2303      	movs	r3, #3
   b443e:	2232      	movs	r2, #50	; 0x32
   b4440:	2100      	movs	r1, #0
   b4442:	9700      	str	r7, [sp, #0]
   b4444:	4620      	mov	r0, r4
   b4446:	f002 fa5d 	bl	b6904 <_Z3mapiiiii>
   b444a:	4601      	mov	r1, r0
        tiltStepper.setSpeed(motorSpeed);
   b444c:	9003      	str	r0, [sp, #12]
   b444e:	4628      	mov	r0, r5
   b4450:	f000 fbe6 	bl	b4c20 <_ZN7Stepper8setSpeedEl>
        tipStepper.setSpeed(motorSpeed);
   b4454:	9903      	ldr	r1, [sp, #12]
   b4456:	4630      	mov	r0, r6
   b4458:	f000 fbe2 	bl	b4c20 <_ZN7Stepper8setSpeedEl>
        if (i % 2 == 0) {
   b445c:	07e3      	lsls	r3, r4, #31
   b445e:	d41d      	bmi.n	b449c <_Z10ScanSpiralv+0x6c>
            tiltStepper.step(i);
   b4460:	4621      	mov	r1, r4
   b4462:	4628      	mov	r0, r5
   b4464:	f000 fcae 	bl	b4dc4 <_ZN7Stepper4stepEi>
            tipStepper.step(i);
   b4468:	4621      	mov	r1, r4
        }
        if (i % 2 == 1) {
            tiltStepper.step(-i);
            tipStepper.step(-i);
   b446a:	4630      	mov	r0, r6
    for (i = 0; i < totalSteps; i++) {
   b446c:	3401      	adds	r4, #1
            tipStepper.step(-i);
   b446e:	f000 fca9 	bl	b4dc4 <_ZN7Stepper4stepEi>
    for (i = 0; i < totalSteps; i++) {
   b4472:	2c32      	cmp	r4, #50	; 0x32
   b4474:	d1e2      	bne.n	b443c <_Z10ScanSpiralv+0xc>
        }
    }
    tiltStepper.setSpeed(RPM);
   b4476:	480d      	ldr	r0, [pc, #52]	; (b44ac <_Z10ScanSpiralv+0x7c>)
   b4478:	210a      	movs	r1, #10
   b447a:	f000 fbd1 	bl	b4c20 <_ZN7Stepper8setSpeedEl>
    tiltStepper.setSpeed(RPM);
   b447e:	480b      	ldr	r0, [pc, #44]	; (b44ac <_Z10ScanSpiralv+0x7c>)
   b4480:	210a      	movs	r1, #10
   b4482:	f000 fbcd 	bl	b4c20 <_ZN7Stepper8setSpeedEl>
    tiltStepper.step(totalSteps / 2);
   b4486:	4809      	ldr	r0, [pc, #36]	; (b44ac <_Z10ScanSpiralv+0x7c>)
   b4488:	2119      	movs	r1, #25
   b448a:	f000 fc9b 	bl	b4dc4 <_ZN7Stepper4stepEi>
    tipStepper.step(totalSteps / 2);
   b448e:	4808      	ldr	r0, [pc, #32]	; (b44b0 <_Z10ScanSpiralv+0x80>)
   b4490:	2119      	movs	r1, #25
}
   b4492:	b005      	add	sp, #20
   b4494:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    tipStepper.step(totalSteps / 2);
   b4498:	f000 bc94 	b.w	b4dc4 <_ZN7Stepper4stepEi>
            tiltStepper.step(-i);
   b449c:	4261      	negs	r1, r4
   b449e:	4628      	mov	r0, r5
   b44a0:	9103      	str	r1, [sp, #12]
   b44a2:	f000 fc8f 	bl	b4dc4 <_ZN7Stepper4stepEi>
            tipStepper.step(-i);
   b44a6:	9903      	ldr	r1, [sp, #12]
   b44a8:	e7df      	b.n	b446a <_Z10ScanSpiralv+0x3a>
   b44aa:	bf00      	nop
   b44ac:	2003e64c 	.word	0x2003e64c
   b44b0:	2003e678 	.word	0x2003e678

000b44b4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void onDataReceived(const uint8_t *data, size_t len, const BlePeerDevice &peer, void *context) {
   b44b4:	b538      	push	{r3, r4, r5, lr}
    if (data[0] == 0x21 && data[1] == 0x42 && data[2] == 0x35 && data[3] == 0x31) {
   b44b6:	7803      	ldrb	r3, [r0, #0]
   b44b8:	2b21      	cmp	r3, #33	; 0x21
void onDataReceived(const uint8_t *data, size_t len, const BlePeerDevice &peer, void *context) {
   b44ba:	4604      	mov	r4, r0
    if (data[0] == 0x21 && data[1] == 0x42 && data[2] == 0x35 && data[3] == 0x31) {
   b44bc:	d110      	bne.n	b44e0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c>
   b44be:	7843      	ldrb	r3, [r0, #1]
   b44c0:	2b42      	cmp	r3, #66	; 0x42
   b44c2:	d111      	bne.n	b44e8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x34>
   b44c4:	7883      	ldrb	r3, [r0, #2]
   b44c6:	2b35      	cmp	r3, #53	; 0x35
   b44c8:	d124      	bne.n	b4514 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x60>
   b44ca:	78c3      	ldrb	r3, [r0, #3]
   b44cc:	2b31      	cmp	r3, #49	; 0x31
   b44ce:	d121      	bne.n	b4514 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x60>
        tipStepper.step(stepSize);
   b44d0:	4b38      	ldr	r3, [pc, #224]	; (b45b4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x100>)
   b44d2:	4839      	ldr	r0, [pc, #228]	; (b45b8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x104>)
   b44d4:	6819      	ldr	r1, [r3, #0]
   b44d6:	f000 fc75 	bl	b4dc4 <_ZN7Stepper4stepEi>
    if (data[0] == 0x21 && data[1] == 0x42 && data[2] == 0x36 && data[3] == 0x31) {
   b44da:	7823      	ldrb	r3, [r4, #0]
   b44dc:	2b21      	cmp	r3, #33	; 0x21
   b44de:	d000      	beq.n	b44e2 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e>
}
   b44e0:	bd38      	pop	{r3, r4, r5, pc}
    if (data[0] == 0x21 && data[1] == 0x42 && data[2] == 0x36 && data[3] == 0x31) {
   b44e2:	7863      	ldrb	r3, [r4, #1]
   b44e4:	2b42      	cmp	r3, #66	; 0x42
   b44e6:	d015      	beq.n	b4514 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x60>
    if (data[0] == 0x21 && data[1] == 0x42 && data[2] == 0x31 && data[3] == 0x31) {
   b44e8:	7863      	ldrb	r3, [r4, #1]
   b44ea:	2b42      	cmp	r3, #66	; 0x42
   b44ec:	d1f8      	bne.n	b44e0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c>
   b44ee:	78a3      	ldrb	r3, [r4, #2]
   b44f0:	2b31      	cmp	r3, #49	; 0x31
   b44f2:	d142      	bne.n	b457a <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xc6>
   b44f4:	78e2      	ldrb	r2, [r4, #3]
   b44f6:	2a31      	cmp	r2, #49	; 0x31
   b44f8:	d103      	bne.n	b4502 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4e>
        stepSize++;
   b44fa:	492e      	ldr	r1, [pc, #184]	; (b45b4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x100>)
   b44fc:	680a      	ldr	r2, [r1, #0]
   b44fe:	3201      	adds	r2, #1
   b4500:	600a      	str	r2, [r1, #0]
    if (data[0] == 0x21 && data[1] == 0x42 && data[2] == 0x33 && data[3] == 0x31) {
   b4502:	2b33      	cmp	r3, #51	; 0x33
   b4504:	d14c      	bne.n	b45a0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xec>
   b4506:	78e3      	ldrb	r3, [r4, #3]
   b4508:	2b31      	cmp	r3, #49	; 0x31
   b450a:	d1e9      	bne.n	b44e0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c>
        ScanToggle = true;
   b450c:	4b2b      	ldr	r3, [pc, #172]	; (b45bc <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x108>)
   b450e:	2201      	movs	r2, #1
   b4510:	701a      	strb	r2, [r3, #0]
    if (data[0] == 0x21 && data[1] == 0x42 && data[2] == 0x34 && data[3] == 0x31) {
   b4512:	e7e5      	b.n	b44e0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c>
    if (data[0] == 0x21 && data[1] == 0x42 && data[2] == 0x36 && data[3] == 0x31) {
   b4514:	78a3      	ldrb	r3, [r4, #2]
   b4516:	2b36      	cmp	r3, #54	; 0x36
   b4518:	d10e      	bne.n	b4538 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x84>
   b451a:	78e3      	ldrb	r3, [r4, #3]
   b451c:	2b31      	cmp	r3, #49	; 0x31
   b451e:	d10b      	bne.n	b4538 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x84>
        tipStepper.step(-stepSize);
   b4520:	4b24      	ldr	r3, [pc, #144]	; (b45b4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x100>)
   b4522:	4825      	ldr	r0, [pc, #148]	; (b45b8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x104>)
   b4524:	6819      	ldr	r1, [r3, #0]
   b4526:	4249      	negs	r1, r1
   b4528:	f000 fc4c 	bl	b4dc4 <_ZN7Stepper4stepEi>
    if (data[0] == 0x21 && data[1] == 0x42 && data[2] == 0x38 && data[3] == 0x31) {
   b452c:	7823      	ldrb	r3, [r4, #0]
   b452e:	2b21      	cmp	r3, #33	; 0x21
   b4530:	d1d6      	bne.n	b44e0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c>
   b4532:	7863      	ldrb	r3, [r4, #1]
   b4534:	2b42      	cmp	r3, #66	; 0x42
   b4536:	d1d7      	bne.n	b44e8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x34>
   b4538:	78a3      	ldrb	r3, [r4, #2]
   b453a:	2b38      	cmp	r3, #56	; 0x38
   b453c:	d10e      	bne.n	b455c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa8>
   b453e:	78e3      	ldrb	r3, [r4, #3]
   b4540:	2b31      	cmp	r3, #49	; 0x31
   b4542:	d10b      	bne.n	b455c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xa8>
        tiltStepper.step(-stepSize);
   b4544:	4b1b      	ldr	r3, [pc, #108]	; (b45b4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x100>)
   b4546:	481e      	ldr	r0, [pc, #120]	; (b45c0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x10c>)
   b4548:	6819      	ldr	r1, [r3, #0]
   b454a:	4249      	negs	r1, r1
   b454c:	f000 fc3a 	bl	b4dc4 <_ZN7Stepper4stepEi>
    if (data[0] == 0x21 && data[1] == 0x42 && data[2] == 0x37 && data[3] == 0x31) {
   b4550:	7823      	ldrb	r3, [r4, #0]
   b4552:	2b21      	cmp	r3, #33	; 0x21
   b4554:	d1c4      	bne.n	b44e0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c>
   b4556:	7863      	ldrb	r3, [r4, #1]
   b4558:	2b42      	cmp	r3, #66	; 0x42
   b455a:	d1c5      	bne.n	b44e8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x34>
   b455c:	78a3      	ldrb	r3, [r4, #2]
   b455e:	2b37      	cmp	r3, #55	; 0x37
   b4560:	d1c2      	bne.n	b44e8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x34>
   b4562:	78e3      	ldrb	r3, [r4, #3]
   b4564:	2b31      	cmp	r3, #49	; 0x31
   b4566:	d1bf      	bne.n	b44e8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x34>
        tiltStepper.step(stepSize);
   b4568:	4b12      	ldr	r3, [pc, #72]	; (b45b4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x100>)
   b456a:	4815      	ldr	r0, [pc, #84]	; (b45c0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x10c>)
   b456c:	6819      	ldr	r1, [r3, #0]
   b456e:	f000 fc29 	bl	b4dc4 <_ZN7Stepper4stepEi>
    if (data[0] == 0x21 && data[1] == 0x42 && data[2] == 0x31 && data[3] == 0x31) {
   b4572:	7823      	ldrb	r3, [r4, #0]
   b4574:	2b21      	cmp	r3, #33	; 0x21
   b4576:	d0b7      	beq.n	b44e8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x34>
   b4578:	e7b2      	b.n	b44e0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c>
    if (data[0] == 0x21 && data[1] == 0x42 && data[2] == 0x32 && data[3] == 0x31) {
   b457a:	2b32      	cmp	r3, #50	; 0x32
   b457c:	d1c1      	bne.n	b4502 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4e>
   b457e:	78e2      	ldrb	r2, [r4, #3]
   b4580:	2a31      	cmp	r2, #49	; 0x31
   b4582:	d10d      	bne.n	b45a0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xec>
        stepSize--;
   b4584:	480b      	ldr	r0, [pc, #44]	; (b45b4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x100>)
   b4586:	6802      	ldr	r2, [r0, #0]
   b4588:	2101      	movs	r1, #1
   b458a:	3a01      	subs	r2, #1
   b458c:	2a00      	cmp	r2, #0
   b458e:	bfcc      	ite	gt
   b4590:	4615      	movgt	r5, r2
   b4592:	460d      	movle	r5, r1
        StartTimer = true;
   b4594:	4a0b      	ldr	r2, [pc, #44]	; (b45c4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x110>)
        stepSize--;
   b4596:	6005      	str	r5, [r0, #0]
        StartTimer = true;
   b4598:	7011      	strb	r1, [r2, #0]
    if (data[0] == 0x21 && data[1] == 0x42 && data[2] == 0x33 && data[3] == 0x31) {
   b459a:	7822      	ldrb	r2, [r4, #0]
   b459c:	2a21      	cmp	r2, #33	; 0x21
   b459e:	d19f      	bne.n	b44e0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c>
    if (data[0] == 0x21 && data[1] == 0x42 && data[2] == 0x34 && data[3] == 0x31) {
   b45a0:	2b34      	cmp	r3, #52	; 0x34
   b45a2:	d19d      	bne.n	b44e0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c>
   b45a4:	78e3      	ldrb	r3, [r4, #3]
   b45a6:	2b31      	cmp	r3, #49	; 0x31
   b45a8:	d19a      	bne.n	b44e0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c>
}
   b45aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        ScanSpiral();
   b45ae:	f7ff bf3f 	b.w	b4430 <_Z10ScanSpiralv>
   b45b2:	bf00      	nop
   b45b4:	2002fb0c 	.word	0x2002fb0c
   b45b8:	2003e678 	.word	0x2003e678
   b45bc:	2002fac1 	.word	0x2002fac1
   b45c0:	2003e64c 	.word	0x2003e64c
   b45c4:	2002fac2 	.word	0x2002fac2

000b45c8 <_Z4Scanv>:
    currentX = currentX + (-totalHorizontalSteps / 2);
    currentY = currentY + (totalVerticalSteps / 2);
    Serial.printf("current x = %i , currentY = %i\n", currentX, currentY);
}

void Scan() {
   b45c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int verticalCounter;
    bool ScanComplete;
    n = 1;
    horizontalCounter = 0;
    verticalCounter = 0;
    currentX = 0;
   b45cc:	4e60      	ldr	r6, [pc, #384]	; (b4750 <_Z4Scanv+0x188>)
    currentY = 0;
   b45ce:	4d61      	ldr	r5, [pc, #388]	; (b4754 <_Z4Scanv+0x18c>)

    n = n * -1;
   b45d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; b4780 <_Z4Scanv+0x1b8>
  
    tiltStepper.step(totalHorizontalSteps / 2); // move to the left from current position
   b45d4:	4860      	ldr	r0, [pc, #384]	; (b4758 <_Z4Scanv+0x190>)
    digitalWrite(A1, LOW);                      // reset pin for next interrupt
    currentX = totalHorizontalSteps / 2;
    currentY = totalVerticalSteps / 2;
    
    Serial1.printf("AT+SEND=888,1,5\r\n");
    startTimer1 = micros(); 
   b45d6:	f8df 91ac 	ldr.w	r9, [pc, #428]	; b4784 <_Z4Scanv+0x1bc>

        if (micros() - stepTimer > 100) {

            if (horizontalCounter <= totalHorizontalSteps) {
                stepTimer = micros();
                storedTimer= stepTimer-startTimer1;
   b45da:	f8df a198 	ldr.w	sl, [pc, #408]	; b4774 <_Z4Scanv+0x1ac>
    currentX = 0;
   b45de:	2700      	movs	r7, #0
    n = n * -1;
   b45e0:	f04f 33ff 	mov.w	r3, #4294967295
    tiltStepper.step(totalHorizontalSteps / 2); // move to the left from current position
   b45e4:	2119      	movs	r1, #25
    n = n * -1;
   b45e6:	f8c8 3000 	str.w	r3, [r8]
    currentX = 0;
   b45ea:	6037      	str	r7, [r6, #0]
    currentY = 0;
   b45ec:	602f      	str	r7, [r5, #0]
    tiltStepper.step(totalHorizontalSteps / 2); // move to the left from current position
   b45ee:	f000 fbe9 	bl	b4dc4 <_ZN7Stepper4stepEi>
    tipStepper.step(totalVerticalSteps / 2);    // move upwards from current position
   b45f2:	485a      	ldr	r0, [pc, #360]	; (b475c <_Z4Scanv+0x194>)
   b45f4:	2119      	movs	r1, #25
   b45f6:	f000 fbe5 	bl	b4dc4 <_ZN7Stepper4stepEi>
    digitalWrite(A1, HIGH);                     // trigger an interrupt to clear PD val
   b45fa:	2101      	movs	r1, #1
   b45fc:	2012      	movs	r0, #18
   b45fe:	f002 fd00 	bl	b7002 <digitalWrite>
    digitalWrite(A1, LOW);                      // reset pin for next interrupt
   b4602:	4639      	mov	r1, r7
   b4604:	2012      	movs	r0, #18
   b4606:	f002 fcfc 	bl	b7002 <digitalWrite>
    currentX = totalHorizontalSteps / 2;
   b460a:	2319      	movs	r3, #25
   b460c:	6033      	str	r3, [r6, #0]
    currentY = totalVerticalSteps / 2;
   b460e:	602b      	str	r3, [r5, #0]
    Serial1.printf("AT+SEND=888,1,5\r\n");
   b4610:	f002 fd2c 	bl	b706c <_Z22__fetch_global_Serial1v>
   b4614:	4952      	ldr	r1, [pc, #328]	; (b4760 <_Z4Scanv+0x198>)
   b4616:	f7ff fd4a 	bl	b40ae <_ZN5Print6printfEPKcz>
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b461a:	f000 fc4b 	bl	b4eb4 <HAL_Timer_Get_Micro_Seconds>
    startTimer1 = micros(); 
   b461e:	f8c9 0000 	str.w	r0, [r9]
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b4622:	4850      	ldr	r0, [pc, #320]	; (b4764 <_Z4Scanv+0x19c>)
   b4624:	f000 fc3e 	bl	b4ea4 <HAL_Delay_Microseconds>
    Serial.printf("current x = %i , currentY = %i\n", currentX, currentY);
   b4628:	f002 faf4 	bl	b6c14 <_Z16_fetch_usbserialv>
   b462c:	682b      	ldr	r3, [r5, #0]
   b462e:	6832      	ldr	r2, [r6, #0]
   b4630:	494d      	ldr	r1, [pc, #308]	; (b4768 <_Z4Scanv+0x1a0>)
   b4632:	f7ff fd3c 	bl	b40ae <_ZN5Print6printfEPKcz>
    horizontalCounter = 0;
   b4636:	46bb      	mov	fp, r7
    verticalCounter = 0;
   b4638:	9701      	str	r7, [sp, #4]
                tiltStepper.step(1 * n);
                currentX = currentX + (1 * n);
                stepperCounter++;
   b463a:	4f4c      	ldr	r7, [pc, #304]	; (b476c <_Z4Scanv+0x1a4>)
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b463c:	f000 fc3a 	bl	b4eb4 <HAL_Timer_Get_Micro_Seconds>
        if (micros() - stepTimer > 100) {
   b4640:	1b00      	subs	r0, r0, r4
   b4642:	2864      	cmp	r0, #100	; 0x64
   b4644:	d928      	bls.n	b4698 <_Z4Scanv+0xd0>
            if (horizontalCounter <= totalHorizontalSteps) {
   b4646:	f1bb 0f32 	cmp.w	fp, #50	; 0x32
   b464a:	dc23      	bgt.n	b4694 <_Z4Scanv+0xcc>
   b464c:	f000 fc32 	bl	b4eb4 <HAL_Timer_Get_Micro_Seconds>
                storedTimer= stepTimer-startTimer1;
   b4650:	f8d9 1000 	ldr.w	r1, [r9]
   b4654:	1a41      	subs	r1, r0, r1
   b4656:	f8ca 1000 	str.w	r1, [sl]
   b465a:	4604      	mov	r4, r0
                tiltStepper.step(1 * n);
   b465c:	f8d8 1000 	ldr.w	r1, [r8]
   b4660:	483d      	ldr	r0, [pc, #244]	; (b4758 <_Z4Scanv+0x190>)
   b4662:	f000 fbaf 	bl	b4dc4 <_ZN7Stepper4stepEi>
                currentX = currentX + (1 * n);
   b4666:	6830      	ldr	r0, [r6, #0]
   b4668:	f8d8 1000 	ldr.w	r1, [r8]
                stepperArray[stepperCounter][0] = storedTimer;
   b466c:	4b40      	ldr	r3, [pc, #256]	; (b4770 <_Z4Scanv+0x1a8>)
   b466e:	f8da 2000 	ldr.w	r2, [sl]
                currentX = currentX + (1 * n);
   b4672:	4408      	add	r0, r1
                stepperCounter++;
   b4674:	6839      	ldr	r1, [r7, #0]
                currentX = currentX + (1 * n);
   b4676:	6030      	str	r0, [r6, #0]
                stepperCounter++;
   b4678:	3101      	adds	r1, #1
                stepperArray[stepperCounter][0] = storedTimer;
   b467a:	f04f 0c0c 	mov.w	ip, #12
                stepperCounter++;
   b467e:	6039      	str	r1, [r7, #0]
                stepperArray[stepperCounter][0] = storedTimer;
   b4680:	fb0c f101 	mul.w	r1, ip, r1
   b4684:	eb03 0c01 	add.w	ip, r3, r1
   b4688:	505a      	str	r2, [r3, r1]
                stepperArray[stepperCounter][1] = currentX;
                stepperArray[stepperCounter][2] = currentY;
   b468a:	6829      	ldr	r1, [r5, #0]
                stepperArray[stepperCounter][1] = currentX;
   b468c:	f8cc 0004 	str.w	r0, [ip, #4]
                stepperArray[stepperCounter][2] = currentY;
   b4690:	f8cc 1008 	str.w	r1, [ip, #8]
            }

            horizontalCounter++;
   b4694:	f10b 0b01 	add.w	fp, fp, #1
        }
        if (horizontalCounter == totalHorizontalSteps) {
   b4698:	f1bb 0f32 	cmp.w	fp, #50	; 0x32
   b469c:	d127      	bne.n	b46ee <_Z4Scanv+0x126>
   b469e:	f000 fc09 	bl	b4eb4 <HAL_Timer_Get_Micro_Seconds>
            stepTimer = micros();
            storedTimer= stepTimer-startTimer1;
   b46a2:	f8d9 3000 	ldr.w	r3, [r9]
            tipStepper.step(-1);
   b46a6:	f04f 31ff 	mov.w	r1, #4294967295
            storedTimer= stepTimer-startTimer1;
   b46aa:	1ac3      	subs	r3, r0, r3
   b46ac:	4604      	mov	r4, r0
            tipStepper.step(-1);
   b46ae:	482b      	ldr	r0, [pc, #172]	; (b475c <_Z4Scanv+0x194>)
            storedTimer= stepTimer-startTimer1;
   b46b0:	f8ca 3000 	str.w	r3, [sl]
            tipStepper.step(-1);
   b46b4:	f000 fb86 	bl	b4dc4 <_ZN7Stepper4stepEi>
            currentY = currentY - 1;
            stepperCounter++;
   b46b8:	683b      	ldr	r3, [r7, #0]
            stepperArray[stepperCounter][0] = storedTimer;
   b46ba:	4a2d      	ldr	r2, [pc, #180]	; (b4770 <_Z4Scanv+0x1a8>)
            currentY = currentY - 1;
   b46bc:	6829      	ldr	r1, [r5, #0]
            stepperCounter++;
   b46be:	3301      	adds	r3, #1
            stepperArray[stepperCounter][0] = storedTimer;
   b46c0:	200c      	movs	r0, #12
            stepperCounter++;
   b46c2:	603b      	str	r3, [r7, #0]
            stepperArray[stepperCounter][0] = storedTimer;
   b46c4:	4343      	muls	r3, r0
   b46c6:	f8da 0000 	ldr.w	r0, [sl]
   b46ca:	50d0      	str	r0, [r2, r3]
   b46cc:	eb02 0e03 	add.w	lr, r2, r3
            stepperArray[stepperCounter][1] = currentX;
   b46d0:	6833      	ldr	r3, [r6, #0]
            currentY = currentY - 1;
   b46d2:	3901      	subs	r1, #1
            stepperArray[stepperCounter][2] = currentY;
   b46d4:	e9ce 3101 	strd	r3, r1, [lr, #4]
            horizontalCounter = 0;
            n = n * -1;
   b46d8:	f8d8 3000 	ldr.w	r3, [r8]
            currentY = currentY - 1;
   b46dc:	6029      	str	r1, [r5, #0]
            n = n * -1;
   b46de:	425b      	negs	r3, r3
   b46e0:	f8c8 3000 	str.w	r3, [r8]
            verticalCounter++;
   b46e4:	9b01      	ldr	r3, [sp, #4]
   b46e6:	3301      	adds	r3, #1
   b46e8:	9301      	str	r3, [sp, #4]
            horizontalCounter = 0;
   b46ea:	f04f 0b00 	mov.w	fp, #0
    while (ScanComplete == false) {
   b46ee:	9b01      	ldr	r3, [sp, #4]
   b46f0:	2b32      	cmp	r3, #50	; 0x32
   b46f2:	d1a3      	bne.n	b463c <_Z4Scanv+0x74>
        if (verticalCounter == totalVerticalSteps) {
            ScanComplete = true;
        }
    }

    tiltStepper.step(-totalHorizontalSteps / 2); // move to the right to reset to current position
   b46f4:	4818      	ldr	r0, [pc, #96]	; (b4758 <_Z4Scanv+0x190>)
    tipStepper.step(totalVerticalSteps / 2);     // move downwards to reset to current position
    storedTimer= stepTimer-startTimer1;
   b46f6:	4f1f      	ldr	r7, [pc, #124]	; (b4774 <_Z4Scanv+0x1ac>)
    tiltStepper.step(-totalHorizontalSteps / 2); // move to the right to reset to current position
   b46f8:	f06f 0118 	mvn.w	r1, #24
   b46fc:	f000 fb62 	bl	b4dc4 <_ZN7Stepper4stepEi>
    tipStepper.step(totalVerticalSteps / 2);     // move downwards to reset to current position
   b4700:	2119      	movs	r1, #25
   b4702:	4816      	ldr	r0, [pc, #88]	; (b475c <_Z4Scanv+0x194>)
   b4704:	f000 fb5e 	bl	b4dc4 <_ZN7Stepper4stepEi>
    currentX = currentX + (-totalHorizontalSteps / 2);
   b4708:	6833      	ldr	r3, [r6, #0]
    storedTimer= stepTimer-startTimer1;
   b470a:	f8d9 0000 	ldr.w	r0, [r9]
    currentX = currentX + (-totalHorizontalSteps / 2);
   b470e:	3b19      	subs	r3, #25
   b4710:	6033      	str	r3, [r6, #0]
    currentY = currentY + (totalVerticalSteps / 2);
   b4712:	682b      	ldr	r3, [r5, #0]
    storedTimer= stepTimer-startTimer1;
   b4714:	1a24      	subs	r4, r4, r0
    currentY = currentY + (totalVerticalSteps / 2);
   b4716:	3319      	adds	r3, #25
   b4718:	602b      	str	r3, [r5, #0]
    storedTimer= stepTimer-startTimer1;
   b471a:	603c      	str	r4, [r7, #0]
   b471c:	f000 fbca 	bl	b4eb4 <HAL_Timer_Get_Micro_Seconds>
    endTimer1 = micros();
    stepperCounter++;
   b4720:	4a12      	ldr	r2, [pc, #72]	; (b476c <_Z4Scanv+0x1a4>)
    endTimer1 = micros();
   b4722:	4b15      	ldr	r3, [pc, #84]	; (b4778 <_Z4Scanv+0x1b0>)
    stepperArray[stepperCounter][0] = storedTimer;
   b4724:	4912      	ldr	r1, [pc, #72]	; (b4770 <_Z4Scanv+0x1a8>)
    endTimer1 = micros();
   b4726:	6018      	str	r0, [r3, #0]
    stepperCounter++;
   b4728:	6813      	ldr	r3, [r2, #0]
    stepperArray[stepperCounter][0] = storedTimer;
   b472a:	6838      	ldr	r0, [r7, #0]
    stepperCounter++;
   b472c:	3301      	adds	r3, #1
   b472e:	6013      	str	r3, [r2, #0]
    stepperArray[stepperCounter][0] = storedTimer;
   b4730:	220c      	movs	r2, #12
   b4732:	4353      	muls	r3, r2
   b4734:	18ca      	adds	r2, r1, r3
   b4736:	50c8      	str	r0, [r1, r3]
    stepperArray[stepperCounter][1] = currentX;
   b4738:	6833      	ldr	r3, [r6, #0]
   b473a:	6053      	str	r3, [r2, #4]
    stepperArray[stepperCounter][2] = currentY;
   b473c:	682b      	ldr	r3, [r5, #0]
   b473e:	6093      	str	r3, [r2, #8]
    Serial1.printf("AT+SEND=888,1,9\r\n");
   b4740:	f002 fc94 	bl	b706c <_Z22__fetch_global_Serial1v>
   b4744:	490d      	ldr	r1, [pc, #52]	; (b477c <_Z4Scanv+0x1b4>)
   b4746:	f7ff fcb2 	bl	b40ae <_ZN5Print6printfEPKcz>
    // Serial.printf("current x = %i , currentY = %i\n", currentX, currentY);
}
   b474a:	b003      	add	sp, #12
   b474c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4750:	2002fb38 	.word	0x2002fb38
   b4754:	2002fb3c 	.word	0x2002fb3c
   b4758:	2003e64c 	.word	0x2003e64c
   b475c:	2003e678 	.word	0x2003e678
   b4760:	000b781f 	.word	0x000b781f
   b4764:	001861d5 	.word	0x001861d5
   b4768:	000b77ff 	.word	0x000b77ff
   b476c:	2003e644 	.word	0x2003e644
   b4770:	2002fbe4 	.word	0x2002fbe4
   b4774:	2003e648 	.word	0x2003e648
   b4778:	2002fb58 	.word	0x2002fb58
   b477c:	000b7831 	.word	0x000b7831
   b4780:	2002fb5c 	.word	0x2002fb5c
   b4784:	2002fbe0 	.word	0x2002fbe0

000b4788 <_Z12goTOsinglePDv>:
    Serial.printf("singleX %i, singleY %i\n", singleX, singleY);
    // pdDirection = n;
}


void goTOsinglePD() {
   b4788:	b538      	push	{r3, r4, r5, lr}
    tiltStepper.step(singleX);
   b478a:	4c09      	ldr	r4, [pc, #36]	; (b47b0 <_Z12goTOsinglePDv+0x28>)
    tipStepper.step(singleY);
   b478c:	4d09      	ldr	r5, [pc, #36]	; (b47b4 <_Z12goTOsinglePDv+0x2c>)
    tiltStepper.step(singleX);
   b478e:	6821      	ldr	r1, [r4, #0]
   b4790:	4809      	ldr	r0, [pc, #36]	; (b47b8 <_Z12goTOsinglePDv+0x30>)
   b4792:	f000 fb17 	bl	b4dc4 <_ZN7Stepper4stepEi>
    tipStepper.step(singleY);
   b4796:	6829      	ldr	r1, [r5, #0]
   b4798:	4808      	ldr	r0, [pc, #32]	; (b47bc <_Z12goTOsinglePDv+0x34>)
   b479a:	f000 fb13 	bl	b4dc4 <_ZN7Stepper4stepEi>
    Serial.printf("moved to %i, %i\n", singleX, singleY);
   b479e:	f002 fa39 	bl	b6c14 <_Z16_fetch_usbserialv>
   b47a2:	682b      	ldr	r3, [r5, #0]
   b47a4:	6822      	ldr	r2, [r4, #0]
   b47a6:	4906      	ldr	r1, [pc, #24]	; (b47c0 <_Z12goTOsinglePDv+0x38>)
   b47a8:	f7ff fc81 	bl	b40ae <_ZN5Print6printfEPKcz>
}
   b47ac:	bd38      	pop	{r3, r4, r5, pc}
   b47ae:	bf00      	nop
   b47b0:	2002fbd8 	.word	0x2002fbd8
   b47b4:	2002fbdc 	.word	0x2002fbdc
   b47b8:	2003e64c 	.word	0x2003e64c
   b47bc:	2003e678 	.word	0x2003e678
   b47c0:	000b7843 	.word	0x000b7843

000b47c4 <_Z10printArrayv>:
    for (c = 0; c < 4; c++) {
        Serial.printf("pdX[%i]= %i, pdY[%i] =%i\n", c, pdX[c], c, pdY[c]);
    }
}

void printArray() {
   b47c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
int r; 
    Serial.printf("printStart\n");
   b47c6:	f002 fa25 	bl	b6c14 <_Z16_fetch_usbserialv>
   b47ca:	490f      	ldr	r1, [pc, #60]	; (b4808 <_Z10printArrayv+0x44>)
   b47cc:	4c0f      	ldr	r4, [pc, #60]	; (b480c <_Z10printArrayv+0x48>)
    
    for (r = 0; r < stepperCounter; r++) {
   b47ce:	4f10      	ldr	r7, [pc, #64]	; (b4810 <_Z10printArrayv+0x4c>)
    Serial.printf("%i,%i,%i,%i\n", r,stepperArray[r][0], stepperArray[r][1], stepperArray[r][2]);
   b47d0:	4e10      	ldr	r6, [pc, #64]	; (b4814 <_Z10printArrayv+0x50>)
    Serial.printf("printStart\n");
   b47d2:	f7ff fc6c 	bl	b40ae <_ZN5Print6printfEPKcz>
    for (r = 0; r < stepperCounter; r++) {
   b47d6:	2500      	movs	r5, #0
   b47d8:	683b      	ldr	r3, [r7, #0]
   b47da:	42ab      	cmp	r3, r5
   b47dc:	f104 040c 	add.w	r4, r4, #12
   b47e0:	dd0f      	ble.n	b4802 <_Z10printArrayv+0x3e>
    Serial.printf("%i,%i,%i,%i\n", r,stepperArray[r][0], stepperArray[r][1], stepperArray[r][2]);
   b47e2:	f002 fa17 	bl	b6c14 <_Z16_fetch_usbserialv>
   b47e6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   b47ea:	9301      	str	r3, [sp, #4]
   b47ec:	f854 3c08 	ldr.w	r3, [r4, #-8]
   b47f0:	9300      	str	r3, [sp, #0]
   b47f2:	462a      	mov	r2, r5
   b47f4:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   b47f8:	4631      	mov	r1, r6
   b47fa:	f7ff fc58 	bl	b40ae <_ZN5Print6printfEPKcz>
    for (r = 0; r < stepperCounter; r++) {
   b47fe:	3501      	adds	r5, #1
   b4800:	e7ea      	b.n	b47d8 <_Z10printArrayv+0x14>
    }
    
}
   b4802:	b003      	add	sp, #12
   b4804:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4806:	bf00      	nop
   b4808:	000b7854 	.word	0x000b7854
   b480c:	2002fbe4 	.word	0x2002fbe4
   b4810:	2003e644 	.word	0x2003e644
   b4814:	000b7860 	.word	0x000b7860

000b4818 <_Z11SearchArrayv>:

void SearchArray(){
   b4818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
int x; 
int row;
int offset;
int comparedVal;
int prevOffset = 7330673;
   b481a:	4a18      	ldr	r2, [pc, #96]	; (b487c <_Z11SearchArrayv+0x64>)


for(x = 0; x < 5000; x++){

    comparedVal = stepperArray[x][0];
    offset = dataLora - comparedVal;
   b481c:	4f18      	ldr	r7, [pc, #96]	; (b4880 <_Z11SearchArrayv+0x68>)
    comparedVal = stepperArray[x][0];
   b481e:	4d19      	ldr	r5, [pc, #100]	; (b4884 <_Z11SearchArrayv+0x6c>)
for(x = 0; x < 5000; x++){
   b4820:	2400      	movs	r4, #0
    comparedVal = stepperArray[x][0];
   b4822:	230c      	movs	r3, #12
   b4824:	4363      	muls	r3, r4
    offset = dataLora - comparedVal;
   b4826:	683e      	ldr	r6, [r7, #0]
   b4828:	595b      	ldr	r3, [r3, r5]
   b482a:	1af6      	subs	r6, r6, r3
    if (abs(offset) < prevOffset){
   b482c:	ea86 73e6 	eor.w	r3, r6, r6, asr #31
   b4830:	eba3 73e6 	sub.w	r3, r3, r6, asr #31
   b4834:	4293      	cmp	r3, r2
   b4836:	da08      	bge.n	b484a <_Z11SearchArrayv+0x32>
        prevOffset = offset;
        row = x;
        Serial.printf("offset %i  row = %i\n ", offset, x);
   b4838:	f002 f9ec 	bl	b6c14 <_Z16_fetch_usbserialv>
   b483c:	4912      	ldr	r1, [pc, #72]	; (b4888 <_Z11SearchArrayv+0x70>)
   b483e:	4632      	mov	r2, r6
   b4840:	4623      	mov	r3, r4
   b4842:	f7ff fc34 	bl	b40ae <_ZN5Print6printfEPKcz>
        prevOffset = offset;
   b4846:	4632      	mov	r2, r6
   b4848:	4621      	mov	r1, r4
for(x = 0; x < 5000; x++){
   b484a:	3401      	adds	r4, #1
   b484c:	f241 3388 	movw	r3, #5000	; 0x1388
   b4850:	429c      	cmp	r4, r3
   b4852:	d1e6      	bne.n	b4822 <_Z11SearchArrayv+0xa>
    }
 } 
 singleX = stepperArray[row][1];
   b4854:	230c      	movs	r3, #12
   b4856:	fb03 5501 	mla	r5, r3, r1, r5
   b485a:	4c0c      	ldr	r4, [pc, #48]	; (b488c <_Z11SearchArrayv+0x74>)
   b485c:	686b      	ldr	r3, [r5, #4]
 singleY = stepperArray[row][2];
   b485e:	4e0c      	ldr	r6, [pc, #48]	; (b4890 <_Z11SearchArrayv+0x78>)
 singleX = stepperArray[row][1];
   b4860:	6023      	str	r3, [r4, #0]
 singleY = stepperArray[row][2];
   b4862:	68ab      	ldr	r3, [r5, #8]
   b4864:	6033      	str	r3, [r6, #0]
 stepperCounter=0;
   b4866:	4b0b      	ldr	r3, [pc, #44]	; (b4894 <_Z11SearchArrayv+0x7c>)
   b4868:	2200      	movs	r2, #0
   b486a:	601a      	str	r2, [r3, #0]
 Serial.printf("singleX= %i, singleY=%i\n", singleX, singleY);
   b486c:	f002 f9d2 	bl	b6c14 <_Z16_fetch_usbserialv>
   b4870:	6833      	ldr	r3, [r6, #0]
   b4872:	6822      	ldr	r2, [r4, #0]
   b4874:	4908      	ldr	r1, [pc, #32]	; (b4898 <_Z11SearchArrayv+0x80>)
   b4876:	f7ff fc1a 	bl	b40ae <_ZN5Print6printfEPKcz>
}
   b487a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b487c:	006fdb71 	.word	0x006fdb71
   b4880:	2002fb50 	.word	0x2002fb50
   b4884:	2002fbe4 	.word	0x2002fbe4
   b4888:	000b786d 	.word	0x000b786d
   b488c:	2002fbd8 	.word	0x2002fbd8
   b4890:	2002fbdc 	.word	0x2002fbdc
   b4894:	2003e644 	.word	0x2003e644
   b4898:	000b7883 	.word	0x000b7883

000b489c <loop>:
void loop() {
   b489c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b48a0:	b089      	sub	sp, #36	; 0x24
    if (Serial1.available()) {
   b48a2:	f002 fbe3 	bl	b706c <_Z22__fetch_global_Serial1v>
   b48a6:	6803      	ldr	r3, [r0, #0]
   b48a8:	4d4e      	ldr	r5, [pc, #312]	; (b49e4 <loop+0x148>)
   b48aa:	691b      	ldr	r3, [r3, #16]
   b48ac:	4798      	blx	r3
   b48ae:	2800      	cmp	r0, #0
   b48b0:	f000 8083 	beq.w	b49ba <loop+0x11e>
        Serial.printf("Awaiting Incoming Message");
   b48b4:	f002 f9ae 	bl	b6c14 <_Z16_fetch_usbserialv>
   b48b8:	494b      	ldr	r1, [pc, #300]	; (b49e8 <loop+0x14c>)
        parse0 = Serial1.readStringUntil(',');
   b48ba:	f8df 8158 	ldr.w	r8, [pc, #344]	; b4a14 <loop+0x178>
        parse1 = Serial1.readStringUntil(',');
   b48be:	f8df 9158 	ldr.w	r9, [pc, #344]	; b4a18 <loop+0x17c>
        parse2 = Serial1.readStringUntil(',');
   b48c2:	4f4a      	ldr	r7, [pc, #296]	; (b49ec <loop+0x150>)
        parse3 = Serial1.readStringUntil(',');
   b48c4:	4c4a      	ldr	r4, [pc, #296]	; (b49f0 <loop+0x154>)
        parse4 = Serial1.readStringUntil('\n');
   b48c6:	4e4b      	ldr	r6, [pc, #300]	; (b49f4 <loop+0x158>)
        Serial.printf("Awaiting Incoming Message");
   b48c8:	f7ff fbf1 	bl	b40ae <_ZN5Print6printfEPKcz>
        parse0 = Serial1.readStringUntil(',');
   b48cc:	f002 fbce 	bl	b706c <_Z22__fetch_global_Serial1v>
   b48d0:	222c      	movs	r2, #44	; 0x2c
   b48d2:	4601      	mov	r1, r0
   b48d4:	a804      	add	r0, sp, #16
   b48d6:	f001 ffe5 	bl	b68a4 <_ZN6Stream15readStringUntilEc>
   b48da:	a904      	add	r1, sp, #16
   b48dc:	4640      	mov	r0, r8
   b48de:	f000 fddb 	bl	b5498 <_ZN6StringaSEOS_>
   b48e2:	a804      	add	r0, sp, #16
   b48e4:	f000 fd5c 	bl	b53a0 <_ZN6StringD1Ev>
        parse1 = Serial1.readStringUntil(',');
   b48e8:	f002 fbc0 	bl	b706c <_Z22__fetch_global_Serial1v>
   b48ec:	222c      	movs	r2, #44	; 0x2c
   b48ee:	4601      	mov	r1, r0
   b48f0:	a804      	add	r0, sp, #16
   b48f2:	f001 ffd7 	bl	b68a4 <_ZN6Stream15readStringUntilEc>
   b48f6:	a904      	add	r1, sp, #16
   b48f8:	4648      	mov	r0, r9
   b48fa:	f000 fdcd 	bl	b5498 <_ZN6StringaSEOS_>
   b48fe:	a804      	add	r0, sp, #16
   b4900:	f000 fd4e 	bl	b53a0 <_ZN6StringD1Ev>
        parse2 = Serial1.readStringUntil(',');
   b4904:	f002 fbb2 	bl	b706c <_Z22__fetch_global_Serial1v>
   b4908:	222c      	movs	r2, #44	; 0x2c
   b490a:	4601      	mov	r1, r0
   b490c:	a804      	add	r0, sp, #16
   b490e:	f001 ffc9 	bl	b68a4 <_ZN6Stream15readStringUntilEc>
   b4912:	a904      	add	r1, sp, #16
   b4914:	4638      	mov	r0, r7
   b4916:	f000 fdbf 	bl	b5498 <_ZN6StringaSEOS_>
   b491a:	a804      	add	r0, sp, #16
   b491c:	f000 fd40 	bl	b53a0 <_ZN6StringD1Ev>
        parse3 = Serial1.readStringUntil(',');
   b4920:	f002 fba4 	bl	b706c <_Z22__fetch_global_Serial1v>
   b4924:	222c      	movs	r2, #44	; 0x2c
   b4926:	4601      	mov	r1, r0
   b4928:	a804      	add	r0, sp, #16
   b492a:	f001 ffbb 	bl	b68a4 <_ZN6Stream15readStringUntilEc>
   b492e:	a904      	add	r1, sp, #16
   b4930:	4620      	mov	r0, r4
   b4932:	f000 fdb1 	bl	b5498 <_ZN6StringaSEOS_>
   b4936:	a804      	add	r0, sp, #16
   b4938:	f000 fd32 	bl	b53a0 <_ZN6StringD1Ev>
        parse4 = Serial1.readStringUntil('\n');
   b493c:	f002 fb96 	bl	b706c <_Z22__fetch_global_Serial1v>
   b4940:	220a      	movs	r2, #10
   b4942:	4601      	mov	r1, r0
   b4944:	a804      	add	r0, sp, #16
   b4946:	f001 ffad 	bl	b68a4 <_ZN6Stream15readStringUntilEc>
   b494a:	a904      	add	r1, sp, #16
   b494c:	4630      	mov	r0, r6
   b494e:	f000 fda3 	bl	b5498 <_ZN6StringaSEOS_>
   b4952:	a804      	add	r0, sp, #16
   b4954:	f000 fd24 	bl	b53a0 <_ZN6StringD1Ev>
        Serial.printf("Incoming Message; %s\n%s\n%s\n%s\n%s\n", parse0.c_str(), parse1.c_str(), parse2.c_str(), parse3.c_str(), parse4.c_str());
   b4958:	f002 f95c 	bl	b6c14 <_Z16_fetch_usbserialv>
   b495c:	6833      	ldr	r3, [r6, #0]
   b495e:	9302      	str	r3, [sp, #8]
   b4960:	6823      	ldr	r3, [r4, #0]
   b4962:	9301      	str	r3, [sp, #4]
   b4964:	683b      	ldr	r3, [r7, #0]
   b4966:	f8d8 2000 	ldr.w	r2, [r8]
   b496a:	4923      	ldr	r1, [pc, #140]	; (b49f8 <loop+0x15c>)
   b496c:	9300      	str	r3, [sp, #0]
   b496e:	f8d9 3000 	ldr.w	r3, [r9]
   b4972:	f7ff fb9c 	bl	b40ae <_ZN5Print6printfEPKcz>
        dataLen = parse2.toInt();
   b4976:	4638      	mov	r0, r7
   b4978:	f000 fde4 	bl	b5544 <_ZNK6String5toIntEv>
   b497c:	4f1f      	ldr	r7, [pc, #124]	; (b49fc <loop+0x160>)
   b497e:	6038      	str	r0, [r7, #0]
        dataLora = parse3.toInt();
   b4980:	4620      	mov	r0, r4
   b4982:	f000 fddf 	bl	b5544 <_ZNK6String5toIntEv>
   b4986:	4c1e      	ldr	r4, [pc, #120]	; (b4a00 <loop+0x164>)
   b4988:	6020      	str	r0, [r4, #0]
        db = parse4.toInt();
   b498a:	4630      	mov	r0, r6
   b498c:	f000 fdda 	bl	b5544 <_ZNK6String5toIntEv>
   b4990:	4b1c      	ldr	r3, [pc, #112]	; (b4a04 <loop+0x168>)
   b4992:	6018      	str	r0, [r3, #0]
        Serial.printf("Incoming Len %i, IncomingData %i\n", dataLen, dataLora);
   b4994:	f002 f93e 	bl	b6c14 <_Z16_fetch_usbserialv>
   b4998:	6823      	ldr	r3, [r4, #0]
   b499a:	683a      	ldr	r2, [r7, #0]
   b499c:	491a      	ldr	r1, [pc, #104]	; (b4a08 <loop+0x16c>)
   b499e:	f7ff fb86 	bl	b40ae <_ZN5Print6printfEPKcz>
          if(dataLora == 0){
   b49a2:	6823      	ldr	r3, [r4, #0]
   b49a4:	b923      	cbnz	r3, b49b0 <loop+0x114>
          Serial.printf("Scan did not work\n");
   b49a6:	f002 f935 	bl	b6c14 <_Z16_fetch_usbserialv>
   b49aa:	4918      	ldr	r1, [pc, #96]	; (b4a0c <loop+0x170>)
   b49ac:	f7ff fb7f 	bl	b40ae <_ZN5Print6printfEPKcz>
        if(dataLora >7){
   b49b0:	6823      	ldr	r3, [r4, #0]
   b49b2:	2b07      	cmp	r3, #7
            MoveToState= true;
   b49b4:	bfc4      	itt	gt
   b49b6:	2301      	movgt	r3, #1
   b49b8:	702b      	strbgt	r3, [r5, #0]
    if (ScanToggle) {
   b49ba:	4c15      	ldr	r4, [pc, #84]	; (b4a10 <loop+0x174>)
   b49bc:	7823      	ldrb	r3, [r4, #0]
   b49be:	b12b      	cbz	r3, b49cc <loop+0x130>
        Scan();
   b49c0:	f7ff fe02 	bl	b45c8 <_Z4Scanv>
        printArray();
   b49c4:	f7ff fefe 	bl	b47c4 <_Z10printArrayv>
        ScanToggle = false;
   b49c8:	2300      	movs	r3, #0
   b49ca:	7023      	strb	r3, [r4, #0]
    if(MoveToState){
   b49cc:	782b      	ldrb	r3, [r5, #0]
   b49ce:	b12b      	cbz	r3, b49dc <loop+0x140>
        SearchArray();
   b49d0:	f7ff ff22 	bl	b4818 <_Z11SearchArrayv>
        goTOsinglePD();
   b49d4:	f7ff fed8 	bl	b4788 <_Z12goTOsinglePDv>
        MoveToState=false;
   b49d8:	2300      	movs	r3, #0
   b49da:	702b      	strb	r3, [r5, #0]
}
   b49dc:	b009      	add	sp, #36	; 0x24
   b49de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b49e2:	bf00      	nop
   b49e4:	2002fac0 	.word	0x2002fac0
   b49e8:	000b789c 	.word	0x000b789c
   b49ec:	2002fb80 	.word	0x2002fb80
   b49f0:	2002fb90 	.word	0x2002fb90
   b49f4:	2002fba0 	.word	0x2002fba0
   b49f8:	000b78b6 	.word	0x000b78b6
   b49fc:	2002fb4c 	.word	0x2002fb4c
   b4a00:	2002fb50 	.word	0x2002fb50
   b4a04:	2002fb54 	.word	0x2002fb54
   b4a08:	000b78d8 	.word	0x000b78d8
   b4a0c:	000b78fa 	.word	0x000b78fa
   b4a10:	2002fac1 	.word	0x2002fac1
   b4a14:	2002fb60 	.word	0x2002fb60
   b4a18:	2002fb70 	.word	0x2002fb70

000b4a1c <_GLOBAL__sub_I_SystemMode>:
 int y;

 y = sin(x/freq)*amp + 0;

 // logic while 
}
   b4a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4a20:	4b56      	ldr	r3, [pc, #344]	; (b4b7c <_GLOBAL__sub_I_SystemMode+0x160>)
    SleepResult() {}
   b4a22:	4a57      	ldr	r2, [pc, #348]	; (b4b80 <_GLOBAL__sub_I_SystemMode+0x164>)
   b4a24:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4a26:	2700      	movs	r7, #0
   b4a28:	b098      	sub	sp, #96	; 0x60
   b4a2a:	e9c3 7700 	strd	r7, r7, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4a2e:	2002      	movs	r0, #2
   b4a30:	f000 fb90 	bl	b5154 <set_system_mode>
Stepper tipStepper(stepsPerRevolution, D8, D6, D7, D5);
   b4a34:	2307      	movs	r3, #7
   b4a36:	2205      	movs	r2, #5
   b4a38:	e9cd 3200 	strd	r3, r2, [sp]
   b4a3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
   b4a40:	2306      	movs	r3, #6
   b4a42:	2208      	movs	r2, #8
   b4a44:	484f      	ldr	r0, [pc, #316]	; (b4b84 <_GLOBAL__sub_I_SystemMode+0x168>)
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b4a46:	4c50      	ldr	r4, [pc, #320]	; (b4b88 <_GLOBAL__sub_I_SystemMode+0x16c>)
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b4a48:	4d50      	ldr	r5, [pc, #320]	; (b4b8c <_GLOBAL__sub_I_SystemMode+0x170>)
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b4a4a:	4e51      	ldr	r6, [pc, #324]	; (b4b90 <_GLOBAL__sub_I_SystemMode+0x174>)
Stepper tipStepper(stepsPerRevolution, D8, D6, D7, D5);
   b4a4c:	f000 f8c6 	bl	b4bdc <_ZN7StepperC1Eiiiii>
Stepper tiltStepper(stepsPerRevolution, A5, D12, D13, D11);
   b4a50:	230d      	movs	r3, #13
   b4a52:	210b      	movs	r1, #11
   b4a54:	220e      	movs	r2, #14
   b4a56:	e9cd 3100 	strd	r3, r1, [sp]
   b4a5a:	484e      	ldr	r0, [pc, #312]	; (b4b94 <_GLOBAL__sub_I_SystemMode+0x178>)
   b4a5c:	230c      	movs	r3, #12
   b4a5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
   b4a62:	f000 f8bb 	bl	b4bdc <_ZN7StepperC1Eiiiii>
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   b4a66:	494c      	ldr	r1, [pc, #304]	; (b4b98 <_GLOBAL__sub_I_SystemMode+0x17c>)
   b4a68:	4620      	mov	r0, r4
   b4a6a:	f000 ff77 	bl	b595c <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   b4a6e:	494b      	ldr	r1, [pc, #300]	; (b4b9c <_GLOBAL__sub_I_SystemMode+0x180>)
   b4a70:	4628      	mov	r0, r5
   b4a72:	f000 ff73 	bl	b595c <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   b4a76:	494a      	ldr	r1, [pc, #296]	; (b4ba0 <_GLOBAL__sub_I_SystemMode+0x184>)
   b4a78:	4630      	mov	r0, r6
   b4a7a:	f000 ff6f 	bl	b595c <_ZN8particle7BleUuidC1EPKc>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags()
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
   b4a7e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b4a80:	f10d 0c10 	add.w	ip, sp, #16
   b4a84:	46a0      	mov	r8, r4
   b4a86:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b4a8a:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
   b4a8e:	f8d6 a000 	ldr.w	sl, [r6]
   b4a92:	f8cc a000 	str.w	sl, [ip]
   b4a96:	ae09      	add	r6, sp, #36	; 0x24
   b4a98:	c60f      	stmia	r6!, {r0, r1, r2, r3}
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   b4a9a:	f10d 0c10 	add.w	ip, sp, #16
   b4a9e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b4aa2:	f8d8 9000 	ldr.w	r9, [r8]
   b4aa6:	f8c6 9000 	str.w	r9, [r6]
   b4aaa:	ae0e      	add	r6, sp, #56	; 0x38
   b4aac:	c60f      	stmia	r6!, {r0, r1, r2, r3}
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b4aae:	f8df e124 	ldr.w	lr, [pc, #292]	; b4bd4 <_GLOBAL__sub_I_SystemMode+0x1b8>
   b4ab2:	f8c6 a000 	str.w	sl, [r6]
        BleUuid sUuid(svcUuid);
   b4ab6:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
      constexpr __shared_count() noexcept : _M_pi(0)
   b4aba:	e9ce 7700 	strd	r7, r7, [lr]
   b4abe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b4ac2:	ae13      	add	r6, sp, #76	; 0x4c
   b4ac4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b4ac6:	f8c6 9000 	str.w	r9, [r6]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b4aca:	ae13      	add	r6, sp, #76	; 0x4c
   b4acc:	ab0e      	add	r3, sp, #56	; 0x38
   b4ace:	4670      	mov	r0, lr
   b4ad0:	e9cd 7701 	strd	r7, r7, [sp, #4]
   b4ad4:	4933      	ldr	r1, [pc, #204]	; (b4ba4 <_GLOBAL__sub_I_SystemMode+0x188>)
   b4ad6:	9600      	str	r6, [sp, #0]
   b4ad8:	f04f 0210 	mov.w	r2, #16
   b4adc:	f001 fc10 	bl	b6300 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
   b4ae0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4ae2:	f10d 0c10 	add.w	ip, sp, #16
   b4ae6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b4aea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4aec:	f8d5 e000 	ldr.w	lr, [r5]
   b4af0:	f8d8 8000 	ldr.w	r8, [r8]
   b4af4:	f8cc e000 	str.w	lr, [ip]
   b4af8:	ad09      	add	r5, sp, #36	; 0x24
   b4afa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b4afc:	f8c5 8000 	str.w	r8, [r5]
        BleUuid cUuid(charUuid);
   b4b00:	ad04      	add	r5, sp, #16
   b4b02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4b04:	ac0e      	add	r4, sp, #56	; 0x38
   b4b06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
      : _M_ptr(0), _M_refcount()
   b4b08:	f8df c0cc 	ldr.w	ip, [pc, #204]	; b4bd8 <_GLOBAL__sub_I_SystemMode+0x1bc>
   b4b0c:	f8c4 e000 	str.w	lr, [r4]
        BleUuid sUuid(svcUuid);
   b4b10:	ad09      	add	r5, sp, #36	; 0x24
      constexpr __shared_count() noexcept : _M_pi(0)
   b4b12:	e9cc 7700 	strd	r7, r7, [ip]
   b4b16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4b18:	4634      	mov	r4, r6
   b4b1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        construct(desc, properties, cUuid, sUuid, callback, context);
   b4b1c:	4b22      	ldr	r3, [pc, #136]	; (b4ba8 <_GLOBAL__sub_I_SystemMode+0x18c>)
        BleUuid sUuid(svcUuid);
   b4b1e:	f8c4 8000 	str.w	r8, [r4]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b4b22:	4660      	mov	r0, ip
   b4b24:	f04f 0204 	mov.w	r2, #4
   b4b28:	e9cd 6300 	strd	r6, r3, [sp]
   b4b2c:	491f      	ldr	r1, [pc, #124]	; (b4bac <_GLOBAL__sub_I_SystemMode+0x190>)
   b4b2e:	9702      	str	r7, [sp, #8]
   b4b30:	ab0e      	add	r3, sp, #56	; 0x38
   b4b32:	f001 fbe5 	bl	b6300 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
BleAdvertisingData data;
   b4b36:	481e      	ldr	r0, [pc, #120]	; (b4bb0 <_GLOBAL__sub_I_SystemMode+0x194>)
   b4b38:	f001 fa1b 	bl	b5f72 <_ZN8particle18BleAdvertisingDataC1Ev>
String reply;
   b4b3c:	491d      	ldr	r1, [pc, #116]	; (b4bb4 <_GLOBAL__sub_I_SystemMode+0x198>)
   b4b3e:	481e      	ldr	r0, [pc, #120]	; (b4bb8 <_GLOBAL__sub_I_SystemMode+0x19c>)
   b4b40:	f000 fc79 	bl	b5436 <_ZN6StringC1EPK19__FlashStringHelper>
String parse0;
   b4b44:	491b      	ldr	r1, [pc, #108]	; (b4bb4 <_GLOBAL__sub_I_SystemMode+0x198>)
   b4b46:	481d      	ldr	r0, [pc, #116]	; (b4bbc <_GLOBAL__sub_I_SystemMode+0x1a0>)
   b4b48:	f000 fc75 	bl	b5436 <_ZN6StringC1EPK19__FlashStringHelper>
String parse1;
   b4b4c:	4919      	ldr	r1, [pc, #100]	; (b4bb4 <_GLOBAL__sub_I_SystemMode+0x198>)
   b4b4e:	481c      	ldr	r0, [pc, #112]	; (b4bc0 <_GLOBAL__sub_I_SystemMode+0x1a4>)
   b4b50:	f000 fc71 	bl	b5436 <_ZN6StringC1EPK19__FlashStringHelper>
String parse2;
   b4b54:	4917      	ldr	r1, [pc, #92]	; (b4bb4 <_GLOBAL__sub_I_SystemMode+0x198>)
   b4b56:	481b      	ldr	r0, [pc, #108]	; (b4bc4 <_GLOBAL__sub_I_SystemMode+0x1a8>)
   b4b58:	f000 fc6d 	bl	b5436 <_ZN6StringC1EPK19__FlashStringHelper>
String parse3;
   b4b5c:	4915      	ldr	r1, [pc, #84]	; (b4bb4 <_GLOBAL__sub_I_SystemMode+0x198>)
   b4b5e:	481a      	ldr	r0, [pc, #104]	; (b4bc8 <_GLOBAL__sub_I_SystemMode+0x1ac>)
   b4b60:	f000 fc69 	bl	b5436 <_ZN6StringC1EPK19__FlashStringHelper>
String parse4;
   b4b64:	4913      	ldr	r1, [pc, #76]	; (b4bb4 <_GLOBAL__sub_I_SystemMode+0x198>)
   b4b66:	4819      	ldr	r0, [pc, #100]	; (b4bcc <_GLOBAL__sub_I_SystemMode+0x1b0>)
   b4b68:	f000 fc65 	bl	b5436 <_ZN6StringC1EPK19__FlashStringHelper>
String sentTimeString;
   b4b6c:	4911      	ldr	r1, [pc, #68]	; (b4bb4 <_GLOBAL__sub_I_SystemMode+0x198>)
   b4b6e:	4818      	ldr	r0, [pc, #96]	; (b4bd0 <_GLOBAL__sub_I_SystemMode+0x1b4>)
}
   b4b70:	b018      	add	sp, #96	; 0x60
   b4b72:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
String sentTimeString;
   b4b76:	f000 bc5e 	b.w	b5436 <_ZN6StringC1EPK19__FlashStringHelper>
   b4b7a:	bf00      	nop
   b4b7c:	2002fac4 	.word	0x2002fac4
   b4b80:	ffff0000 	.word	0xffff0000
   b4b84:	2003e678 	.word	0x2003e678
   b4b88:	2002fad0 	.word	0x2002fad0
   b4b8c:	2002fae4 	.word	0x2002fae4
   b4b90:	2002faf8 	.word	0x2002faf8
   b4b94:	2003e64c 	.word	0x2003e64c
   b4b98:	000b790d 	.word	0x000b790d
   b4b9c:	000b7932 	.word	0x000b7932
   b4ba0:	000b7957 	.word	0x000b7957
   b4ba4:	000b797c 	.word	0x000b797c
   b4ba8:	000b44b5 	.word	0x000b44b5
   b4bac:	000b797f 	.word	0x000b797f
   b4bb0:	2002fb40 	.word	0x2002fb40
   b4bb4:	000b7830 	.word	0x000b7830
   b4bb8:	2002fbb0 	.word	0x2002fbb0
   b4bbc:	2002fb60 	.word	0x2002fb60
   b4bc0:	2002fb70 	.word	0x2002fb70
   b4bc4:	2002fb80 	.word	0x2002fb80
   b4bc8:	2002fb90 	.word	0x2002fb90
   b4bcc:	2002fba0 	.word	0x2002fba0
   b4bd0:	2002fbc8 	.word	0x2002fbc8
   b4bd4:	2003e6a4 	.word	0x2003e6a4
   b4bd8:	2002fbc0 	.word	0x2002fbc0

000b4bdc <_ZN7StepperC1Eiiiii>:

/*
 *   constructor for four-pin version
 *   Sets which wires should control the motor.
 */
Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2,
   b4bdc:	b538      	push	{r3, r4, r5, lr}
  this->last_step_time = 0; // time stamp in us of the last step taken
  this->number_of_steps = number_of_steps; // total number of steps for this motor

  // Arduino pins for the motor control connection:
  this->motor_pin_1 = motor_pin_1;
  this->motor_pin_2 = motor_pin_2;
   b4bde:	e9c0 2305 	strd	r2, r3, [r0, #20]
  this->motor_pin_3 = motor_pin_3;
   b4be2:	9b04      	ldr	r3, [sp, #16]
   b4be4:	61c3      	str	r3, [r0, #28]
Stepper::Stepper(int number_of_steps, int motor_pin_1, int motor_pin_2,
   b4be6:	4604      	mov	r4, r0
  this->motor_pin_4 = motor_pin_4;
   b4be8:	9b05      	ldr	r3, [sp, #20]
   b4bea:	6203      	str	r3, [r0, #32]
  this->step_number = 0;    // which step the motor is on
   b4bec:	2500      	movs	r5, #0
   b4bee:	6105      	str	r5, [r0, #16]
  this->direction = 0;      // motor direction
   b4bf0:	6005      	str	r5, [r0, #0]
  this->last_step_time = 0; // time stamp in us of the last step taken
   b4bf2:	6285      	str	r5, [r0, #40]	; 0x28
  this->number_of_steps = number_of_steps; // total number of steps for this motor
   b4bf4:	6081      	str	r1, [r0, #8]

  // setup the pins on the microcontroller:
  pinMode(this->motor_pin_1, OUTPUT);
   b4bf6:	b290      	uxth	r0, r2
   b4bf8:	2101      	movs	r1, #1
   b4bfa:	f002 f9f1 	bl	b6fe0 <pinMode>
  pinMode(this->motor_pin_2, OUTPUT);
   b4bfe:	8b20      	ldrh	r0, [r4, #24]
   b4c00:	2101      	movs	r1, #1
   b4c02:	f002 f9ed 	bl	b6fe0 <pinMode>
  pinMode(this->motor_pin_3, OUTPUT);
   b4c06:	8ba0      	ldrh	r0, [r4, #28]
   b4c08:	2101      	movs	r1, #1
   b4c0a:	f002 f9e9 	bl	b6fe0 <pinMode>
  pinMode(this->motor_pin_4, OUTPUT);
   b4c0e:	8c20      	ldrh	r0, [r4, #32]
   b4c10:	2101      	movs	r1, #1
   b4c12:	f002 f9e5 	bl	b6fe0 <pinMode>

  // When there are 4 pins, set the others to 0:
  this->motor_pin_5 = 0;

  // pin_count is used by the stepMotor() method:
  this->pin_count = 4;
   b4c16:	2304      	movs	r3, #4
  this->motor_pin_5 = 0;
   b4c18:	6265      	str	r5, [r4, #36]	; 0x24
  this->pin_count = 4;
   b4c1a:	60e3      	str	r3, [r4, #12]
}
   b4c1c:	4620      	mov	r0, r4
   b4c1e:	bd38      	pop	{r3, r4, r5, pc}

000b4c20 <_ZN7Stepper8setSpeedEl>:
/*
 * Sets the speed in revs per minute
 */
void Stepper::setSpeed(long whatSpeed)
{
  this->step_delay = 60L * 1000L * 1000L / this->number_of_steps / whatSpeed;
   b4c20:	6882      	ldr	r2, [r0, #8]
   b4c22:	4b03      	ldr	r3, [pc, #12]	; (b4c30 <_ZN7Stepper8setSpeedEl+0x10>)
   b4c24:	fb93 f3f2 	sdiv	r3, r3, r2
   b4c28:	fb93 f1f1 	sdiv	r1, r3, r1
   b4c2c:	6041      	str	r1, [r0, #4]
}
   b4c2e:	4770      	bx	lr
   b4c30:	03938700 	.word	0x03938700

000b4c34 <_ZN7Stepper9stepMotorEi>:

/*
 * Moves the motor forward or backwards.
 */
void Stepper::stepMotor(int thisStep)
{
   b4c34:	b538      	push	{r3, r4, r5, lr}
  if (this->pin_count == 2) {
   b4c36:	68c3      	ldr	r3, [r0, #12]
   b4c38:	2b02      	cmp	r3, #2
{
   b4c3a:	4604      	mov	r4, r0
   b4c3c:	460d      	mov	r5, r1
  if (this->pin_count == 2) {
   b4c3e:	d10d      	bne.n	b4c5c <_ZN7Stepper9stepMotorEi+0x28>
    switch (thisStep) {
   b4c40:	2903      	cmp	r1, #3
   b4c42:	d80b      	bhi.n	b4c5c <_ZN7Stepper9stepMotorEi+0x28>
   b4c44:	e8df f001 	tbb	[pc, r1]
   b4c48:	1b151302 	.word	0x1b151302
      case 0:  // 01
        digitalWrite(motor_pin_1, LOW);
   b4c4c:	2100      	movs	r1, #0
        digitalWrite(motor_pin_2, HIGH);
      break;
      case 1:  // 11
        digitalWrite(motor_pin_1, HIGH);
   b4c4e:	8aa0      	ldrh	r0, [r4, #20]
   b4c50:	f002 f9d7 	bl	b7002 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
   b4c54:	2101      	movs	r1, #1
        digitalWrite(motor_pin_1, HIGH);
        digitalWrite(motor_pin_2, LOW);
      break;
      case 3:  // 00
        digitalWrite(motor_pin_1, LOW);
        digitalWrite(motor_pin_2, LOW);
   b4c56:	8b20      	ldrh	r0, [r4, #24]
   b4c58:	f002 f9d3 	bl	b7002 <digitalWrite>
      break;
    }
  }
  if (this->pin_count == 4) {
   b4c5c:	68e3      	ldr	r3, [r4, #12]
   b4c5e:	2b04      	cmp	r3, #4
   b4c60:	d11f      	bne.n	b4ca2 <_ZN7Stepper9stepMotorEi+0x6e>
    switch (thisStep) {
   b4c62:	2d03      	cmp	r5, #3
   b4c64:	d81d      	bhi.n	b4ca2 <_ZN7Stepper9stepMotorEi+0x6e>
   b4c66:	e8df f005 	tbb	[pc, r5]
   b4c6a:	2a0c      	.short	0x2a0c
   b4c6c:	3e30      	.short	0x3e30
        digitalWrite(motor_pin_1, HIGH);
   b4c6e:	2101      	movs	r1, #1
   b4c70:	e7ed      	b.n	b4c4e <_ZN7Stepper9stepMotorEi+0x1a>
        digitalWrite(motor_pin_1, HIGH);
   b4c72:	2101      	movs	r1, #1
        digitalWrite(motor_pin_1, LOW);
   b4c74:	8aa0      	ldrh	r0, [r4, #20]
   b4c76:	f002 f9c4 	bl	b7002 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
   b4c7a:	2100      	movs	r1, #0
   b4c7c:	e7eb      	b.n	b4c56 <_ZN7Stepper9stepMotorEi+0x22>
        digitalWrite(motor_pin_1, LOW);
   b4c7e:	2100      	movs	r1, #0
   b4c80:	e7f8      	b.n	b4c74 <_ZN7Stepper9stepMotorEi+0x40>
      case 0:  // 1010
        digitalWrite(motor_pin_1, HIGH);
   b4c82:	2101      	movs	r1, #1
   b4c84:	8aa0      	ldrh	r0, [r4, #20]
   b4c86:	f002 f9bc 	bl	b7002 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
   b4c8a:	2100      	movs	r1, #0
        digitalWrite(motor_pin_3, HIGH);
        digitalWrite(motor_pin_4, LOW);
      break;
      case 1:  // 0110
        digitalWrite(motor_pin_1, LOW);
        digitalWrite(motor_pin_2, HIGH);
   b4c8c:	8b20      	ldrh	r0, [r4, #24]
   b4c8e:	f002 f9b8 	bl	b7002 <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
   b4c92:	2101      	movs	r1, #1
   b4c94:	8ba0      	ldrh	r0, [r4, #28]
   b4c96:	f002 f9b4 	bl	b7002 <digitalWrite>
        digitalWrite(motor_pin_4, LOW);
   b4c9a:	2100      	movs	r1, #0
      break;
      case 3:  //1001
        digitalWrite(motor_pin_1, HIGH);
        digitalWrite(motor_pin_2, LOW);
        digitalWrite(motor_pin_3, LOW);
        digitalWrite(motor_pin_4, HIGH);
   b4c9c:	8c20      	ldrh	r0, [r4, #32]
   b4c9e:	f002 f9b0 	bl	b7002 <digitalWrite>
      break;
    }
  }

  if (this->pin_count == 5) {
   b4ca2:	68e3      	ldr	r3, [r4, #12]
   b4ca4:	2b05      	cmp	r3, #5
   b4ca6:	f040 808c 	bne.w	b4dc2 <_ZN7Stepper9stepMotorEi+0x18e>
    switch (thisStep) {
   b4caa:	2d09      	cmp	r5, #9
   b4cac:	f200 8089 	bhi.w	b4dc2 <_ZN7Stepper9stepMotorEi+0x18e>
   b4cb0:	e8df f005 	tbb	[pc, r5]
   b4cb4:	4937291f 	.word	0x4937291f
   b4cb8:	7167615f 	.word	0x7167615f
   b4cbc:	857f      	.short	0x857f
        digitalWrite(motor_pin_1, LOW);
   b4cbe:	2100      	movs	r1, #0
   b4cc0:	8aa0      	ldrh	r0, [r4, #20]
   b4cc2:	f002 f99e 	bl	b7002 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
   b4cc6:	2101      	movs	r1, #1
   b4cc8:	e7e0      	b.n	b4c8c <_ZN7Stepper9stepMotorEi+0x58>
        digitalWrite(motor_pin_1, LOW);
   b4cca:	2100      	movs	r1, #0
   b4ccc:	8aa0      	ldrh	r0, [r4, #20]
   b4cce:	f002 f998 	bl	b7002 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
   b4cd2:	2101      	movs	r1, #1
        digitalWrite(motor_pin_2, LOW);
   b4cd4:	8b20      	ldrh	r0, [r4, #24]
   b4cd6:	f002 f994 	bl	b7002 <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
   b4cda:	2100      	movs	r1, #0
   b4cdc:	8ba0      	ldrh	r0, [r4, #28]
   b4cde:	f002 f990 	bl	b7002 <digitalWrite>
        digitalWrite(motor_pin_4, HIGH);
   b4ce2:	2101      	movs	r1, #1
   b4ce4:	e7da      	b.n	b4c9c <_ZN7Stepper9stepMotorEi+0x68>
        digitalWrite(motor_pin_1, HIGH);
   b4ce6:	2101      	movs	r1, #1
   b4ce8:	8aa0      	ldrh	r0, [r4, #20]
   b4cea:	f002 f98a 	bl	b7002 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
   b4cee:	2100      	movs	r1, #0
   b4cf0:	e7f0      	b.n	b4cd4 <_ZN7Stepper9stepMotorEi+0xa0>
      case 0:  // 01101
        digitalWrite(motor_pin_1, LOW);
   b4cf2:	2100      	movs	r1, #0
   b4cf4:	8aa0      	ldrh	r0, [r4, #20]
   b4cf6:	f002 f984 	bl	b7002 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
   b4cfa:	2101      	movs	r1, #1
        digitalWrite(motor_pin_4, LOW);
        digitalWrite(motor_pin_5, HIGH);
        break;
      case 9:  // 00101
        digitalWrite(motor_pin_1, LOW);
        digitalWrite(motor_pin_2, LOW);
   b4cfc:	8b20      	ldrh	r0, [r4, #24]
   b4cfe:	f002 f980 	bl	b7002 <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
   b4d02:	2101      	movs	r1, #1
   b4d04:	e008      	b.n	b4d18 <_ZN7Stepper9stepMotorEi+0xe4>
        digitalWrite(motor_pin_1, LOW);
   b4d06:	8aa0      	ldrh	r0, [r4, #20]
   b4d08:	2100      	movs	r1, #0
   b4d0a:	f002 f97a 	bl	b7002 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
   b4d0e:	2101      	movs	r1, #1
   b4d10:	8b20      	ldrh	r0, [r4, #24]
   b4d12:	f002 f976 	bl	b7002 <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
   b4d16:	2100      	movs	r1, #0
        digitalWrite(motor_pin_3, HIGH);
   b4d18:	8ba0      	ldrh	r0, [r4, #28]
   b4d1a:	f002 f972 	bl	b7002 <digitalWrite>
        digitalWrite(motor_pin_4, LOW);
   b4d1e:	2100      	movs	r1, #0
   b4d20:	e00c      	b.n	b4d3c <_ZN7Stepper9stepMotorEi+0x108>
        digitalWrite(motor_pin_1, LOW);
   b4d22:	8aa0      	ldrh	r0, [r4, #20]
   b4d24:	2100      	movs	r1, #0
   b4d26:	f002 f96c 	bl	b7002 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
   b4d2a:	8b20      	ldrh	r0, [r4, #24]
   b4d2c:	2101      	movs	r1, #1
   b4d2e:	f002 f968 	bl	b7002 <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
   b4d32:	2100      	movs	r1, #0
   b4d34:	8ba0      	ldrh	r0, [r4, #28]
   b4d36:	f002 f964 	bl	b7002 <digitalWrite>
        digitalWrite(motor_pin_4, HIGH);
   b4d3a:	2101      	movs	r1, #1
        digitalWrite(motor_pin_4, LOW);
   b4d3c:	8c20      	ldrh	r0, [r4, #32]
   b4d3e:	f002 f960 	bl	b7002 <digitalWrite>
        digitalWrite(motor_pin_5, HIGH);
   b4d42:	2101      	movs	r1, #1
   b4d44:	e010      	b.n	b4d68 <_ZN7Stepper9stepMotorEi+0x134>
        digitalWrite(motor_pin_1, LOW);
   b4d46:	2100      	movs	r1, #0
        digitalWrite(motor_pin_1, HIGH);
   b4d48:	8aa0      	ldrh	r0, [r4, #20]
   b4d4a:	f002 f95a 	bl	b7002 <digitalWrite>
        digitalWrite(motor_pin_2, HIGH);
   b4d4e:	2101      	movs	r1, #1
        digitalWrite(motor_pin_2, LOW);
   b4d50:	8b20      	ldrh	r0, [r4, #24]
   b4d52:	f002 f956 	bl	b7002 <digitalWrite>
        digitalWrite(motor_pin_3, LOW);
   b4d56:	2100      	movs	r1, #0
        digitalWrite(motor_pin_3, HIGH);
   b4d58:	8ba0      	ldrh	r0, [r4, #28]
   b4d5a:	f002 f952 	bl	b7002 <digitalWrite>
        digitalWrite(motor_pin_4, HIGH);
   b4d5e:	2101      	movs	r1, #1
        digitalWrite(motor_pin_4, LOW);
   b4d60:	8c20      	ldrh	r0, [r4, #32]
   b4d62:	f002 f94e 	bl	b7002 <digitalWrite>
        digitalWrite(motor_pin_5, LOW);
   b4d66:	2100      	movs	r1, #0
        digitalWrite(motor_pin_5, HIGH);
   b4d68:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
        break;
    }
  }
}
   b4d6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        digitalWrite(motor_pin_5, HIGH);
   b4d6e:	f002 b948 	b.w	b7002 <digitalWrite>
        digitalWrite(motor_pin_1, HIGH);
   b4d72:	2101      	movs	r1, #1
   b4d74:	e7e8      	b.n	b4d48 <_ZN7Stepper9stepMotorEi+0x114>
        digitalWrite(motor_pin_1, HIGH);
   b4d76:	2101      	movs	r1, #1
   b4d78:	8aa0      	ldrh	r0, [r4, #20]
   b4d7a:	f002 f942 	bl	b7002 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
   b4d7e:	2100      	movs	r1, #0
   b4d80:	e7e6      	b.n	b4d50 <_ZN7Stepper9stepMotorEi+0x11c>
        digitalWrite(motor_pin_1, HIGH);
   b4d82:	8aa0      	ldrh	r0, [r4, #20]
   b4d84:	2101      	movs	r1, #1
   b4d86:	f002 f93c 	bl	b7002 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
   b4d8a:	2100      	movs	r1, #0
   b4d8c:	8b20      	ldrh	r0, [r4, #24]
   b4d8e:	f002 f938 	bl	b7002 <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
   b4d92:	2101      	movs	r1, #1
   b4d94:	e7e0      	b.n	b4d58 <_ZN7Stepper9stepMotorEi+0x124>
        digitalWrite(motor_pin_1, HIGH);
   b4d96:	8aa0      	ldrh	r0, [r4, #20]
   b4d98:	2101      	movs	r1, #1
   b4d9a:	f002 f932 	bl	b7002 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
   b4d9e:	8b20      	ldrh	r0, [r4, #24]
   b4da0:	2100      	movs	r1, #0
   b4da2:	f002 f92e 	bl	b7002 <digitalWrite>
        digitalWrite(motor_pin_3, HIGH);
   b4da6:	2101      	movs	r1, #1
   b4da8:	8ba0      	ldrh	r0, [r4, #28]
   b4daa:	f002 f92a 	bl	b7002 <digitalWrite>
        digitalWrite(motor_pin_4, LOW);
   b4dae:	2100      	movs	r1, #0
   b4db0:	e7d6      	b.n	b4d60 <_ZN7Stepper9stepMotorEi+0x12c>
        digitalWrite(motor_pin_1, HIGH);
   b4db2:	2101      	movs	r1, #1
        digitalWrite(motor_pin_1, LOW);
   b4db4:	8aa0      	ldrh	r0, [r4, #20]
   b4db6:	f002 f924 	bl	b7002 <digitalWrite>
        digitalWrite(motor_pin_2, LOW);
   b4dba:	2100      	movs	r1, #0
   b4dbc:	e79e      	b.n	b4cfc <_ZN7Stepper9stepMotorEi+0xc8>
        digitalWrite(motor_pin_1, LOW);
   b4dbe:	2100      	movs	r1, #0
   b4dc0:	e7f8      	b.n	b4db4 <_ZN7Stepper9stepMotorEi+0x180>
}
   b4dc2:	bd38      	pop	{r3, r4, r5, pc}

000b4dc4 <_ZN7Stepper4stepEi>:
{
   b4dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (steps_to_move > 0) { this->direction = 1; }
   b4dc6:	2900      	cmp	r1, #0
  int steps_left = abs(steps_to_move);  // how many steps to take
   b4dc8:	ea81 75e1 	eor.w	r5, r1, r1, asr #31
{
   b4dcc:	4604      	mov	r4, r0
  int steps_left = abs(steps_to_move);  // how many steps to take
   b4dce:	eba5 75e1 	sub.w	r5, r5, r1, asr #31
  if (steps_to_move > 0) { this->direction = 1; }
   b4dd2:	dd24      	ble.n	b4e1e <_ZN7Stepper4stepEi+0x5a>
   b4dd4:	2301      	movs	r3, #1
   b4dd6:	6023      	str	r3, [r4, #0]
          this->step_number = 0;
   b4dd8:	2700      	movs	r7, #0
        stepMotor(this->step_number % 10);
   b4dda:	260a      	movs	r6, #10
  while (steps_left > 0)
   b4ddc:	b385      	cbz	r5, b4e40 <_ZN7Stepper4stepEi+0x7c>
   b4dde:	f000 f869 	bl	b4eb4 <HAL_Timer_Get_Micro_Seconds>
    if (now - this->last_step_time >= this->step_delay)
   b4de2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b4de4:	6862      	ldr	r2, [r4, #4]
   b4de6:	1ac3      	subs	r3, r0, r3
   b4de8:	4293      	cmp	r3, r2
   b4dea:	d3f7      	bcc.n	b4ddc <_ZN7Stepper4stepEi+0x18>
      if (this->direction == 1)
   b4dec:	6822      	ldr	r2, [r4, #0]
        this->step_number++;
   b4dee:	6923      	ldr	r3, [r4, #16]
      this->last_step_time = now;
   b4df0:	62a0      	str	r0, [r4, #40]	; 0x28
      if (this->direction == 1)
   b4df2:	2a01      	cmp	r2, #1
   b4df4:	d116      	bne.n	b4e24 <_ZN7Stepper4stepEi+0x60>
        if (this->step_number == this->number_of_steps) {
   b4df6:	68a2      	ldr	r2, [r4, #8]
        this->step_number++;
   b4df8:	3301      	adds	r3, #1
        if (this->step_number == this->number_of_steps) {
   b4dfa:	4293      	cmp	r3, r2
          this->step_number = 0;
   b4dfc:	bf08      	it	eq
   b4dfe:	463b      	moveq	r3, r7
        this->step_number--;
   b4e00:	6123      	str	r3, [r4, #16]
      if (this->pin_count == 5)
   b4e02:	e9d4 3103 	ldrd	r3, r1, [r4, #12]
   b4e06:	2b05      	cmp	r3, #5
      steps_left--;
   b4e08:	f105 35ff 	add.w	r5, r5, #4294967295
      if (this->pin_count == 5)
   b4e0c:	d110      	bne.n	b4e30 <_ZN7Stepper4stepEi+0x6c>
        stepMotor(this->step_number % 10);
   b4e0e:	fb91 f3f6 	sdiv	r3, r1, r6
   b4e12:	fb06 1113 	mls	r1, r6, r3, r1
        stepMotor(this->step_number % 4);
   b4e16:	4620      	mov	r0, r4
   b4e18:	f7ff ff0c 	bl	b4c34 <_ZN7Stepper9stepMotorEi>
   b4e1c:	e7de      	b.n	b4ddc <_ZN7Stepper4stepEi+0x18>
  if (steps_to_move < 0) { this->direction = 0; }
   b4e1e:	d0db      	beq.n	b4dd8 <_ZN7Stepper4stepEi+0x14>
   b4e20:	2300      	movs	r3, #0
   b4e22:	e7d8      	b.n	b4dd6 <_ZN7Stepper4stepEi+0x12>
        if (this->step_number == 0) {
   b4e24:	b90b      	cbnz	r3, b4e2a <_ZN7Stepper4stepEi+0x66>
          this->step_number = this->number_of_steps;
   b4e26:	68a3      	ldr	r3, [r4, #8]
   b4e28:	6123      	str	r3, [r4, #16]
        this->step_number--;
   b4e2a:	6923      	ldr	r3, [r4, #16]
   b4e2c:	3b01      	subs	r3, #1
   b4e2e:	e7e7      	b.n	b4e00 <_ZN7Stepper4stepEi+0x3c>
        stepMotor(this->step_number % 4);
   b4e30:	424b      	negs	r3, r1
   b4e32:	f003 0303 	and.w	r3, r3, #3
   b4e36:	f001 0103 	and.w	r1, r1, #3
   b4e3a:	bf58      	it	pl
   b4e3c:	4259      	negpl	r1, r3
   b4e3e:	e7ea      	b.n	b4e16 <_ZN7Stepper4stepEi+0x52>
}
   b4e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000b4e44 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4e44:	b508      	push	{r3, lr}
   b4e46:	4b02      	ldr	r3, [pc, #8]	; (b4e50 <netdb_freeaddrinfo+0xc>)
   b4e48:	681b      	ldr	r3, [r3, #0]
   b4e4a:	689b      	ldr	r3, [r3, #8]
   b4e4c:	9301      	str	r3, [sp, #4]
   b4e4e:	bd08      	pop	{r3, pc}
   b4e50:	00030268 	.word	0x00030268

000b4e54 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4e54:	b508      	push	{r3, lr}
   b4e56:	4b02      	ldr	r3, [pc, #8]	; (b4e60 <netdb_getaddrinfo+0xc>)
   b4e58:	681b      	ldr	r3, [r3, #0]
   b4e5a:	68db      	ldr	r3, [r3, #12]
   b4e5c:	9301      	str	r3, [sp, #4]
   b4e5e:	bd08      	pop	{r3, pc}
   b4e60:	00030268 	.word	0x00030268

000b4e64 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4e64:	b508      	push	{r3, lr}
   b4e66:	4b02      	ldr	r3, [pc, #8]	; (b4e70 <HAL_Pin_Mode+0xc>)
   b4e68:	681b      	ldr	r3, [r3, #0]
   b4e6a:	689b      	ldr	r3, [r3, #8]
   b4e6c:	9301      	str	r3, [sp, #4]
   b4e6e:	bd08      	pop	{r3, pc}
   b4e70:	0003022c 	.word	0x0003022c

000b4e74 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b4e74:	b508      	push	{r3, lr}
   b4e76:	4b02      	ldr	r3, [pc, #8]	; (b4e80 <HAL_Get_Pin_Mode+0xc>)
   b4e78:	681b      	ldr	r3, [r3, #0]
   b4e7a:	68db      	ldr	r3, [r3, #12]
   b4e7c:	9301      	str	r3, [sp, #4]
   b4e7e:	bd08      	pop	{r3, pc}
   b4e80:	0003022c 	.word	0x0003022c

000b4e84 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b4e84:	b508      	push	{r3, lr}
   b4e86:	4b02      	ldr	r3, [pc, #8]	; (b4e90 <HAL_GPIO_Write+0xc>)
   b4e88:	681b      	ldr	r3, [r3, #0]
   b4e8a:	691b      	ldr	r3, [r3, #16]
   b4e8c:	9301      	str	r3, [sp, #4]
   b4e8e:	bd08      	pop	{r3, pc}
   b4e90:	0003022c 	.word	0x0003022c

000b4e94 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4e94:	b508      	push	{r3, lr}
   b4e96:	4b02      	ldr	r3, [pc, #8]	; (b4ea0 <HAL_RNG_GetRandomNumber+0xc>)
   b4e98:	681b      	ldr	r3, [r3, #0]
   b4e9a:	685b      	ldr	r3, [r3, #4]
   b4e9c:	9301      	str	r3, [sp, #4]
   b4e9e:	bd08      	pop	{r3, pc}
   b4ea0:	00030218 	.word	0x00030218

000b4ea4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4ea4:	b508      	push	{r3, lr}
   b4ea6:	4b02      	ldr	r3, [pc, #8]	; (b4eb0 <HAL_Delay_Microseconds+0xc>)
   b4ea8:	681b      	ldr	r3, [r3, #0]
   b4eaa:	68db      	ldr	r3, [r3, #12]
   b4eac:	9301      	str	r3, [sp, #4]
   b4eae:	bd08      	pop	{r3, pc}
   b4eb0:	00030218 	.word	0x00030218

000b4eb4 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b4eb4:	b508      	push	{r3, lr}
   b4eb6:	4b02      	ldr	r3, [pc, #8]	; (b4ec0 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b4eb8:	681b      	ldr	r3, [r3, #0]
   b4eba:	691b      	ldr	r3, [r3, #16]
   b4ebc:	9301      	str	r3, [sp, #4]
   b4ebe:	bd08      	pop	{r3, pc}
   b4ec0:	00030218 	.word	0x00030218

000b4ec4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4ec4:	b508      	push	{r3, lr}
   b4ec6:	4b02      	ldr	r3, [pc, #8]	; (b4ed0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4ec8:	681b      	ldr	r3, [r3, #0]
   b4eca:	695b      	ldr	r3, [r3, #20]
   b4ecc:	9301      	str	r3, [sp, #4]
   b4ece:	bd08      	pop	{r3, pc}
   b4ed0:	00030218 	.word	0x00030218

000b4ed4 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b4ed4:	b508      	push	{r3, lr}
   b4ed6:	4b02      	ldr	r3, [pc, #8]	; (b4ee0 <hal_ble_stack_init+0xc>)
   b4ed8:	681b      	ldr	r3, [r3, #0]
   b4eda:	689b      	ldr	r3, [r3, #8]
   b4edc:	9301      	str	r3, [sp, #4]
   b4ede:	bd08      	pop	{r3, pc}
   b4ee0:	00030278 	.word	0x00030278

000b4ee4 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b4ee4:	b508      	push	{r3, lr}
   b4ee6:	4b02      	ldr	r3, [pc, #8]	; (b4ef0 <hal_ble_gap_set_advertising_data+0xc>)
   b4ee8:	681b      	ldr	r3, [r3, #0]
   b4eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4eec:	9301      	str	r3, [sp, #4]
   b4eee:	bd08      	pop	{r3, pc}
   b4ef0:	00030278 	.word	0x00030278

000b4ef4 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b4ef4:	b508      	push	{r3, lr}
   b4ef6:	4b02      	ldr	r3, [pc, #8]	; (b4f00 <hal_ble_gap_set_scan_response_data+0xc>)
   b4ef8:	681b      	ldr	r3, [r3, #0]
   b4efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b4efc:	9301      	str	r3, [sp, #4]
   b4efe:	bd08      	pop	{r3, pc}
   b4f00:	00030278 	.word	0x00030278

000b4f04 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b4f04:	b508      	push	{r3, lr}
   b4f06:	4b02      	ldr	r3, [pc, #8]	; (b4f10 <hal_ble_gap_start_advertising+0xc>)
   b4f08:	681b      	ldr	r3, [r3, #0]
   b4f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b4f0c:	9301      	str	r3, [sp, #4]
   b4f0e:	bd08      	pop	{r3, pc}
   b4f10:	00030278 	.word	0x00030278

000b4f14 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b4f14:	b508      	push	{r3, lr}
   b4f16:	4b03      	ldr	r3, [pc, #12]	; (b4f24 <hal_ble_gap_disconnect+0x10>)
   b4f18:	681b      	ldr	r3, [r3, #0]
   b4f1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b4f1e:	9301      	str	r3, [sp, #4]
   b4f20:	bd08      	pop	{r3, pc}
   b4f22:	0000      	.short	0x0000
   b4f24:	00030278 	.word	0x00030278

000b4f28 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b4f28:	b508      	push	{r3, lr}
   b4f2a:	4b03      	ldr	r3, [pc, #12]	; (b4f38 <hal_ble_gatt_server_add_service+0x10>)
   b4f2c:	681b      	ldr	r3, [r3, #0]
   b4f2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b4f32:	9301      	str	r3, [sp, #4]
   b4f34:	bd08      	pop	{r3, pc}
   b4f36:	0000      	.short	0x0000
   b4f38:	00030278 	.word	0x00030278

000b4f3c <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b4f3c:	b508      	push	{r3, lr}
   b4f3e:	4b03      	ldr	r3, [pc, #12]	; (b4f4c <hal_ble_gatt_server_add_characteristic+0x10>)
   b4f40:	681b      	ldr	r3, [r3, #0]
   b4f42:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b4f46:	9301      	str	r3, [sp, #4]
   b4f48:	bd08      	pop	{r3, pc}
   b4f4a:	0000      	.short	0x0000
   b4f4c:	00030278 	.word	0x00030278

000b4f50 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b4f50:	b508      	push	{r3, lr}
   b4f52:	4b03      	ldr	r3, [pc, #12]	; (b4f60 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b4f54:	681b      	ldr	r3, [r3, #0]
   b4f56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b4f5a:	9301      	str	r3, [sp, #4]
   b4f5c:	bd08      	pop	{r3, pc}
   b4f5e:	0000      	.short	0x0000
   b4f60:	00030278 	.word	0x00030278

000b4f64 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4f64:	b508      	push	{r3, lr}
   b4f66:	4b02      	ldr	r3, [pc, #8]	; (b4f70 <os_mutex_recursive_create+0xc>)
   b4f68:	681b      	ldr	r3, [r3, #0]
   b4f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4f6c:	9301      	str	r3, [sp, #4]
   b4f6e:	bd08      	pop	{r3, pc}
   b4f70:	00030248 	.word	0x00030248

000b4f74 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b4f74:	b508      	push	{r3, lr}
   b4f76:	4b02      	ldr	r3, [pc, #8]	; (b4f80 <os_mutex_recursive_lock+0xc>)
   b4f78:	681b      	ldr	r3, [r3, #0]
   b4f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4f7c:	9301      	str	r3, [sp, #4]
   b4f7e:	bd08      	pop	{r3, pc}
   b4f80:	00030248 	.word	0x00030248

000b4f84 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b4f84:	b508      	push	{r3, lr}
   b4f86:	4b02      	ldr	r3, [pc, #8]	; (b4f90 <os_mutex_recursive_unlock+0xc>)
   b4f88:	681b      	ldr	r3, [r3, #0]
   b4f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4f8c:	9301      	str	r3, [sp, #4]
   b4f8e:	bd08      	pop	{r3, pc}
   b4f90:	00030248 	.word	0x00030248

000b4f94 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4f94:	b508      	push	{r3, lr}
   b4f96:	4b02      	ldr	r3, [pc, #8]	; (b4fa0 <inet_inet_ntop+0xc>)
   b4f98:	681b      	ldr	r3, [r3, #0]
   b4f9a:	695b      	ldr	r3, [r3, #20]
   b4f9c:	9301      	str	r3, [sp, #4]
   b4f9e:	bd08      	pop	{r3, pc}
   b4fa0:	00030264 	.word	0x00030264

000b4fa4 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4fa4:	b508      	push	{r3, lr}
   b4fa6:	4b02      	ldr	r3, [pc, #8]	; (b4fb0 <hal_usart_write+0xc>)
   b4fa8:	681b      	ldr	r3, [r3, #0]
   b4faa:	68db      	ldr	r3, [r3, #12]
   b4fac:	9301      	str	r3, [sp, #4]
   b4fae:	bd08      	pop	{r3, pc}
   b4fb0:	0003023c 	.word	0x0003023c

000b4fb4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4fb4:	b508      	push	{r3, lr}
   b4fb6:	4b02      	ldr	r3, [pc, #8]	; (b4fc0 <hal_usart_available+0xc>)
   b4fb8:	681b      	ldr	r3, [r3, #0]
   b4fba:	691b      	ldr	r3, [r3, #16]
   b4fbc:	9301      	str	r3, [sp, #4]
   b4fbe:	bd08      	pop	{r3, pc}
   b4fc0:	0003023c 	.word	0x0003023c

000b4fc4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4fc4:	b508      	push	{r3, lr}
   b4fc6:	4b02      	ldr	r3, [pc, #8]	; (b4fd0 <hal_usart_read+0xc>)
   b4fc8:	681b      	ldr	r3, [r3, #0]
   b4fca:	695b      	ldr	r3, [r3, #20]
   b4fcc:	9301      	str	r3, [sp, #4]
   b4fce:	bd08      	pop	{r3, pc}
   b4fd0:	0003023c 	.word	0x0003023c

000b4fd4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4fd4:	b508      	push	{r3, lr}
   b4fd6:	4b02      	ldr	r3, [pc, #8]	; (b4fe0 <hal_usart_peek+0xc>)
   b4fd8:	681b      	ldr	r3, [r3, #0]
   b4fda:	699b      	ldr	r3, [r3, #24]
   b4fdc:	9301      	str	r3, [sp, #4]
   b4fde:	bd08      	pop	{r3, pc}
   b4fe0:	0003023c 	.word	0x0003023c

000b4fe4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4fe4:	b508      	push	{r3, lr}
   b4fe6:	4b02      	ldr	r3, [pc, #8]	; (b4ff0 <hal_usart_flush+0xc>)
   b4fe8:	681b      	ldr	r3, [r3, #0]
   b4fea:	69db      	ldr	r3, [r3, #28]
   b4fec:	9301      	str	r3, [sp, #4]
   b4fee:	bd08      	pop	{r3, pc}
   b4ff0:	0003023c 	.word	0x0003023c

000b4ff4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4ff4:	b508      	push	{r3, lr}
   b4ff6:	4b02      	ldr	r3, [pc, #8]	; (b5000 <hal_usart_is_enabled+0xc>)
   b4ff8:	681b      	ldr	r3, [r3, #0]
   b4ffa:	6a1b      	ldr	r3, [r3, #32]
   b4ffc:	9301      	str	r3, [sp, #4]
   b4ffe:	bd08      	pop	{r3, pc}
   b5000:	0003023c 	.word	0x0003023c

000b5004 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5004:	b508      	push	{r3, lr}
   b5006:	4b02      	ldr	r3, [pc, #8]	; (b5010 <hal_usart_available_data_for_write+0xc>)
   b5008:	681b      	ldr	r3, [r3, #0]
   b500a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b500c:	9301      	str	r3, [sp, #4]
   b500e:	bd08      	pop	{r3, pc}
   b5010:	0003023c 	.word	0x0003023c

000b5014 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b5014:	b508      	push	{r3, lr}
   b5016:	4b02      	ldr	r3, [pc, #8]	; (b5020 <hal_usart_begin_config+0xc>)
   b5018:	681b      	ldr	r3, [r3, #0]
   b501a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b501c:	9301      	str	r3, [sp, #4]
   b501e:	bd08      	pop	{r3, pc}
   b5020:	0003023c 	.word	0x0003023c

000b5024 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5024:	b508      	push	{r3, lr}
   b5026:	4b02      	ldr	r3, [pc, #8]	; (b5030 <hal_usart_init_ex+0xc>)
   b5028:	681b      	ldr	r3, [r3, #0]
   b502a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b502c:	9301      	str	r3, [sp, #4]
   b502e:	bd08      	pop	{r3, pc}
   b5030:	0003023c 	.word	0x0003023c

000b5034 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5034:	b508      	push	{r3, lr}
   b5036:	4b02      	ldr	r3, [pc, #8]	; (b5040 <hal_i2c_write+0xc>)
   b5038:	681b      	ldr	r3, [r3, #0]
   b503a:	6a1b      	ldr	r3, [r3, #32]
   b503c:	9301      	str	r3, [sp, #4]
   b503e:	bd08      	pop	{r3, pc}
   b5040:	00030228 	.word	0x00030228

000b5044 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5044:	b508      	push	{r3, lr}
   b5046:	4b02      	ldr	r3, [pc, #8]	; (b5050 <hal_i2c_available+0xc>)
   b5048:	681b      	ldr	r3, [r3, #0]
   b504a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b504c:	9301      	str	r3, [sp, #4]
   b504e:	bd08      	pop	{r3, pc}
   b5050:	00030228 	.word	0x00030228

000b5054 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5054:	b508      	push	{r3, lr}
   b5056:	4b02      	ldr	r3, [pc, #8]	; (b5060 <hal_i2c_read+0xc>)
   b5058:	681b      	ldr	r3, [r3, #0]
   b505a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b505c:	9301      	str	r3, [sp, #4]
   b505e:	bd08      	pop	{r3, pc}
   b5060:	00030228 	.word	0x00030228

000b5064 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5064:	b508      	push	{r3, lr}
   b5066:	4b02      	ldr	r3, [pc, #8]	; (b5070 <hal_i2c_peek+0xc>)
   b5068:	681b      	ldr	r3, [r3, #0]
   b506a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b506c:	9301      	str	r3, [sp, #4]
   b506e:	bd08      	pop	{r3, pc}
   b5070:	00030228 	.word	0x00030228

000b5074 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5074:	b508      	push	{r3, lr}
   b5076:	4b02      	ldr	r3, [pc, #8]	; (b5080 <hal_i2c_flush+0xc>)
   b5078:	681b      	ldr	r3, [r3, #0]
   b507a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b507c:	9301      	str	r3, [sp, #4]
   b507e:	bd08      	pop	{r3, pc}
   b5080:	00030228 	.word	0x00030228

000b5084 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5084:	b508      	push	{r3, lr}
   b5086:	4b02      	ldr	r3, [pc, #8]	; (b5090 <hal_i2c_is_enabled+0xc>)
   b5088:	681b      	ldr	r3, [r3, #0]
   b508a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b508c:	9301      	str	r3, [sp, #4]
   b508e:	bd08      	pop	{r3, pc}
   b5090:	00030228 	.word	0x00030228

000b5094 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5094:	b508      	push	{r3, lr}
   b5096:	4b02      	ldr	r3, [pc, #8]	; (b50a0 <hal_i2c_init+0xc>)
   b5098:	681b      	ldr	r3, [r3, #0]
   b509a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b509c:	9301      	str	r3, [sp, #4]
   b509e:	bd08      	pop	{r3, pc}
   b50a0:	00030228 	.word	0x00030228

000b50a4 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b50a4:	b508      	push	{r3, lr}
   b50a6:	4b02      	ldr	r3, [pc, #8]	; (b50b0 <hal_spi_init+0xc>)
   b50a8:	681b      	ldr	r3, [r3, #0]
   b50aa:	69db      	ldr	r3, [r3, #28]
   b50ac:	9301      	str	r3, [sp, #4]
   b50ae:	bd08      	pop	{r3, pc}
   b50b0:	00030230 	.word	0x00030230

000b50b4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b50b4:	b508      	push	{r3, lr}
   b50b6:	4b02      	ldr	r3, [pc, #8]	; (b50c0 <hal_spi_is_enabled+0xc>)
   b50b8:	681b      	ldr	r3, [r3, #0]
   b50ba:	6a1b      	ldr	r3, [r3, #32]
   b50bc:	9301      	str	r3, [sp, #4]
   b50be:	bd08      	pop	{r3, pc}
   b50c0:	00030230 	.word	0x00030230

000b50c4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b50c4:	b508      	push	{r3, lr}
   b50c6:	4b02      	ldr	r3, [pc, #8]	; (b50d0 <HAL_USB_USART_Init+0xc>)
   b50c8:	681b      	ldr	r3, [r3, #0]
   b50ca:	681b      	ldr	r3, [r3, #0]
   b50cc:	9301      	str	r3, [sp, #4]
   b50ce:	bd08      	pop	{r3, pc}
   b50d0:	0003024c 	.word	0x0003024c

000b50d4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b50d4:	b508      	push	{r3, lr}
   b50d6:	4b02      	ldr	r3, [pc, #8]	; (b50e0 <HAL_USB_USART_Begin+0xc>)
   b50d8:	681b      	ldr	r3, [r3, #0]
   b50da:	685b      	ldr	r3, [r3, #4]
   b50dc:	9301      	str	r3, [sp, #4]
   b50de:	bd08      	pop	{r3, pc}
   b50e0:	0003024c 	.word	0x0003024c

000b50e4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b50e4:	b508      	push	{r3, lr}
   b50e6:	4b02      	ldr	r3, [pc, #8]	; (b50f0 <HAL_USB_USART_Available_Data+0xc>)
   b50e8:	681b      	ldr	r3, [r3, #0]
   b50ea:	691b      	ldr	r3, [r3, #16]
   b50ec:	9301      	str	r3, [sp, #4]
   b50ee:	bd08      	pop	{r3, pc}
   b50f0:	0003024c 	.word	0x0003024c

000b50f4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b50f4:	b508      	push	{r3, lr}
   b50f6:	4b02      	ldr	r3, [pc, #8]	; (b5100 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b50f8:	681b      	ldr	r3, [r3, #0]
   b50fa:	695b      	ldr	r3, [r3, #20]
   b50fc:	9301      	str	r3, [sp, #4]
   b50fe:	bd08      	pop	{r3, pc}
   b5100:	0003024c 	.word	0x0003024c

000b5104 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5104:	b508      	push	{r3, lr}
   b5106:	4b02      	ldr	r3, [pc, #8]	; (b5110 <HAL_USB_USART_Receive_Data+0xc>)
   b5108:	681b      	ldr	r3, [r3, #0]
   b510a:	699b      	ldr	r3, [r3, #24]
   b510c:	9301      	str	r3, [sp, #4]
   b510e:	bd08      	pop	{r3, pc}
   b5110:	0003024c 	.word	0x0003024c

000b5114 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5114:	b508      	push	{r3, lr}
   b5116:	4b02      	ldr	r3, [pc, #8]	; (b5120 <HAL_USB_USART_Send_Data+0xc>)
   b5118:	681b      	ldr	r3, [r3, #0]
   b511a:	69db      	ldr	r3, [r3, #28]
   b511c:	9301      	str	r3, [sp, #4]
   b511e:	bd08      	pop	{r3, pc}
   b5120:	0003024c 	.word	0x0003024c

000b5124 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5124:	b508      	push	{r3, lr}
   b5126:	4b02      	ldr	r3, [pc, #8]	; (b5130 <HAL_USB_USART_Flush_Data+0xc>)
   b5128:	681b      	ldr	r3, [r3, #0]
   b512a:	6a1b      	ldr	r3, [r3, #32]
   b512c:	9301      	str	r3, [sp, #4]
   b512e:	bd08      	pop	{r3, pc}
   b5130:	0003024c 	.word	0x0003024c

000b5134 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b5134:	b508      	push	{r3, lr}
   b5136:	4b02      	ldr	r3, [pc, #8]	; (b5140 <panic_+0xc>)
   b5138:	681b      	ldr	r3, [r3, #0]
   b513a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b513c:	9301      	str	r3, [sp, #4]
   b513e:	bd08      	pop	{r3, pc}
   b5140:	00030260 	.word	0x00030260

000b5144 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b5144:	b508      	push	{r3, lr}
   b5146:	4b02      	ldr	r3, [pc, #8]	; (b5150 <log_message+0xc>)
   b5148:	681b      	ldr	r3, [r3, #0]
   b514a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b514c:	9301      	str	r3, [sp, #4]
   b514e:	bd08      	pop	{r3, pc}
   b5150:	00030260 	.word	0x00030260

000b5154 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5154:	b508      	push	{r3, lr}
   b5156:	4b02      	ldr	r3, [pc, #8]	; (b5160 <set_system_mode+0xc>)
   b5158:	681b      	ldr	r3, [r3, #0]
   b515a:	685b      	ldr	r3, [r3, #4]
   b515c:	9301      	str	r3, [sp, #4]
   b515e:	bd08      	pop	{r3, pc}
   b5160:	00030220 	.word	0x00030220

000b5164 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5164:	b508      	push	{r3, lr}
   b5166:	4b02      	ldr	r3, [pc, #8]	; (b5170 <system_delay_ms+0xc>)
   b5168:	681b      	ldr	r3, [r3, #0]
   b516a:	695b      	ldr	r3, [r3, #20]
   b516c:	9301      	str	r3, [sp, #4]
   b516e:	bd08      	pop	{r3, pc}
   b5170:	00030220 	.word	0x00030220

000b5174 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5174:	b508      	push	{r3, lr}
   b5176:	4b03      	ldr	r3, [pc, #12]	; (b5184 <system_ctrl_set_app_request_handler+0x10>)
   b5178:	681b      	ldr	r3, [r3, #0]
   b517a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b517e:	9301      	str	r3, [sp, #4]
   b5180:	bd08      	pop	{r3, pc}
   b5182:	0000      	.short	0x0000
   b5184:	00030220 	.word	0x00030220

000b5188 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5188:	b508      	push	{r3, lr}
   b518a:	4b03      	ldr	r3, [pc, #12]	; (b5198 <system_ctrl_set_result+0x10>)
   b518c:	681b      	ldr	r3, [r3, #0]
   b518e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5192:	9301      	str	r3, [sp, #4]
   b5194:	bd08      	pop	{r3, pc}
   b5196:	0000      	.short	0x0000
   b5198:	00030220 	.word	0x00030220

000b519c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b519c:	b508      	push	{r3, lr}
   b519e:	4b02      	ldr	r3, [pc, #8]	; (b51a8 <network_connect+0xc>)
   b51a0:	681b      	ldr	r3, [r3, #0]
   b51a2:	685b      	ldr	r3, [r3, #4]
   b51a4:	9301      	str	r3, [sp, #4]
   b51a6:	bd08      	pop	{r3, pc}
   b51a8:	00030240 	.word	0x00030240

000b51ac <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b51ac:	b508      	push	{r3, lr}
   b51ae:	4b02      	ldr	r3, [pc, #8]	; (b51b8 <network_connecting+0xc>)
   b51b0:	681b      	ldr	r3, [r3, #0]
   b51b2:	689b      	ldr	r3, [r3, #8]
   b51b4:	9301      	str	r3, [sp, #4]
   b51b6:	bd08      	pop	{r3, pc}
   b51b8:	00030240 	.word	0x00030240

000b51bc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b51bc:	b508      	push	{r3, lr}
   b51be:	4b02      	ldr	r3, [pc, #8]	; (b51c8 <network_disconnect+0xc>)
   b51c0:	681b      	ldr	r3, [r3, #0]
   b51c2:	68db      	ldr	r3, [r3, #12]
   b51c4:	9301      	str	r3, [sp, #4]
   b51c6:	bd08      	pop	{r3, pc}
   b51c8:	00030240 	.word	0x00030240

000b51cc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b51cc:	b508      	push	{r3, lr}
   b51ce:	4b02      	ldr	r3, [pc, #8]	; (b51d8 <network_ready+0xc>)
   b51d0:	681b      	ldr	r3, [r3, #0]
   b51d2:	691b      	ldr	r3, [r3, #16]
   b51d4:	9301      	str	r3, [sp, #4]
   b51d6:	bd08      	pop	{r3, pc}
   b51d8:	00030240 	.word	0x00030240

000b51dc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b51dc:	b508      	push	{r3, lr}
   b51de:	4b02      	ldr	r3, [pc, #8]	; (b51e8 <network_on+0xc>)
   b51e0:	681b      	ldr	r3, [r3, #0]
   b51e2:	695b      	ldr	r3, [r3, #20]
   b51e4:	9301      	str	r3, [sp, #4]
   b51e6:	bd08      	pop	{r3, pc}
   b51e8:	00030240 	.word	0x00030240

000b51ec <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b51ec:	b508      	push	{r3, lr}
   b51ee:	4b02      	ldr	r3, [pc, #8]	; (b51f8 <network_off+0xc>)
   b51f0:	681b      	ldr	r3, [r3, #0]
   b51f2:	699b      	ldr	r3, [r3, #24]
   b51f4:	9301      	str	r3, [sp, #4]
   b51f6:	bd08      	pop	{r3, pc}
   b51f8:	00030240 	.word	0x00030240

000b51fc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b51fc:	b508      	push	{r3, lr}
   b51fe:	4b02      	ldr	r3, [pc, #8]	; (b5208 <network_listen+0xc>)
   b5200:	681b      	ldr	r3, [r3, #0]
   b5202:	69db      	ldr	r3, [r3, #28]
   b5204:	9301      	str	r3, [sp, #4]
   b5206:	bd08      	pop	{r3, pc}
   b5208:	00030240 	.word	0x00030240

000b520c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b520c:	b508      	push	{r3, lr}
   b520e:	4b02      	ldr	r3, [pc, #8]	; (b5218 <network_listening+0xc>)
   b5210:	681b      	ldr	r3, [r3, #0]
   b5212:	6a1b      	ldr	r3, [r3, #32]
   b5214:	9301      	str	r3, [sp, #4]
   b5216:	bd08      	pop	{r3, pc}
   b5218:	00030240 	.word	0x00030240

000b521c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b521c:	b508      	push	{r3, lr}
   b521e:	4b02      	ldr	r3, [pc, #8]	; (b5228 <network_set_listen_timeout+0xc>)
   b5220:	681b      	ldr	r3, [r3, #0]
   b5222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5224:	9301      	str	r3, [sp, #4]
   b5226:	bd08      	pop	{r3, pc}
   b5228:	00030240 	.word	0x00030240

000b522c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b522c:	b508      	push	{r3, lr}
   b522e:	4b02      	ldr	r3, [pc, #8]	; (b5238 <network_get_listen_timeout+0xc>)
   b5230:	681b      	ldr	r3, [r3, #0]
   b5232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5234:	9301      	str	r3, [sp, #4]
   b5236:	bd08      	pop	{r3, pc}
   b5238:	00030240 	.word	0x00030240

000b523c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b523c:	b508      	push	{r3, lr}
   b523e:	4b02      	ldr	r3, [pc, #8]	; (b5248 <network_is_on+0xc>)
   b5240:	681b      	ldr	r3, [r3, #0]
   b5242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5244:	9301      	str	r3, [sp, #4]
   b5246:	bd08      	pop	{r3, pc}
   b5248:	00030240 	.word	0x00030240

000b524c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b524c:	b508      	push	{r3, lr}
   b524e:	4b02      	ldr	r3, [pc, #8]	; (b5258 <network_is_off+0xc>)
   b5250:	681b      	ldr	r3, [r3, #0]
   b5252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5254:	9301      	str	r3, [sp, #4]
   b5256:	bd08      	pop	{r3, pc}
   b5258:	00030240 	.word	0x00030240

000b525c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b525c:	b508      	push	{r3, lr}
   b525e:	4b02      	ldr	r3, [pc, #8]	; (b5268 <spark_set_random_seed_from_cloud_handler+0xc>)
   b5260:	681b      	ldr	r3, [r3, #0]
   b5262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5264:	9301      	str	r3, [sp, #4]
   b5266:	bd08      	pop	{r3, pc}
   b5268:	00030244 	.word	0x00030244

000b526c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b526c:	b508      	push	{r3, lr}
   b526e:	4b02      	ldr	r3, [pc, #8]	; (b5278 <malloc+0xc>)
   b5270:	681b      	ldr	r3, [r3, #0]
   b5272:	681b      	ldr	r3, [r3, #0]
   b5274:	9301      	str	r3, [sp, #4]
   b5276:	bd08      	pop	{r3, pc}
   b5278:	0003021c 	.word	0x0003021c

000b527c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b527c:	b508      	push	{r3, lr}
   b527e:	4b02      	ldr	r3, [pc, #8]	; (b5288 <free+0xc>)
   b5280:	681b      	ldr	r3, [r3, #0]
   b5282:	685b      	ldr	r3, [r3, #4]
   b5284:	9301      	str	r3, [sp, #4]
   b5286:	bd08      	pop	{r3, pc}
   b5288:	0003021c 	.word	0x0003021c

000b528c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b528c:	b508      	push	{r3, lr}
   b528e:	4b02      	ldr	r3, [pc, #8]	; (b5298 <realloc+0xc>)
   b5290:	681b      	ldr	r3, [r3, #0]
   b5292:	689b      	ldr	r3, [r3, #8]
   b5294:	9301      	str	r3, [sp, #4]
   b5296:	bd08      	pop	{r3, pc}
   b5298:	0003021c 	.word	0x0003021c

000b529c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b529c:	b508      	push	{r3, lr}
   b529e:	4b02      	ldr	r3, [pc, #8]	; (b52a8 <vsnprintf+0xc>)
   b52a0:	681b      	ldr	r3, [r3, #0]
   b52a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b52a4:	9301      	str	r3, [sp, #4]
   b52a6:	bd08      	pop	{r3, pc}
   b52a8:	0003021c 	.word	0x0003021c

000b52ac <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b52ac:	b508      	push	{r3, lr}
   b52ae:	4b02      	ldr	r3, [pc, #8]	; (b52b8 <abort+0xc>)
   b52b0:	681b      	ldr	r3, [r3, #0]
   b52b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b52b4:	9301      	str	r3, [sp, #4]
   b52b6:	bd08      	pop	{r3, pc}
   b52b8:	0003021c 	.word	0x0003021c

000b52bc <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b52bc:	b508      	push	{r3, lr}
   b52be:	4b02      	ldr	r3, [pc, #8]	; (b52c8 <__errno+0xc>)
   b52c0:	681b      	ldr	r3, [r3, #0]
   b52c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b52c4:	9301      	str	r3, [sp, #4]
   b52c6:	bd08      	pop	{r3, pc}
   b52c8:	0003021c 	.word	0x0003021c

000b52cc <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b52cc:	b508      	push	{r3, lr}
   b52ce:	4b02      	ldr	r3, [pc, #8]	; (b52d8 <__assert_func+0xc>)
   b52d0:	681b      	ldr	r3, [r3, #0]
   b52d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b52d4:	9301      	str	r3, [sp, #4]
   b52d6:	bd08      	pop	{r3, pc}
   b52d8:	0003021c 	.word	0x0003021c

000b52dc <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b52dc:	b508      	push	{r3, lr}
   b52de:	4b02      	ldr	r3, [pc, #8]	; (b52e8 <newlib_impure_ptr_callback+0xc>)
   b52e0:	681b      	ldr	r3, [r3, #0]
   b52e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b52e4:	9301      	str	r3, [sp, #4]
   b52e6:	bd08      	pop	{r3, pc}
   b52e8:	0003021c 	.word	0x0003021c

000b52ec <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b52ec:	2200      	movs	r2, #0
   b52ee:	6840      	ldr	r0, [r0, #4]
   b52f0:	4611      	mov	r1, r2
   b52f2:	f7ff bf8b 	b.w	b520c <network_listening>

000b52f6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b52f6:	2200      	movs	r2, #0
   b52f8:	6840      	ldr	r0, [r0, #4]
   b52fa:	4611      	mov	r1, r2
   b52fc:	f7ff bf96 	b.w	b522c <network_get_listen_timeout>

000b5300 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5300:	6840      	ldr	r0, [r0, #4]
   b5302:	2200      	movs	r2, #0
   b5304:	f7ff bf8a 	b.w	b521c <network_set_listen_timeout>

000b5308 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5308:	6840      	ldr	r0, [r0, #4]
   b530a:	2200      	movs	r2, #0
   b530c:	f081 0101 	eor.w	r1, r1, #1
   b5310:	f7ff bf74 	b.w	b51fc <network_listen>

000b5314 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5314:	2300      	movs	r3, #0
   b5316:	6840      	ldr	r0, [r0, #4]
   b5318:	461a      	mov	r2, r3
   b531a:	4619      	mov	r1, r3
   b531c:	f7ff bf66 	b.w	b51ec <network_off>

000b5320 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5320:	2300      	movs	r3, #0
   b5322:	6840      	ldr	r0, [r0, #4]
   b5324:	461a      	mov	r2, r3
   b5326:	4619      	mov	r1, r3
   b5328:	f7ff bf58 	b.w	b51dc <network_on>

000b532c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b532c:	2200      	movs	r2, #0
   b532e:	6840      	ldr	r0, [r0, #4]
   b5330:	4611      	mov	r1, r2
   b5332:	f7ff bf4b 	b.w	b51cc <network_ready>

000b5336 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5336:	2200      	movs	r2, #0
   b5338:	6840      	ldr	r0, [r0, #4]
   b533a:	4611      	mov	r1, r2
   b533c:	f7ff bf36 	b.w	b51ac <network_connecting>

000b5340 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5340:	6840      	ldr	r0, [r0, #4]
   b5342:	2200      	movs	r2, #0
   b5344:	2102      	movs	r1, #2
   b5346:	f7ff bf39 	b.w	b51bc <network_disconnect>

000b534a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b534a:	2300      	movs	r3, #0
   b534c:	6840      	ldr	r0, [r0, #4]
   b534e:	461a      	mov	r2, r3
   b5350:	f7ff bf24 	b.w	b519c <network_connect>

000b5354 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5354:	4b02      	ldr	r3, [pc, #8]	; (b5360 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5356:	2203      	movs	r2, #3
   b5358:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b535a:	4a02      	ldr	r2, [pc, #8]	; (b5364 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b535c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b535e:	4770      	bx	lr
   b5360:	2003e6ac 	.word	0x2003e6ac
   b5364:	000b798c 	.word	0x000b798c

000b5368 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5368:	b510      	push	{r4, lr}
   b536a:	4604      	mov	r4, r0
   b536c:	4608      	mov	r0, r1
{
    _spi = spi;
   b536e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5370:	f7ff fe98 	bl	b50a4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5374:	2300      	movs	r3, #0
   b5376:	6063      	str	r3, [r4, #4]
}
   b5378:	4620      	mov	r0, r4
   b537a:	bd10      	pop	{r4, pc}

000b537c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b537c:	4b05      	ldr	r3, [pc, #20]	; (b5394 <_GLOBAL__sub_I_System+0x18>)
   b537e:	2202      	movs	r2, #2
   b5380:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5382:	4b05      	ldr	r3, [pc, #20]	; (b5398 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5384:	4a05      	ldr	r2, [pc, #20]	; (b539c <_GLOBAL__sub_I_System+0x20>)
   b5386:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5388:	2000      	movs	r0, #0
   b538a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b538e:	f7ff bee1 	b.w	b5154 <set_system_mode>
   b5392:	bf00      	nop
   b5394:	2003e6c0 	.word	0x2003e6c0
   b5398:	2003e6b4 	.word	0x2003e6b4
   b539c:	ffff0000 	.word	0xffff0000

000b53a0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b53a0:	b510      	push	{r4, lr}
   b53a2:	4604      	mov	r4, r0
{
	free(buffer);
   b53a4:	6800      	ldr	r0, [r0, #0]
   b53a6:	f7ff ff69 	bl	b527c <free>
}
   b53aa:	4620      	mov	r0, r4
   b53ac:	bd10      	pop	{r4, pc}

000b53ae <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b53ae:	b510      	push	{r4, lr}
   b53b0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b53b2:	6800      	ldr	r0, [r0, #0]
   b53b4:	b108      	cbz	r0, b53ba <_ZN6String10invalidateEv+0xc>
   b53b6:	f7ff ff61 	bl	b527c <free>
	buffer = NULL;
   b53ba:	2300      	movs	r3, #0
	capacity = len = 0;
   b53bc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b53c0:	6023      	str	r3, [r4, #0]
}
   b53c2:	bd10      	pop	{r4, pc}

000b53c4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b53c4:	b538      	push	{r3, r4, r5, lr}
   b53c6:	4604      	mov	r4, r0
   b53c8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b53ca:	6800      	ldr	r0, [r0, #0]
   b53cc:	3101      	adds	r1, #1
   b53ce:	f7ff ff5d 	bl	b528c <realloc>
	if (newbuffer) {
   b53d2:	b110      	cbz	r0, b53da <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b53d4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b53d8:	2001      	movs	r0, #1
	}
	return 0;
}
   b53da:	bd38      	pop	{r3, r4, r5, pc}

000b53dc <_ZN6String7reserveEj>:
{
   b53dc:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b53de:	6803      	ldr	r3, [r0, #0]
{
   b53e0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b53e2:	b123      	cbz	r3, b53ee <_ZN6String7reserveEj+0x12>
   b53e4:	6843      	ldr	r3, [r0, #4]
   b53e6:	428b      	cmp	r3, r1
   b53e8:	d301      	bcc.n	b53ee <_ZN6String7reserveEj+0x12>
   b53ea:	2001      	movs	r0, #1
}
   b53ec:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b53ee:	4620      	mov	r0, r4
   b53f0:	f7ff ffe8 	bl	b53c4 <_ZN6String12changeBufferEj>
   b53f4:	2800      	cmp	r0, #0
   b53f6:	d0f9      	beq.n	b53ec <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b53f8:	68a3      	ldr	r3, [r4, #8]
   b53fa:	2b00      	cmp	r3, #0
   b53fc:	d1f5      	bne.n	b53ea <_ZN6String7reserveEj+0xe>
   b53fe:	6822      	ldr	r2, [r4, #0]
   b5400:	7013      	strb	r3, [r2, #0]
   b5402:	e7f2      	b.n	b53ea <_ZN6String7reserveEj+0xe>

000b5404 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b5404:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5406:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b5408:	4611      	mov	r1, r2
   b540a:	9201      	str	r2, [sp, #4]
{
   b540c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b540e:	f7ff ffe5 	bl	b53dc <_ZN6String7reserveEj>
   b5412:	9a01      	ldr	r2, [sp, #4]
   b5414:	b928      	cbnz	r0, b5422 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b5416:	4620      	mov	r0, r4
   b5418:	f7ff ffc9 	bl	b53ae <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b541c:	4620      	mov	r0, r4
   b541e:	b003      	add	sp, #12
   b5420:	bd30      	pop	{r4, r5, pc}
	len = length;
   b5422:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b5424:	4629      	mov	r1, r5
   b5426:	6820      	ldr	r0, [r4, #0]
   b5428:	f001 ffb2 	bl	b7390 <memcpy>
	buffer[len] = 0;
   b542c:	6822      	ldr	r2, [r4, #0]
   b542e:	68a3      	ldr	r3, [r4, #8]
   b5430:	2100      	movs	r1, #0
   b5432:	54d1      	strb	r1, [r2, r3]
	return *this;
   b5434:	e7f2      	b.n	b541c <_ZN6String4copyEPKcj+0x18>

000b5436 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b5436:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b5438:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b543a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b543e:	4604      	mov	r4, r0
	len = 0;
   b5440:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5442:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b5444:	b141      	cbz	r1, b5458 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b5446:	4608      	mov	r0, r1
   b5448:	9101      	str	r1, [sp, #4]
   b544a:	f002 f811 	bl	b7470 <strlen>
   b544e:	9901      	ldr	r1, [sp, #4]
   b5450:	4602      	mov	r2, r0
   b5452:	4620      	mov	r0, r4
   b5454:	f7ff ffd6 	bl	b5404 <_ZN6String4copyEPKcj>
}
   b5458:	4620      	mov	r0, r4
   b545a:	b002      	add	sp, #8
   b545c:	bd10      	pop	{r4, pc}

000b545e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b545e:	b538      	push	{r3, r4, r5, lr}
   b5460:	4605      	mov	r5, r0
	if (buffer) {
   b5462:	6800      	ldr	r0, [r0, #0]
{
   b5464:	460c      	mov	r4, r1
	if (buffer) {
   b5466:	b168      	cbz	r0, b5484 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b5468:	686a      	ldr	r2, [r5, #4]
   b546a:	688b      	ldr	r3, [r1, #8]
   b546c:	429a      	cmp	r2, r3
   b546e:	d307      	bcc.n	b5480 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b5470:	6809      	ldr	r1, [r1, #0]
   b5472:	f001 fff5 	bl	b7460 <strcpy>
			len = rhs.len;
   b5476:	68a3      	ldr	r3, [r4, #8]
   b5478:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b547a:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b547c:	60a3      	str	r3, [r4, #8]
}
   b547e:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b5480:	f7ff fefc 	bl	b527c <free>
	buffer = rhs.buffer;
   b5484:	6823      	ldr	r3, [r4, #0]
   b5486:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b5488:	6863      	ldr	r3, [r4, #4]
   b548a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b548c:	68a3      	ldr	r3, [r4, #8]
   b548e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b5490:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b5492:	e9c4 3300 	strd	r3, r3, [r4]
   b5496:	e7f1      	b.n	b547c <_ZN6String4moveERS_+0x1e>

000b5498 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   b5498:	4288      	cmp	r0, r1
{
   b549a:	b510      	push	{r4, lr}
   b549c:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   b549e:	d001      	beq.n	b54a4 <_ZN6StringaSEOS_+0xc>
   b54a0:	f7ff ffdd 	bl	b545e <_ZN6String4moveERS_>
	return *this;
}
   b54a4:	4620      	mov	r0, r4
   b54a6:	bd10      	pop	{r4, pc}

000b54a8 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b54a8:	b513      	push	{r0, r1, r4, lr}
   b54aa:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b54ac:	b159      	cbz	r1, b54c6 <_ZN6StringaSEPKc+0x1e>
   b54ae:	4608      	mov	r0, r1
   b54b0:	9101      	str	r1, [sp, #4]
   b54b2:	f001 ffdd 	bl	b7470 <strlen>
   b54b6:	9901      	ldr	r1, [sp, #4]
   b54b8:	4602      	mov	r2, r0
   b54ba:	4620      	mov	r0, r4
   b54bc:	f7ff ffa2 	bl	b5404 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b54c0:	4620      	mov	r0, r4
   b54c2:	b002      	add	sp, #8
   b54c4:	bd10      	pop	{r4, pc}
	else invalidate();
   b54c6:	f7ff ff72 	bl	b53ae <_ZN6String10invalidateEv>
   b54ca:	e7f9      	b.n	b54c0 <_ZN6StringaSEPKc+0x18>

000b54cc <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b54cc:	b570      	push	{r4, r5, r6, lr}
   b54ce:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b54d0:	460e      	mov	r6, r1
   b54d2:	b909      	cbnz	r1, b54d8 <_ZN6String6concatEPKcj+0xc>
   b54d4:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b54d6:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b54d8:	b16a      	cbz	r2, b54f6 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b54da:	6884      	ldr	r4, [r0, #8]
   b54dc:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b54de:	4621      	mov	r1, r4
   b54e0:	f7ff ff7c 	bl	b53dc <_ZN6String7reserveEj>
   b54e4:	2800      	cmp	r0, #0
   b54e6:	d0f5      	beq.n	b54d4 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b54e8:	6828      	ldr	r0, [r5, #0]
   b54ea:	68ab      	ldr	r3, [r5, #8]
   b54ec:	4631      	mov	r1, r6
   b54ee:	4418      	add	r0, r3
   b54f0:	f001 ffb6 	bl	b7460 <strcpy>
	len = newlen;
   b54f4:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b54f6:	2001      	movs	r0, #1
   b54f8:	e7ed      	b.n	b54d6 <_ZN6String6concatEPKcj+0xa>

000b54fa <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b54fa:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b54fc:	2300      	movs	r3, #0
	buf[0] = c;
   b54fe:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b5502:	2201      	movs	r2, #1
   b5504:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b5506:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b550a:	f7ff ffdf 	bl	b54cc <_ZN6String6concatEPKcj>
}
   b550e:	b003      	add	sp, #12
   b5510:	f85d fb04 	ldr.w	pc, [sp], #4

000b5514 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   b5514:	b558      	push	{r3, r4, r6, lr}
   b5516:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   b5518:	b12a      	cbz	r2, b5526 <_ZNK6String8getBytesEPhjj+0x12>
   b551a:	b121      	cbz	r1, b5526 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   b551c:	6884      	ldr	r4, [r0, #8]
   b551e:	42a3      	cmp	r3, r4
   b5520:	d302      	bcc.n	b5528 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   b5522:	2300      	movs	r3, #0
   b5524:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   b5526:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   b5528:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   b552a:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   b552c:	6801      	ldr	r1, [r0, #0]
   b552e:	4294      	cmp	r4, r2
   b5530:	bf28      	it	cs
   b5532:	4614      	movcs	r4, r2
   b5534:	4419      	add	r1, r3
   b5536:	4622      	mov	r2, r4
   b5538:	4630      	mov	r0, r6
   b553a:	f001 ffa1 	bl	b7480 <strncpy>
	buf[n] = 0;
   b553e:	2300      	movs	r3, #0
   b5540:	5533      	strb	r3, [r6, r4]
   b5542:	e7f0      	b.n	b5526 <_ZNK6String8getBytesEPhjj+0x12>

000b5544 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   b5544:	6800      	ldr	r0, [r0, #0]
   b5546:	b108      	cbz	r0, b554c <_ZNK6String5toIntEv+0x8>
   b5548:	f001 bf0e 	b.w	b7368 <atol>
	return 0;
}
   b554c:	4770      	bx	lr

000b554e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b554e:	4770      	bx	lr

000b5550 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b5550:	4770      	bx	lr

000b5552 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b5552:	4770      	bx	lr

000b5554 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5554:	4770      	bx	lr
	...

000b5558 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5558:	4b06      	ldr	r3, [pc, #24]	; (b5574 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b555a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b555c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b555e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5562:	d005      	beq.n	b5570 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5564:	4608      	mov	r0, r1
   b5566:	f001 fde7 	bl	b7138 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b556a:	2800      	cmp	r0, #0
   b556c:	bf08      	it	eq
   b556e:	2400      	moveq	r4, #0
      }
   b5570:	4620      	mov	r0, r4
   b5572:	bd10      	pop	{r4, pc}
   b5574:	000b7b08 	.word	0x000b7b08

000b5578 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5578:	4b06      	ldr	r3, [pc, #24]	; (b5594 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b557a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b557c:	b510      	push	{r4, lr}
   b557e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5582:	d005      	beq.n	b5590 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5584:	4608      	mov	r0, r1
   b5586:	f001 fdd7 	bl	b7138 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b558a:	2800      	cmp	r0, #0
   b558c:	bf08      	it	eq
   b558e:	2400      	moveq	r4, #0
      }
   b5590:	4620      	mov	r0, r4
   b5592:	bd10      	pop	{r4, pc}
   b5594:	000b7b08 	.word	0x000b7b08

000b5598 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5598:	4b06      	ldr	r3, [pc, #24]	; (b55b4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b559a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b559c:	b510      	push	{r4, lr}
   b559e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b55a2:	d005      	beq.n	b55b0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b55a4:	4608      	mov	r0, r1
   b55a6:	f001 fdc7 	bl	b7138 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b55aa:	2800      	cmp	r0, #0
   b55ac:	bf08      	it	eq
   b55ae:	2400      	moveq	r4, #0
      }
   b55b0:	4620      	mov	r0, r4
   b55b2:	bd10      	pop	{r4, pc}
   b55b4:	000b7b08 	.word	0x000b7b08

000b55b8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b55b8:	b510      	push	{r4, lr}
   b55ba:	2168      	movs	r1, #104	; 0x68
   b55bc:	4604      	mov	r4, r0
   b55be:	f7fe fd6c 	bl	b409a <_ZdlPvj>
   b55c2:	4620      	mov	r0, r4
   b55c4:	bd10      	pop	{r4, pc}

000b55c6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b55c6:	b510      	push	{r4, lr}
   b55c8:	2128      	movs	r1, #40	; 0x28
   b55ca:	4604      	mov	r4, r0
   b55cc:	f7fe fd65 	bl	b409a <_ZdlPvj>
   b55d0:	4620      	mov	r0, r4
   b55d2:	bd10      	pop	{r4, pc}

000b55d4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b55d4:	b510      	push	{r4, lr}
   b55d6:	2130      	movs	r1, #48	; 0x30
   b55d8:	4604      	mov	r4, r0
   b55da:	f7fe fd5e 	bl	b409a <_ZdlPvj>
   b55de:	4620      	mov	r0, r4
   b55e0:	bd10      	pop	{r4, pc}

000b55e2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b55e2:	2168      	movs	r1, #104	; 0x68
   b55e4:	f7fe bd59 	b.w	b409a <_ZdlPvj>

000b55e8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b55e8:	2128      	movs	r1, #40	; 0x28
   b55ea:	f7fe bd56 	b.w	b409a <_ZdlPvj>

000b55ee <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b55ee:	2130      	movs	r1, #48	; 0x30
   b55f0:	f7fe bd53 	b.w	b409a <_ZdlPvj>

000b55f4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b55f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b55f6:	2500      	movs	r5, #0
   b55f8:	1cec      	adds	r4, r5, #3
   b55fa:	428c      	cmp	r4, r1
   b55fc:	d80d      	bhi.n	b561a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b55fe:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b5600:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b5602:	5d87      	ldrb	r7, [r0, r6]
   b5604:	4297      	cmp	r7, r2
   b5606:	d105      	bne.n	b5614 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b5608:	4426      	add	r6, r4
   b560a:	42b1      	cmp	r1, r6
   b560c:	d305      	bcc.n	b561a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b560e:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b5610:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b5612:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b5614:	3401      	adds	r4, #1
   b5616:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b5618:	e7ee      	b.n	b55f8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b561a:	2000      	movs	r0, #0
   b561c:	e7f9      	b.n	b5612 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b5620 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b5620:	4a02      	ldr	r2, [pc, #8]	; (b562c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b5622:	2100      	movs	r1, #0
   b5624:	200a      	movs	r0, #10
   b5626:	f7ff bd85 	b.w	b5134 <panic_>
   b562a:	bf00      	nop
   b562c:	000b4ea5 	.word	0x000b4ea5

000b5630 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5630:	b430      	push	{r4, r5}
   b5632:	460d      	mov	r5, r1
   b5634:	4611      	mov	r1, r2
   b5636:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b5638:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b563a:	6809      	ldr	r1, [r1, #0]
   b563c:	6828      	ldr	r0, [r5, #0]
   b563e:	e9d3 4300 	ldrd	r4, r3, [r3]
   b5642:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b5644:	bc30      	pop	{r4, r5}
   b5646:	4760      	bx	ip

000b5648 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b5648:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b564a:	b538      	push	{r3, r4, r5, lr}
   b564c:	4604      	mov	r4, r0
	switch (__op)
   b564e:	d102      	bne.n	b5656 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b5650:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b5652:	6023      	str	r3, [r4, #0]
	}
   b5654:	e003      	b.n	b565e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b5656:	2a02      	cmp	r2, #2
   b5658:	d003      	beq.n	b5662 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b565a:	2a03      	cmp	r2, #3
   b565c:	d00d      	beq.n	b567a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b565e:	2000      	movs	r0, #0
   b5660:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b5662:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b5664:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5666:	f7fe fd14 	bl	b4092 <_Znwj>
   b566a:	4603      	mov	r3, r0
   b566c:	2800      	cmp	r0, #0
   b566e:	d0f0      	beq.n	b5652 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b5670:	e895 0003 	ldmia.w	r5, {r0, r1}
   b5674:	e883 0003 	stmia.w	r3, {r0, r1}
   b5678:	e7eb      	b.n	b5652 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b567a:	6800      	ldr	r0, [r0, #0]
   b567c:	2800      	cmp	r0, #0
   b567e:	d0ee      	beq.n	b565e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b5680:	2108      	movs	r1, #8
   b5682:	f7fe fd0a 	bl	b409a <_ZdlPvj>
   b5686:	e7ea      	b.n	b565e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b5688 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b5688:	b510      	push	{r4, lr}
      if (_M_manager)
   b568a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b568c:	4604      	mov	r4, r0
      if (_M_manager)
   b568e:	b113      	cbz	r3, b5696 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5690:	2203      	movs	r2, #3
   b5692:	4601      	mov	r1, r0
   b5694:	4798      	blx	r3
    }
   b5696:	4620      	mov	r0, r4
   b5698:	bd10      	pop	{r4, pc}

000b569a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b569a:	b510      	push	{r4, lr}
   b569c:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b569e:	3058      	adds	r0, #88	; 0x58
   b56a0:	f7ff fff2 	bl	b5688 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b56a4:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b56a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b56ac:	f7ff be78 	b.w	b53a0 <_ZN6StringD1Ev>

000b56b0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b56b0:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b56b2:	6843      	ldr	r3, [r0, #4]
   b56b4:	3b01      	subs	r3, #1
    {
   b56b6:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b56b8:	6043      	str	r3, [r0, #4]
   b56ba:	b963      	cbnz	r3, b56d6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b56bc:	6803      	ldr	r3, [r0, #0]
   b56be:	689b      	ldr	r3, [r3, #8]
   b56c0:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b56c2:	68a3      	ldr	r3, [r4, #8]
   b56c4:	3b01      	subs	r3, #1
   b56c6:	60a3      	str	r3, [r4, #8]
   b56c8:	b92b      	cbnz	r3, b56d6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b56ca:	6823      	ldr	r3, [r4, #0]
   b56cc:	4620      	mov	r0, r4
   b56ce:	68db      	ldr	r3, [r3, #12]
    }
   b56d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b56d4:	4718      	bx	r3
    }
   b56d6:	bd10      	pop	{r4, pc}

000b56d8 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b56d8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b56dc:	b2da      	uxtb	r2, r3
   b56de:	2a09      	cmp	r2, #9
   b56e0:	d801      	bhi.n	b56e6 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b56e2:	4618      	mov	r0, r3
   b56e4:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b56e6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b56ea:	2b05      	cmp	r3, #5
   b56ec:	d801      	bhi.n	b56f2 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b56ee:	3857      	subs	r0, #87	; 0x57
   b56f0:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b56f2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b56f6:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b56f8:	bf94      	ite	ls
   b56fa:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b56fc:	f04f 30ff 	movhi.w	r0, #4294967295
}
   b5700:	4770      	bx	lr
	...

000b5704 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b5704:	b510      	push	{r4, lr}
            locked_(false) {
   b5706:	2300      	movs	r3, #0
   b5708:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b570a:	4b04      	ldr	r3, [pc, #16]	; (b571c <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b570c:	4604      	mov	r4, r0
   b570e:	6818      	ldr	r0, [r3, #0]
   b5710:	f7ff fc30 	bl	b4f74 <os_mutex_recursive_lock>
        locked_ = true;
   b5714:	2301      	movs	r3, #1
   b5716:	7023      	strb	r3, [r4, #0]
    }
   b5718:	4620      	mov	r0, r4
   b571a:	bd10      	pop	{r4, pc}
   b571c:	2003e6cc 	.word	0x2003e6cc

000b5720 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b5720:	b510      	push	{r4, lr}
        if (locked_) {
   b5722:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b5724:	4604      	mov	r4, r0
        if (locked_) {
   b5726:	b11b      	cbz	r3, b5730 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b5728:	4b02      	ldr	r3, [pc, #8]	; (b5734 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b572a:	6818      	ldr	r0, [r3, #0]
   b572c:	f7ff fc2a 	bl	b4f84 <os_mutex_recursive_unlock>
    }
   b5730:	4620      	mov	r0, r4
   b5732:	bd10      	pop	{r4, pc}
   b5734:	2003e6cc 	.word	0x2003e6cc

000b5738 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b5738:	b082      	sub	sp, #8
   b573a:	4603      	mov	r3, r0
    address_ = addr;
   b573c:	6808      	ldr	r0, [r1, #0]
   b573e:	6849      	ldr	r1, [r1, #4]
   b5740:	466a      	mov	r2, sp
   b5742:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b5744:	466a      	mov	r2, sp
   b5746:	ca03      	ldmia	r2!, {r0, r1}
   b5748:	6018      	str	r0, [r3, #0]
}
   b574a:	4618      	mov	r0, r3
    address_ = addr.address_;
   b574c:	6059      	str	r1, [r3, #4]
}
   b574e:	b002      	add	sp, #8
   b5750:	4770      	bx	lr

000b5752 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b5752:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b5754:	7982      	ldrb	r2, [r0, #6]
   b5756:	798b      	ldrb	r3, [r1, #6]
   b5758:	429a      	cmp	r2, r3
   b575a:	d106      	bne.n	b576a <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b575c:	2206      	movs	r2, #6
   b575e:	f001 fe07 	bl	b7370 <memcmp>
   b5762:	fab0 f080 	clz	r0, r0
   b5766:	0940      	lsrs	r0, r0, #5
}
   b5768:	bd08      	pop	{r3, pc}
    return false;
   b576a:	2000      	movs	r0, #0
   b576c:	e7fc      	b.n	b5768 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b576e <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b576e:	f04f 33ff 	mov.w	r3, #4294967295
   b5772:	6003      	str	r3, [r0, #0]
   b5774:	8083      	strh	r3, [r0, #4]
}
   b5776:	2000      	movs	r0, #0
   b5778:	4770      	bx	lr

000b577a <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b577a:	b508      	push	{r3, lr}
   b577c:	4602      	mov	r2, r0
        : address_{} {
   b577e:	2100      	movs	r1, #0
   b5780:	6001      	str	r1, [r0, #0]
   b5782:	6041      	str	r1, [r0, #4]
    clear();
   b5784:	f7ff fff3 	bl	b576e <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b5788:	7191      	strb	r1, [r2, #6]
}
   b578a:	4610      	mov	r0, r2
   b578c:	bd08      	pop	{r3, pc}
	...

000b5790 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b5790:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b5792:	2301      	movs	r3, #1
   b5794:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b5796:	4b05      	ldr	r3, [pc, #20]	; (b57ac <_ZN8particle7BleUuidC1Ev+0x1c>)
   b5798:	4602      	mov	r2, r0
   b579a:	f103 0110 	add.w	r1, r3, #16
   b579e:	f853 4b04 	ldr.w	r4, [r3], #4
   b57a2:	f842 4b04 	str.w	r4, [r2], #4
   b57a6:	428b      	cmp	r3, r1
   b57a8:	d1f9      	bne.n	b579e <_ZN8particle7BleUuidC1Ev+0xe>
}
   b57aa:	bd10      	pop	{r4, pc}
   b57ac:	000b7b16 	.word	0x000b7b16

000b57b0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b57b0:	b510      	push	{r4, lr}
    if (uuid128) {
   b57b2:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b57b4:	4604      	mov	r4, r0
    if (uuid128) {
   b57b6:	b1b1      	cbz	r1, b57e6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b57b8:	2a01      	cmp	r2, #1
   b57ba:	f101 0210 	add.w	r2, r1, #16
   b57be:	d10a      	bne.n	b57d6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b57c0:	4601      	mov	r1, r0
   b57c2:	f853 0b04 	ldr.w	r0, [r3], #4
   b57c6:	f841 0b04 	str.w	r0, [r1], #4
   b57ca:	4293      	cmp	r3, r2
   b57cc:	d1f9      	bne.n	b57c2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b57ce:	2301      	movs	r3, #1
   b57d0:	6123      	str	r3, [r4, #16]
}
   b57d2:	4620      	mov	r0, r4
   b57d4:	bd10      	pop	{r4, pc}
   b57d6:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b57d8:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b57dc:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b57e0:	429a      	cmp	r2, r3
   b57e2:	d1f9      	bne.n	b57d8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b57e4:	e7f3      	b.n	b57ce <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b57e6:	2210      	movs	r2, #16
   b57e8:	f001 fdfa 	bl	b73e0 <memset>
   b57ec:	e7f1      	b.n	b57d2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b57ee <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b57ee:	b538      	push	{r3, r4, r5, lr}
   b57f0:	4604      	mov	r4, r0
   b57f2:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b57f4:	461a      	mov	r2, r3
   b57f6:	f7ff ffdb 	bl	b57b0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b57fa:	81a5      	strh	r5, [r4, #12]
}
   b57fc:	4620      	mov	r0, r4
   b57fe:	bd38      	pop	{r3, r4, r5, pc}

000b5800 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b5800:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b5802:	6902      	ldr	r2, [r0, #16]
   b5804:	b922      	cbnz	r2, b5810 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b5806:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b5808:	3800      	subs	r0, #0
   b580a:	bf18      	it	ne
   b580c:	2001      	movne	r0, #1
}
   b580e:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b5810:	4902      	ldr	r1, [pc, #8]	; (b581c <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b5812:	2210      	movs	r2, #16
   b5814:	f001 fdac 	bl	b7370 <memcmp>
   b5818:	e7f6      	b.n	b5808 <_ZNK8particle7BleUuid7isValidEv+0x8>
   b581a:	bf00      	nop
   b581c:	000b7b36 	.word	0x000b7b36

000b5820 <_ZNK8particle7BleUuid4typeEv>:
}
   b5820:	6900      	ldr	r0, [r0, #16]
   b5822:	4770      	bx	lr

000b5824 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b5824:	b538      	push	{r3, r4, r5, lr}
   b5826:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b5828:	2214      	movs	r2, #20
   b582a:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b582c:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b582e:	f001 fdd7 	bl	b73e0 <memset>
    if (type_ == BleUuidType::SHORT) {
   b5832:	6923      	ldr	r3, [r4, #16]
   b5834:	b91b      	cbnz	r3, b583e <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b5836:	89a3      	ldrh	r3, [r4, #12]
   b5838:	802b      	strh	r3, [r5, #0]
}
   b583a:	4628      	mov	r0, r5
   b583c:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b583e:	2301      	movs	r3, #1
   b5840:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b5842:	4621      	mov	r1, r4
   b5844:	462b      	mov	r3, r5
   b5846:	f104 0210 	add.w	r2, r4, #16
   b584a:	f851 0b04 	ldr.w	r0, [r1], #4
   b584e:	f843 0b04 	str.w	r0, [r3], #4
   b5852:	4291      	cmp	r1, r2
   b5854:	d1f9      	bne.n	b584a <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b5856:	e7f0      	b.n	b583a <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b5858 <_ZNK8particle7BleUuid7shortedEv>:
}
   b5858:	8980      	ldrh	r0, [r0, #12]
   b585a:	4770      	bx	lr

000b585c <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b585c:	4770      	bx	lr

000b585e <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b585e:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b5860:	6902      	ldr	r2, [r0, #16]
   b5862:	690b      	ldr	r3, [r1, #16]
   b5864:	429a      	cmp	r2, r3
   b5866:	d106      	bne.n	b5876 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b5868:	2210      	movs	r2, #16
   b586a:	f001 fd81 	bl	b7370 <memcmp>
   b586e:	fab0 f080 	clz	r0, r0
   b5872:	0940      	lsrs	r0, r0, #5
}
   b5874:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b5876:	2000      	movs	r0, #0
   b5878:	e7fc      	b.n	b5874 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b587c <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b587c:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b587e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b5882:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b5884:	4b34      	ldr	r3, [pc, #208]	; (b5958 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b5886:	460c      	mov	r4, r1
   b5888:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b588a:	4602      	mov	r2, r0
   b588c:	f103 0110 	add.w	r1, r3, #16
   b5890:	f853 0b04 	ldr.w	r0, [r3], #4
   b5894:	f842 0b04 	str.w	r0, [r2], #4
   b5898:	428b      	cmp	r3, r1
   b589a:	d1f9      	bne.n	b5890 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b589c:	b344      	cbz	r4, b58f0 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b589e:	2124      	movs	r1, #36	; 0x24
   b58a0:	4620      	mov	r0, r4
   b58a2:	f001 fe00 	bl	b74a6 <strnlen>
   b58a6:	2804      	cmp	r0, #4
   b58a8:	f04f 0500 	mov.w	r5, #0
   b58ac:	d123      	bne.n	b58f6 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b58ae:	f8ad 5004 	strh.w	r5, [sp, #4]
   b58b2:	af01      	add	r7, sp, #4
   b58b4:	1ca5      	adds	r5, r4, #2
   b58b6:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b58b8:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b58bc:	f7ff ff0c 	bl	b56d8 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b58c0:	f1b0 0800 	subs.w	r8, r0, #0
   b58c4:	db12      	blt.n	b58ec <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b58c6:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b58ca:	f7ff ff05 	bl	b56d8 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b58ce:	2800      	cmp	r0, #0
   b58d0:	db0c      	blt.n	b58ec <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b58d2:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b58d4:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b58d8:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b58da:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b58de:	d1eb      	bne.n	b58b8 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b58e0:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b58e4:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b58e6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b58ea:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b58ec:	2300      	movs	r3, #0
   b58ee:	6133      	str	r3, [r6, #16]
}
   b58f0:	b002      	add	sp, #8
   b58f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b58f6:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b58fa:	2124      	movs	r1, #36	; 0x24
   b58fc:	4620      	mov	r0, r4
   b58fe:	f001 fdd2 	bl	b74a6 <strnlen>
   b5902:	42a8      	cmp	r0, r5
   b5904:	d807      	bhi.n	b5916 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b5906:	4642      	mov	r2, r8
   b5908:	2100      	movs	r1, #0
   b590a:	4630      	mov	r0, r6
}
   b590c:	b002      	add	sp, #8
   b590e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b5912:	f001 bd65 	b.w	b73e0 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b5916:	f1b8 0f00 	cmp.w	r8, #0
   b591a:	d0e9      	beq.n	b58f0 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b591c:	5d60      	ldrb	r0, [r4, r5]
   b591e:	f7ff fedb 	bl	b56d8 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b5922:	0603      	lsls	r3, r0, #24
   b5924:	d415      	bmi.n	b5952 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b5926:	0100      	lsls	r0, r0, #4
   b5928:	f108 38ff 	add.w	r8, r8, #4294967295
   b592c:	b2c7      	uxtb	r7, r0
   b592e:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b5932:	2124      	movs	r1, #36	; 0x24
   b5934:	4620      	mov	r0, r4
   b5936:	f001 fdb6 	bl	b74a6 <strnlen>
   b593a:	3501      	adds	r5, #1
   b593c:	42a8      	cmp	r0, r5
   b593e:	d908      	bls.n	b5952 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b5940:	5d60      	ldrb	r0, [r4, r5]
   b5942:	f7ff fec9 	bl	b56d8 <_ZN8particle11hexToNibbleEc>
   b5946:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b5948:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b594a:	bfa4      	itt	ge
   b594c:	4338      	orrge	r0, r7
   b594e:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b5952:	3501      	adds	r5, #1
   b5954:	e7d1      	b.n	b58fa <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b5956:	bf00      	nop
   b5958:	000b7b16 	.word	0x000b7b16

000b595c <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b595c:	b513      	push	{r0, r1, r4, lr}
   b595e:	4604      	mov	r4, r0
   b5960:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b5962:	f7ff ff15 	bl	b5790 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b5966:	4620      	mov	r0, r4
   b5968:	9901      	ldr	r1, [sp, #4]
   b596a:	f7ff ff87 	bl	b587c <_ZN8particle7BleUuid9constructEPKc>
}
   b596e:	4620      	mov	r0, r4
   b5970:	b002      	add	sp, #8
   b5972:	bd10      	pop	{r4, pc}

000b5974 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b5974:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b5976:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b597a:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b597c:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b597e:	8043      	strh	r3, [r0, #2]
   b5980:	220e      	movs	r2, #14
   b5982:	4629      	mov	r1, r5
   b5984:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b5986:	7105      	strb	r5, [r0, #4]
   b5988:	3006      	adds	r0, #6
   b598a:	f001 fd29 	bl	b73e0 <memset>
   b598e:	f104 0014 	add.w	r0, r4, #20
   b5992:	f7ff fefd 	bl	b5790 <_ZN8particle7BleUuidC1Ev>
   b5996:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b599a:	f7ff fef9 	bl	b5790 <_ZN8particle7BleUuidC1Ev>
   b599e:	4904      	ldr	r1, [pc, #16]	; (b59b0 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b59a0:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b59a4:	f7ff fd47 	bl	b5436 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b59a8:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b59aa:	4620      	mov	r0, r4
   b59ac:	bd38      	pop	{r3, r4, r5, pc}
   b59ae:	bf00      	nop
   b59b0:	000b7830 	.word	0x000b7830

000b59b4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b59b4:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b59b6:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b59ba:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b59be:	4293      	cmp	r3, r2
   b59c0:	4618      	mov	r0, r3
   b59c2:	d006      	beq.n	b59d2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b59c4:	6804      	ldr	r4, [r0, #0]
   b59c6:	8824      	ldrh	r4, [r4, #0]
   b59c8:	428c      	cmp	r4, r1
   b59ca:	f103 0308 	add.w	r3, r3, #8
   b59ce:	d1f6      	bne.n	b59be <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b59d0:	bd10      	pop	{r4, pc}
        return nullptr;
   b59d2:	2000      	movs	r0, #0
   b59d4:	e7fc      	b.n	b59d0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b59d8 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b59d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b59dc:	2600      	movs	r6, #0
   b59de:	6006      	str	r6, [r0, #0]
   b59e0:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b59e2:	2028      	movs	r0, #40	; 0x28
   b59e4:	460c      	mov	r4, r1
   b59e6:	f7fe fb54 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b59ea:	1e05      	subs	r5, r0, #0
   b59ec:	f105 080c 	add.w	r8, r5, #12
   b59f0:	d00f      	beq.n	b5a12 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b59f2:	2301      	movs	r3, #1
   b59f4:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b59f8:	4b08      	ldr	r3, [pc, #32]	; (b5a1c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b59fa:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b59fc:	4640      	mov	r0, r8
   b59fe:	f7ff fec7 	bl	b5790 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b5a02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b5a04:	622e      	str	r6, [r5, #32]
   b5a06:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b5a0a:	4646      	mov	r6, r8
   b5a0c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b5a0e:	6823      	ldr	r3, [r4, #0]
   b5a10:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b5a12:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b5a16:	4638      	mov	r0, r7
   b5a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5a1c:	000b7ad8 	.word	0x000b7ad8

000b5a20 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b5a20:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b5a22:	2500      	movs	r5, #0
   b5a24:	6005      	str	r5, [r0, #0]
   b5a26:	4606      	mov	r6, r0
   b5a28:	2030      	movs	r0, #48	; 0x30
   b5a2a:	f7fe fb32 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b5a2e:	4604      	mov	r4, r0
   b5a30:	b188      	cbz	r0, b5a56 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b5a32:	2301      	movs	r3, #1
   b5a34:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b5a38:	4b09      	ldr	r3, [pc, #36]	; (b5a60 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b5a3a:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b5a3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b5a40:	8183      	strh	r3, [r0, #12]
   b5a42:	300e      	adds	r0, #14
   b5a44:	f7ff fe99 	bl	b577a <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b5a48:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b5a4c:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b5a50:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b5a54:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b5a56:	6074      	str	r4, [r6, #4]
   b5a58:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b5a5a:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b5a5c:	4630      	mov	r0, r6
   b5a5e:	bd70      	pop	{r4, r5, r6, pc}
   b5a60:	000b7af4 	.word	0x000b7af4

000b5a64 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b5a64:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5a66:	460d      	mov	r5, r1
   b5a68:	4604      	mov	r4, r0
    WiringBleLock lk;
   b5a6a:	a801      	add	r0, sp, #4
   b5a6c:	f7ff fe4a 	bl	b5704 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b5a70:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b5a72:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b5a76:	6023      	str	r3, [r4, #0]
   b5a78:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b5a7c:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b5a7e:	a801      	add	r0, sp, #4
   b5a80:	f7ff fe4e 	bl	b5720 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b5a84:	4620      	mov	r0, r4
   b5a86:	b003      	add	sp, #12
   b5a88:	bd30      	pop	{r4, r5, pc}

000b5a8a <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b5a8a:	b530      	push	{r4, r5, lr}
   b5a8c:	4605      	mov	r5, r0
   b5a8e:	b087      	sub	sp, #28
   b5a90:	460c      	mov	r4, r1
    WiringBleLock lk;
   b5a92:	a801      	add	r0, sp, #4
   b5a94:	f7ff fe36 	bl	b5704 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b5a98:	682a      	ldr	r2, [r5, #0]
   b5a9a:	6823      	ldr	r3, [r4, #0]
   b5a9c:	8812      	ldrh	r2, [r2, #0]
   b5a9e:	881b      	ldrh	r3, [r3, #0]
   b5aa0:	429a      	cmp	r2, r3
   b5aa2:	d10d      	bne.n	b5ac0 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b5aa4:	4629      	mov	r1, r5
   b5aa6:	a802      	add	r0, sp, #8
   b5aa8:	f7ff ffdc 	bl	b5a64 <_ZNK8particle13BlePeerDevice7addressEv>
   b5aac:	4621      	mov	r1, r4
   b5aae:	a804      	add	r0, sp, #16
   b5ab0:	f7ff ffd8 	bl	b5a64 <_ZNK8particle13BlePeerDevice7addressEv>
   b5ab4:	a904      	add	r1, sp, #16
   b5ab6:	a802      	add	r0, sp, #8
   b5ab8:	f7ff fe4b 	bl	b5752 <_ZNK8particle10BleAddresseqERKS0_>
   b5abc:	4604      	mov	r4, r0
   b5abe:	b900      	cbnz	r0, b5ac2 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b5ac0:	2400      	movs	r4, #0
    WiringBleLock lk;
   b5ac2:	a801      	add	r0, sp, #4
   b5ac4:	f7ff fe2c 	bl	b5720 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b5ac8:	4620      	mov	r0, r4
   b5aca:	b007      	add	sp, #28
   b5acc:	bd30      	pop	{r4, r5, pc}
	...

000b5ad0 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b5ad0:	b510      	push	{r4, lr}
   b5ad2:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b5ad4:	2054      	movs	r0, #84	; 0x54
   b5ad6:	f7fe fadc 	bl	b4092 <_Znwj>
   b5ada:	4601      	mov	r1, r0
   b5adc:	b160      	cbz	r0, b5af8 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b5ade:	2300      	movs	r3, #0
   b5ae0:	e9c0 3300 	strd	r3, r3, [r0]
   b5ae4:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b5ae8:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b5aec:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b5af0:	6203      	str	r3, [r0, #32]
   b5af2:	62c3      	str	r3, [r0, #44]	; 0x2c
   b5af4:	63c3      	str	r3, [r0, #60]	; 0x3c
   b5af6:	64c3      	str	r3, [r0, #76]	; 0x4c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b5af8:	6021      	str	r1, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b5afa:	b919      	cbnz	r1, b5b04 <_ZN8particle14BleLocalDeviceC1Ev+0x34>
        SPARK_ASSERT(false);
   b5afc:	4a09      	ldr	r2, [pc, #36]	; (b5b24 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   b5afe:	200a      	movs	r0, #10
   b5b00:	f7ff fb18 	bl	b5134 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b5b04:	2000      	movs	r0, #0
   b5b06:	f7ff f9e5 	bl	b4ed4 <hal_ble_stack_init>
   b5b0a:	b120      	cbz	r0, b5b16 <_ZN8particle14BleLocalDeviceC1Ev+0x46>
   b5b0c:	4a05      	ldr	r2, [pc, #20]	; (b5b24 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   b5b0e:	2100      	movs	r1, #0
   b5b10:	200a      	movs	r0, #10
   b5b12:	f7ff fb0f 	bl	b5134 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b5b16:	6821      	ldr	r1, [r4, #0]
   b5b18:	4803      	ldr	r0, [pc, #12]	; (b5b28 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b5b1a:	2200      	movs	r2, #0
   b5b1c:	f7ff fa18 	bl	b4f50 <hal_ble_set_callback_on_periph_link_events>
}
   b5b20:	4620      	mov	r0, r4
   b5b22:	bd10      	pop	{r4, pc}
   b5b24:	000b4ea5 	.word	0x000b4ea5
   b5b28:	000b60a5 	.word	0x000b60a5

000b5b2c <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b5b2c:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b5b2e:	4c0a      	ldr	r4, [pc, #40]	; (b5b58 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b5b30:	7823      	ldrb	r3, [r4, #0]
   b5b32:	f3bf 8f5b 	dmb	ish
   b5b36:	07db      	lsls	r3, r3, #31
   b5b38:	d40c      	bmi.n	b5b54 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b5b3a:	4620      	mov	r0, r4
   b5b3c:	f7fe faaf 	bl	b409e <__cxa_guard_acquire>
   b5b40:	b140      	cbz	r0, b5b54 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b5b42:	4806      	ldr	r0, [pc, #24]	; (b5b5c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b5b44:	f7ff ffc4 	bl	b5ad0 <_ZN8particle14BleLocalDeviceC1Ev>
   b5b48:	4620      	mov	r0, r4
   b5b4a:	f7fe faad 	bl	b40a8 <__cxa_guard_release>
   b5b4e:	4804      	ldr	r0, [pc, #16]	; (b5b60 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b5b50:	f001 fc04 	bl	b735c <atexit>
    return instance;
}
   b5b54:	4801      	ldr	r0, [pc, #4]	; (b5b5c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b5b56:	bd10      	pop	{r4, pc}
   b5b58:	2003e6c4 	.word	0x2003e6c4
   b5b5c:	2003e6d0 	.word	0x2003e6d0
   b5b60:	000b5d79 	.word	0x000b5d79

000b5b64 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b5b64:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b5b66:	6803      	ldr	r3, [r0, #0]
   b5b68:	3b09      	subs	r3, #9
   b5b6a:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b5b6c:	b08d      	sub	sp, #52	; 0x34
   b5b6e:	4604      	mov	r4, r0
   b5b70:	460d      	mov	r5, r1
    switch (event->type) {
   b5b72:	d811      	bhi.n	b5b98 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b5b74:	f7ff ffda 	bl	b5b2c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5b78:	88a1      	ldrh	r1, [r4, #4]
   b5b7a:	6800      	ldr	r0, [r0, #0]
   b5b7c:	f7ff ff1a 	bl	b59b4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b5b80:	4603      	mov	r3, r0
   b5b82:	b958      	cbnz	r0, b5b9c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b5b84:	2220      	movs	r2, #32
   b5b86:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b5b8a:	4a0b      	ldr	r2, [pc, #44]	; (b5bb8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b5b8c:	9200      	str	r2, [sp, #0]
   b5b8e:	490b      	ldr	r1, [pc, #44]	; (b5bbc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b5b90:	aa04      	add	r2, sp, #16
   b5b92:	2032      	movs	r0, #50	; 0x32
   b5b94:	f7ff fad6 	bl	b5144 <log_message>
}
   b5b98:	b00d      	add	sp, #52	; 0x34
   b5b9a:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b5b9c:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b5b9e:	2a00      	cmp	r2, #0
   b5ba0:	d0fa      	beq.n	b5b98 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b5ba2:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5ba6:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b5baa:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b5bae:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b5bb0:	aa04      	add	r2, sp, #16
   b5bb2:	a903      	add	r1, sp, #12
   b5bb4:	47a0      	blx	r4
}
   b5bb6:	e7ef      	b.n	b5b98 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b5bb8:	000b79e7 	.word	0x000b79e7
   b5bbc:	000b79c0 	.word	0x000b79c0

000b5bc0 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b5bc0:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b5bc2:	2000      	movs	r0, #0
   b5bc4:	f7ff f986 	bl	b4ed4 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b5bc8:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b5bcc:	bd08      	pop	{r3, pc}

000b5bce <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b5bce:	b919      	cbnz	r1, b5bd8 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b5bd0:	460a      	mov	r2, r1
   b5bd2:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b5bd4:	f7ff b986 	b.w	b4ee4 <hal_ble_gap_set_advertising_data>
   b5bd8:	e9d1 0100 	ldrd	r0, r1, [r1]
   b5bdc:	2200      	movs	r2, #0
   b5bde:	e7f9      	b.n	b5bd4 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b5be0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b5be0:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b5be2:	1e14      	subs	r4, r2, #0
   b5be4:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b5be6:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b5be8:	db02      	blt.n	b5bf0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b5bea:	1862      	adds	r2, r4, r1
   b5bec:	429a      	cmp	r2, r3
   b5bee:	dd00      	ble.n	b5bf2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b5bf0:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b5bf2:	682a      	ldr	r2, [r5, #0]
   b5bf4:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b5bf6:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b5bf8:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5bfa:	1a52      	subs	r2, r2, r1
   b5bfc:	f001 fbd6 	bl	b73ac <memmove>
    size_ -= n;
   b5c00:	686a      	ldr	r2, [r5, #4]
   b5c02:	1b12      	subs	r2, r2, r4
   b5c04:	606a      	str	r2, [r5, #4]
}
   b5c06:	bd38      	pop	{r3, r4, r5, pc}

000b5c08 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b5c08:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b5c0a:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b5c0c:	4604      	mov	r4, r0
   b5c0e:	460d      	mov	r5, r1
   b5c10:	ab01      	add	r3, sp, #4
   b5c12:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5c16:	f7ff fced 	bl	b55f4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b5c1a:	4602      	mov	r2, r0
   b5c1c:	b138      	cbz	r0, b5c2e <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b5c1e:	9901      	ldr	r1, [sp, #4]
   b5c20:	4620      	mov	r0, r4
   b5c22:	f7ff ffdd 	bl	b5be0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b5c26:	4629      	mov	r1, r5
   b5c28:	4620      	mov	r0, r4
   b5c2a:	f7ff ffed 	bl	b5c08 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b5c2e:	b003      	add	sp, #12
   b5c30:	bd30      	pop	{r4, r5, pc}

000b5c32 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b5c32:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b5c34:	460c      	mov	r4, r1
   b5c36:	b929      	cbnz	r1, b5c44 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b5c38:	460a      	mov	r2, r1
   b5c3a:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b5c3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b5c40:	f7ff b958 	b.w	b4ef4 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b5c44:	2101      	movs	r1, #1
   b5c46:	4620      	mov	r0, r4
   b5c48:	f7ff ffde 	bl	b5c08 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b5c4c:	e9d4 0100 	ldrd	r0, r1, [r4]
   b5c50:	2200      	movs	r2, #0
   b5c52:	e7f3      	b.n	b5c3c <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b5c54 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b5c54:	b538      	push	{r3, r4, r5, lr}
   b5c56:	4604      	mov	r4, r0
   b5c58:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b5c5a:	f7ff ffb8 	bl	b5bce <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b5c5e:	2800      	cmp	r0, #0
   b5c60:	db0a      	blt.n	b5c78 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b5c62:	4629      	mov	r1, r5
   b5c64:	4620      	mov	r0, r4
   b5c66:	f7ff ffe4 	bl	b5c32 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b5c6a:	2800      	cmp	r0, #0
   b5c6c:	db04      	blt.n	b5c78 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b5c6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b5c72:	2000      	movs	r0, #0
   b5c74:	f7ff b946 	b.w	b4f04 <hal_ble_gap_start_advertising>
}
   b5c78:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5c7c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b5c7c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b5c7e:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b5c80:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b5c82:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5c84:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b5c86:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5c88:	f7fe fa03 	bl	b4092 <_Znwj>
   b5c8c:	b118      	cbz	r0, b5c96 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b5c8e:	682b      	ldr	r3, [r5, #0]
   b5c90:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5c92:	686b      	ldr	r3, [r5, #4]
   b5c94:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b5c96:	4b03      	ldr	r3, [pc, #12]	; (b5ca4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b5c98:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5c9a:	4b03      	ldr	r3, [pc, #12]	; (b5ca8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5c9c:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5c9e:	60a3      	str	r3, [r4, #8]
      }
   b5ca0:	4620      	mov	r0, r4
   b5ca2:	bd38      	pop	{r3, r4, r5, pc}
   b5ca4:	000b5631 	.word	0x000b5631
   b5ca8:	000b5649 	.word	0x000b5649

000b5cac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b5cac:	680b      	ldr	r3, [r1, #0]
   b5cae:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b5cb0:	b113      	cbz	r3, b5cb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b5cb2:	685a      	ldr	r2, [r3, #4]
   b5cb4:	3201      	adds	r2, #1
   b5cb6:	605a      	str	r2, [r3, #4]
      }
   b5cb8:	4770      	bx	lr

000b5cba <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b5cba:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5cbc:	f851 3b04 	ldr.w	r3, [r1], #4
   b5cc0:	4604      	mov	r4, r0
   b5cc2:	f840 3b04 	str.w	r3, [r0], #4
   b5cc6:	f7ff fff1 	bl	b5cac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b5cca:	6823      	ldr	r3, [r4, #0]
   b5ccc:	b90b      	cbnz	r3, b5cd2 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b5cce:	f7ff fca7 	bl	b5620 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b5cd2:	4620      	mov	r0, r4
   b5cd4:	bd10      	pop	{r4, pc}

000b5cd6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b5cd6:	b510      	push	{r4, lr}
   b5cd8:	f851 3b04 	ldr.w	r3, [r1], #4
   b5cdc:	4604      	mov	r4, r0
   b5cde:	f840 3b04 	str.w	r3, [r0], #4
   b5ce2:	f7ff ffe3 	bl	b5cac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b5ce6:	4620      	mov	r0, r4
   b5ce8:	bd10      	pop	{r4, pc}

000b5cea <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b5cea:	b510      	push	{r4, lr}
   b5cec:	f851 3b04 	ldr.w	r3, [r1], #4
   b5cf0:	4604      	mov	r4, r0
   b5cf2:	f840 3b04 	str.w	r3, [r0], #4
   b5cf6:	f7ff ffd9 	bl	b5cac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b5cfa:	4620      	mov	r0, r4
   b5cfc:	bd10      	pop	{r4, pc}

000b5cfe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b5cfe:	b510      	push	{r4, lr}
   b5d00:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b5d02:	6800      	ldr	r0, [r0, #0]
   b5d04:	b108      	cbz	r0, b5d0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b5d06:	f7ff fcd3 	bl	b56b0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b5d0a:	4620      	mov	r0, r4
   b5d0c:	bd10      	pop	{r4, pc}

000b5d0e <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b5d0e:	b510      	push	{r4, lr}
   b5d10:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b5d12:	3004      	adds	r0, #4
   b5d14:	f7ff fff3 	bl	b5cfe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5d18:	4620      	mov	r0, r4
   b5d1a:	bd10      	pop	{r4, pc}

000b5d1c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5d1c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5d1e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5d22:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5d24:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b5d28:	42ae      	cmp	r6, r5
   b5d2a:	d004      	beq.n	b5d36 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b5d2c:	1d28      	adds	r0, r5, #4
   b5d2e:	f7ff ffe6 	bl	b5cfe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5d32:	3508      	adds	r5, #8
   b5d34:	e7f8      	b.n	b5d28 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b5d36:	6820      	ldr	r0, [r4, #0]
   b5d38:	f7ff faa0 	bl	b527c <free>
}
   b5d3c:	4620      	mov	r0, r4
   b5d3e:	bd70      	pop	{r4, r5, r6, pc}

000b5d40 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5d40:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5d42:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5d46:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b5d48:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b5d4c:	42ae      	cmp	r6, r5
   b5d4e:	d004      	beq.n	b5d5a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b5d50:	1d28      	adds	r0, r5, #4
   b5d52:	f7ff ffd4 	bl	b5cfe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5d56:	3508      	adds	r5, #8
   b5d58:	e7f8      	b.n	b5d4c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b5d5a:	6820      	ldr	r0, [r4, #0]
   b5d5c:	f7ff fa8e 	bl	b527c <free>
}
   b5d60:	4620      	mov	r0, r4
   b5d62:	bd70      	pop	{r4, r5, r6, pc}

000b5d64 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b5d64:	b510      	push	{r4, lr}
   b5d66:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b5d68:	3024      	adds	r0, #36	; 0x24
   b5d6a:	f7ff ffe9 	bl	b5d40 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b5d6e:	f104 0018 	add.w	r0, r4, #24
   b5d72:	f7ff ffd3 	bl	b5d1c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b5d76:	bd10      	pop	{r4, pc}

000b5d78 <__tcf_0>:
    static BleLocalDevice instance;
   b5d78:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b5d7a:	4b15      	ldr	r3, [pc, #84]	; (b5dd0 <__tcf_0+0x58>)
   b5d7c:	681c      	ldr	r4, [r3, #0]
   b5d7e:	b334      	cbz	r4, b5dce <__tcf_0+0x56>
    class function<_Res(_ArgTypes...)>
   b5d80:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b5d84:	f7ff fc80 	bl	b5688 <_ZNSt14_Function_baseD1Ev>
   b5d88:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b5d8c:	f7ff fc7c 	bl	b5688 <_ZNSt14_Function_baseD1Ev>
   b5d90:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b5d94:	f7ff fc78 	bl	b5688 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b5d98:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b5d9c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b5da0:	42ae      	cmp	r6, r5
   b5da2:	d004      	beq.n	b5dae <__tcf_0+0x36>
      ~__shared_ptr() = default;
   b5da4:	1d28      	adds	r0, r5, #4
   b5da6:	f7ff ffaa 	bl	b5cfe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5daa:	3508      	adds	r5, #8
   b5dac:	e7f8      	b.n	b5da0 <__tcf_0+0x28>
    ::free(ptr);
   b5dae:	69a0      	ldr	r0, [r4, #24]
   b5db0:	f7ff fa64 	bl	b527c <free>
    ~BleLocalDeviceImpl() = default;
   b5db4:	f104 000c 	add.w	r0, r4, #12
   b5db8:	f7ff ffc2 	bl	b5d40 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b5dbc:	4620      	mov	r0, r4
   b5dbe:	f7ff ffad 	bl	b5d1c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b5dc2:	4620      	mov	r0, r4
   b5dc4:	2154      	movs	r1, #84	; 0x54
    static BleLocalDevice instance;
   b5dc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b5dca:	f7fe b966 	b.w	b409a <_ZdlPvj>
   b5dce:	bd70      	pop	{r4, r5, r6, pc}
   b5dd0:	2003e6d0 	.word	0x2003e6d0

000b5dd4 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b5dd4:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b5dd6:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b5dd8:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b5ddc:	e9c1 3300 	strd	r3, r3, [r1]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b5de0:	6803      	ldr	r3, [r0, #0]
   b5de2:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b5de4:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b5de6:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b5de8:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b5dea:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b5dec:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b5dee:	f7ff ff86 	bl	b5cfe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b5df2:	b002      	add	sp, #8
   b5df4:	bd10      	pop	{r4, pc}

000b5df6 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b5df6:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5df8:	b510      	push	{r4, lr}
      if (_M_empty())
   b5dfa:	b90a      	cbnz	r2, b5e00 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b5dfc:	f001 f998 	bl	b7130 <_ZSt25__throw_bad_function_callv>
    }
   b5e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5e04:	68c3      	ldr	r3, [r0, #12]
   b5e06:	4718      	bx	r3

000b5e08 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b5e08:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b5e0a:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b5e0c:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b5e0e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b5e10:	dd03      	ble.n	b5e1a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b5e12:	f7ff fa3b 	bl	b528c <realloc>
            if (!d) {
   b5e16:	b918      	cbnz	r0, b5e20 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b5e18:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b5e1a:	f7ff fa2f 	bl	b527c <free>
        T* d = nullptr;
   b5e1e:	2000      	movs	r0, #0
        data_ = d;
   b5e20:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b5e22:	60a5      	str	r5, [r4, #8]
        return true;
   b5e24:	2001      	movs	r0, #1
   b5e26:	e7f7      	b.n	b5e18 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b5e28 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b5e28:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b5e2a:	6883      	ldr	r3, [r0, #8]
   b5e2c:	428b      	cmp	r3, r1
   b5e2e:	da02      	bge.n	b5e36 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b5e30:	f7ff ffea 	bl	b5e08 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b5e34:	bd08      	pop	{r3, pc}
    return true;
   b5e36:	2001      	movs	r0, #1
   b5e38:	e7fc      	b.n	b5e34 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b5e3a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b5e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5e3e:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b5e40:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b5e42:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b5e44:	4419      	add	r1, r3
   b5e46:	6883      	ldr	r3, [r0, #8]
   b5e48:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b5e4a:	4604      	mov	r4, r0
   b5e4c:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b5e4e:	dc12      	bgt.n	b5e76 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b5e50:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5e52:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5e54:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5e56:	1bd2      	subs	r2, r2, r7
   b5e58:	4631      	mov	r1, r6
   b5e5a:	1970      	adds	r0, r6, r5
   b5e5c:	f001 faa6 	bl	b73ac <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b5e60:	462a      	mov	r2, r5
   b5e62:	4641      	mov	r1, r8
   b5e64:	4630      	mov	r0, r6
   b5e66:	f001 fa93 	bl	b7390 <memcpy>
    size_ += n;
   b5e6a:	6863      	ldr	r3, [r4, #4]
   b5e6c:	442b      	add	r3, r5
   b5e6e:	6063      	str	r3, [r4, #4]
    return true;
   b5e70:	2001      	movs	r0, #1
}
   b5e72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b5e76:	f7ff ffc7 	bl	b5e08 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b5e7a:	2800      	cmp	r0, #0
   b5e7c:	d1e8      	bne.n	b5e50 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b5e7e:	e7f8      	b.n	b5e72 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b5e80 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b5e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5e82:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5e84:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b5e88:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b5e8a:	4604      	mov	r4, r0
   b5e8c:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5e8e:	da0b      	bge.n	b5ea8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b5e90:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5e92:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5e94:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5e96:	1b52      	subs	r2, r2, r5
   b5e98:	1c48      	adds	r0, r1, #1
   b5e9a:	f001 fa87 	bl	b73ac <memmove>
    new(p) T(std::move(value));
   b5e9e:	557e      	strb	r6, [r7, r5]
    ++size_;
   b5ea0:	6863      	ldr	r3, [r4, #4]
   b5ea2:	3301      	adds	r3, #1
   b5ea4:	6063      	str	r3, [r4, #4]
}
   b5ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5ea8:	3101      	adds	r1, #1
   b5eaa:	f7ff ffad 	bl	b5e08 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b5eae:	2800      	cmp	r0, #0
   b5eb0:	d1ee      	bne.n	b5e90 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b5eb2:	e7f8      	b.n	b5ea6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b5eb4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5eb4:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b5eb6:	6841      	ldr	r1, [r0, #4]
   b5eb8:	f7ff bfe2 	b.w	b5e80 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b5ebc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b5ebc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b5ec0:	4604      	mov	r4, r0
   b5ec2:	461d      	mov	r5, r3
   b5ec4:	460f      	mov	r7, r1
   b5ec6:	ab01      	add	r3, sp, #4
   b5ec8:	4690      	mov	r8, r2
   b5eca:	460a      	mov	r2, r1
   b5ecc:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5ed0:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b5ed4:	f7ff fb8e 	bl	b55f4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b5ed8:	1cae      	adds	r6, r5, #2
   b5eda:	6863      	ldr	r3, [r4, #4]
   b5edc:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b5ede:	f1b9 0f00 	cmp.w	r9, #0
   b5ee2:	d126      	bne.n	b5f32 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b5ee4:	b328      	cbz	r0, b5f32 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b5ee6:	4433      	add	r3, r6
   b5ee8:	1a1b      	subs	r3, r3, r0
   b5eea:	2bff      	cmp	r3, #255	; 0xff
   b5eec:	d809      	bhi.n	b5f02 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b5eee:	9901      	ldr	r1, [sp, #4]
   b5ef0:	4620      	mov	r0, r4
   b5ef2:	f7ff fe75 	bl	b5be0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b5ef6:	6861      	ldr	r1, [r4, #4]
   b5ef8:	4620      	mov	r0, r4
   b5efa:	4431      	add	r1, r6
   b5efc:	f7ff ff94 	bl	b5e28 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b5f00:	b918      	cbnz	r0, b5f0a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b5f02:	6860      	ldr	r0, [r4, #4]
}
   b5f04:	b003      	add	sp, #12
   b5f06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b5f0a:	1c6a      	adds	r2, r5, #1
   b5f0c:	9901      	ldr	r1, [sp, #4]
   b5f0e:	b2d2      	uxtb	r2, r2
   b5f10:	4620      	mov	r0, r4
   b5f12:	f7ff ffb5 	bl	b5e80 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b5f16:	9901      	ldr	r1, [sp, #4]
   b5f18:	463a      	mov	r2, r7
   b5f1a:	3101      	adds	r1, #1
   b5f1c:	4620      	mov	r0, r4
   b5f1e:	f7ff ffaf 	bl	b5e80 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b5f22:	9901      	ldr	r1, [sp, #4]
   b5f24:	462b      	mov	r3, r5
   b5f26:	4642      	mov	r2, r8
   b5f28:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b5f2a:	4620      	mov	r0, r4
   b5f2c:	f7ff ff85 	bl	b5e3a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b5f30:	e7e7      	b.n	b5f02 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b5f32:	18f1      	adds	r1, r6, r3
   b5f34:	29ff      	cmp	r1, #255	; 0xff
   b5f36:	d8e4      	bhi.n	b5f02 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b5f38:	4620      	mov	r0, r4
   b5f3a:	f7ff ff75 	bl	b5e28 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b5f3e:	2800      	cmp	r0, #0
   b5f40:	d0df      	beq.n	b5f02 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b5f42:	1c69      	adds	r1, r5, #1
   b5f44:	b2c9      	uxtb	r1, r1
   b5f46:	4620      	mov	r0, r4
   b5f48:	f7ff ffb4 	bl	b5eb4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b5f4c:	4639      	mov	r1, r7
   b5f4e:	4620      	mov	r0, r4
   b5f50:	f7ff ffb0 	bl	b5eb4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b5f54:	6861      	ldr	r1, [r4, #4]
   b5f56:	462b      	mov	r3, r5
   b5f58:	4642      	mov	r2, r8
   b5f5a:	e7e6      	b.n	b5f2a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b5f5c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b5f5c:	b430      	push	{r4, r5}
   b5f5e:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b5f62:	b11a      	cbz	r2, b5f6c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b5f64:	9502      	str	r5, [sp, #8]
}
   b5f66:	bc30      	pop	{r4, r5}
   b5f68:	f7ff bfa8 	b.w	b5ebc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b5f6c:	6840      	ldr	r0, [r0, #4]
}
   b5f6e:	bc30      	pop	{r4, r5}
   b5f70:	4770      	bx	lr

000b5f72 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b5f72:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b5f74:	2300      	movs	r3, #0
   b5f76:	e9c0 3300 	strd	r3, r3, [r0]
   b5f7a:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b5f7c:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b5f7e:	9300      	str	r3, [sp, #0]
   b5f80:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b5f82:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b5f86:	4619      	mov	r1, r3
   b5f88:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b5f8c:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b5f8e:	f7ff ffe5 	bl	b5f5c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b5f92:	4620      	mov	r0, r4
   b5f94:	b004      	add	sp, #16
   b5f96:	bd10      	pop	{r4, pc}

000b5f98 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b5f98:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5f9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5f9c:	4604      	mov	r4, r0
   b5f9e:	460d      	mov	r5, r1
   b5fa0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5fa2:	d914      	bls.n	b5fce <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b5fa4:	4290      	cmp	r0, r2
   b5fa6:	d213      	bcs.n	b5fd0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b5fa8:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b5fac:	1a75      	subs	r5, r6, r1
   b5fae:	f1a1 0708 	sub.w	r7, r1, #8
   b5fb2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5fb4:	42b7      	cmp	r7, r6
   b5fb6:	d018      	beq.n	b5fea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b5fb8:	b11c      	cbz	r4, b5fc2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b5fba:	4631      	mov	r1, r6
   b5fbc:	4620      	mov	r0, r4
   b5fbe:	f7ff fe94 	bl	b5cea <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b5fc2:	1d30      	adds	r0, r6, #4
   b5fc4:	f7ff fe9b 	bl	b5cfe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b5fc8:	3e08      	subs	r6, #8
   b5fca:	3c08      	subs	r4, #8
   b5fcc:	e7f2      	b.n	b5fb4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b5fce:	d00c      	beq.n	b5fea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b5fd0:	42b5      	cmp	r5, r6
   b5fd2:	d00a      	beq.n	b5fea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b5fd4:	b11c      	cbz	r4, b5fde <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b5fd6:	4629      	mov	r1, r5
   b5fd8:	4620      	mov	r0, r4
   b5fda:	f7ff fe86 	bl	b5cea <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b5fde:	1d28      	adds	r0, r5, #4
   b5fe0:	f7ff fe8d 	bl	b5cfe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b5fe4:	3508      	adds	r5, #8
   b5fe6:	3408      	adds	r4, #8
   b5fe8:	e7f2      	b.n	b5fd0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b5fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5fec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5fec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b5fee:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b5ff0:	6846      	ldr	r6, [r0, #4]
   b5ff2:	4668      	mov	r0, sp
   b5ff4:	f7ff fe79 	bl	b5cea <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5ff8:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b5ffc:	429f      	cmp	r7, r3
   b5ffe:	db12      	blt.n	b6026 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b6000:	3701      	adds	r7, #1
        if (n > 0) {
   b6002:	2f00      	cmp	r7, #0
   b6004:	dd29      	ble.n	b605a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b6006:	00f8      	lsls	r0, r7, #3
   b6008:	f7ff f930 	bl	b526c <malloc>
            if (!d) {
   b600c:	4605      	mov	r5, r0
   b600e:	b1f0      	cbz	r0, b604e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b6010:	e9d4 1200 	ldrd	r1, r2, [r4]
   b6014:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b6018:	f7ff ffbe 	bl	b5f98 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b601c:	6820      	ldr	r0, [r4, #0]
   b601e:	f7ff f92d 	bl	b527c <free>
        data_ = d;
   b6022:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b6024:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b6026:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b6028:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b602a:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b602e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b6032:	4631      	mov	r1, r6
   b6034:	f106 0008 	add.w	r0, r6, #8
   b6038:	f7ff ffae 	bl	b5f98 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b603c:	b11e      	cbz	r6, b6046 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b603e:	4669      	mov	r1, sp
   b6040:	4630      	mov	r0, r6
   b6042:	f7ff fe52 	bl	b5cea <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b6046:	6863      	ldr	r3, [r4, #4]
   b6048:	3301      	adds	r3, #1
   b604a:	6063      	str	r3, [r4, #4]
    return true;
   b604c:	2501      	movs	r5, #1
   b604e:	a801      	add	r0, sp, #4
   b6050:	f7ff fe55 	bl	b5cfe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6054:	4628      	mov	r0, r5
   b6056:	b003      	add	sp, #12
   b6058:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b605a:	2500      	movs	r5, #0
   b605c:	e7de      	b.n	b601c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b605e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b605e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b6060:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b6064:	4605      	mov	r5, r0
   b6066:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b6068:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b606c:	42a6      	cmp	r6, r4
   b606e:	d005      	beq.n	b607c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b6070:	4639      	mov	r1, r7
   b6072:	4620      	mov	r0, r4
   b6074:	f7ff fd09 	bl	b5a8a <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b6078:	b108      	cbz	r0, b607e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b607a:	b914      	cbnz	r4, b6082 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b607c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b607e:	3408      	adds	r4, #8
   b6080:	e7f4      	b.n	b606c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b6082:	1d20      	adds	r0, r4, #4
   b6084:	f7ff fe3b 	bl	b5cfe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b6088:	e9d5 3200 	ldrd	r3, r2, [r5]
   b608c:	f104 0108 	add.w	r1, r4, #8
   b6090:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b6094:	4620      	mov	r0, r4
   b6096:	f7ff ff7f 	bl	b5f98 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b609a:	686b      	ldr	r3, [r5, #4]
   b609c:	3b01      	subs	r3, #1
   b609e:	606b      	str	r3, [r5, #4]
    return true;
   b60a0:	e7ec      	b.n	b607c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b60a4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b60a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b60a8:	4605      	mov	r5, r0
   b60aa:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b60ac:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b60ae:	460c      	mov	r4, r1
        WiringBleLock lk;
   b60b0:	f7ff fb28 	bl	b5704 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b60b4:	682e      	ldr	r6, [r5, #0]
   b60b6:	2e04      	cmp	r6, #4
   b60b8:	d075      	beq.n	b61a6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
   b60ba:	d807      	bhi.n	b60cc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x28>
   b60bc:	2e03      	cmp	r6, #3
   b60be:	d032      	beq.n	b6126 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x82>
        WiringBleLock lk;
   b60c0:	a803      	add	r0, sp, #12
   b60c2:	f7ff fb2d 	bl	b5720 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b60c6:	b00e      	add	sp, #56	; 0x38
   b60c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (event->type) {
   b60cc:	f1a6 030c 	sub.w	r3, r6, #12
   b60d0:	2b04      	cmp	r3, #4
   b60d2:	d8f5      	bhi.n	b60c0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b60d4:	89a9      	ldrh	r1, [r5, #12]
   b60d6:	4620      	mov	r0, r4
   b60d8:	f7ff fc6c 	bl	b59b4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b60dc:	2800      	cmp	r0, #0
   b60de:	d0ef      	beq.n	b60c0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                    if (impl->pairingEventCallback_) {
   b60e0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b60e2:	2b00      	cmp	r3, #0
   b60e4:	d0ec      	beq.n	b60c0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        BlePairingEventPayload payload = {};
   b60e6:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b60e8:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b60ea:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b60ee:	d002      	beq.n	b60f6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x52>
   b60f0:	2e10      	cmp	r6, #16
   b60f2:	f040 80a0 	bne.w	b6236 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x192>
                        BlePairingEventPayload payload = {};
   b60f6:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b60f8:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b60fa:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b60fc:	2506      	movs	r5, #6
                        };
   b60fe:	f88d 3015 	strb.w	r3, [sp, #21]
   b6102:	9104      	str	r1, [sp, #16]
   b6104:	f88d 2014 	strb.w	r2, [sp, #20]
   b6108:	9006      	str	r0, [sp, #24]
   b610a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b610e:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b6110:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b6114:	9508      	str	r5, [sp, #32]
   b6116:	e883 0003 	stmia.w	r3, {r0, r1}
   b611a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b611c:	a906      	add	r1, sp, #24
   b611e:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b6122:	4798      	blx	r3
   b6124:	e7cc      	b.n	b60c0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice peer;
   b6126:	a804      	add	r0, sp, #16
   b6128:	f7ff fc7a 	bl	b5a20 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b612c:	9b04      	ldr	r3, [sp, #16]
   b612e:	89aa      	ldrh	r2, [r5, #12]
   b6130:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b6132:	6869      	ldr	r1, [r5, #4]
   b6134:	9804      	ldr	r0, [sp, #16]
   b6136:	3108      	adds	r1, #8
   b6138:	3002      	adds	r0, #2
   b613a:	f7ff fafd 	bl	b5738 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b613e:	a904      	add	r1, sp, #16
   b6140:	a806      	add	r0, sp, #24
   b6142:	f7ff fdd2 	bl	b5cea <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b6146:	a906      	add	r1, sp, #24
   b6148:	f104 0018 	add.w	r0, r4, #24
   b614c:	f7ff ff4e 	bl	b5fec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b6150:	4605      	mov	r5, r0
   b6152:	a807      	add	r0, sp, #28
   b6154:	f7ff fdd3 	bl	b5cfe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6158:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b615a:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b615c:	b98d      	cbnz	r5, b6182 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xde>
                    LOG(ERROR, "Failed to append peer Central device.");
   b615e:	4b3d      	ldr	r3, [pc, #244]	; (b6254 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1b0>)
   b6160:	493d      	ldr	r1, [pc, #244]	; (b6258 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1b4>)
   b6162:	9300      	str	r3, [sp, #0]
   b6164:	2032      	movs	r0, #50	; 0x32
   b6166:	462b      	mov	r3, r5
   b6168:	aa06      	add	r2, sp, #24
   b616a:	9507      	str	r5, [sp, #28]
   b616c:	f7fe ffea 	bl	b5144 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b6170:	9b04      	ldr	r3, [sp, #16]
   b6172:	4629      	mov	r1, r5
   b6174:	8818      	ldrh	r0, [r3, #0]
   b6176:	f7fe fecd 	bl	b4f14 <hal_ble_gap_disconnect>
   b617a:	a805      	add	r0, sp, #20
   b617c:	f7ff fdbf 	bl	b5cfe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6180:	e79e      	b.n	b60c0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                LOG(TRACE, "Connected by Central device.");
   b6182:	4a36      	ldr	r2, [pc, #216]	; (b625c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1b8>)
   b6184:	9200      	str	r2, [sp, #0]
   b6186:	2300      	movs	r3, #0
   b6188:	4933      	ldr	r1, [pc, #204]	; (b6258 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1b4>)
   b618a:	9307      	str	r3, [sp, #28]
   b618c:	aa06      	add	r2, sp, #24
   b618e:	2001      	movs	r0, #1
   b6190:	f7fe ffd8 	bl	b5144 <log_message>
                if (impl->connectedCallback_) {
   b6194:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b6196:	2b00      	cmp	r3, #0
   b6198:	d0ef      	beq.n	b617a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd6>
                    impl->connectedCallback_(peer);
   b619a:	a904      	add	r1, sp, #16
   b619c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b61a0:	f7ff fe29 	bl	b5df6 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b61a4:	e7e9      	b.n	b617a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd6>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b61a6:	89a9      	ldrh	r1, [r5, #12]
   b61a8:	4620      	mov	r0, r4
   b61aa:	f7ff fc03 	bl	b59b4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b61ae:	4606      	mov	r6, r0
   b61b0:	2800      	cmp	r0, #0
   b61b2:	d085      	beq.n	b60c0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
      { return _M_ptr; }
   b61b4:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b61b6:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b61ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b61be:	8029      	strh	r1, [r5, #0]
   b61c0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b61c4:	429a      	cmp	r2, r3
   b61c6:	d003      	beq.n	b61d0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   b61c8:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b61cc:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b61ce:	e7f9      	b.n	b61c4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x120>
    destruct(data_, data_ + size_);
   b61d0:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b61d4:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b61d8:	45b8      	cmp	r8, r7
   b61da:	d004      	beq.n	b61e6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x142>
      ~__shared_ptr() = default;
   b61dc:	1d38      	adds	r0, r7, #4
   b61de:	f7ff fd8e 	bl	b5cfe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b61e2:	3708      	adds	r7, #8
   b61e4:	e7f8      	b.n	b61d8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x134>
    size_ = 0;
   b61e6:	2300      	movs	r3, #0
   b61e8:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b61ea:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b61ee:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b61f2:	45b8      	cmp	r8, r7
   b61f4:	d004      	beq.n	b6200 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x15c>
   b61f6:	1d38      	adds	r0, r7, #4
   b61f8:	f7ff fd81 	bl	b5cfe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b61fc:	3708      	adds	r7, #8
   b61fe:	e7f8      	b.n	b61f2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x14e>
    size_ = 0;
   b6200:	2300      	movs	r3, #0
   b6202:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b6204:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b6206:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b6208:	b123      	cbz	r3, b6214 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x170>
                        impl->disconnectedCallback_(*peer);
   b620a:	4631      	mov	r1, r6
   b620c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b6210:	f7ff fdf1 	bl	b5df6 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b6214:	2300      	movs	r3, #0
   b6216:	2220      	movs	r2, #32
   b6218:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b621c:	4a10      	ldr	r2, [pc, #64]	; (b6260 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1bc>)
   b621e:	9200      	str	r2, [sp, #0]
   b6220:	490d      	ldr	r1, [pc, #52]	; (b6258 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1b4>)
   b6222:	aa06      	add	r2, sp, #24
   b6224:	2001      	movs	r0, #1
   b6226:	f7fe ff8d 	bl	b5144 <log_message>
                    impl->peers_.removeOne(*peer);
   b622a:	4631      	mov	r1, r6
   b622c:	f104 0018 	add.w	r0, r4, #24
   b6230:	f7ff ff15 	bl	b605e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b6234:	e744      	b.n	b60c0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b6236:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b6238:	bf01      	itttt	eq
   b623a:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b623c:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b623e:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b6242:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b6244:	bf0f      	iteee	eq
   b6246:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b624a:	461a      	movne	r2, r3
   b624c:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b624e:	461d      	movne	r5, r3
   b6250:	e755      	b.n	b60fe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x5a>
   b6252:	bf00      	nop
   b6254:	000b79ff 	.word	0x000b79ff
   b6258:	000b79c0 	.word	0x000b79c0
   b625c:	000b7a25 	.word	0x000b7a25
   b6260:	000b7a42 	.word	0x000b7a42

000b6264 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b6264:	b513      	push	{r0, r1, r4, lr}
   b6266:	460b      	mov	r3, r1
   b6268:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b626a:	e9d0 0100 	ldrd	r0, r1, [r0]
   b626e:	466c      	mov	r4, sp
   b6270:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b6274:	e893 0003 	ldmia.w	r3, {r0, r1}
   b6278:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b627c:	e894 0003 	ldmia.w	r4, {r0, r1}
   b6280:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b6284:	b002      	add	sp, #8
   b6286:	bd10      	pop	{r4, pc}

000b6288 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b6288:	b538      	push	{r3, r4, r5, lr}
   b628a:	4605      	mov	r5, r0
   b628c:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b628e:	f7ff ffe9 	bl	b6264 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6292:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b6294:	68a2      	ldr	r2, [r4, #8]
   b6296:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6298:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b629a:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b629c:	68e2      	ldr	r2, [r4, #12]
   b629e:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b62a0:	60e3      	str	r3, [r4, #12]
      }
   b62a2:	bd38      	pop	{r3, r4, r5, pc}

000b62a4 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b62a4:	b570      	push	{r4, r5, r6, lr}
   b62a6:	4604      	mov	r4, r0
   b62a8:	b08c      	sub	sp, #48	; 0x30
   b62aa:	460e      	mov	r6, r1
   b62ac:	9201      	str	r2, [sp, #4]
   b62ae:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b62b0:	f7ff fb60 	bl	b5974 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b62b4:	7126      	strb	r6, [r4, #4]
        description_ = desc;
   b62b6:	9901      	ldr	r1, [sp, #4]
   b62b8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b62bc:	f7ff f8f4 	bl	b54a8 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b62c0:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b62c4:	b1cd      	cbz	r5, b62fa <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x56>
   b62c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b62c8:	9502      	str	r5, [sp, #8]
   b62ca:	a902      	add	r1, sp, #8
   b62cc:	a804      	add	r0, sp, #16
   b62ce:	9303      	str	r3, [sp, #12]
   b62d0:	f7ff fcd4 	bl	b5c7c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b62d4:	2300      	movs	r3, #0
	__x.swap(*this);
   b62d6:	a908      	add	r1, sp, #32
   b62d8:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b62da:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b62dc:	f7ff ffd4 	bl	b6288 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b62e0:	4631      	mov	r1, r6
   b62e2:	a808      	add	r0, sp, #32
   b62e4:	f7ff ffd0 	bl	b6288 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b62e8:	a808      	add	r0, sp, #32
   b62ea:	f7ff f9cd 	bl	b5688 <_ZNSt14_Function_baseD1Ev>
   b62ee:	a804      	add	r0, sp, #16
   b62f0:	f7ff f9ca 	bl	b5688 <_ZNSt14_Function_baseD1Ev>
    }
   b62f4:	4620      	mov	r0, r4
   b62f6:	b00c      	add	sp, #48	; 0x30
   b62f8:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b62fa:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b62fc:	e7ea      	b.n	b62d4 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x30>
	...

000b6300 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b6300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6304:	b087      	sub	sp, #28
   b6306:	461d      	mov	r5, r3
   b6308:	e9dd 4310 	ldrd	r4, r3, [sp, #64]	; 0x40
   b630c:	4680      	mov	r8, r0
   b630e:	468b      	mov	fp, r1
   b6310:	4692      	mov	sl, r2
   b6312:	9912      	ldr	r1, [sp, #72]	; 0x48
   b6314:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6316:	2200      	movs	r2, #0
   b6318:	2068      	movs	r0, #104	; 0x68
   b631a:	9102      	str	r1, [sp, #8]
   b631c:	9204      	str	r2, [sp, #16]
   b631e:	f7fd feb8 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b6322:	1e06      	subs	r6, r0, #0
   b6324:	f106 090c 	add.w	r9, r6, #12
   b6328:	d018      	beq.n	b635c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   b632a:	2201      	movs	r2, #1
	: _M_impl(__a)
   b632c:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b632e:	e9c6 2201 	strd	r2, r2, [r6, #4]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b6332:	9902      	ldr	r1, [sp, #8]
	: _M_impl(__a)
   b6334:	4a14      	ldr	r2, [pc, #80]	; (b6388 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x88>)
   b6336:	f847 2b20 	str.w	r2, [r7], #32
   b633a:	9b03      	ldr	r3, [sp, #12]
   b633c:	9100      	str	r1, [sp, #0]
   b633e:	465a      	mov	r2, fp
   b6340:	4651      	mov	r1, sl
   b6342:	4648      	mov	r0, r9
   b6344:	f7ff ffae 	bl	b62a4 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b6348:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b634a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b634c:	682b      	ldr	r3, [r5, #0]
   b634e:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b6350:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6352:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b6356:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6358:	6823      	ldr	r3, [r4, #0]
   b635a:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b635c:	a904      	add	r1, sp, #16
   b635e:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b6360:	e9cd 9604 	strd	r9, r6, [sp, #16]
   b6364:	f7ff fd36 	bl	b5dd4 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b6368:	a805      	add	r0, sp, #20
   b636a:	f7ff fcc8 	bl	b5cfe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b636e:	f8d8 1000 	ldr.w	r1, [r8]
   b6372:	b931      	cbnz	r1, b6382 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x82>
        SPARK_ASSERT(false);
   b6374:	4a05      	ldr	r2, [pc, #20]	; (b638c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8c>)
   b6376:	200a      	movs	r0, #10
}
   b6378:	b007      	add	sp, #28
   b637a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b637e:	f7fe bed9 	b.w	b5134 <panic_>
}
   b6382:	b007      	add	sp, #28
   b6384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6388:	000b7abc 	.word	0x000b7abc
   b638c:	000b4ea5 	.word	0x000b4ea5

000b6390 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b6390:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6394:	4604      	mov	r4, r0
   b6396:	460d      	mov	r5, r1
   b6398:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b639a:	d914      	bls.n	b63c6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b639c:	4290      	cmp	r0, r2
   b639e:	d213      	bcs.n	b63c8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b63a0:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b63a4:	1a75      	subs	r5, r6, r1
   b63a6:	f1a1 0708 	sub.w	r7, r1, #8
   b63aa:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b63ac:	42b7      	cmp	r7, r6
   b63ae:	d018      	beq.n	b63e2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b63b0:	b11c      	cbz	r4, b63ba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b63b2:	4631      	mov	r1, r6
   b63b4:	4620      	mov	r0, r4
   b63b6:	f7ff fc8e 	bl	b5cd6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b63ba:	1d30      	adds	r0, r6, #4
   b63bc:	f7ff fc9f 	bl	b5cfe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b63c0:	3e08      	subs	r6, #8
   b63c2:	3c08      	subs	r4, #8
   b63c4:	e7f2      	b.n	b63ac <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b63c6:	d00c      	beq.n	b63e2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b63c8:	42b5      	cmp	r5, r6
   b63ca:	d00a      	beq.n	b63e2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b63cc:	b11c      	cbz	r4, b63d6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b63ce:	4629      	mov	r1, r5
   b63d0:	4620      	mov	r0, r4
   b63d2:	f7ff fc80 	bl	b5cd6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b63d6:	1d28      	adds	r0, r5, #4
   b63d8:	f7ff fc91 	bl	b5cfe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b63dc:	3508      	adds	r5, #8
   b63de:	3408      	adds	r4, #8
   b63e0:	e7f2      	b.n	b63c8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b63e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b63e4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b63e4:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b63e6:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b63e8:	4605      	mov	r5, r0
        if (n > 0) {
   b63ea:	dd11      	ble.n	b6410 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b63ec:	00f0      	lsls	r0, r6, #3
   b63ee:	f7fe ff3d 	bl	b526c <malloc>
            if (!d) {
   b63f2:	4604      	mov	r4, r0
   b63f4:	b158      	cbz	r0, b640e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b63f6:	e9d5 1200 	ldrd	r1, r2, [r5]
   b63fa:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b63fe:	f7ff ffc7 	bl	b6390 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b6402:	6828      	ldr	r0, [r5, #0]
   b6404:	f7fe ff3a 	bl	b527c <free>
        data_ = d;
   b6408:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b640a:	60ae      	str	r6, [r5, #8]
        return true;
   b640c:	2001      	movs	r0, #1
    }
   b640e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b6410:	2400      	movs	r4, #0
   b6412:	e7f6      	b.n	b6402 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b6414 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b6414:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6416:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b6418:	6845      	ldr	r5, [r0, #4]
   b641a:	4668      	mov	r0, sp
   b641c:	f7ff fc5b 	bl	b5cd6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6420:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b6424:	4299      	cmp	r1, r3
   b6426:	da10      	bge.n	b644a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b6428:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b642a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b642c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b6430:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b6434:	4629      	mov	r1, r5
   b6436:	f105 0008 	add.w	r0, r5, #8
   b643a:	f7ff ffa9 	bl	b6390 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b643e:	b98d      	cbnz	r5, b6464 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b6440:	6863      	ldr	r3, [r4, #4]
   b6442:	3301      	adds	r3, #1
   b6444:	6063      	str	r3, [r4, #4]
    return true;
   b6446:	2601      	movs	r6, #1
   b6448:	e006      	b.n	b6458 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b644a:	3101      	adds	r1, #1
   b644c:	4620      	mov	r0, r4
   b644e:	f7ff ffc9 	bl	b63e4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b6452:	4606      	mov	r6, r0
   b6454:	2800      	cmp	r0, #0
   b6456:	d1e7      	bne.n	b6428 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b6458:	a801      	add	r0, sp, #4
   b645a:	f7ff fc50 	bl	b5cfe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b645e:	4630      	mov	r0, r6
   b6460:	b002      	add	sp, #8
   b6462:	bd70      	pop	{r4, r5, r6, pc}
   b6464:	4669      	mov	r1, sp
   b6466:	4628      	mov	r0, r5
   b6468:	f7ff fc35 	bl	b5cd6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b646c:	e7e8      	b.n	b6440 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b646e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b646e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b6470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6472:	4604      	mov	r4, r0
   b6474:	460d      	mov	r5, r1
   b6476:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b6478:	d914      	bls.n	b64a4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b647a:	4290      	cmp	r0, r2
   b647c:	d213      	bcs.n	b64a6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b647e:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b6482:	1a75      	subs	r5, r6, r1
   b6484:	f1a1 0708 	sub.w	r7, r1, #8
   b6488:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b648a:	42b7      	cmp	r7, r6
   b648c:	d018      	beq.n	b64c0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b648e:	b11c      	cbz	r4, b6498 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b6490:	4631      	mov	r1, r6
   b6492:	4620      	mov	r0, r4
   b6494:	f7ff fc11 	bl	b5cba <_ZN8particle17BleCharacteristicC1ERKS0_>
   b6498:	1d30      	adds	r0, r6, #4
   b649a:	f7ff fc30 	bl	b5cfe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b649e:	3e08      	subs	r6, #8
   b64a0:	3c08      	subs	r4, #8
   b64a2:	e7f2      	b.n	b648a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b64a4:	d00c      	beq.n	b64c0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b64a6:	42b5      	cmp	r5, r6
   b64a8:	d00a      	beq.n	b64c0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b64aa:	b11c      	cbz	r4, b64b4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b64ac:	4629      	mov	r1, r5
   b64ae:	4620      	mov	r0, r4
   b64b0:	f7ff fc03 	bl	b5cba <_ZN8particle17BleCharacteristicC1ERKS0_>
   b64b4:	1d28      	adds	r0, r5, #4
   b64b6:	f7ff fc22 	bl	b5cfe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b64ba:	3508      	adds	r5, #8
   b64bc:	3408      	adds	r4, #8
   b64be:	e7f2      	b.n	b64a6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b64c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b64c2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b64c2:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b64c4:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b64c6:	4605      	mov	r5, r0
        if (n > 0) {
   b64c8:	dd11      	ble.n	b64ee <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b64ca:	00f0      	lsls	r0, r6, #3
   b64cc:	f7fe fece 	bl	b526c <malloc>
            if (!d) {
   b64d0:	4604      	mov	r4, r0
   b64d2:	b158      	cbz	r0, b64ec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b64d4:	e9d5 1200 	ldrd	r1, r2, [r5]
   b64d8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b64dc:	f7ff ffc7 	bl	b646e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b64e0:	6828      	ldr	r0, [r5, #0]
   b64e2:	f7fe fecb 	bl	b527c <free>
        data_ = d;
   b64e6:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b64e8:	60ae      	str	r6, [r5, #8]
        return true;
   b64ea:	2001      	movs	r0, #1
    }
   b64ec:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b64ee:	2400      	movs	r4, #0
   b64f0:	e7f6      	b.n	b64e0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b64f2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b64f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b64f4:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b64f6:	6845      	ldr	r5, [r0, #4]
   b64f8:	4668      	mov	r0, sp
   b64fa:	f7ff fbde 	bl	b5cba <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b64fe:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b6502:	4299      	cmp	r1, r3
   b6504:	da10      	bge.n	b6528 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b6506:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b6508:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b650a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b650e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b6512:	4629      	mov	r1, r5
   b6514:	f105 0008 	add.w	r0, r5, #8
   b6518:	f7ff ffa9 	bl	b646e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b651c:	b98d      	cbnz	r5, b6542 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b651e:	6863      	ldr	r3, [r4, #4]
   b6520:	3301      	adds	r3, #1
   b6522:	6063      	str	r3, [r4, #4]
    return true;
   b6524:	2601      	movs	r6, #1
   b6526:	e006      	b.n	b6536 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b6528:	3101      	adds	r1, #1
   b652a:	4620      	mov	r0, r4
   b652c:	f7ff ffc9 	bl	b64c2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b6530:	4606      	mov	r6, r0
   b6532:	2800      	cmp	r0, #0
   b6534:	d1e7      	bne.n	b6506 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b6536:	a801      	add	r0, sp, #4
   b6538:	f7ff fbe1 	bl	b5cfe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b653c:	4630      	mov	r0, r6
   b653e:	b002      	add	sp, #8
   b6540:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b6542:	4669      	mov	r1, sp
   b6544:	4628      	mov	r0, r5
   b6546:	f7ff fbb8 	bl	b5cba <_ZN8particle17BleCharacteristicC1ERKS0_>
   b654a:	e7e8      	b.n	b651e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b654c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b654c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6550:	4617      	mov	r7, r2
   b6552:	b0a1      	sub	sp, #132	; 0x84
   b6554:	4680      	mov	r8, r0
    WiringBleLock lk;
   b6556:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b6558:	460e      	mov	r6, r1
    WiringBleLock lk;
   b655a:	f7ff f8d3 	bl	b5704 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b655e:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b6560:	7923      	ldrb	r3, [r4, #4]
   b6562:	b953      	cbnz	r3, b657a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b6564:	4639      	mov	r1, r7
   b6566:	4640      	mov	r0, r8
   b6568:	f7ff fba7 	bl	b5cba <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b656c:	a80a      	add	r0, sp, #40	; 0x28
   b656e:	f7ff f8d7 	bl	b5720 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b6572:	4640      	mov	r0, r8
   b6574:	b021      	add	sp, #132	; 0x84
   b6576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b657a:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b657c:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b6580:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b6584:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b6586:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b658a:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b658e:	9b03      	ldr	r3, [sp, #12]
   b6590:	429d      	cmp	r5, r3
   b6592:	d021      	beq.n	b65d8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b6594:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b6598:	4658      	mov	r0, fp
   b659a:	f109 0114 	add.w	r1, r9, #20
   b659e:	f7ff f95e 	bl	b585e <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b65a2:	b1b8      	cbz	r0, b65d4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b65a4:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b65a8:	4650      	mov	r0, sl
   b65aa:	f7ff f958 	bl	b585e <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b65ae:	b188      	cbz	r0, b65d4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b65b0:	6823      	ldr	r3, [r4, #0]
   b65b2:	f8d9 2000 	ldr.w	r2, [r9]
   b65b6:	4053      	eors	r3, r2
   b65b8:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b65bc:	d10a      	bne.n	b65d4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b65be:	2220      	movs	r2, #32
   b65c0:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b65c4:	4a5e      	ldr	r2, [pc, #376]	; (b6740 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b65c6:	9200      	str	r2, [sp, #0]
   b65c8:	aa15      	add	r2, sp, #84	; 0x54
   b65ca:	495e      	ldr	r1, [pc, #376]	; (b6744 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b65cc:	2032      	movs	r0, #50	; 0x32
   b65ce:	f7fe fdb9 	bl	b5144 <log_message>
   b65d2:	e7c7      	b.n	b6564 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b65d4:	3508      	adds	r5, #8
   b65d6:	e7da      	b.n	b658e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b65d8:	4650      	mov	r0, sl
   b65da:	f7ff f911 	bl	b5800 <_ZNK8particle7BleUuid7isValidEv>
   b65de:	b960      	cbnz	r0, b65fa <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
    String toString(bool stripped = false) const;
    size_t toString(char* buf, size_t len, bool stripped = false) const;

    template<typename T>
    BleUuid& operator=(T uuid) {
        return *this = BleUuid(uuid);
   b65e0:	4959      	ldr	r1, [pc, #356]	; (b6748 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b65e2:	2201      	movs	r2, #1
   b65e4:	a815      	add	r0, sp, #84	; 0x54
   b65e6:	ad15      	add	r5, sp, #84	; 0x54
   b65e8:	f7ff f8e2 	bl	b57b0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b65ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b65ee:	46d4      	mov	ip, sl
   b65f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b65f4:	682b      	ldr	r3, [r5, #0]
   b65f6:	f8cc 3000 	str.w	r3, [ip]
   b65fa:	6833      	ldr	r3, [r6, #0]
   b65fc:	e9d3 5300 	ldrd	r5, r3, [r3]
   b6600:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b6604:	455d      	cmp	r5, fp
   b6606:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b6608:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b660a:	d06e      	beq.n	b66ea <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b660c:	f855 0b08 	ldr.w	r0, [r5], #8
   b6610:	f7ff f925 	bl	b585e <_ZNK8particle7BleUuideqERKS0_>
   b6614:	2800      	cmp	r0, #0
   b6616:	d0f5      	beq.n	b6604 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b6618:	f104 0a14 	add.w	sl, r4, #20
   b661c:	4650      	mov	r0, sl
   b661e:	f7ff f8ef 	bl	b5800 <_ZNK8particle7BleUuid7isValidEv>
   b6622:	b988      	cbnz	r0, b6648 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b6624:	4b49      	ldr	r3, [pc, #292]	; (b674c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b6626:	4948      	ldr	r1, [pc, #288]	; (b6748 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b6628:	881a      	ldrh	r2, [r3, #0]
   b662a:	3201      	adds	r2, #1
   b662c:	b292      	uxth	r2, r2
   b662e:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b6630:	a815      	add	r0, sp, #84	; 0x54
   b6632:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b6634:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b6636:	f7ff f8da 	bl	b57ee <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b663a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b663c:	46d4      	mov	ip, sl
   b663e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b6642:	682b      	ldr	r3, [r5, #0]
   b6644:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b6648:	4b41      	ldr	r3, [pc, #260]	; (b6750 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b664a:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b664c:	2228      	movs	r2, #40	; 0x28
   b664e:	2100      	movs	r1, #0
   b6650:	a816      	add	r0, sp, #88	; 0x58
   b6652:	f000 fec5 	bl	b73e0 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b6656:	4651      	mov	r1, sl
   b6658:	a804      	add	r0, sp, #16
   b665a:	f7ff f8e3 	bl	b5824 <_ZN8particle7BleUuid7halUUIDEv>
   b665e:	ab04      	add	r3, sp, #16
   b6660:	aa18      	add	r2, sp, #96	; 0x60
   b6662:	f10d 0c20 	add.w	ip, sp, #32
   b6666:	6818      	ldr	r0, [r3, #0]
   b6668:	6859      	ldr	r1, [r3, #4]
   b666a:	4615      	mov	r5, r2
   b666c:	c503      	stmia	r5!, {r0, r1}
   b666e:	3308      	adds	r3, #8
   b6670:	4563      	cmp	r3, ip
   b6672:	462a      	mov	r2, r5
   b6674:	d1f7      	bne.n	b6666 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b6676:	6818      	ldr	r0, [r3, #0]
   b6678:	6028      	str	r0, [r5, #0]
    return *this;
}

template<typename T>
inline typename std::underlying_type_t<T> particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::value() const {
    return value_;
   b667a:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b667c:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b6680:	f8d9 3000 	ldr.w	r3, [r9]
   b6684:	8a9b      	ldrh	r3, [r3, #20]
   b6686:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b668a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b668c:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b668e:	4b31      	ldr	r3, [pc, #196]	; (b6754 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b6690:	2200      	movs	r2, #0
   b6692:	1da1      	adds	r1, r4, #6
   b6694:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b6696:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b669a:	f7fe fc4f 	bl	b4f3c <hal_ble_gatt_server_add_characteristic>
   b669e:	2800      	cmp	r0, #0
   b66a0:	f47f af60 	bne.w	b6564 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b66a4:	2301      	movs	r3, #1
   b66a6:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b66a8:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b66aa:	4639      	mov	r1, r7
        return characteristics_;
   b66ac:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b66ae:	a80d      	add	r0, sp, #52	; 0x34
   b66b0:	f7ff fb03 	bl	b5cba <_ZN8particle17BleCharacteristicC1ERKS0_>
   b66b4:	4620      	mov	r0, r4
   b66b6:	a90d      	add	r1, sp, #52	; 0x34
   b66b8:	f7ff ff1b 	bl	b64f2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b66bc:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b66be:	a80e      	add	r0, sp, #56	; 0x38
   b66c0:	f7ff fb1d 	bl	b5cfe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b66c4:	2c00      	cmp	r4, #0
   b66c6:	f47f af4d 	bne.w	b6564 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b66ca:	2320      	movs	r3, #32
   b66cc:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b66d0:	4b21      	ldr	r3, [pc, #132]	; (b6758 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b66d2:	9300      	str	r3, [sp, #0]
   b66d4:	aa0d      	add	r2, sp, #52	; 0x34
   b66d6:	4623      	mov	r3, r4
   b66d8:	e777      	b.n	b65ca <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b66da:	4639      	mov	r1, r7
   b66dc:	4640      	mov	r0, r8
   b66de:	f7ff faec 	bl	b5cba <_ZN8particle17BleCharacteristicC1ERKS0_>
   b66e2:	a80c      	add	r0, sp, #48	; 0x30
   b66e4:	f7ff fb0b 	bl	b5cfe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b66e8:	e740      	b.n	b656c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b66ea:	a80b      	add	r0, sp, #44	; 0x2c
   b66ec:	f7ff f974 	bl	b59d8 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b66f0:	4651      	mov	r1, sl
   b66f2:	a815      	add	r0, sp, #84	; 0x54
   b66f4:	f7ff f896 	bl	b5824 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b66f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b66fa:	2300      	movs	r3, #0
   b66fc:	3214      	adds	r2, #20
   b66fe:	a915      	add	r1, sp, #84	; 0x54
   b6700:	2001      	movs	r0, #1
   b6702:	f7fe fc11 	bl	b4f28 <hal_ble_gatt_server_add_service>
   b6706:	2800      	cmp	r0, #0
   b6708:	d1e7      	bne.n	b66da <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b670a:	6835      	ldr	r5, [r6, #0]
   b670c:	a90b      	add	r1, sp, #44	; 0x2c
   b670e:	a80d      	add	r0, sp, #52	; 0x34
   b6710:	f7ff fae1 	bl	b5cd6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b6714:	4628      	mov	r0, r5
   b6716:	a90d      	add	r1, sp, #52	; 0x34
   b6718:	f7ff fe7c 	bl	b6414 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b671c:	4605      	mov	r5, r0
   b671e:	a80e      	add	r0, sp, #56	; 0x38
   b6720:	f7ff faed 	bl	b5cfe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6724:	2d00      	cmp	r5, #0
   b6726:	d0d8      	beq.n	b66da <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b6728:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b672a:	6853      	ldr	r3, [r2, #4]
   b672c:	6812      	ldr	r2, [r2, #0]
   b672e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b6732:	3b01      	subs	r3, #1
   b6734:	a80c      	add	r0, sp, #48	; 0x30
   b6736:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b673a:	f7ff fae0 	bl	b5cfe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b673e:	e76b      	b.n	b6618 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b6740:	000b7a61 	.word	0x000b7a61
   b6744:	000b79c0 	.word	0x000b79c0
   b6748:	000b7b26 	.word	0x000b7b26
   b674c:	2003e6c8 	.word	0x2003e6c8
   b6750:	002c0003 	.word	0x002c0003
   b6754:	000b5b65 	.word	0x000b5b65
   b6758:	000b7a8c 	.word	0x000b7a8c

000b675c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b675c:	4802      	ldr	r0, [pc, #8]	; (b6768 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b675e:	2300      	movs	r3, #0
   b6760:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b6762:	f7fe bbff 	b.w	b4f64 <os_mutex_recursive_create>
   b6766:	bf00      	nop
   b6768:	2003e6cc 	.word	0x2003e6cc

000b676c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b676c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b676e:	4606      	mov	r6, r0
   b6770:	460d      	mov	r5, r1
  size_t n = 0;
   b6772:	188f      	adds	r7, r1, r2
   b6774:	2400      	movs	r4, #0
  while (size--) {
   b6776:	42bd      	cmp	r5, r7
   b6778:	d00c      	beq.n	b6794 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b677a:	6833      	ldr	r3, [r6, #0]
   b677c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6780:	689b      	ldr	r3, [r3, #8]
   b6782:	4630      	mov	r0, r6
   b6784:	4798      	blx	r3
     if (chunk>=0)
   b6786:	1e03      	subs	r3, r0, #0
   b6788:	db01      	blt.n	b678e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b678a:	441c      	add	r4, r3
  while (size--) {
   b678c:	e7f3      	b.n	b6776 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b678e:	2c00      	cmp	r4, #0
   b6790:	bf08      	it	eq
   b6792:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6794:	4620      	mov	r0, r4
   b6796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6798 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b6798:	b513      	push	{r0, r1, r4, lr}
   b679a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b679c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b679e:	b159      	cbz	r1, b67b8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b67a0:	9101      	str	r1, [sp, #4]
   b67a2:	f000 fe65 	bl	b7470 <strlen>
   b67a6:	6823      	ldr	r3, [r4, #0]
   b67a8:	9901      	ldr	r1, [sp, #4]
   b67aa:	68db      	ldr	r3, [r3, #12]
   b67ac:	4602      	mov	r2, r0
   b67ae:	4620      	mov	r0, r4
    }
   b67b0:	b002      	add	sp, #8
   b67b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b67b6:	4718      	bx	r3
    }
   b67b8:	b002      	add	sp, #8
   b67ba:	bd10      	pop	{r4, pc}

000b67bc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b67bc:	6803      	ldr	r3, [r0, #0]
   b67be:	689b      	ldr	r3, [r3, #8]
   b67c0:	4718      	bx	r3

000b67c2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b67c2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b67c4:	210d      	movs	r1, #13
{
   b67c6:	4605      	mov	r5, r0
  size_t n = print('\r');
   b67c8:	f7ff fff8 	bl	b67bc <_ZN5Print5printEc>
  n += print('\n');
   b67cc:	210a      	movs	r1, #10
  size_t n = print('\r');
   b67ce:	4604      	mov	r4, r0
  n += print('\n');
   b67d0:	4628      	mov	r0, r5
   b67d2:	f7ff fff3 	bl	b67bc <_ZN5Print5printEc>
  return n;
}
   b67d6:	4420      	add	r0, r4
   b67d8:	bd38      	pop	{r3, r4, r5, pc}

000b67da <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b67da:	b530      	push	{r4, r5, lr}
   b67dc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b67de:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b67e0:	2a01      	cmp	r2, #1
  *str = '\0';
   b67e2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b67e6:	bf98      	it	ls
   b67e8:	220a      	movls	r2, #10
   b67ea:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b67ec:	460d      	mov	r5, r1
   b67ee:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b67f2:	fb01 5312 	mls	r3, r1, r2, r5
   b67f6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b67fa:	2b09      	cmp	r3, #9
   b67fc:	bf94      	ite	ls
   b67fe:	3330      	addls	r3, #48	; 0x30
   b6800:	3337      	addhi	r3, #55	; 0x37
   b6802:	b2db      	uxtb	r3, r3
  } while(n);
   b6804:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6806:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b680a:	d9ef      	bls.n	b67ec <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b680c:	4621      	mov	r1, r4
   b680e:	f7ff ffc3 	bl	b6798 <_ZN5Print5writeEPKc>
}
   b6812:	b00b      	add	sp, #44	; 0x2c
   b6814:	bd30      	pop	{r4, r5, pc}

000b6816 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b6816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b681a:	b086      	sub	sp, #24
   b681c:	af00      	add	r7, sp, #0
   b681e:	4605      	mov	r5, r0
   b6820:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b6822:	1d38      	adds	r0, r7, #4
   b6824:	2114      	movs	r1, #20
{
   b6826:	4614      	mov	r4, r2
    va_copy(args2, args);
   b6828:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b682a:	f7fe fd37 	bl	b529c <vsnprintf>

    if (n<bufsize)
   b682e:	2813      	cmp	r0, #19
   b6830:	d80e      	bhi.n	b6850 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b6832:	1d39      	adds	r1, r7, #4
   b6834:	4628      	mov	r0, r5
   b6836:	f7ff ffaf 	bl	b6798 <_ZN5Print5writeEPKc>
   b683a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b683c:	b11e      	cbz	r6, b6846 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b683e:	4628      	mov	r0, r5
   b6840:	f7ff ffbf 	bl	b67c2 <_ZN5Print7printlnEv>
   b6844:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b6846:	4620      	mov	r0, r4
   b6848:	3718      	adds	r7, #24
   b684a:	46bd      	mov	sp, r7
   b684c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b6850:	f100 0308 	add.w	r3, r0, #8
   b6854:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b6858:	46e8      	mov	r8, sp
        char bigger[n+1];
   b685a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b685e:	4622      	mov	r2, r4
   b6860:	1c41      	adds	r1, r0, #1
   b6862:	683b      	ldr	r3, [r7, #0]
   b6864:	4668      	mov	r0, sp
   b6866:	f7fe fd19 	bl	b529c <vsnprintf>
  return write(str);
   b686a:	4669      	mov	r1, sp
   b686c:	4628      	mov	r0, r5
   b686e:	f7ff ff93 	bl	b6798 <_ZN5Print5writeEPKc>
   b6872:	4604      	mov	r4, r0
   b6874:	46c5      	mov	sp, r8
   b6876:	e7e1      	b.n	b683c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b6878 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b6878:	b510      	push	{r4, lr}
   b687a:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b687c:	f7fe fb22 	bl	b4ec4 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b6880:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b6882:	6823      	ldr	r3, [r4, #0]
   b6884:	4620      	mov	r0, r4
   b6886:	695b      	ldr	r3, [r3, #20]
   b6888:	4798      	blx	r3
    if (c >= 0) return c;
   b688a:	2800      	cmp	r0, #0
   b688c:	da08      	bge.n	b68a0 <_ZN6Stream9timedReadEv+0x28>
   b688e:	f7fe fb19 	bl	b4ec4 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b6892:	68e3      	ldr	r3, [r4, #12]
   b6894:	1ac0      	subs	r0, r0, r3
   b6896:	68a3      	ldr	r3, [r4, #8]
   b6898:	4298      	cmp	r0, r3
   b689a:	d3f2      	bcc.n	b6882 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b689c:	f04f 30ff 	mov.w	r0, #4294967295
}
   b68a0:	bd10      	pop	{r4, pc}
	...

000b68a4 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   b68a4:	b570      	push	{r4, r5, r6, lr}
   b68a6:	460d      	mov	r5, r1
  String ret;
   b68a8:	4909      	ldr	r1, [pc, #36]	; (b68d0 <_ZN6Stream15readStringUntilEc+0x2c>)
{
   b68aa:	4604      	mov	r4, r0
   b68ac:	4616      	mov	r6, r2
  String ret;
   b68ae:	f7fe fdc2 	bl	b5436 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   b68b2:	4628      	mov	r0, r5
   b68b4:	f7ff ffe0 	bl	b6878 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   b68b8:	2800      	cmp	r0, #0
   b68ba:	db06      	blt.n	b68ca <_ZN6Stream15readStringUntilEc+0x26>
   b68bc:	4286      	cmp	r6, r0
   b68be:	d004      	beq.n	b68ca <_ZN6Stream15readStringUntilEc+0x26>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   b68c0:	b2c1      	uxtb	r1, r0
   b68c2:	4620      	mov	r0, r4
   b68c4:	f7fe fe19 	bl	b54fa <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   b68c8:	e7f3      	b.n	b68b2 <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   b68ca:	4620      	mov	r0, r4
   b68cc:	bd70      	pop	{r4, r5, r6, pc}
   b68ce:	bf00      	nop
   b68d0:	000b7830 	.word	0x000b7830

000b68d4 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b68d4:	2300      	movs	r3, #0
   b68d6:	6840      	ldr	r0, [r0, #4]
   b68d8:	461a      	mov	r2, r3
   b68da:	4619      	mov	r1, r3
   b68dc:	f7fe bc7e 	b.w	b51dc <network_on>

000b68e0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b68e0:	4b01      	ldr	r3, [pc, #4]	; (b68e8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b68e2:	4a02      	ldr	r2, [pc, #8]	; (b68ec <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b68e4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b68e6:	4770      	bx	lr
   b68e8:	2003e6d4 	.word	0x2003e6d4
   b68ec:	000b7b46 	.word	0x000b7b46

000b68f0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b68f0:	4b02      	ldr	r3, [pc, #8]	; (b68fc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b68f2:	681a      	ldr	r2, [r3, #0]
   b68f4:	4b02      	ldr	r3, [pc, #8]	; (b6900 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b68f6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b68f8:	4770      	bx	lr
   b68fa:	bf00      	nop
   b68fc:	2002fa54 	.word	0x2002fa54
   b6900:	2003e6d8 	.word	0x2003e6d8

000b6904 <_Z3mapiiiii>:
    hal_adc_set_sample_time(ADC_SampleTime);
}

int map(int value, int fromStart, int fromEnd, int toStart, int toEnd)
{
    if (fromEnd == fromStart) {
   b6904:	428a      	cmp	r2, r1
{
   b6906:	b510      	push	{r4, lr}
    if (fromEnd == fromStart) {
   b6908:	d007      	beq.n	b691a <_Z3mapiiiii+0x16>
        return value;
    }
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
   b690a:	1a44      	subs	r4, r0, r1
   b690c:	9802      	ldr	r0, [sp, #8]
   b690e:	1ac0      	subs	r0, r0, r3
   b6910:	4344      	muls	r4, r0
   b6912:	1a50      	subs	r0, r2, r1
   b6914:	fb94 f0f0 	sdiv	r0, r4, r0
   b6918:	4418      	add	r0, r3
}
   b691a:	bd10      	pop	{r4, pc}

000b691c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b691c:	2100      	movs	r1, #0
   b691e:	f7fe bc21 	b.w	b5164 <system_delay_ms>
	...

000b6924 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b6924:	4b01      	ldr	r3, [pc, #4]	; (b692c <_GLOBAL__sub_I_RGB+0x8>)
   b6926:	2200      	movs	r2, #0
   b6928:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b692a:	4770      	bx	lr
   b692c:	2003e6dc 	.word	0x2003e6dc

000b6930 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b6930:	4b01      	ldr	r3, [pc, #4]	; (b6938 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b6932:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b6934:	4770      	bx	lr
   b6936:	bf00      	nop
   b6938:	2002fa58 	.word	0x2002fa58

000b693c <serialEventRun>:
{
   b693c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b693e:	4b0b      	ldr	r3, [pc, #44]	; (b696c <serialEventRun+0x30>)
   b6940:	b143      	cbz	r3, b6954 <serialEventRun+0x18>
   b6942:	f000 f967 	bl	b6c14 <_Z16_fetch_usbserialv>
   b6946:	6803      	ldr	r3, [r0, #0]
   b6948:	691b      	ldr	r3, [r3, #16]
   b694a:	4798      	blx	r3
   b694c:	2800      	cmp	r0, #0
   b694e:	dd01      	ble.n	b6954 <serialEventRun+0x18>
        serialEvent();
   b6950:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b6954:	4b06      	ldr	r3, [pc, #24]	; (b6970 <serialEventRun+0x34>)
   b6956:	b143      	cbz	r3, b696a <serialEventRun+0x2e>
   b6958:	f000 fb88 	bl	b706c <_Z22__fetch_global_Serial1v>
   b695c:	6803      	ldr	r3, [r0, #0]
   b695e:	691b      	ldr	r3, [r3, #16]
   b6960:	4798      	blx	r3
   b6962:	2800      	cmp	r0, #0
   b6964:	dd01      	ble.n	b696a <serialEventRun+0x2e>
        serialEvent1();
   b6966:	f3af 8000 	nop.w
}
   b696a:	bd08      	pop	{r3, pc}
	...

000b6974 <_post_loop>:
{
   b6974:	b508      	push	{r3, lr}
	serialEventRun();
   b6976:	f7ff ffe1 	bl	b693c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b697a:	f7fe faa3 	bl	b4ec4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b697e:	4b01      	ldr	r3, [pc, #4]	; (b6984 <_post_loop+0x10>)
   b6980:	6018      	str	r0, [r3, #0]
}
   b6982:	bd08      	pop	{r3, pc}
   b6984:	2003e740 	.word	0x2003e740

000b6988 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6988:	4805      	ldr	r0, [pc, #20]	; (b69a0 <_Z33system_initialize_user_backup_ramv+0x18>)
   b698a:	4a06      	ldr	r2, [pc, #24]	; (b69a4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b698c:	4906      	ldr	r1, [pc, #24]	; (b69a8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b698e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6990:	1a12      	subs	r2, r2, r0
   b6992:	f000 fcfd 	bl	b7390 <memcpy>
    __backup_sram_signature = signature;
   b6996:	4b05      	ldr	r3, [pc, #20]	; (b69ac <_Z33system_initialize_user_backup_ramv+0x24>)
   b6998:	4a05      	ldr	r2, [pc, #20]	; (b69b0 <_Z33system_initialize_user_backup_ramv+0x28>)
   b699a:	601a      	str	r2, [r3, #0]
}
   b699c:	bd08      	pop	{r3, pc}
   b699e:	bf00      	nop
   b69a0:	2003f400 	.word	0x2003f400
   b69a4:	2003f404 	.word	0x2003f404
   b69a8:	000b7f30 	.word	0x000b7f30
   b69ac:	2003f400 	.word	0x2003f400
   b69b0:	9a271c1e 	.word	0x9a271c1e

000b69b4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b69b4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b69b6:	2300      	movs	r3, #0
   b69b8:	9300      	str	r3, [sp, #0]
   b69ba:	461a      	mov	r2, r3
   b69bc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b69c0:	f7fe fbe2 	bl	b5188 <system_ctrl_set_result>
}
   b69c4:	b003      	add	sp, #12
   b69c6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b69cc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b69cc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b69ce:	8843      	ldrh	r3, [r0, #2]
   b69d0:	2b0a      	cmp	r3, #10
   b69d2:	d008      	beq.n	b69e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b69d4:	2b50      	cmp	r3, #80	; 0x50
   b69d6:	d10b      	bne.n	b69f0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b69d8:	4b09      	ldr	r3, [pc, #36]	; (b6a00 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b69da:	681b      	ldr	r3, [r3, #0]
   b69dc:	b14b      	cbz	r3, b69f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b69de:	b003      	add	sp, #12
   b69e0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b69e4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b69e6:	f7ff ffe5 	bl	b69b4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b69ea:	b003      	add	sp, #12
   b69ec:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b69f0:	2300      	movs	r3, #0
   b69f2:	9300      	str	r3, [sp, #0]
   b69f4:	461a      	mov	r2, r3
   b69f6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b69fa:	f7fe fbc5 	bl	b5188 <system_ctrl_set_result>
}
   b69fe:	e7f4      	b.n	b69ea <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6a00:	2003e6f0 	.word	0x2003e6f0

000b6a04 <module_user_init_hook>:
{
   b6a04:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b6a06:	4812      	ldr	r0, [pc, #72]	; (b6a50 <module_user_init_hook+0x4c>)
   b6a08:	2100      	movs	r1, #0
   b6a0a:	f7fe fc67 	bl	b52dc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b6a0e:	4b11      	ldr	r3, [pc, #68]	; (b6a54 <module_user_init_hook+0x50>)
   b6a10:	681a      	ldr	r2, [r3, #0]
   b6a12:	4b11      	ldr	r3, [pc, #68]	; (b6a58 <module_user_init_hook+0x54>)
   b6a14:	429a      	cmp	r2, r3
   b6a16:	4b11      	ldr	r3, [pc, #68]	; (b6a5c <module_user_init_hook+0x58>)
   b6a18:	bf0c      	ite	eq
   b6a1a:	2201      	moveq	r2, #1
   b6a1c:	2200      	movne	r2, #0
   b6a1e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6a20:	d001      	beq.n	b6a26 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b6a22:	f7ff ffb1 	bl	b6988 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b6a26:	f7fe fa35 	bl	b4e94 <HAL_RNG_GetRandomNumber>
   b6a2a:	4604      	mov	r4, r0
    srand(seed);
   b6a2c:	f000 fce0 	bl	b73f0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6a30:	4b0b      	ldr	r3, [pc, #44]	; (b6a60 <module_user_init_hook+0x5c>)
   b6a32:	b113      	cbz	r3, b6a3a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6a34:	4620      	mov	r0, r4
   b6a36:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b6a3a:	2100      	movs	r1, #0
   b6a3c:	4808      	ldr	r0, [pc, #32]	; (b6a60 <module_user_init_hook+0x5c>)
   b6a3e:	f7fe fc0d 	bl	b525c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b6a42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b6a46:	4807      	ldr	r0, [pc, #28]	; (b6a64 <module_user_init_hook+0x60>)
   b6a48:	2100      	movs	r1, #0
   b6a4a:	f7fe bb93 	b.w	b5174 <system_ctrl_set_app_request_handler>
   b6a4e:	bf00      	nop
   b6a50:	000b6931 	.word	0x000b6931
   b6a54:	2003f400 	.word	0x2003f400
   b6a58:	9a271c1e 	.word	0x9a271c1e
   b6a5c:	2003e6ec 	.word	0x2003e6ec
   b6a60:	00000000 	.word	0x00000000
   b6a64:	000b69cd 	.word	0x000b69cd

000b6a68 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6a68:	4770      	bx	lr

000b6a6a <_ZN9IPAddressD0Ev>:
   b6a6a:	b510      	push	{r4, lr}
   b6a6c:	2118      	movs	r1, #24
   b6a6e:	4604      	mov	r4, r0
   b6a70:	f7fd fb13 	bl	b409a <_ZdlPvj>
   b6a74:	4620      	mov	r0, r4
   b6a76:	bd10      	pop	{r4, pc}

000b6a78 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6a78:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b6a7a:	7d03      	ldrb	r3, [r0, #20]
   b6a7c:	2b06      	cmp	r3, #6
{
   b6a7e:	b08d      	sub	sp, #52	; 0x34
   b6a80:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6a82:	f100 0704 	add.w	r7, r0, #4
   b6a86:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b6a8a:	d012      	beq.n	b6ab2 <_ZNK9IPAddress7printToER5Print+0x3a>
   b6a8c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6a90:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6a94:	220a      	movs	r2, #10
   b6a96:	4630      	mov	r0, r6
   b6a98:	f7ff fe9f 	bl	b67da <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6a9c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b6a9e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6aa0:	d019      	beq.n	b6ad6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b6aa2:	2c00      	cmp	r4, #0
   b6aa4:	d0f4      	beq.n	b6a90 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6aa6:	212e      	movs	r1, #46	; 0x2e
   b6aa8:	4630      	mov	r0, r6
   b6aaa:	f7ff fe87 	bl	b67bc <_ZN5Print5printEc>
   b6aae:	4404      	add	r4, r0
   b6ab0:	e7ee      	b.n	b6a90 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6ab2:	232f      	movs	r3, #47	; 0x2f
   b6ab4:	466a      	mov	r2, sp
   b6ab6:	4639      	mov	r1, r7
   b6ab8:	200a      	movs	r0, #10
		buf[0] = 0;
   b6aba:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6abe:	f7fe fa69 	bl	b4f94 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6ac2:	4668      	mov	r0, sp
   b6ac4:	f000 fcd4 	bl	b7470 <strlen>
   b6ac8:	6833      	ldr	r3, [r6, #0]
   b6aca:	4602      	mov	r2, r0
   b6acc:	68db      	ldr	r3, [r3, #12]
   b6ace:	4669      	mov	r1, sp
   b6ad0:	4630      	mov	r0, r6
   b6ad2:	4798      	blx	r3
   b6ad4:	4604      	mov	r4, r0
    }
    return n;
}
   b6ad6:	4620      	mov	r0, r4
   b6ad8:	b00d      	add	sp, #52	; 0x34
   b6ada:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6adc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6adc:	b510      	push	{r4, lr}
   b6ade:	4b05      	ldr	r3, [pc, #20]	; (b6af4 <_ZN9IPAddressC1Ev+0x18>)
   b6ae0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6ae2:	2211      	movs	r2, #17
   b6ae4:	f840 3b04 	str.w	r3, [r0], #4
   b6ae8:	2100      	movs	r1, #0
   b6aea:	f000 fc79 	bl	b73e0 <memset>
}
   b6aee:	4620      	mov	r0, r4
   b6af0:	bd10      	pop	{r4, pc}
   b6af2:	bf00      	nop
   b6af4:	000b7b70 	.word	0x000b7b70

000b6af8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6af8:	4603      	mov	r3, r0
   b6afa:	4a07      	ldr	r2, [pc, #28]	; (b6b18 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6afc:	b510      	push	{r4, lr}
   b6afe:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6b02:	f101 0210 	add.w	r2, r1, #16
   b6b06:	f851 4b04 	ldr.w	r4, [r1], #4
   b6b0a:	f843 4b04 	str.w	r4, [r3], #4
   b6b0e:	4291      	cmp	r1, r2
   b6b10:	d1f9      	bne.n	b6b06 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6b12:	780a      	ldrb	r2, [r1, #0]
   b6b14:	701a      	strb	r2, [r3, #0]
}
   b6b16:	bd10      	pop	{r4, pc}
   b6b18:	000b7b70 	.word	0x000b7b70

000b6b1c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b6b1c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b6b1e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b6b22:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b6b26:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b6b2a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b6b2e:	2304      	movs	r3, #4
   b6b30:	6041      	str	r1, [r0, #4]
   b6b32:	7503      	strb	r3, [r0, #20]
}
   b6b34:	bd10      	pop	{r4, pc}
	...

000b6b38 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6b38:	b507      	push	{r0, r1, r2, lr}
   b6b3a:	4b06      	ldr	r3, [pc, #24]	; (b6b54 <_ZN9IPAddressC1EPKh+0x1c>)
   b6b3c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b6b3e:	78cb      	ldrb	r3, [r1, #3]
   b6b40:	9300      	str	r3, [sp, #0]
   b6b42:	788b      	ldrb	r3, [r1, #2]
   b6b44:	784a      	ldrb	r2, [r1, #1]
   b6b46:	7809      	ldrb	r1, [r1, #0]
   b6b48:	f7ff ffe8 	bl	b6b1c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6b4c:	b003      	add	sp, #12
   b6b4e:	f85d fb04 	ldr.w	pc, [sp], #4
   b6b52:	bf00      	nop
   b6b54:	000b7b70 	.word	0x000b7b70

000b6b58 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6b58:	7441      	strb	r1, [r0, #17]
}
   b6b5a:	4770      	bx	lr

000b6b5c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6b5c:	4770      	bx	lr

000b6b5e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b6b5e:	4770      	bx	lr

000b6b60 <_ZN9USBSerial4readEv>:
{
   b6b60:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b6b62:	2100      	movs	r1, #0
   b6b64:	7c00      	ldrb	r0, [r0, #16]
   b6b66:	f7fe facd 	bl	b5104 <HAL_USB_USART_Receive_Data>
}
   b6b6a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6b6e:	bd08      	pop	{r3, pc}

000b6b70 <_ZN9USBSerial4peekEv>:
{
   b6b70:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b6b72:	2101      	movs	r1, #1
   b6b74:	7c00      	ldrb	r0, [r0, #16]
   b6b76:	f7fe fac5 	bl	b5104 <HAL_USB_USART_Receive_Data>
}
   b6b7a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6b7e:	bd08      	pop	{r3, pc}

000b6b80 <_ZN9USBSerial17availableForWriteEv>:
{
   b6b80:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b6b82:	7c00      	ldrb	r0, [r0, #16]
   b6b84:	f7fe fab6 	bl	b50f4 <HAL_USB_USART_Available_Data_For_Write>
}
   b6b88:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6b8c:	bd08      	pop	{r3, pc}

000b6b8e <_ZN9USBSerial9availableEv>:
{
   b6b8e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6b90:	7c00      	ldrb	r0, [r0, #16]
   b6b92:	f7fe faa7 	bl	b50e4 <HAL_USB_USART_Available_Data>
}
   b6b96:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6b9a:	bd08      	pop	{r3, pc}

000b6b9c <_ZN9USBSerial5writeEh>:
{
   b6b9c:	b513      	push	{r0, r1, r4, lr}
   b6b9e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6ba0:	7c00      	ldrb	r0, [r0, #16]
{
   b6ba2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6ba4:	f7fe faa6 	bl	b50f4 <HAL_USB_USART_Available_Data_For_Write>
   b6ba8:	2800      	cmp	r0, #0
   b6baa:	9901      	ldr	r1, [sp, #4]
   b6bac:	dc01      	bgt.n	b6bb2 <_ZN9USBSerial5writeEh+0x16>
   b6bae:	7c60      	ldrb	r0, [r4, #17]
   b6bb0:	b120      	cbz	r0, b6bbc <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b6bb2:	7c20      	ldrb	r0, [r4, #16]
   b6bb4:	f7fe faae 	bl	b5114 <HAL_USB_USART_Send_Data>
   b6bb8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6bbc:	b002      	add	sp, #8
   b6bbe:	bd10      	pop	{r4, pc}

000b6bc0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6bc0:	7c00      	ldrb	r0, [r0, #16]
   b6bc2:	f7fe baaf 	b.w	b5124 <HAL_USB_USART_Flush_Data>

000b6bc6 <_ZN9USBSerialD0Ev>:
   b6bc6:	b510      	push	{r4, lr}
   b6bc8:	2114      	movs	r1, #20
   b6bca:	4604      	mov	r4, r0
   b6bcc:	f7fd fa65 	bl	b409a <_ZdlPvj>
   b6bd0:	4620      	mov	r0, r4
   b6bd2:	bd10      	pop	{r4, pc}

000b6bd4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6bd4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6bd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6bda:	4604      	mov	r4, r0
   b6bdc:	4608      	mov	r0, r1
   b6bde:	2100      	movs	r1, #0
   b6be0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6be4:	4b04      	ldr	r3, [pc, #16]	; (b6bf8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b6be6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6be8:	2301      	movs	r3, #1
  _serial = serial;
   b6bea:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6bec:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b6bee:	4611      	mov	r1, r2
   b6bf0:	f7fe fa68 	bl	b50c4 <HAL_USB_USART_Init>
}
   b6bf4:	4620      	mov	r0, r4
   b6bf6:	bd10      	pop	{r4, pc}
   b6bf8:	000b7b84 	.word	0x000b7b84

000b6bfc <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b6bfc:	7c00      	ldrb	r0, [r0, #16]
   b6bfe:	2200      	movs	r2, #0
   b6c00:	f7fe ba68 	b.w	b50d4 <HAL_USB_USART_Begin>

000b6c04 <_Z19acquireSerialBufferv>:
{
   b6c04:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b6c06:	2214      	movs	r2, #20
{
   b6c08:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b6c0a:	2100      	movs	r1, #0
   b6c0c:	f000 fbe8 	bl	b73e0 <memset>
}
   b6c10:	4620      	mov	r0, r4
   b6c12:	bd10      	pop	{r4, pc}

000b6c14 <_Z16_fetch_usbserialv>:
{
   b6c14:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6c16:	4c0f      	ldr	r4, [pc, #60]	; (b6c54 <_Z16_fetch_usbserialv+0x40>)
{
   b6c18:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b6c1a:	a803      	add	r0, sp, #12
   b6c1c:	f7ff fff2 	bl	b6c04 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6c20:	7821      	ldrb	r1, [r4, #0]
   b6c22:	f3bf 8f5b 	dmb	ish
   b6c26:	f011 0101 	ands.w	r1, r1, #1
   b6c2a:	d10f      	bne.n	b6c4c <_Z16_fetch_usbserialv+0x38>
   b6c2c:	4620      	mov	r0, r4
   b6c2e:	9101      	str	r1, [sp, #4]
   b6c30:	f7fd fa35 	bl	b409e <__cxa_guard_acquire>
   b6c34:	9901      	ldr	r1, [sp, #4]
   b6c36:	b148      	cbz	r0, b6c4c <_Z16_fetch_usbserialv+0x38>
   b6c38:	aa03      	add	r2, sp, #12
   b6c3a:	4807      	ldr	r0, [pc, #28]	; (b6c58 <_Z16_fetch_usbserialv+0x44>)
   b6c3c:	f7ff ffca 	bl	b6bd4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6c40:	4620      	mov	r0, r4
   b6c42:	f7fd fa31 	bl	b40a8 <__cxa_guard_release>
   b6c46:	4805      	ldr	r0, [pc, #20]	; (b6c5c <_Z16_fetch_usbserialv+0x48>)
   b6c48:	f000 fb88 	bl	b735c <atexit>
	return _usbserial;
}
   b6c4c:	4802      	ldr	r0, [pc, #8]	; (b6c58 <_Z16_fetch_usbserialv+0x44>)
   b6c4e:	b008      	add	sp, #32
   b6c50:	bd10      	pop	{r4, pc}
   b6c52:	bf00      	nop
   b6c54:	2003e6f4 	.word	0x2003e6f4
   b6c58:	2003e6f8 	.word	0x2003e6f8
   b6c5c:	000b6b5d 	.word	0x000b6b5d

000b6c60 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6c60:	4770      	bx	lr

000b6c62 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6c62:	7441      	strb	r1, [r0, #17]
}
   b6c64:	4770      	bx	lr

000b6c66 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b6c66:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6c68:	7c00      	ldrb	r0, [r0, #16]
   b6c6a:	f7fe f9cb 	bl	b5004 <hal_usart_available_data_for_write>
}
   b6c6e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6c72:	bd08      	pop	{r3, pc}

000b6c74 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6c74:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b6c76:	7c00      	ldrb	r0, [r0, #16]
   b6c78:	f7fe f99c 	bl	b4fb4 <hal_usart_available>
}
   b6c7c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6c80:	bd08      	pop	{r3, pc}

000b6c82 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6c82:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6c84:	7c00      	ldrb	r0, [r0, #16]
   b6c86:	f7fe f9a5 	bl	b4fd4 <hal_usart_peek>
}
   b6c8a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6c8e:	bd08      	pop	{r3, pc}

000b6c90 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6c90:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6c92:	7c00      	ldrb	r0, [r0, #16]
   b6c94:	f7fe f996 	bl	b4fc4 <hal_usart_read>
}
   b6c98:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6c9c:	bd08      	pop	{r3, pc}

000b6c9e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6c9e:	7c00      	ldrb	r0, [r0, #16]
   b6ca0:	f7fe b9a0 	b.w	b4fe4 <hal_usart_flush>

000b6ca4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6ca4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6ca6:	7c45      	ldrb	r5, [r0, #17]
{
   b6ca8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6caa:	b12d      	cbz	r5, b6cb8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6cac:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6cae:	b003      	add	sp, #12
   b6cb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6cb4:	f7fe b976 	b.w	b4fa4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6cb8:	7c00      	ldrb	r0, [r0, #16]
   b6cba:	9101      	str	r1, [sp, #4]
   b6cbc:	f7fe f9a2 	bl	b5004 <hal_usart_available_data_for_write>
   b6cc0:	2800      	cmp	r0, #0
   b6cc2:	9901      	ldr	r1, [sp, #4]
   b6cc4:	dcf2      	bgt.n	b6cac <_ZN11USARTSerial5writeEh+0x8>
}
   b6cc6:	4628      	mov	r0, r5
   b6cc8:	b003      	add	sp, #12
   b6cca:	bd30      	pop	{r4, r5, pc}

000b6ccc <_ZN11USARTSerialD0Ev>:
   b6ccc:	b510      	push	{r4, lr}
   b6cce:	2114      	movs	r1, #20
   b6cd0:	4604      	mov	r4, r0
   b6cd2:	f7fd f9e2 	bl	b409a <_ZdlPvj>
   b6cd6:	4620      	mov	r0, r4
   b6cd8:	bd10      	pop	{r4, pc}
	...

000b6cdc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6cdc:	b510      	push	{r4, lr}
   b6cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6ce2:	4604      	mov	r4, r0
   b6ce4:	4608      	mov	r0, r1
   b6ce6:	4611      	mov	r1, r2
   b6ce8:	2200      	movs	r2, #0
   b6cea:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6cee:	4b04      	ldr	r3, [pc, #16]	; (b6d00 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6cf0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6cf2:	2301      	movs	r3, #1
  _serial = serial;
   b6cf4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6cf6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6cf8:	f7fe f994 	bl	b5024 <hal_usart_init_ex>
}
   b6cfc:	4620      	mov	r0, r4
   b6cfe:	bd10      	pop	{r4, pc}
   b6d00:	000b7bb4 	.word	0x000b7bb4

000b6d04 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b6d04:	7c00      	ldrb	r0, [r0, #16]
   b6d06:	2300      	movs	r3, #0
   b6d08:	f7fe b984 	b.w	b5014 <hal_usart_begin_config>

000b6d0c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b6d0c:	2200      	movs	r2, #0
   b6d0e:	f7ff bff9 	b.w	b6d04 <_ZN11USARTSerial5beginEmm>

000b6d12 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6d12:	4770      	bx	lr

000b6d14 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b6d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6d16:	4606      	mov	r6, r0
   b6d18:	4615      	mov	r5, r2
   b6d1a:	460c      	mov	r4, r1
   b6d1c:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6d1e:	42bc      	cmp	r4, r7
   b6d20:	d006      	beq.n	b6d30 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6d22:	6833      	ldr	r3, [r6, #0]
   b6d24:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6d28:	689b      	ldr	r3, [r3, #8]
   b6d2a:	4630      	mov	r0, r6
   b6d2c:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6d2e:	e7f6      	b.n	b6d1e <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6d30:	4628      	mov	r0, r5
   b6d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6d34 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6d34:	7c00      	ldrb	r0, [r0, #16]
   b6d36:	2200      	movs	r2, #0
   b6d38:	f7fe b97c 	b.w	b5034 <hal_i2c_write>

000b6d3c <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b6d3c:	7c00      	ldrb	r0, [r0, #16]
   b6d3e:	2100      	movs	r1, #0
   b6d40:	f7fe b980 	b.w	b5044 <hal_i2c_available>

000b6d44 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6d44:	7c00      	ldrb	r0, [r0, #16]
   b6d46:	2100      	movs	r1, #0
   b6d48:	f7fe b984 	b.w	b5054 <hal_i2c_read>

000b6d4c <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b6d4c:	7c00      	ldrb	r0, [r0, #16]
   b6d4e:	2100      	movs	r1, #0
   b6d50:	f7fe b988 	b.w	b5064 <hal_i2c_peek>

000b6d54 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6d54:	7c00      	ldrb	r0, [r0, #16]
   b6d56:	2100      	movs	r1, #0
   b6d58:	f7fe b98c 	b.w	b5074 <hal_i2c_flush>

000b6d5c <_ZN7TwoWireD0Ev>:
   b6d5c:	b510      	push	{r4, lr}
   b6d5e:	2114      	movs	r1, #20
   b6d60:	4604      	mov	r4, r0
   b6d62:	f7fd f99a 	bl	b409a <_ZdlPvj>
   b6d66:	4620      	mov	r0, r4
   b6d68:	bd10      	pop	{r4, pc}
	...

000b6d6c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6d6c:	b510      	push	{r4, lr}
   b6d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6d72:	4604      	mov	r4, r0
   b6d74:	4608      	mov	r0, r1
   b6d76:	2100      	movs	r1, #0
   b6d78:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6d7c:	4b03      	ldr	r3, [pc, #12]	; (b6d8c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b6d7e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b6d80:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b6d82:	4611      	mov	r1, r2
   b6d84:	f7fe f986 	bl	b5094 <hal_i2c_init>
}
   b6d88:	4620      	mov	r0, r4
   b6d8a:	bd10      	pop	{r4, pc}
   b6d8c:	000b7be4 	.word	0x000b7be4

000b6d90 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b6d90:	2200      	movs	r2, #0
   b6d92:	6840      	ldr	r0, [r0, #4]
   b6d94:	4611      	mov	r1, r2
   b6d96:	f7fe ba19 	b.w	b51cc <network_ready>

000b6d9a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6d9a:	2200      	movs	r2, #0
   b6d9c:	6840      	ldr	r0, [r0, #4]
   b6d9e:	4611      	mov	r1, r2
   b6da0:	f7fe ba34 	b.w	b520c <network_listening>

000b6da4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6da4:	2200      	movs	r2, #0
   b6da6:	6840      	ldr	r0, [r0, #4]
   b6da8:	4611      	mov	r1, r2
   b6daa:	f7fe ba3f 	b.w	b522c <network_get_listen_timeout>

000b6dae <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6dae:	6840      	ldr	r0, [r0, #4]
   b6db0:	2200      	movs	r2, #0
   b6db2:	f7fe ba33 	b.w	b521c <network_set_listen_timeout>

000b6db6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6db6:	6840      	ldr	r0, [r0, #4]
   b6db8:	2200      	movs	r2, #0
   b6dba:	f081 0101 	eor.w	r1, r1, #1
   b6dbe:	f7fe ba1d 	b.w	b51fc <network_listen>

000b6dc2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6dc2:	2300      	movs	r3, #0
   b6dc4:	6840      	ldr	r0, [r0, #4]
   b6dc6:	461a      	mov	r2, r3
   b6dc8:	4619      	mov	r1, r3
   b6dca:	f7fe ba0f 	b.w	b51ec <network_off>

000b6dce <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6dce:	2200      	movs	r2, #0
   b6dd0:	6840      	ldr	r0, [r0, #4]
   b6dd2:	4611      	mov	r1, r2
   b6dd4:	f7fe b9ea 	b.w	b51ac <network_connecting>

000b6dd8 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6dd8:	6840      	ldr	r0, [r0, #4]
   b6dda:	2200      	movs	r2, #0
   b6ddc:	2102      	movs	r1, #2
   b6dde:	f7fe b9ed 	b.w	b51bc <network_disconnect>

000b6de2 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6de2:	2300      	movs	r3, #0
   b6de4:	6840      	ldr	r0, [r0, #4]
   b6de6:	461a      	mov	r2, r3
   b6de8:	f7fe b9d8 	b.w	b519c <network_connect>

000b6dec <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6dec:	4b02      	ldr	r3, [pc, #8]	; (b6df8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b6dee:	2204      	movs	r2, #4
   b6df0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b6df2:	4a02      	ldr	r2, [pc, #8]	; (b6dfc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b6df4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b6df6:	4770      	bx	lr
   b6df8:	2003e70c 	.word	0x2003e70c
   b6dfc:	000b7c0c 	.word	0x000b7c0c

000b6e00 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6e00:	2300      	movs	r3, #0
   b6e02:	6840      	ldr	r0, [r0, #4]
   b6e04:	461a      	mov	r2, r3
   b6e06:	f7fe b9c9 	b.w	b519c <network_connect>

000b6e0a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b6e0a:	6840      	ldr	r0, [r0, #4]
   b6e0c:	2200      	movs	r2, #0
   b6e0e:	2102      	movs	r1, #2
   b6e10:	f7fe b9d4 	b.w	b51bc <network_disconnect>

000b6e14 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6e14:	2200      	movs	r2, #0
   b6e16:	6840      	ldr	r0, [r0, #4]
   b6e18:	4611      	mov	r1, r2
   b6e1a:	f7fe b9c7 	b.w	b51ac <network_connecting>

000b6e1e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b6e1e:	2200      	movs	r2, #0
   b6e20:	6840      	ldr	r0, [r0, #4]
   b6e22:	4611      	mov	r1, r2
   b6e24:	f7fe b9d2 	b.w	b51cc <network_ready>

000b6e28 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6e28:	2300      	movs	r3, #0
   b6e2a:	6840      	ldr	r0, [r0, #4]
   b6e2c:	461a      	mov	r2, r3
   b6e2e:	4619      	mov	r1, r3
   b6e30:	f7fe b9d4 	b.w	b51dc <network_on>

000b6e34 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6e34:	2300      	movs	r3, #0
   b6e36:	6840      	ldr	r0, [r0, #4]
   b6e38:	461a      	mov	r2, r3
   b6e3a:	4619      	mov	r1, r3
   b6e3c:	f7fe b9d6 	b.w	b51ec <network_off>

000b6e40 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6e40:	6840      	ldr	r0, [r0, #4]
   b6e42:	2100      	movs	r1, #0
   b6e44:	f7fe b9fa 	b.w	b523c <network_is_on>

000b6e48 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6e48:	6840      	ldr	r0, [r0, #4]
   b6e4a:	2100      	movs	r1, #0
   b6e4c:	f7fe b9fe 	b.w	b524c <network_is_off>

000b6e50 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6e50:	6840      	ldr	r0, [r0, #4]
   b6e52:	2200      	movs	r2, #0
   b6e54:	f081 0101 	eor.w	r1, r1, #1
   b6e58:	f7fe b9d0 	b.w	b51fc <network_listen>

000b6e5c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6e5c:	6840      	ldr	r0, [r0, #4]
   b6e5e:	2200      	movs	r2, #0
   b6e60:	f7fe b9dc 	b.w	b521c <network_set_listen_timeout>

000b6e64 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6e64:	2200      	movs	r2, #0
   b6e66:	6840      	ldr	r0, [r0, #4]
   b6e68:	4611      	mov	r1, r2
   b6e6a:	f7fe b9df 	b.w	b522c <network_get_listen_timeout>

000b6e6e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b6e6e:	2200      	movs	r2, #0
   b6e70:	6840      	ldr	r0, [r0, #4]
   b6e72:	4611      	mov	r1, r2
   b6e74:	f7fe b9ca 	b.w	b520c <network_listening>

000b6e78 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6e78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6e7c:	b095      	sub	sp, #84	; 0x54
   b6e7e:	4614      	mov	r4, r2
   b6e80:	460d      	mov	r5, r1
   b6e82:	4607      	mov	r7, r0
    IPAddress addr;
   b6e84:	f7ff fe2a 	bl	b6adc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6e88:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6e8a:	221c      	movs	r2, #28
   b6e8c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6e8e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6e90:	f000 faa6 	bl	b73e0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6e94:	2340      	movs	r3, #64	; 0x40
   b6e96:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6e98:	4620      	mov	r0, r4
   b6e9a:	466b      	mov	r3, sp
   b6e9c:	aa0c      	add	r2, sp, #48	; 0x30
   b6e9e:	2100      	movs	r1, #0
   b6ea0:	f7fd ffd8 	bl	b4e54 <netdb_getaddrinfo>
    if (!r) {
   b6ea4:	4604      	mov	r4, r0
   b6ea6:	2800      	cmp	r0, #0
   b6ea8:	d14b      	bne.n	b6f42 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6eaa:	4602      	mov	r2, r0
   b6eac:	2101      	movs	r1, #1
   b6eae:	6868      	ldr	r0, [r5, #4]
   b6eb0:	f7fe f98c 	bl	b51cc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6eb4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6eb6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6eb8:	4622      	mov	r2, r4
   b6eba:	6868      	ldr	r0, [r5, #4]
   b6ebc:	f7fe f986 	bl	b51cc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6ec0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6ec2:	4681      	mov	r9, r0
        bool ok = false;
   b6ec4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6ec6:	2e00      	cmp	r6, #0
   b6ec8:	d03b      	beq.n	b6f42 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b6eca:	2900      	cmp	r1, #0
   b6ecc:	d139      	bne.n	b6f42 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6ece:	6873      	ldr	r3, [r6, #4]
   b6ed0:	2b02      	cmp	r3, #2
   b6ed2:	d003      	beq.n	b6edc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6ed4:	2b0a      	cmp	r3, #10
   b6ed6:	d011      	beq.n	b6efc <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6ed8:	69f6      	ldr	r6, [r6, #28]
   b6eda:	e7f4      	b.n	b6ec6 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6edc:	f1b8 0f00 	cmp.w	r8, #0
   b6ee0:	d0fa      	beq.n	b6ed8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b6ee2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6ee4:	a806      	add	r0, sp, #24
   b6ee6:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6ee8:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b6eea:	f7ff fe25 	bl	b6b38 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6eee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6ef0:	1d3c      	adds	r4, r7, #4
   b6ef2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6ef4:	682b      	ldr	r3, [r5, #0]
   b6ef6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6ef8:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b6efa:	e7ed      	b.n	b6ed8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6efc:	f1b9 0f00 	cmp.w	r9, #0
   b6f00:	d0ea      	beq.n	b6ed8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6f02:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6f04:	2210      	movs	r2, #16
   b6f06:	a801      	add	r0, sp, #4
   b6f08:	f000 fa6a 	bl	b73e0 <memset>
                    a.v = 6;
   b6f0c:	2306      	movs	r3, #6
   b6f0e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6f12:	ad01      	add	r5, sp, #4
   b6f14:	f104 0308 	add.w	r3, r4, #8
   b6f18:	3418      	adds	r4, #24
   b6f1a:	6818      	ldr	r0, [r3, #0]
   b6f1c:	6859      	ldr	r1, [r3, #4]
   b6f1e:	462a      	mov	r2, r5
   b6f20:	c203      	stmia	r2!, {r0, r1}
   b6f22:	3308      	adds	r3, #8
   b6f24:	42a3      	cmp	r3, r4
   b6f26:	4615      	mov	r5, r2
   b6f28:	d1f7      	bne.n	b6f1a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6f2a:	a901      	add	r1, sp, #4
   b6f2c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6f2e:	ad07      	add	r5, sp, #28
   b6f30:	f7ff fde2 	bl	b6af8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6f34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6f36:	1d3c      	adds	r4, r7, #4
   b6f38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6f3a:	682b      	ldr	r3, [r5, #0]
   b6f3c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6f3e:	4649      	mov	r1, r9
   b6f40:	e7ca      	b.n	b6ed8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6f42:	9800      	ldr	r0, [sp, #0]
   b6f44:	f7fd ff7e 	bl	b4e44 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6f48:	4638      	mov	r0, r7
   b6f4a:	b015      	add	sp, #84	; 0x54
   b6f4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6f50 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6f50:	4b02      	ldr	r3, [pc, #8]	; (b6f5c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6f52:	4a03      	ldr	r2, [pc, #12]	; (b6f60 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6f54:	601a      	str	r2, [r3, #0]
   b6f56:	2200      	movs	r2, #0
   b6f58:	605a      	str	r2, [r3, #4]

} // spark
   b6f5a:	4770      	bx	lr
   b6f5c:	2003e714 	.word	0x2003e714
   b6f60:	000b7c48 	.word	0x000b7c48

000b6f64 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b6f64:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b6f66:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b6f68:	d902      	bls.n	b6f70 <pinAvailable+0xc>
    return false;
   b6f6a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b6f6c:	b002      	add	sp, #8
   b6f6e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b6f70:	f1a0 030b 	sub.w	r3, r0, #11
   b6f74:	2b02      	cmp	r3, #2
   b6f76:	d81a      	bhi.n	b6fae <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b6f78:	4c17      	ldr	r4, [pc, #92]	; (b6fd8 <pinAvailable+0x74>)
   b6f7a:	7821      	ldrb	r1, [r4, #0]
   b6f7c:	f3bf 8f5b 	dmb	ish
   b6f80:	f011 0101 	ands.w	r1, r1, #1
   b6f84:	d10b      	bne.n	b6f9e <pinAvailable+0x3a>
   b6f86:	4620      	mov	r0, r4
   b6f88:	9101      	str	r1, [sp, #4]
   b6f8a:	f7fd f888 	bl	b409e <__cxa_guard_acquire>
   b6f8e:	9901      	ldr	r1, [sp, #4]
   b6f90:	b128      	cbz	r0, b6f9e <pinAvailable+0x3a>
   b6f92:	4812      	ldr	r0, [pc, #72]	; (b6fdc <pinAvailable+0x78>)
   b6f94:	f7fe f9e8 	bl	b5368 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6f98:	4620      	mov	r0, r4
   b6f9a:	f7fd f885 	bl	b40a8 <__cxa_guard_release>
   b6f9e:	4b0f      	ldr	r3, [pc, #60]	; (b6fdc <pinAvailable+0x78>)
   b6fa0:	7818      	ldrb	r0, [r3, #0]
   b6fa2:	f7fe f887 	bl	b50b4 <hal_spi_is_enabled>
   b6fa6:	2800      	cmp	r0, #0
   b6fa8:	d1df      	bne.n	b6f6a <pinAvailable+0x6>
  return true; // 'pin' is available
   b6faa:	2001      	movs	r0, #1
   b6fac:	e7de      	b.n	b6f6c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b6fae:	2801      	cmp	r0, #1
   b6fb0:	d809      	bhi.n	b6fc6 <pinAvailable+0x62>
   b6fb2:	f000 f897 	bl	b70e4 <_Z19__fetch_global_Wirev>
   b6fb6:	2100      	movs	r1, #0
   b6fb8:	7c00      	ldrb	r0, [r0, #16]
   b6fba:	f7fe f863 	bl	b5084 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b6fbe:	f080 0001 	eor.w	r0, r0, #1
   b6fc2:	b2c0      	uxtb	r0, r0
   b6fc4:	e7d2      	b.n	b6f6c <pinAvailable+0x8>
   b6fc6:	3809      	subs	r0, #9
   b6fc8:	2801      	cmp	r0, #1
   b6fca:	d8ee      	bhi.n	b6faa <pinAvailable+0x46>
   b6fcc:	f000 f84e 	bl	b706c <_Z22__fetch_global_Serial1v>
   b6fd0:	7c00      	ldrb	r0, [r0, #16]
   b6fd2:	f7fe f80f 	bl	b4ff4 <hal_usart_is_enabled>
   b6fd6:	e7f2      	b.n	b6fbe <pinAvailable+0x5a>
   b6fd8:	2003e71c 	.word	0x2003e71c
   b6fdc:	2003e720 	.word	0x2003e720

000b6fe0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6fe0:	2823      	cmp	r0, #35	; 0x23
{
   b6fe2:	b538      	push	{r3, r4, r5, lr}
   b6fe4:	4604      	mov	r4, r0
   b6fe6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6fe8:	d80a      	bhi.n	b7000 <pinMode+0x20>
   b6fea:	29ff      	cmp	r1, #255	; 0xff
   b6fec:	d008      	beq.n	b7000 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b6fee:	f7ff ffb9 	bl	b6f64 <pinAvailable>
   b6ff2:	b128      	cbz	r0, b7000 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b6ff4:	4629      	mov	r1, r5
   b6ff6:	4620      	mov	r0, r4
}
   b6ff8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b6ffc:	f7fd bf32 	b.w	b4e64 <HAL_Pin_Mode>
}
   b7000:	bd38      	pop	{r3, r4, r5, pc}

000b7002 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b7002:	b538      	push	{r3, r4, r5, lr}
   b7004:	4604      	mov	r4, r0
   b7006:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7008:	f7fd ff34 	bl	b4e74 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b700c:	28ff      	cmp	r0, #255	; 0xff
   b700e:	d010      	beq.n	b7032 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b7010:	2806      	cmp	r0, #6
   b7012:	d804      	bhi.n	b701e <digitalWrite+0x1c>
   b7014:	234d      	movs	r3, #77	; 0x4d
   b7016:	fa23 f000 	lsr.w	r0, r3, r0
   b701a:	07c3      	lsls	r3, r0, #31
   b701c:	d409      	bmi.n	b7032 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b701e:	4620      	mov	r0, r4
   b7020:	f7ff ffa0 	bl	b6f64 <pinAvailable>
   b7024:	b128      	cbz	r0, b7032 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b7026:	4629      	mov	r1, r5
   b7028:	4620      	mov	r0, r4
}
   b702a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b702e:	f7fd bf29 	b.w	b4e84 <HAL_GPIO_Write>
}
   b7032:	bd38      	pop	{r3, r4, r5, pc}

000b7034 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7034:	4770      	bx	lr
	...

000b7038 <_Z20acquireSerial1Bufferv>:
{
   b7038:	b538      	push	{r3, r4, r5, lr}
   b703a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b703c:	2514      	movs	r5, #20
   b703e:	462a      	mov	r2, r5
   b7040:	2100      	movs	r1, #0
   b7042:	f000 f9cd 	bl	b73e0 <memset>
   b7046:	8025      	strh	r5, [r4, #0]
   b7048:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b704a:	4907      	ldr	r1, [pc, #28]	; (b7068 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b704c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b704e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7050:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7052:	f000 f86b 	bl	b712c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7056:	4904      	ldr	r1, [pc, #16]	; (b7068 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b7058:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b705a:	4628      	mov	r0, r5
   b705c:	f000 f866 	bl	b712c <_ZnajRKSt9nothrow_t>
    };
   b7060:	60e0      	str	r0, [r4, #12]
}
   b7062:	4620      	mov	r0, r4
   b7064:	bd38      	pop	{r3, r4, r5, pc}
   b7066:	bf00      	nop
   b7068:	000b7c7c 	.word	0x000b7c7c

000b706c <_Z22__fetch_global_Serial1v>:
{
   b706c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b706e:	4d0e      	ldr	r5, [pc, #56]	; (b70a8 <_Z22__fetch_global_Serial1v+0x3c>)
   b7070:	7829      	ldrb	r1, [r5, #0]
   b7072:	f3bf 8f5b 	dmb	ish
   b7076:	f011 0401 	ands.w	r4, r1, #1
{
   b707a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b707c:	d111      	bne.n	b70a2 <_Z22__fetch_global_Serial1v+0x36>
   b707e:	4628      	mov	r0, r5
   b7080:	f7fd f80d 	bl	b409e <__cxa_guard_acquire>
   b7084:	b168      	cbz	r0, b70a2 <_Z22__fetch_global_Serial1v+0x36>
   b7086:	a801      	add	r0, sp, #4
   b7088:	f7ff ffd6 	bl	b7038 <_Z20acquireSerial1Bufferv>
   b708c:	aa01      	add	r2, sp, #4
   b708e:	4621      	mov	r1, r4
   b7090:	4806      	ldr	r0, [pc, #24]	; (b70ac <_Z22__fetch_global_Serial1v+0x40>)
   b7092:	f7ff fe23 	bl	b6cdc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b7096:	4628      	mov	r0, r5
   b7098:	f7fd f806 	bl	b40a8 <__cxa_guard_release>
   b709c:	4804      	ldr	r0, [pc, #16]	; (b70b0 <_Z22__fetch_global_Serial1v+0x44>)
   b709e:	f000 f95d 	bl	b735c <atexit>
    return serial1;
}
   b70a2:	4802      	ldr	r0, [pc, #8]	; (b70ac <_Z22__fetch_global_Serial1v+0x40>)
   b70a4:	b007      	add	sp, #28
   b70a6:	bd30      	pop	{r4, r5, pc}
   b70a8:	2003e728 	.word	0x2003e728
   b70ac:	2003e72c 	.word	0x2003e72c
   b70b0:	000b7035 	.word	0x000b7035

000b70b4 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b70b4:	4770      	bx	lr
	...

000b70b8 <_Z17acquireWireBufferv>:
{
   b70b8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b70ba:	2520      	movs	r5, #32
   b70bc:	2314      	movs	r3, #20
{
   b70be:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b70c0:	6003      	str	r3, [r0, #0]
   b70c2:	6085      	str	r5, [r0, #8]
   b70c4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b70c6:	4906      	ldr	r1, [pc, #24]	; (b70e0 <_Z17acquireWireBufferv+0x28>)
   b70c8:	4628      	mov	r0, r5
   b70ca:	f000 f82f 	bl	b712c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b70ce:	4904      	ldr	r1, [pc, #16]	; (b70e0 <_Z17acquireWireBufferv+0x28>)
	};
   b70d0:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b70d2:	4628      	mov	r0, r5
   b70d4:	f000 f82a 	bl	b712c <_ZnajRKSt9nothrow_t>
	};
   b70d8:	60e0      	str	r0, [r4, #12]
}
   b70da:	4620      	mov	r0, r4
   b70dc:	bd38      	pop	{r3, r4, r5, pc}
   b70de:	bf00      	nop
   b70e0:	000b7c7c 	.word	0x000b7c7c

000b70e4 <_Z19__fetch_global_Wirev>:
{
   b70e4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b70e6:	4d0e      	ldr	r5, [pc, #56]	; (b7120 <_Z19__fetch_global_Wirev+0x3c>)
   b70e8:	7829      	ldrb	r1, [r5, #0]
   b70ea:	f3bf 8f5b 	dmb	ish
   b70ee:	f011 0401 	ands.w	r4, r1, #1
{
   b70f2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b70f4:	d111      	bne.n	b711a <_Z19__fetch_global_Wirev+0x36>
   b70f6:	4628      	mov	r0, r5
   b70f8:	f7fc ffd1 	bl	b409e <__cxa_guard_acquire>
   b70fc:	b168      	cbz	r0, b711a <_Z19__fetch_global_Wirev+0x36>
   b70fe:	a801      	add	r0, sp, #4
   b7100:	f7ff ffda 	bl	b70b8 <_Z17acquireWireBufferv>
   b7104:	aa01      	add	r2, sp, #4
   b7106:	4621      	mov	r1, r4
   b7108:	4806      	ldr	r0, [pc, #24]	; (b7124 <_Z19__fetch_global_Wirev+0x40>)
   b710a:	f7ff fe2f 	bl	b6d6c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b710e:	4628      	mov	r0, r5
   b7110:	f7fc ffca 	bl	b40a8 <__cxa_guard_release>
   b7114:	4804      	ldr	r0, [pc, #16]	; (b7128 <_Z19__fetch_global_Wirev+0x44>)
   b7116:	f000 f921 	bl	b735c <atexit>
	return wire;
}
   b711a:	4802      	ldr	r0, [pc, #8]	; (b7124 <_Z19__fetch_global_Wirev+0x40>)
   b711c:	b007      	add	sp, #28
   b711e:	bd30      	pop	{r4, r5, pc}
   b7120:	2003e744 	.word	0x2003e744
   b7124:	2003e748 	.word	0x2003e748
   b7128:	000b70b5 	.word	0x000b70b5

000b712c <_ZnajRKSt9nothrow_t>:
   b712c:	f7fc bfb3 	b.w	b4096 <_Znaj>

000b7130 <_ZSt25__throw_bad_function_callv>:
   b7130:	b508      	push	{r3, lr}
   b7132:	f7fe f8bb 	bl	b52ac <abort>
	...

000b7138 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b7138:	4901      	ldr	r1, [pc, #4]	; (b7140 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b713a:	f000 b8f9 	b.w	b7330 <_ZNKSt9type_infoeqERKS_>
   b713e:	bf00      	nop
   b7140:	000b7c98 	.word	0x000b7c98

000b7144 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b7144:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b7146:	2400      	movs	r4, #0
   b7148:	2310      	movs	r3, #16
   b714a:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b714e:	6803      	ldr	r3, [r0, #0]
   b7150:	4615      	mov	r5, r2
   b7152:	699e      	ldr	r6, [r3, #24]
   b7154:	6812      	ldr	r2, [r2, #0]
   b7156:	466b      	mov	r3, sp
   b7158:	e9cd 4400 	strd	r4, r4, [sp]
   b715c:	47b0      	blx	r6
   b715e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b7162:	f003 0306 	and.w	r3, r3, #6
   b7166:	2b06      	cmp	r3, #6
   b7168:	bf03      	ittte	eq
   b716a:	9b00      	ldreq	r3, [sp, #0]
   b716c:	602b      	streq	r3, [r5, #0]
   b716e:	2001      	moveq	r0, #1
   b7170:	4620      	movne	r0, r4
   b7172:	b004      	add	sp, #16
   b7174:	bd70      	pop	{r4, r5, r6, pc}

000b7176 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b7176:	9800      	ldr	r0, [sp, #0]
   b7178:	4290      	cmp	r0, r2
   b717a:	bf14      	ite	ne
   b717c:	2001      	movne	r0, #1
   b717e:	2006      	moveq	r0, #6
   b7180:	4770      	bx	lr
	...

000b7184 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b7184:	b510      	push	{r4, lr}
   b7186:	4b03      	ldr	r3, [pc, #12]	; (b7194 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b7188:	6003      	str	r3, [r0, #0]
   b718a:	4604      	mov	r4, r0
   b718c:	f000 f8cd 	bl	b732a <_ZNSt9type_infoD1Ev>
   b7190:	4620      	mov	r0, r4
   b7192:	bd10      	pop	{r4, pc}
   b7194:	000b7cd8 	.word	0x000b7cd8

000b7198 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b7198:	b510      	push	{r4, lr}
   b719a:	4604      	mov	r4, r0
   b719c:	f7ff fff2 	bl	b7184 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b71a0:	4620      	mov	r0, r4
   b71a2:	2108      	movs	r1, #8
   b71a4:	f7fc ff79 	bl	b409a <_ZdlPvj>
   b71a8:	4620      	mov	r0, r4
   b71aa:	bd10      	pop	{r4, pc}

000b71ac <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b71ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b71b0:	461f      	mov	r7, r3
   b71b2:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b71b6:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b71ba:	4598      	cmp	r8, r3
   b71bc:	4606      	mov	r6, r0
   b71be:	4615      	mov	r5, r2
   b71c0:	d107      	bne.n	b71d2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b71c2:	9907      	ldr	r1, [sp, #28]
   b71c4:	f000 f8b4 	bl	b7330 <_ZNKSt9type_infoeqERKS_>
   b71c8:	b118      	cbz	r0, b71d2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b71ca:	7165      	strb	r5, [r4, #5]
   b71cc:	2000      	movs	r0, #0
   b71ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b71d2:	4639      	mov	r1, r7
   b71d4:	4630      	mov	r0, r6
   b71d6:	f000 f8ab 	bl	b7330 <_ZNKSt9type_infoeqERKS_>
   b71da:	2800      	cmp	r0, #0
   b71dc:	d0f6      	beq.n	b71cc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b71de:	2301      	movs	r3, #1
   b71e0:	f8c4 8000 	str.w	r8, [r4]
   b71e4:	7125      	strb	r5, [r4, #4]
   b71e6:	71a3      	strb	r3, [r4, #6]
   b71e8:	e7f0      	b.n	b71cc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b71ea <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b71ea:	b538      	push	{r3, r4, r5, lr}
   b71ec:	4615      	mov	r5, r2
   b71ee:	461c      	mov	r4, r3
   b71f0:	f000 f89e 	bl	b7330 <_ZNKSt9type_infoeqERKS_>
   b71f4:	b120      	cbz	r0, b7200 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b71f6:	2308      	movs	r3, #8
   b71f8:	60e3      	str	r3, [r4, #12]
   b71fa:	2306      	movs	r3, #6
   b71fc:	6025      	str	r5, [r4, #0]
   b71fe:	7123      	strb	r3, [r4, #4]
   b7200:	bd38      	pop	{r3, r4, r5, pc}

000b7202 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b7202:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7204:	4605      	mov	r5, r0
   b7206:	460c      	mov	r4, r1
   b7208:	9201      	str	r2, [sp, #4]
   b720a:	461e      	mov	r6, r3
   b720c:	f000 f890 	bl	b7330 <_ZNKSt9type_infoeqERKS_>
   b7210:	b950      	cbnz	r0, b7228 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7212:	2e03      	cmp	r6, #3
   b7214:	d808      	bhi.n	b7228 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7216:	6823      	ldr	r3, [r4, #0]
   b7218:	9a01      	ldr	r2, [sp, #4]
   b721a:	695b      	ldr	r3, [r3, #20]
   b721c:	4629      	mov	r1, r5
   b721e:	4620      	mov	r0, r4
   b7220:	b002      	add	sp, #8
   b7222:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7226:	4718      	bx	r3
   b7228:	b002      	add	sp, #8
   b722a:	bd70      	pop	{r4, r5, r6, pc}

000b722c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b722c:	b510      	push	{r4, lr}
   b722e:	4b03      	ldr	r3, [pc, #12]	; (b723c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b7230:	6003      	str	r3, [r0, #0]
   b7232:	4604      	mov	r4, r0
   b7234:	f7ff ffa6 	bl	b7184 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7238:	4620      	mov	r0, r4
   b723a:	bd10      	pop	{r4, pc}
   b723c:	000b7d38 	.word	0x000b7d38

000b7240 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b7240:	b510      	push	{r4, lr}
   b7242:	4604      	mov	r4, r0
   b7244:	f7ff fff2 	bl	b722c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b7248:	4620      	mov	r0, r4
   b724a:	210c      	movs	r1, #12
   b724c:	f7fc ff25 	bl	b409a <_ZdlPvj>
   b7250:	4620      	mov	r0, r4
   b7252:	bd10      	pop	{r4, pc}

000b7254 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b7254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7256:	9f08      	ldr	r7, [sp, #32]
   b7258:	4297      	cmp	r7, r2
   b725a:	4605      	mov	r5, r0
   b725c:	460e      	mov	r6, r1
   b725e:	4614      	mov	r4, r2
   b7260:	d00a      	beq.n	b7278 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b7262:	68a8      	ldr	r0, [r5, #8]
   b7264:	6802      	ldr	r2, [r0, #0]
   b7266:	9708      	str	r7, [sp, #32]
   b7268:	6a15      	ldr	r5, [r2, #32]
   b726a:	4631      	mov	r1, r6
   b726c:	4622      	mov	r2, r4
   b726e:	46ac      	mov	ip, r5
   b7270:	b003      	add	sp, #12
   b7272:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b7276:	4760      	bx	ip
   b7278:	4619      	mov	r1, r3
   b727a:	9301      	str	r3, [sp, #4]
   b727c:	f000 f858 	bl	b7330 <_ZNKSt9type_infoeqERKS_>
   b7280:	9b01      	ldr	r3, [sp, #4]
   b7282:	2800      	cmp	r0, #0
   b7284:	d0ed      	beq.n	b7262 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b7286:	2006      	movs	r0, #6
   b7288:	b003      	add	sp, #12
   b728a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b728c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b728c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7290:	460d      	mov	r5, r1
   b7292:	4619      	mov	r1, r3
   b7294:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b7298:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b729c:	4681      	mov	r9, r0
   b729e:	4617      	mov	r7, r2
   b72a0:	4698      	mov	r8, r3
   b72a2:	f000 f845 	bl	b7330 <_ZNKSt9type_infoeqERKS_>
   b72a6:	b190      	cbz	r0, b72ce <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b72a8:	2d00      	cmp	r5, #0
   b72aa:	6034      	str	r4, [r6, #0]
   b72ac:	7137      	strb	r7, [r6, #4]
   b72ae:	db09      	blt.n	b72c4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b72b0:	1961      	adds	r1, r4, r5
   b72b2:	458a      	cmp	sl, r1
   b72b4:	bf0c      	ite	eq
   b72b6:	2106      	moveq	r1, #6
   b72b8:	2101      	movne	r1, #1
   b72ba:	71b1      	strb	r1, [r6, #6]
   b72bc:	2000      	movs	r0, #0
   b72be:	b001      	add	sp, #4
   b72c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b72c4:	3502      	adds	r5, #2
   b72c6:	d1f9      	bne.n	b72bc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b72c8:	2301      	movs	r3, #1
   b72ca:	71b3      	strb	r3, [r6, #6]
   b72cc:	e7f6      	b.n	b72bc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b72ce:	4554      	cmp	r4, sl
   b72d0:	d106      	bne.n	b72e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b72d2:	4659      	mov	r1, fp
   b72d4:	4648      	mov	r0, r9
   b72d6:	f000 f82b 	bl	b7330 <_ZNKSt9type_infoeqERKS_>
   b72da:	b108      	cbz	r0, b72e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b72dc:	7177      	strb	r7, [r6, #5]
   b72de:	e7ed      	b.n	b72bc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b72e0:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b72e4:	6803      	ldr	r3, [r0, #0]
   b72e6:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b72ea:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b72ee:	69dc      	ldr	r4, [r3, #28]
   b72f0:	463a      	mov	r2, r7
   b72f2:	4643      	mov	r3, r8
   b72f4:	4629      	mov	r1, r5
   b72f6:	46a4      	mov	ip, r4
   b72f8:	b001      	add	sp, #4
   b72fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b72fe:	4760      	bx	ip

000b7300 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b7300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7304:	4607      	mov	r7, r0
   b7306:	460c      	mov	r4, r1
   b7308:	4615      	mov	r5, r2
   b730a:	461e      	mov	r6, r3
   b730c:	f7ff ff6d 	bl	b71ea <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b7310:	b948      	cbnz	r0, b7326 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b7312:	68b8      	ldr	r0, [r7, #8]
   b7314:	6803      	ldr	r3, [r0, #0]
   b7316:	699f      	ldr	r7, [r3, #24]
   b7318:	462a      	mov	r2, r5
   b731a:	4633      	mov	r3, r6
   b731c:	4621      	mov	r1, r4
   b731e:	46bc      	mov	ip, r7
   b7320:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b7324:	4760      	bx	ip
   b7326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b732a <_ZNSt9type_infoD1Ev>:
   b732a:	4770      	bx	lr

000b732c <_ZNKSt9type_info14__is_pointer_pEv>:
   b732c:	2000      	movs	r0, #0
   b732e:	4770      	bx	lr

000b7330 <_ZNKSt9type_infoeqERKS_>:
   b7330:	4281      	cmp	r1, r0
   b7332:	b508      	push	{r3, lr}
   b7334:	d00e      	beq.n	b7354 <_ZNKSt9type_infoeqERKS_+0x24>
   b7336:	6840      	ldr	r0, [r0, #4]
   b7338:	7803      	ldrb	r3, [r0, #0]
   b733a:	2b2a      	cmp	r3, #42	; 0x2a
   b733c:	d00c      	beq.n	b7358 <_ZNKSt9type_infoeqERKS_+0x28>
   b733e:	6849      	ldr	r1, [r1, #4]
   b7340:	780b      	ldrb	r3, [r1, #0]
   b7342:	2b2a      	cmp	r3, #42	; 0x2a
   b7344:	bf08      	it	eq
   b7346:	3101      	addeq	r1, #1
   b7348:	f000 f880 	bl	b744c <strcmp>
   b734c:	fab0 f080 	clz	r0, r0
   b7350:	0940      	lsrs	r0, r0, #5
   b7352:	bd08      	pop	{r3, pc}
   b7354:	2001      	movs	r0, #1
   b7356:	e7fc      	b.n	b7352 <_ZNKSt9type_infoeqERKS_+0x22>
   b7358:	2000      	movs	r0, #0
   b735a:	e7fa      	b.n	b7352 <_ZNKSt9type_infoeqERKS_+0x22>

000b735c <atexit>:
   b735c:	2300      	movs	r3, #0
   b735e:	4601      	mov	r1, r0
   b7360:	461a      	mov	r2, r3
   b7362:	4618      	mov	r0, r3
   b7364:	f000 b938 	b.w	b75d8 <__register_exitproc>

000b7368 <atol>:
   b7368:	220a      	movs	r2, #10
   b736a:	2100      	movs	r1, #0
   b736c:	f000 b92a 	b.w	b75c4 <strtol>

000b7370 <memcmp>:
   b7370:	b510      	push	{r4, lr}
   b7372:	3901      	subs	r1, #1
   b7374:	4402      	add	r2, r0
   b7376:	4290      	cmp	r0, r2
   b7378:	d101      	bne.n	b737e <memcmp+0xe>
   b737a:	2000      	movs	r0, #0
   b737c:	e005      	b.n	b738a <memcmp+0x1a>
   b737e:	7803      	ldrb	r3, [r0, #0]
   b7380:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b7384:	42a3      	cmp	r3, r4
   b7386:	d001      	beq.n	b738c <memcmp+0x1c>
   b7388:	1b18      	subs	r0, r3, r4
   b738a:	bd10      	pop	{r4, pc}
   b738c:	3001      	adds	r0, #1
   b738e:	e7f2      	b.n	b7376 <memcmp+0x6>

000b7390 <memcpy>:
   b7390:	440a      	add	r2, r1
   b7392:	4291      	cmp	r1, r2
   b7394:	f100 33ff 	add.w	r3, r0, #4294967295
   b7398:	d100      	bne.n	b739c <memcpy+0xc>
   b739a:	4770      	bx	lr
   b739c:	b510      	push	{r4, lr}
   b739e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b73a2:	f803 4f01 	strb.w	r4, [r3, #1]!
   b73a6:	4291      	cmp	r1, r2
   b73a8:	d1f9      	bne.n	b739e <memcpy+0xe>
   b73aa:	bd10      	pop	{r4, pc}

000b73ac <memmove>:
   b73ac:	4288      	cmp	r0, r1
   b73ae:	b510      	push	{r4, lr}
   b73b0:	eb01 0402 	add.w	r4, r1, r2
   b73b4:	d902      	bls.n	b73bc <memmove+0x10>
   b73b6:	4284      	cmp	r4, r0
   b73b8:	4623      	mov	r3, r4
   b73ba:	d807      	bhi.n	b73cc <memmove+0x20>
   b73bc:	1e43      	subs	r3, r0, #1
   b73be:	42a1      	cmp	r1, r4
   b73c0:	d008      	beq.n	b73d4 <memmove+0x28>
   b73c2:	f811 2b01 	ldrb.w	r2, [r1], #1
   b73c6:	f803 2f01 	strb.w	r2, [r3, #1]!
   b73ca:	e7f8      	b.n	b73be <memmove+0x12>
   b73cc:	4402      	add	r2, r0
   b73ce:	4601      	mov	r1, r0
   b73d0:	428a      	cmp	r2, r1
   b73d2:	d100      	bne.n	b73d6 <memmove+0x2a>
   b73d4:	bd10      	pop	{r4, pc}
   b73d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b73da:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b73de:	e7f7      	b.n	b73d0 <memmove+0x24>

000b73e0 <memset>:
   b73e0:	4402      	add	r2, r0
   b73e2:	4603      	mov	r3, r0
   b73e4:	4293      	cmp	r3, r2
   b73e6:	d100      	bne.n	b73ea <memset+0xa>
   b73e8:	4770      	bx	lr
   b73ea:	f803 1b01 	strb.w	r1, [r3], #1
   b73ee:	e7f9      	b.n	b73e4 <memset+0x4>

000b73f0 <srand>:
   b73f0:	b538      	push	{r3, r4, r5, lr}
   b73f2:	4b10      	ldr	r3, [pc, #64]	; (b7434 <srand+0x44>)
   b73f4:	681d      	ldr	r5, [r3, #0]
   b73f6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b73f8:	4604      	mov	r4, r0
   b73fa:	b9b3      	cbnz	r3, b742a <srand+0x3a>
   b73fc:	2018      	movs	r0, #24
   b73fe:	f7fd ff35 	bl	b526c <malloc>
   b7402:	4602      	mov	r2, r0
   b7404:	63a8      	str	r0, [r5, #56]	; 0x38
   b7406:	b920      	cbnz	r0, b7412 <srand+0x22>
   b7408:	4b0b      	ldr	r3, [pc, #44]	; (b7438 <srand+0x48>)
   b740a:	480c      	ldr	r0, [pc, #48]	; (b743c <srand+0x4c>)
   b740c:	2142      	movs	r1, #66	; 0x42
   b740e:	f7fd ff5d 	bl	b52cc <__assert_func>
   b7412:	490b      	ldr	r1, [pc, #44]	; (b7440 <srand+0x50>)
   b7414:	4b0b      	ldr	r3, [pc, #44]	; (b7444 <srand+0x54>)
   b7416:	e9c0 1300 	strd	r1, r3, [r0]
   b741a:	4b0b      	ldr	r3, [pc, #44]	; (b7448 <srand+0x58>)
   b741c:	6083      	str	r3, [r0, #8]
   b741e:	230b      	movs	r3, #11
   b7420:	8183      	strh	r3, [r0, #12]
   b7422:	2100      	movs	r1, #0
   b7424:	2001      	movs	r0, #1
   b7426:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b742a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b742c:	2200      	movs	r2, #0
   b742e:	611c      	str	r4, [r3, #16]
   b7430:	615a      	str	r2, [r3, #20]
   b7432:	bd38      	pop	{r3, r4, r5, pc}
   b7434:	2002fa58 	.word	0x2002fa58
   b7438:	000b7d71 	.word	0x000b7d71
   b743c:	000b7d88 	.word	0x000b7d88
   b7440:	abcd330e 	.word	0xabcd330e
   b7444:	e66d1234 	.word	0xe66d1234
   b7448:	0005deec 	.word	0x0005deec

000b744c <strcmp>:
   b744c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b7450:	f811 3b01 	ldrb.w	r3, [r1], #1
   b7454:	2a01      	cmp	r2, #1
   b7456:	bf28      	it	cs
   b7458:	429a      	cmpcs	r2, r3
   b745a:	d0f7      	beq.n	b744c <strcmp>
   b745c:	1ad0      	subs	r0, r2, r3
   b745e:	4770      	bx	lr

000b7460 <strcpy>:
   b7460:	4603      	mov	r3, r0
   b7462:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7466:	f803 2b01 	strb.w	r2, [r3], #1
   b746a:	2a00      	cmp	r2, #0
   b746c:	d1f9      	bne.n	b7462 <strcpy+0x2>
   b746e:	4770      	bx	lr

000b7470 <strlen>:
   b7470:	4603      	mov	r3, r0
   b7472:	f813 2b01 	ldrb.w	r2, [r3], #1
   b7476:	2a00      	cmp	r2, #0
   b7478:	d1fb      	bne.n	b7472 <strlen+0x2>
   b747a:	1a18      	subs	r0, r3, r0
   b747c:	3801      	subs	r0, #1
   b747e:	4770      	bx	lr

000b7480 <strncpy>:
   b7480:	b510      	push	{r4, lr}
   b7482:	3901      	subs	r1, #1
   b7484:	4603      	mov	r3, r0
   b7486:	b132      	cbz	r2, b7496 <strncpy+0x16>
   b7488:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b748c:	f803 4b01 	strb.w	r4, [r3], #1
   b7490:	3a01      	subs	r2, #1
   b7492:	2c00      	cmp	r4, #0
   b7494:	d1f7      	bne.n	b7486 <strncpy+0x6>
   b7496:	441a      	add	r2, r3
   b7498:	2100      	movs	r1, #0
   b749a:	4293      	cmp	r3, r2
   b749c:	d100      	bne.n	b74a0 <strncpy+0x20>
   b749e:	bd10      	pop	{r4, pc}
   b74a0:	f803 1b01 	strb.w	r1, [r3], #1
   b74a4:	e7f9      	b.n	b749a <strncpy+0x1a>

000b74a6 <strnlen>:
   b74a6:	b510      	push	{r4, lr}
   b74a8:	4602      	mov	r2, r0
   b74aa:	4401      	add	r1, r0
   b74ac:	428a      	cmp	r2, r1
   b74ae:	4613      	mov	r3, r2
   b74b0:	d003      	beq.n	b74ba <strnlen+0x14>
   b74b2:	781c      	ldrb	r4, [r3, #0]
   b74b4:	3201      	adds	r2, #1
   b74b6:	2c00      	cmp	r4, #0
   b74b8:	d1f8      	bne.n	b74ac <strnlen+0x6>
   b74ba:	1a18      	subs	r0, r3, r0
   b74bc:	bd10      	pop	{r4, pc}
	...

000b74c0 <_strtol_l.constprop.0>:
   b74c0:	2b01      	cmp	r3, #1
   b74c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b74c6:	d001      	beq.n	b74cc <_strtol_l.constprop.0+0xc>
   b74c8:	2b24      	cmp	r3, #36	; 0x24
   b74ca:	d906      	bls.n	b74da <_strtol_l.constprop.0+0x1a>
   b74cc:	f7fd fef6 	bl	b52bc <__errno>
   b74d0:	2316      	movs	r3, #22
   b74d2:	6003      	str	r3, [r0, #0]
   b74d4:	2000      	movs	r0, #0
   b74d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b74da:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b75c0 <_strtol_l.constprop.0+0x100>
   b74de:	460d      	mov	r5, r1
   b74e0:	462e      	mov	r6, r5
   b74e2:	f815 4b01 	ldrb.w	r4, [r5], #1
   b74e6:	f814 700c 	ldrb.w	r7, [r4, ip]
   b74ea:	f017 0708 	ands.w	r7, r7, #8
   b74ee:	d1f7      	bne.n	b74e0 <_strtol_l.constprop.0+0x20>
   b74f0:	2c2d      	cmp	r4, #45	; 0x2d
   b74f2:	d132      	bne.n	b755a <_strtol_l.constprop.0+0x9a>
   b74f4:	782c      	ldrb	r4, [r5, #0]
   b74f6:	2701      	movs	r7, #1
   b74f8:	1cb5      	adds	r5, r6, #2
   b74fa:	2b00      	cmp	r3, #0
   b74fc:	d05b      	beq.n	b75b6 <_strtol_l.constprop.0+0xf6>
   b74fe:	2b10      	cmp	r3, #16
   b7500:	d109      	bne.n	b7516 <_strtol_l.constprop.0+0x56>
   b7502:	2c30      	cmp	r4, #48	; 0x30
   b7504:	d107      	bne.n	b7516 <_strtol_l.constprop.0+0x56>
   b7506:	782c      	ldrb	r4, [r5, #0]
   b7508:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b750c:	2c58      	cmp	r4, #88	; 0x58
   b750e:	d14d      	bne.n	b75ac <_strtol_l.constprop.0+0xec>
   b7510:	786c      	ldrb	r4, [r5, #1]
   b7512:	2310      	movs	r3, #16
   b7514:	3502      	adds	r5, #2
   b7516:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b751a:	f108 38ff 	add.w	r8, r8, #4294967295
   b751e:	f04f 0c00 	mov.w	ip, #0
   b7522:	fbb8 f9f3 	udiv	r9, r8, r3
   b7526:	4666      	mov	r6, ip
   b7528:	fb03 8a19 	mls	sl, r3, r9, r8
   b752c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b7530:	f1be 0f09 	cmp.w	lr, #9
   b7534:	d816      	bhi.n	b7564 <_strtol_l.constprop.0+0xa4>
   b7536:	4674      	mov	r4, lr
   b7538:	42a3      	cmp	r3, r4
   b753a:	dd24      	ble.n	b7586 <_strtol_l.constprop.0+0xc6>
   b753c:	f1bc 0f00 	cmp.w	ip, #0
   b7540:	db1e      	blt.n	b7580 <_strtol_l.constprop.0+0xc0>
   b7542:	45b1      	cmp	r9, r6
   b7544:	d31c      	bcc.n	b7580 <_strtol_l.constprop.0+0xc0>
   b7546:	d101      	bne.n	b754c <_strtol_l.constprop.0+0x8c>
   b7548:	45a2      	cmp	sl, r4
   b754a:	db19      	blt.n	b7580 <_strtol_l.constprop.0+0xc0>
   b754c:	fb06 4603 	mla	r6, r6, r3, r4
   b7550:	f04f 0c01 	mov.w	ip, #1
   b7554:	f815 4b01 	ldrb.w	r4, [r5], #1
   b7558:	e7e8      	b.n	b752c <_strtol_l.constprop.0+0x6c>
   b755a:	2c2b      	cmp	r4, #43	; 0x2b
   b755c:	bf04      	itt	eq
   b755e:	782c      	ldrbeq	r4, [r5, #0]
   b7560:	1cb5      	addeq	r5, r6, #2
   b7562:	e7ca      	b.n	b74fa <_strtol_l.constprop.0+0x3a>
   b7564:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b7568:	f1be 0f19 	cmp.w	lr, #25
   b756c:	d801      	bhi.n	b7572 <_strtol_l.constprop.0+0xb2>
   b756e:	3c37      	subs	r4, #55	; 0x37
   b7570:	e7e2      	b.n	b7538 <_strtol_l.constprop.0+0x78>
   b7572:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b7576:	f1be 0f19 	cmp.w	lr, #25
   b757a:	d804      	bhi.n	b7586 <_strtol_l.constprop.0+0xc6>
   b757c:	3c57      	subs	r4, #87	; 0x57
   b757e:	e7db      	b.n	b7538 <_strtol_l.constprop.0+0x78>
   b7580:	f04f 3cff 	mov.w	ip, #4294967295
   b7584:	e7e6      	b.n	b7554 <_strtol_l.constprop.0+0x94>
   b7586:	f1bc 0f00 	cmp.w	ip, #0
   b758a:	da05      	bge.n	b7598 <_strtol_l.constprop.0+0xd8>
   b758c:	2322      	movs	r3, #34	; 0x22
   b758e:	6003      	str	r3, [r0, #0]
   b7590:	4646      	mov	r6, r8
   b7592:	b942      	cbnz	r2, b75a6 <_strtol_l.constprop.0+0xe6>
   b7594:	4630      	mov	r0, r6
   b7596:	e79e      	b.n	b74d6 <_strtol_l.constprop.0+0x16>
   b7598:	b107      	cbz	r7, b759c <_strtol_l.constprop.0+0xdc>
   b759a:	4276      	negs	r6, r6
   b759c:	2a00      	cmp	r2, #0
   b759e:	d0f9      	beq.n	b7594 <_strtol_l.constprop.0+0xd4>
   b75a0:	f1bc 0f00 	cmp.w	ip, #0
   b75a4:	d000      	beq.n	b75a8 <_strtol_l.constprop.0+0xe8>
   b75a6:	1e69      	subs	r1, r5, #1
   b75a8:	6011      	str	r1, [r2, #0]
   b75aa:	e7f3      	b.n	b7594 <_strtol_l.constprop.0+0xd4>
   b75ac:	2430      	movs	r4, #48	; 0x30
   b75ae:	2b00      	cmp	r3, #0
   b75b0:	d1b1      	bne.n	b7516 <_strtol_l.constprop.0+0x56>
   b75b2:	2308      	movs	r3, #8
   b75b4:	e7af      	b.n	b7516 <_strtol_l.constprop.0+0x56>
   b75b6:	2c30      	cmp	r4, #48	; 0x30
   b75b8:	d0a5      	beq.n	b7506 <_strtol_l.constprop.0+0x46>
   b75ba:	230a      	movs	r3, #10
   b75bc:	e7ab      	b.n	b7516 <_strtol_l.constprop.0+0x56>
   b75be:	bf00      	nop
   b75c0:	000b7e06 	.word	0x000b7e06

000b75c4 <strtol>:
   b75c4:	4613      	mov	r3, r2
   b75c6:	460a      	mov	r2, r1
   b75c8:	4601      	mov	r1, r0
   b75ca:	4802      	ldr	r0, [pc, #8]	; (b75d4 <strtol+0x10>)
   b75cc:	6800      	ldr	r0, [r0, #0]
   b75ce:	f7ff bf77 	b.w	b74c0 <_strtol_l.constprop.0>
   b75d2:	bf00      	nop
   b75d4:	2002fa58 	.word	0x2002fa58

000b75d8 <__register_exitproc>:
   b75d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b75dc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b7698 <__register_exitproc+0xc0>
   b75e0:	4606      	mov	r6, r0
   b75e2:	f8d8 0000 	ldr.w	r0, [r8]
   b75e6:	461f      	mov	r7, r3
   b75e8:	460d      	mov	r5, r1
   b75ea:	4691      	mov	r9, r2
   b75ec:	f000 f856 	bl	b769c <__retarget_lock_acquire_recursive>
   b75f0:	4b25      	ldr	r3, [pc, #148]	; (b7688 <__register_exitproc+0xb0>)
   b75f2:	681c      	ldr	r4, [r3, #0]
   b75f4:	b934      	cbnz	r4, b7604 <__register_exitproc+0x2c>
   b75f6:	4c25      	ldr	r4, [pc, #148]	; (b768c <__register_exitproc+0xb4>)
   b75f8:	601c      	str	r4, [r3, #0]
   b75fa:	4b25      	ldr	r3, [pc, #148]	; (b7690 <__register_exitproc+0xb8>)
   b75fc:	b113      	cbz	r3, b7604 <__register_exitproc+0x2c>
   b75fe:	681b      	ldr	r3, [r3, #0]
   b7600:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7604:	6863      	ldr	r3, [r4, #4]
   b7606:	2b1f      	cmp	r3, #31
   b7608:	dd07      	ble.n	b761a <__register_exitproc+0x42>
   b760a:	f8d8 0000 	ldr.w	r0, [r8]
   b760e:	f000 f847 	bl	b76a0 <__retarget_lock_release_recursive>
   b7612:	f04f 30ff 	mov.w	r0, #4294967295
   b7616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b761a:	b34e      	cbz	r6, b7670 <__register_exitproc+0x98>
   b761c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7620:	b988      	cbnz	r0, b7646 <__register_exitproc+0x6e>
   b7622:	4b1c      	ldr	r3, [pc, #112]	; (b7694 <__register_exitproc+0xbc>)
   b7624:	b923      	cbnz	r3, b7630 <__register_exitproc+0x58>
   b7626:	f8d8 0000 	ldr.w	r0, [r8]
   b762a:	f000 f838 	bl	b769e <__retarget_lock_release>
   b762e:	e7f0      	b.n	b7612 <__register_exitproc+0x3a>
   b7630:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7634:	f7fd fe1a 	bl	b526c <malloc>
   b7638:	2800      	cmp	r0, #0
   b763a:	d0f4      	beq.n	b7626 <__register_exitproc+0x4e>
   b763c:	2300      	movs	r3, #0
   b763e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b7642:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b7646:	6863      	ldr	r3, [r4, #4]
   b7648:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b764c:	2201      	movs	r2, #1
   b764e:	409a      	lsls	r2, r3
   b7650:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b7654:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7658:	4313      	orrs	r3, r2
   b765a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b765e:	2e02      	cmp	r6, #2
   b7660:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b7664:	bf02      	ittt	eq
   b7666:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b766a:	4313      	orreq	r3, r2
   b766c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7670:	6863      	ldr	r3, [r4, #4]
   b7672:	f8d8 0000 	ldr.w	r0, [r8]
   b7676:	1c5a      	adds	r2, r3, #1
   b7678:	3302      	adds	r3, #2
   b767a:	6062      	str	r2, [r4, #4]
   b767c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7680:	f000 f80e 	bl	b76a0 <__retarget_lock_release_recursive>
   b7684:	2000      	movs	r0, #0
   b7686:	e7c6      	b.n	b7616 <__register_exitproc+0x3e>
   b7688:	2003e7e8 	.word	0x2003e7e8
   b768c:	2003e75c 	.word	0x2003e75c
   b7690:	00000000 	.word	0x00000000
   b7694:	000b526d 	.word	0x000b526d
   b7698:	2002fabc 	.word	0x2002fabc

000b769c <__retarget_lock_acquire_recursive>:
   b769c:	4770      	bx	lr

000b769e <__retarget_lock_release>:
   b769e:	4770      	bx	lr

000b76a0 <__retarget_lock_release_recursive>:
   b76a0:	4770      	bx	lr

000b76a2 <link_code_end>:
	...

000b76a4 <dynalib_user>:
   b76a4:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b76b4:	0000 0000 6542 6967 6e6e 6e69 2067 6f43     ....Beginning Co
   b76c4:	6d6d 6e61 7364 0a20 4100 0d54 000a 7741     mmands ..AT...Aw
   b76d4:	6961 6974 676e 5220 7065 796c 000a 6552     aiting Reply..Re
   b76e4:	6c70 3a79 2520 0a73 4100 2b54 4441 5244     ply: %s..AT+ADDR
   b76f4:	5345 3d53 6925 0a0d 4100 6177 7469 6e69     ESS=%i...Awaitin
   b7704:	2067 6552 6c70 2079 7266 6d6f 6120 6464     g Reply from add
   b7714:	6572 7373 000a 6552 6c70 2079 6461 7264     ress..Reply addr
   b7724:	7365 3a73 2520 0a73 4100 2b54 454e 5754     ess: %s..AT+NETW
   b7734:	524f 494b 3d44 6925 0a0d 4100 6177 7469     ORKID=%i...Await
   b7744:	6e69 2067 6552 6c70 2079 7266 6d6f 6e20     ing Reply from n
   b7754:	7465 6f77 6b72 6469 000a 6552 6c70 2079     etworkid..Reply 
   b7764:	656e 7774 726f 3a6b 2520 0a73 4100 2b54     network: %s..AT+
   b7774:	4441 5244 5345 3f53 0a0d 5200 7065 796c     ADDRESS?...Reply
   b7784:	6720 7465 6120 6464 6572 7373 203a 7325      get address: %s
   b7794:	000a 5441 4e2b 5445 4f57 4b52 4449 0d3f     ..AT+NETWORKID?.
   b77a4:	000a 6552 6c70 2079 6567 2074 656e 7774     ..Reply get netw
   b77b4:	726f 3a6b 2520 0a73 4100 2b54 5043 4e49     ork: %s..AT+CPIN
   b77c4:	0d3f 000a 6552 6c70 2079 6567 2074 6170     ?...Reply get pa
   b77d4:	7373 6f77 6472 203a 7325 000a 7563 7272     ssword: %s..curr
   b77e4:	6e65 5874 3d20 2520 2069 202c 7563 7272     entX = %i , curr
   b77f4:	6e65 5974 3d20 2520 0a69 6300 7275 6572     entY = %i..curre
   b7804:	746e 7820 3d20 2520 2069 202c 7563 7272     nt x = %i , curr
   b7814:	6e65 5974 3d20 2520 0a69 4100 2b54 4553     entY = %i..AT+SE
   b7824:	444e 383d 3838 312c 352c 0a0d 4100 2b54     ND=888,1,5...AT+
   b7834:	4553 444e 383d 3838 312c 392c 0a0d 6d00     SEND=888,1,9...m
   b7844:	766f 6465 7420 206f 6925 202c 6925 000a     oved to %i, %i..
   b7854:	7270 6e69 5374 6174 7472 000a 6925 252c     printStart..%i,%
   b7864:	2c69 6925 252c 0a69 6f00 6666 6573 2074     i,%i,%i..offset 
   b7874:	6925 2020 6f72 2077 203d 6925 200a 7300     %i  row = %i. .s
   b7884:	6e69 6c67 5865 203d 6925 202c 6973 676e     ingleX= %i, sing
   b7894:	656c 3d59 6925 000a 7741 6961 6974 676e     leY=%i..Awaiting
   b78a4:	4920 636e 6d6f 6e69 2067 654d 7373 6761      Incoming Messag
   b78b4:	0065 6e49 6f63 696d 676e 4d20 7365 6173     e.Incoming Messa
   b78c4:	6567 203b 7325 250a 0a73 7325 250a 0a73     ge; %s.%s.%s.%s.
   b78d4:	7325 000a 6e49 6f63 696d 676e 4c20 6e65     %s..Incoming Len
   b78e4:	2520 2c69 4920 636e 6d6f 6e69 4467 7461      %i, IncomingDat
   b78f4:	2061 6925 000a 6353 6e61 6420 6469 6e20     a %i..Scan did n
   b7904:	746f 7720 726f 0a6b 3600 3445 3030 3030     ot work..6E40000
   b7914:	2d31 3542 3341 462d 3933 2d33 3045 3941     1-B5A3-F393-E0A9
   b7924:	452d 3035 3245 4434 4343 3941 0045 4536     -E50E24DCCA9E.6E
   b7934:	3034 3030 3230 422d 4135 2d33 3346 3339     400002-B5A3-F393
   b7944:	452d 4130 2d39 3545 4530 3432 4344 4143     -E0A9-E50E24DCCA
   b7954:	4539 3600 3445 3030 3030 2d33 3542 3341     9E.6E400003-B5A3
   b7964:	462d 3933 2d33 3045 3941 452d 3035 3245     -F393-E0A9-E50E2
   b7974:	4434 4343 3941 0045 7874 7200 0078 0000     4DCCA9E.tx.rx...

000b7984 <_ZTVN5spark13EthernetClassE>:
	...
   b798c:	534b 000b 5341 000b 5337 000b 532d 000b     KS..AS..7S..-S..
   b799c:	5321 000b 5315 000b 6e41 000b 6e49 000b     !S...S..An..In..
   b79ac:	5309 000b 5301 000b 52f7 000b 52ed 000b     .S...S...R...R..
   b79bc:	6e79 000b 6977 6972 676e 622e 656c 5300     yn..wiring.ble.S
   b79cc:	6174 7472 6420 7369 6f63 6576 6972 676e     tart discovering
   b79dc:	7320 7265 6976 6563 2e73 5000 6565 2072      services..Peer 
   b79ec:	6564 6976 6563 6920 2073 696d 7373 6e69     device is missin
   b79fc:	2167 4600 6961 656c 2064 6f74 6120 7070     g!.Failed to app
   b7a0c:	6e65 2064 6570 7265 4320 6e65 7274 6c61     end peer Central
   b7a1c:	6420 7665 6369 2e65 4300 6e6f 656e 7463      device..Connect
   b7a2c:	6465 6220 2079 6543 746e 6172 206c 6564     ed by Central de
   b7a3c:	6976 6563 002e 6944 6373 6e6f 656e 7463     vice..Disconnect
   b7a4c:	6465 6220 2079 6572 6f6d 6574 6420 7665     ed by remote dev
   b7a5c:	6369 2e65 4400 7075 696c 6163 6574 2064     ice..Duplicated 
   b7a6c:	6863 7261 6361 6574 6972 7473 6369 6320     characteristic c
   b7a7c:	6e61 6f6e 2074 6562 6120 6464 6465 002e     annot be added..
   b7a8c:	6146 6c69 6465 7420 206f 7061 6570 646e     Failed to append
   b7a9c:	6c20 636f 6c61 6320 6168 6172 7463 7265      local character
   b7aac:	7369 6974 2e63 0000                         istic...

000b7ab4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b7abc:	5555 000b 55b9 000b 569b 000b 55e3 000b     UU...U...V...U..
   b7acc:	5559 000b                                   YU..

000b7ad0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b7ad8:	5551 000b 55c7 000b 5553 000b 55e9 000b     QU...U..SU...U..
   b7ae8:	5579 000b                                   yU..

000b7aec <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b7af4:	554f 000b 55d5 000b 5d65 000b 55ef 000b     OU...U..e]...U..
   b7b04:	5599 000b                                   .U..

000b7b08 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b7b14:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000b7b26 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   b7b26:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000b7b36 <_ZN8particle7BleUuid9BASE_UUIDE>:
   b7b36:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
   b7b46:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   b7b56:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.
	...

000b7b68 <_ZTV9IPAddress>:
	...
   b7b70:	6a79 000b 6a69 000b 6a6b 000b               yj..ij..kj..

000b7b7c <_ZTV9USBSerial>:
	...
   b7b84:	6b5f 000b 6bc7 000b 6b9d 000b 676d 000b     _k...k...k..mg..
   b7b94:	6b8f 000b 6b61 000b 6b71 000b 6bc1 000b     .k..ak..qk...k..
   b7ba4:	6b81 000b 6b59 000b                         .k..Yk..

000b7bac <_ZTV11USARTSerial>:
	...
   b7bb4:	6c61 000b 6ccd 000b 6ca5 000b 676d 000b     al...l...l..mg..
   b7bc4:	6c75 000b 6c91 000b 6c83 000b 6c9f 000b     ul...l...l...l..
   b7bd4:	6c63 000b 6c67 000b                         cl..gl..

000b7bdc <_ZTV7TwoWire>:
	...
   b7be4:	6d13 000b 6d5d 000b 6d35 000b 6d15 000b     .m..]m..5m...m..
   b7bf4:	6d3d 000b 6d45 000b 6d4d 000b 6d55 000b     =m..Em..Mm..Um..

000b7c04 <_ZTVN5spark9WiFiClassE>:
	...
   b7c0c:	6de3 000b 6dd9 000b 6dcf 000b 6d91 000b     .m...m...m...m..
   b7c1c:	68d5 000b 6dc3 000b 6e41 000b 6e49 000b     .h...m..An..In..
   b7c2c:	6db7 000b 6daf 000b 6da5 000b 6d9b 000b     .m...m...m...m..
   b7c3c:	6e79 000b                                   yn..

000b7c40 <_ZTVN5spark12NetworkClassE>:
	...
   b7c48:	6e01 000b 6e0b 000b 6e15 000b 6e1f 000b     .n...n...n...n..
   b7c58:	6e29 000b 6e35 000b 6e41 000b 6e49 000b     )n..5n..An..In..
   b7c68:	6e51 000b 6e5d 000b 6e65 000b 6e6f 000b     Qn..]n..en..on..
   b7c78:	6e79 000b                                   yn..

000b7c7c <_ZSt7nothrow>:
	...

000b7c7d <_ZTSSt19_Sp_make_shared_tag>:
   b7c7d:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b7c8d:	6572 5f64 6174 0067 0000                     red_tag....

000b7c98 <_ZTISt19_Sp_make_shared_tag>:
   b7c98:	7cd8 000b 7c7d 000b                         .|..}|..

000b7ca0 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b7ca0:	7d38 000b 7cac 000b 7d5c 000b               8}...|..\}..

000b7cac <_ZTSN10__cxxabiv117__class_type_infoE>:
   b7cac:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b7cbc:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b7ccc:	0045 0000                                   E...

000b7cd0 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b7cd0:	0000 0000 7ca0 000b 7185 000b 7199 000b     .....|...q...q..
   b7ce0:	732d 000b 732d 000b 7203 000b 7145 000b     -s..-s...r..Eq..
   b7cf0:	71eb 000b 71ad 000b 7177 000b               .q...q..wq..

000b7cfc <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b7cfc:	7d38 000b 7d08 000b 7ca0 000b               8}...}...|..

000b7d08 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b7d08:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b7d18:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b7d28:	666e 456f 0000 0000                         nfoE....

000b7d30 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b7d30:	0000 0000 7cfc 000b 722d 000b 7241 000b     .....|..-r..Ar..
   b7d40:	732d 000b 732d 000b 7203 000b 7145 000b     -s..-s...r..Eq..
   b7d50:	7301 000b 728d 000b 7255 000b               .s...r..Ur..

000b7d5c <_ZTISt9type_info>:
   b7d5c:	7cd8 000b 7d64 000b                         .|..d}..

000b7d64 <_ZTSSt9type_info>:
   b7d64:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b7d74:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b7d84:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   b7d94:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   b7da4:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   b7db4:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b7dc4:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b7dd4:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   b7de4:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b7df4:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b7e05 <_ctype_>:
   b7e05:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b7e15:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b7e25:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b7e35:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b7e45:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b7e55:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b7e65:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b7e75:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b7e85:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b7f06 <link_const_variable_data_end>:
	...

000b7f08 <link_constructors_location>:
   b7f08:	000b4a1d 	.word	0x000b4a1d
   b7f0c:	000b5355 	.word	0x000b5355
   b7f10:	000b537d 	.word	0x000b537d
   b7f14:	000b675d 	.word	0x000b675d
   b7f18:	000b68e1 	.word	0x000b68e1
   b7f1c:	000b68f1 	.word	0x000b68f1
   b7f20:	000b6925 	.word	0x000b6925
   b7f24:	000b6ded 	.word	0x000b6ded
   b7f28:	000b6f51 	.word	0x000b6f51

000b7f2c <link_constructors_end>:
   b7f2c:	00000000 	.word	0x00000000
