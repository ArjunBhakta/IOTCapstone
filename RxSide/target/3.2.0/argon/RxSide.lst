
c:/Users/Arjun/Documents/IOT/IOTCapstone/RxSide/target/3.2.0/argon/RxSide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002144  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000b6160  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  2002fadc  000b6164  0000fadc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000eca0  2002fb50  2002fb50  0001fb50  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000b61d8  000b61d8  000161d8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000b6200  000b6200  00016200  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00107ef4  00000000  00000000  00016204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 000127bc  00000000  00000000  0011e0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    0003627b  00000000  00000000  001308b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002a40  00000000  00000000  00166b2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000099b8  00000000  00000000  0016956f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000370e3  00000000  00000000  00172f27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0003b80f  00000000  00000000  001aa00a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001249e0  00000000  00000000  001e5819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  0000777c  00000000  00000000  0030a1fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f001 fcb3 	bl	b5998 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f001 fcbb 	bl	b59b4 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2002fadc 	.word	0x2002fadc
   b4048:	000b6164 	.word	0x000b6164
   b404c:	2002fb50 	.word	0x2002fb50
   b4050:	2002fb50 	.word	0x2002fb50
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f001 f8b9 	bl	b51d4 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b6138 	.word	0x000b6138
   b407c:	000b615c 	.word	0x000b615c

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b84a 	b.w	b4118 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f9bf 	bl	b4408 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f001 b859 	b.w	b5144 <_post_loop>

000b4092 <_Znaj>:
   b4092:	f000 bd9f 	b.w	b4bd4 <malloc>

000b4096 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4096:	f000 bda5 	b.w	b4be4 <free>

000b409a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409a:	7800      	ldrb	r0, [r0, #0]
   b409c:	fab0 f080 	clz	r0, r0
   b40a0:	0940      	lsrs	r0, r0, #5
   b40a2:	4770      	bx	lr

000b40a4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a4:	2301      	movs	r3, #1
   b40a6:	7003      	strb	r3, [r0, #0]
   b40a8:	4770      	bx	lr
	...

000b40ac <_Z10resetPDvalv>:

        // Serial.printf("%i,%i,%i\n",dataArray[r][0],dataArray[r][1],dataArray[r][2]);
    }

void resetPDval() {
        largestBottomVal = 0;
   b40ac:	4a0b      	ldr	r2, [pc, #44]	; (b40dc <_Z10resetPDvalv+0x30>)
void resetPDval() {
   b40ae:	b508      	push	{r3, lr}
        largestBottomVal = 0;
   b40b0:	2300      	movs	r3, #0
   b40b2:	6013      	str	r3, [r2, #0]
        largestTopVal = 0;
   b40b4:	4a0a      	ldr	r2, [pc, #40]	; (b40e0 <_Z10resetPDvalv+0x34>)
   b40b6:	6013      	str	r3, [r2, #0]
        largestLeftVal = 0;
   b40b8:	4a0a      	ldr	r2, [pc, #40]	; (b40e4 <_Z10resetPDvalv+0x38>)
   b40ba:	6013      	str	r3, [r2, #0]
        largestRightVal = 0;
   b40bc:	4a0a      	ldr	r2, [pc, #40]	; (b40e8 <_Z10resetPDvalv+0x3c>)
   b40be:	6013      	str	r3, [r2, #0]
        printArray = true;
   b40c0:	4a0a      	ldr	r2, [pc, #40]	; (b40ec <_Z10resetPDvalv+0x40>)
   b40c2:	2101      	movs	r1, #1
   b40c4:	7011      	strb	r1, [r2, #0]
        lastRow = rowCounter;
   b40c6:	4a0a      	ldr	r2, [pc, #40]	; (b40f0 <_Z10resetPDvalv+0x44>)
   b40c8:	490a      	ldr	r1, [pc, #40]	; (b40f4 <_Z10resetPDvalv+0x48>)
   b40ca:	6810      	ldr	r0, [r2, #0]
   b40cc:	6008      	str	r0, [r1, #0]
        rowCounter = 0;
   b40ce:	6013      	str	r3, [r2, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b40d0:	f000 fc14 	bl	b48fc <HAL_Timer_Get_Milli_Seconds>
        printTimer = millis();
   b40d4:	4b08      	ldr	r3, [pc, #32]	; (b40f8 <_Z10resetPDvalv+0x4c>)
   b40d6:	6018      	str	r0, [r3, #0]
    }
   b40d8:	bd08      	pop	{r3, pc}
   b40da:	bf00      	nop
   b40dc:	2003e5f8 	.word	0x2003e5f8
   b40e0:	2003e608 	.word	0x2003e608
   b40e4:	2003e5fc 	.word	0x2003e5fc
   b40e8:	2003e604 	.word	0x2003e604
   b40ec:	2003e670 	.word	0x2003e670
   b40f0:	2003e6a8 	.word	0x2003e6a8
   b40f4:	2003e60c 	.word	0x2003e60c
   b40f8:	2003e674 	.word	0x2003e674

000b40fc <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40fc:	b40e      	push	{r1, r2, r3}
   b40fe:	b503      	push	{r0, r1, lr}
   b4100:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4102:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4104:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4108:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b410a:	f000 ff78 	bl	b4ffe <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b410e:	b002      	add	sp, #8
   b4110:	f85d eb04 	ldr.w	lr, [sp], #4
   b4114:	b003      	add	sp, #12
   b4116:	4770      	bx	lr

000b4118 <setup>:
void setup() {
   b4118:	b510      	push	{r4, lr}
   b411a:	b086      	sub	sp, #24
    Serial.begin(9600);
   b411c:	f001 f962 	bl	b53e4 <_Z16_fetch_usbserialv>
   b4120:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4124:	f001 f952 	bl	b53cc <_ZN9USBSerial5beginEl>
    delay(3000);
   b4128:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b412c:	f000 ffde 	bl	b50ec <delay>
    Serial.printf("Beginning Commands \n");
   b4130:	f001 f958 	bl	b53e4 <_Z16_fetch_usbserialv>
   b4134:	499d      	ldr	r1, [pc, #628]	; (b43ac <setup+0x294>)
   b4136:	f7ff ffe1 	bl	b40fc <_ZN5Print6printfEPKcz>
    Serial1.begin(115200);
   b413a:	f001 fbc1 	bl	b58c0 <_Z22__fetch_global_Serial1v>
   b413e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b4142:	f001 f9f7 	bl	b5534 <_ZN11USARTSerial5beginEm>
    Serial1.printf("AT\r\n");
   b4146:	f001 fbbb 	bl	b58c0 <_Z22__fetch_global_Serial1v>
   b414a:	4999      	ldr	r1, [pc, #612]	; (b43b0 <setup+0x298>)
   b414c:	f7ff ffd6 	bl	b40fc <_ZN5Print6printfEPKcz>
    delay(200);
   b4150:	20c8      	movs	r0, #200	; 0xc8
   b4152:	f000 ffcb 	bl	b50ec <delay>
    if (Serial1.available() > 0) {
   b4156:	f001 fbb3 	bl	b58c0 <_Z22__fetch_global_Serial1v>
   b415a:	6803      	ldr	r3, [r0, #0]
   b415c:	691b      	ldr	r3, [r3, #16]
   b415e:	4798      	blx	r3
   b4160:	2800      	cmp	r0, #0
   b4162:	dd19      	ble.n	b4198 <setup+0x80>
        Serial.printf("Awaiting Reply\n");
   b4164:	f001 f93e 	bl	b53e4 <_Z16_fetch_usbserialv>
   b4168:	4992      	ldr	r1, [pc, #584]	; (b43b4 <setup+0x29c>)
        reply = Serial1.readStringUntil('\n');
   b416a:	4c93      	ldr	r4, [pc, #588]	; (b43b8 <setup+0x2a0>)
        Serial.printf("Awaiting Reply\n");
   b416c:	f7ff ffc6 	bl	b40fc <_ZN5Print6printfEPKcz>
        reply = Serial1.readStringUntil('\n');
   b4170:	f001 fba6 	bl	b58c0 <_Z22__fetch_global_Serial1v>
   b4174:	220a      	movs	r2, #10
   b4176:	4601      	mov	r1, r0
   b4178:	a802      	add	r0, sp, #8
   b417a:	f000 ff87 	bl	b508c <_ZN6Stream15readStringUntilEc>
   b417e:	a902      	add	r1, sp, #8
   b4180:	4620      	mov	r0, r4
   b4182:	f000 fe70 	bl	b4e66 <_ZN6StringaSEOS_>
   b4186:	a802      	add	r0, sp, #8
   b4188:	f000 fdf1 	bl	b4d6e <_ZN6StringD1Ev>
        Serial.printf("Reply: %s\n", reply.c_str());
   b418c:	f001 f92a 	bl	b53e4 <_Z16_fetch_usbserialv>
   b4190:	6822      	ldr	r2, [r4, #0]
   b4192:	498a      	ldr	r1, [pc, #552]	; (b43bc <setup+0x2a4>)
   b4194:	f7ff ffb2 	bl	b40fc <_ZN5Print6printfEPKcz>
    Serial1.printf("AT+ADDRESS=%i\r\n", addr); // correct
   b4198:	f001 fb92 	bl	b58c0 <_Z22__fetch_global_Serial1v>
   b419c:	4b88      	ldr	r3, [pc, #544]	; (b43c0 <setup+0x2a8>)
   b419e:	4989      	ldr	r1, [pc, #548]	; (b43c4 <setup+0x2ac>)
   b41a0:	681a      	ldr	r2, [r3, #0]
   b41a2:	f7ff ffab 	bl	b40fc <_ZN5Print6printfEPKcz>
    delay(200);
   b41a6:	20c8      	movs	r0, #200	; 0xc8
   b41a8:	f000 ffa0 	bl	b50ec <delay>
    if (Serial1.available() > 0) {
   b41ac:	f001 fb88 	bl	b58c0 <_Z22__fetch_global_Serial1v>
   b41b0:	6803      	ldr	r3, [r0, #0]
   b41b2:	691b      	ldr	r3, [r3, #16]
   b41b4:	4798      	blx	r3
   b41b6:	2800      	cmp	r0, #0
   b41b8:	dd19      	ble.n	b41ee <setup+0xd6>
        Serial.printf("Awaiting Reply from address\n");
   b41ba:	f001 f913 	bl	b53e4 <_Z16_fetch_usbserialv>
   b41be:	4982      	ldr	r1, [pc, #520]	; (b43c8 <setup+0x2b0>)
        reply = Serial1.readStringUntil('\n');
   b41c0:	4c7d      	ldr	r4, [pc, #500]	; (b43b8 <setup+0x2a0>)
        Serial.printf("Awaiting Reply from address\n");
   b41c2:	f7ff ff9b 	bl	b40fc <_ZN5Print6printfEPKcz>
        reply = Serial1.readStringUntil('\n');
   b41c6:	f001 fb7b 	bl	b58c0 <_Z22__fetch_global_Serial1v>
   b41ca:	220a      	movs	r2, #10
   b41cc:	4601      	mov	r1, r0
   b41ce:	a802      	add	r0, sp, #8
   b41d0:	f000 ff5c 	bl	b508c <_ZN6Stream15readStringUntilEc>
   b41d4:	a902      	add	r1, sp, #8
   b41d6:	4620      	mov	r0, r4
   b41d8:	f000 fe45 	bl	b4e66 <_ZN6StringaSEOS_>
   b41dc:	a802      	add	r0, sp, #8
   b41de:	f000 fdc6 	bl	b4d6e <_ZN6StringD1Ev>
        Serial.printf("Reply address: %s\n", reply.c_str());
   b41e2:	f001 f8ff 	bl	b53e4 <_Z16_fetch_usbserialv>
   b41e6:	6822      	ldr	r2, [r4, #0]
   b41e8:	4978      	ldr	r1, [pc, #480]	; (b43cc <setup+0x2b4>)
   b41ea:	f7ff ff87 	bl	b40fc <_ZN5Print6printfEPKcz>
    Serial1.printf("AT+NETWORKID=%i\r\n", net); // correct
   b41ee:	f001 fb67 	bl	b58c0 <_Z22__fetch_global_Serial1v>
   b41f2:	4b77      	ldr	r3, [pc, #476]	; (b43d0 <setup+0x2b8>)
   b41f4:	4977      	ldr	r1, [pc, #476]	; (b43d4 <setup+0x2bc>)
   b41f6:	681a      	ldr	r2, [r3, #0]
   b41f8:	f7ff ff80 	bl	b40fc <_ZN5Print6printfEPKcz>
    delay(200);
   b41fc:	20c8      	movs	r0, #200	; 0xc8
   b41fe:	f000 ff75 	bl	b50ec <delay>
    if (Serial1.available() > 0) {
   b4202:	f001 fb5d 	bl	b58c0 <_Z22__fetch_global_Serial1v>
   b4206:	6803      	ldr	r3, [r0, #0]
   b4208:	691b      	ldr	r3, [r3, #16]
   b420a:	4798      	blx	r3
   b420c:	2800      	cmp	r0, #0
   b420e:	dd19      	ble.n	b4244 <setup+0x12c>
        Serial.printf("Awaiting Reply from networkid\n");
   b4210:	f001 f8e8 	bl	b53e4 <_Z16_fetch_usbserialv>
   b4214:	4970      	ldr	r1, [pc, #448]	; (b43d8 <setup+0x2c0>)
        reply = Serial1.readStringUntil('\n');
   b4216:	4c68      	ldr	r4, [pc, #416]	; (b43b8 <setup+0x2a0>)
        Serial.printf("Awaiting Reply from networkid\n");
   b4218:	f7ff ff70 	bl	b40fc <_ZN5Print6printfEPKcz>
        reply = Serial1.readStringUntil('\n');
   b421c:	f001 fb50 	bl	b58c0 <_Z22__fetch_global_Serial1v>
   b4220:	220a      	movs	r2, #10
   b4222:	4601      	mov	r1, r0
   b4224:	a802      	add	r0, sp, #8
   b4226:	f000 ff31 	bl	b508c <_ZN6Stream15readStringUntilEc>
   b422a:	a902      	add	r1, sp, #8
   b422c:	4620      	mov	r0, r4
   b422e:	f000 fe1a 	bl	b4e66 <_ZN6StringaSEOS_>
   b4232:	a802      	add	r0, sp, #8
   b4234:	f000 fd9b 	bl	b4d6e <_ZN6StringD1Ev>
        Serial.printf("Reply network: %s\n", reply.c_str());
   b4238:	f001 f8d4 	bl	b53e4 <_Z16_fetch_usbserialv>
   b423c:	6822      	ldr	r2, [r4, #0]
   b423e:	4967      	ldr	r1, [pc, #412]	; (b43dc <setup+0x2c4>)
   b4240:	f7ff ff5c 	bl	b40fc <_ZN5Print6printfEPKcz>
    Serial1.printf("AT+ADDRESS?\r\n"); // correct
   b4244:	f001 fb3c 	bl	b58c0 <_Z22__fetch_global_Serial1v>
   b4248:	4965      	ldr	r1, [pc, #404]	; (b43e0 <setup+0x2c8>)
   b424a:	f7ff ff57 	bl	b40fc <_ZN5Print6printfEPKcz>
    delay(200);
   b424e:	20c8      	movs	r0, #200	; 0xc8
   b4250:	f000 ff4c 	bl	b50ec <delay>
    if (Serial1.available() > 0) {
   b4254:	f001 fb34 	bl	b58c0 <_Z22__fetch_global_Serial1v>
   b4258:	6803      	ldr	r3, [r0, #0]
   b425a:	691b      	ldr	r3, [r3, #16]
   b425c:	4798      	blx	r3
   b425e:	2800      	cmp	r0, #0
   b4260:	dd19      	ble.n	b4296 <setup+0x17e>
        Serial.printf("Awaiting Reply\n");
   b4262:	f001 f8bf 	bl	b53e4 <_Z16_fetch_usbserialv>
   b4266:	4953      	ldr	r1, [pc, #332]	; (b43b4 <setup+0x29c>)
        reply = Serial1.readStringUntil('\n');
   b4268:	4c53      	ldr	r4, [pc, #332]	; (b43b8 <setup+0x2a0>)
        Serial.printf("Awaiting Reply\n");
   b426a:	f7ff ff47 	bl	b40fc <_ZN5Print6printfEPKcz>
        reply = Serial1.readStringUntil('\n');
   b426e:	f001 fb27 	bl	b58c0 <_Z22__fetch_global_Serial1v>
   b4272:	220a      	movs	r2, #10
   b4274:	4601      	mov	r1, r0
   b4276:	a802      	add	r0, sp, #8
   b4278:	f000 ff08 	bl	b508c <_ZN6Stream15readStringUntilEc>
   b427c:	a902      	add	r1, sp, #8
   b427e:	4620      	mov	r0, r4
   b4280:	f000 fdf1 	bl	b4e66 <_ZN6StringaSEOS_>
   b4284:	a802      	add	r0, sp, #8
   b4286:	f000 fd72 	bl	b4d6e <_ZN6StringD1Ev>
        Serial.printf("Reply get address: %s\n", reply.c_str());
   b428a:	f001 f8ab 	bl	b53e4 <_Z16_fetch_usbserialv>
   b428e:	6822      	ldr	r2, [r4, #0]
   b4290:	4954      	ldr	r1, [pc, #336]	; (b43e4 <setup+0x2cc>)
   b4292:	f7ff ff33 	bl	b40fc <_ZN5Print6printfEPKcz>
    Serial1.printf("AT+NETWORKID?\r\n"); // correct
   b4296:	f001 fb13 	bl	b58c0 <_Z22__fetch_global_Serial1v>
   b429a:	4953      	ldr	r1, [pc, #332]	; (b43e8 <setup+0x2d0>)
   b429c:	f7ff ff2e 	bl	b40fc <_ZN5Print6printfEPKcz>
    delay(200);
   b42a0:	20c8      	movs	r0, #200	; 0xc8
   b42a2:	f000 ff23 	bl	b50ec <delay>
    if (Serial1.available() > 0) {
   b42a6:	f001 fb0b 	bl	b58c0 <_Z22__fetch_global_Serial1v>
   b42aa:	6803      	ldr	r3, [r0, #0]
   b42ac:	691b      	ldr	r3, [r3, #16]
   b42ae:	4798      	blx	r3
   b42b0:	2800      	cmp	r0, #0
   b42b2:	dd19      	ble.n	b42e8 <setup+0x1d0>
        Serial.printf("Awaiting Reply\n");
   b42b4:	f001 f896 	bl	b53e4 <_Z16_fetch_usbserialv>
   b42b8:	493e      	ldr	r1, [pc, #248]	; (b43b4 <setup+0x29c>)
        reply = Serial1.readStringUntil('\n');
   b42ba:	4c3f      	ldr	r4, [pc, #252]	; (b43b8 <setup+0x2a0>)
        Serial.printf("Awaiting Reply\n");
   b42bc:	f7ff ff1e 	bl	b40fc <_ZN5Print6printfEPKcz>
        reply = Serial1.readStringUntil('\n');
   b42c0:	f001 fafe 	bl	b58c0 <_Z22__fetch_global_Serial1v>
   b42c4:	220a      	movs	r2, #10
   b42c6:	4601      	mov	r1, r0
   b42c8:	a802      	add	r0, sp, #8
   b42ca:	f000 fedf 	bl	b508c <_ZN6Stream15readStringUntilEc>
   b42ce:	a902      	add	r1, sp, #8
   b42d0:	4620      	mov	r0, r4
   b42d2:	f000 fdc8 	bl	b4e66 <_ZN6StringaSEOS_>
   b42d6:	a802      	add	r0, sp, #8
   b42d8:	f000 fd49 	bl	b4d6e <_ZN6StringD1Ev>
        Serial.printf("Reply get network: %s\n", reply.c_str());
   b42dc:	f001 f882 	bl	b53e4 <_Z16_fetch_usbserialv>
   b42e0:	6822      	ldr	r2, [r4, #0]
   b42e2:	4942      	ldr	r1, [pc, #264]	; (b43ec <setup+0x2d4>)
   b42e4:	f7ff ff0a 	bl	b40fc <_ZN5Print6printfEPKcz>
    Serial1.printf("AT+CPIN?\r\n"); // correct
   b42e8:	f001 faea 	bl	b58c0 <_Z22__fetch_global_Serial1v>
   b42ec:	4940      	ldr	r1, [pc, #256]	; (b43f0 <setup+0x2d8>)
   b42ee:	f7ff ff05 	bl	b40fc <_ZN5Print6printfEPKcz>
    delay(200);
   b42f2:	20c8      	movs	r0, #200	; 0xc8
   b42f4:	f000 fefa 	bl	b50ec <delay>
    if (Serial1.available() > 0) {
   b42f8:	f001 fae2 	bl	b58c0 <_Z22__fetch_global_Serial1v>
   b42fc:	6803      	ldr	r3, [r0, #0]
   b42fe:	691b      	ldr	r3, [r3, #16]
   b4300:	4798      	blx	r3
   b4302:	2800      	cmp	r0, #0
   b4304:	dd1e      	ble.n	b4344 <setup+0x22c>
        Serial.printf("Awaiting Reply\n");
   b4306:	f001 f86d 	bl	b53e4 <_Z16_fetch_usbserialv>
   b430a:	492a      	ldr	r1, [pc, #168]	; (b43b4 <setup+0x29c>)
   b430c:	f7ff fef6 	bl	b40fc <_ZN5Print6printfEPKcz>
        reply = Serial1.readStringUntil('\n');
   b4310:	f001 fad6 	bl	b58c0 <_Z22__fetch_global_Serial1v>
   b4314:	220a      	movs	r2, #10
   b4316:	4601      	mov	r1, r0
   b4318:	a802      	add	r0, sp, #8
   b431a:	f000 feb7 	bl	b508c <_ZN6Stream15readStringUntilEc>
   b431e:	a902      	add	r1, sp, #8
   b4320:	4825      	ldr	r0, [pc, #148]	; (b43b8 <setup+0x2a0>)
   b4322:	f000 fda0 	bl	b4e66 <_ZN6StringaSEOS_>
   b4326:	a802      	add	r0, sp, #8
   b4328:	f000 fd21 	bl	b4d6e <_ZN6StringD1Ev>
        reply.getBytes(buf, 40);
   b432c:	4931      	ldr	r1, [pc, #196]	; (b43f4 <setup+0x2dc>)
   b432e:	4822      	ldr	r0, [pc, #136]	; (b43b8 <setup+0x2a0>)
   b4330:	2228      	movs	r2, #40	; 0x28
   b4332:	2300      	movs	r3, #0
   b4334:	f000 fde8 	bl	b4f08 <_ZNK6String8getBytesEPhjj>
        Serial.printf("Reply get password: %s\n", (char *)buf);
   b4338:	f001 f854 	bl	b53e4 <_Z16_fetch_usbserialv>
   b433c:	4a2d      	ldr	r2, [pc, #180]	; (b43f4 <setup+0x2dc>)
   b433e:	492e      	ldr	r1, [pc, #184]	; (b43f8 <setup+0x2e0>)
   b4340:	f7ff fedc 	bl	b40fc <_ZN5Print6printfEPKcz>
    delay(500);
   b4344:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b4348:	f000 fed0 	bl	b50ec <delay>
    pinMode(topPD, INPUT);
   b434c:	2100      	movs	r1, #0
   b434e:	2012      	movs	r0, #18
   b4350:	f001 fa5a 	bl	b5808 <pinMode>
    pinMode(leftPD, INPUT);
   b4354:	2100      	movs	r1, #0
   b4356:	2011      	movs	r0, #17
   b4358:	f001 fa56 	bl	b5808 <pinMode>
    pinMode(rightPD, INPUT);
   b435c:	2100      	movs	r1, #0
   b435e:	2010      	movs	r0, #16
   b4360:	f001 fa52 	bl	b5808 <pinMode>
    pinMode(bottomPD, INPUT);
   b4364:	2100      	movs	r1, #0
   b4366:	200f      	movs	r0, #15
   b4368:	f001 fa4e 	bl	b5808 <pinMode>
    largerReadingDetected = false;
   b436c:	4b23      	ldr	r3, [pc, #140]	; (b43fc <setup+0x2e4>)
   b436e:	2400      	movs	r4, #0
    pinMode(D8, OUTPUT); // interupt sending PIN
   b4370:	2101      	movs	r1, #1
   b4372:	2008      	movs	r0, #8
    largerReadingDetected = false;
   b4374:	701c      	strb	r4, [r3, #0]
    pinMode(D8, OUTPUT); // interupt sending PIN
   b4376:	f001 fa47 	bl	b5808 <pinMode>
    pinMode(D6, OUTPUT); // HIGH LOW to send single byte for interrupt
   b437a:	2101      	movs	r1, #1
   b437c:	2006      	movs	r0, #6
   b437e:	f001 fa43 	bl	b5808 <pinMode>
    pinMode(D7, OUTPUT); // HIGH LOW to Send Single byte for interrupt
   b4382:	2101      	movs	r1, #1
   b4384:	2007      	movs	r0, #7
   b4386:	f001 fa3f 	bl	b5808 <pinMode>
    pinMode(D5, INPUT);                      // Pin to trigger resetPDval
   b438a:	4621      	mov	r1, r4
   b438c:	2005      	movs	r0, #5
   b438e:	f001 fa3b 	bl	b5808 <pinMode>
    attachInterrupt(D5, resetPDval, RISING); // Interrupt that triggers to reset PhotoDioide Values (Example: in the begin of a scanning procedure)
   b4392:	491b      	ldr	r1, [pc, #108]	; (b4400 <setup+0x2e8>)
   b4394:	9400      	str	r4, [sp, #0]
   b4396:	f04f 33ff 	mov.w	r3, #4294967295
   b439a:	2201      	movs	r2, #1
   b439c:	2005      	movs	r0, #5
   b439e:	f001 f849 	bl	b5434 <_Z15attachInterrupttPFvvE13InterruptModeah>
    printArray = false;
   b43a2:	4b18      	ldr	r3, [pc, #96]	; (b4404 <setup+0x2ec>)
   b43a4:	701c      	strb	r4, [r3, #0]
}
   b43a6:	b006      	add	sp, #24
   b43a8:	bd10      	pop	{r4, pc}
   b43aa:	bf00      	nop
   b43ac:	000b5c60 	.word	0x000b5c60
   b43b0:	000b5c75 	.word	0x000b5c75
   b43b4:	000b5c7a 	.word	0x000b5c7a
   b43b8:	2003e690 	.word	0x2003e690
   b43bc:	000b5c8a 	.word	0x000b5c8a
   b43c0:	2002fadc 	.word	0x2002fadc
   b43c4:	000b5c95 	.word	0x000b5c95
   b43c8:	000b5ca5 	.word	0x000b5ca5
   b43cc:	000b5cc2 	.word	0x000b5cc2
   b43d0:	2002fae0 	.word	0x2002fae0
   b43d4:	000b5cd5 	.word	0x000b5cd5
   b43d8:	000b5ce7 	.word	0x000b5ce7
   b43dc:	000b5d06 	.word	0x000b5d06
   b43e0:	000b5d19 	.word	0x000b5d19
   b43e4:	000b5d27 	.word	0x000b5d27
   b43e8:	000b5d3e 	.word	0x000b5d3e
   b43ec:	000b5d4e 	.word	0x000b5d4e
   b43f0:	000b5d65 	.word	0x000b5d65
   b43f4:	2002fb64 	.word	0x2002fb64
   b43f8:	000b5d70 	.word	0x000b5d70
   b43fc:	2003e5f4 	.word	0x2003e5f4
   b4400:	000b40ad 	.word	0x000b40ad
   b4404:	2003e670 	.word	0x2003e670

000b4408 <loop>:
void loop() {
   b4408:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b440c:	b089      	sub	sp, #36	; 0x24
    if (Serial1.available()) {
   b440e:	f001 fa57 	bl	b58c0 <_Z22__fetch_global_Serial1v>
   b4412:	6803      	ldr	r3, [r0, #0]
   b4414:	4dac      	ldr	r5, [pc, #688]	; (b46c8 <loop+0x2c0>)
   b4416:	691b      	ldr	r3, [r3, #16]
   b4418:	4798      	blx	r3
   b441a:	2800      	cmp	r0, #0
   b441c:	f000 80a9 	beq.w	b4572 <loop+0x16a>
        Serial.printf("Awaiting Incoming Message");
   b4420:	f000 ffe0 	bl	b53e4 <_Z16_fetch_usbserialv>
   b4424:	49a9      	ldr	r1, [pc, #676]	; (b46cc <loop+0x2c4>)
        parse0 = Serial1.readStringUntil(',');
   b4426:	4faa      	ldr	r7, [pc, #680]	; (b46d0 <loop+0x2c8>)
        parse1 = Serial1.readStringUntil(',');
   b4428:	4eaa      	ldr	r6, [pc, #680]	; (b46d4 <loop+0x2cc>)
        parse2 = Serial1.readStringUntil(',');
   b442a:	4cab      	ldr	r4, [pc, #684]	; (b46d8 <loop+0x2d0>)
        parse3 = Serial1.readStringUntil(',');
   b442c:	f8df 8314 	ldr.w	r8, [pc, #788]	; b4744 <loop+0x33c>
        parse4 = Serial1.readStringUntil('\n');
   b4430:	f8df 9314 	ldr.w	r9, [pc, #788]	; b4748 <loop+0x340>
        Serial.printf("Awaiting Incoming Message");
   b4434:	f7ff fe62 	bl	b40fc <_ZN5Print6printfEPKcz>
        parse0 = Serial1.readStringUntil(',');
   b4438:	f001 fa42 	bl	b58c0 <_Z22__fetch_global_Serial1v>
   b443c:	222c      	movs	r2, #44	; 0x2c
   b443e:	4601      	mov	r1, r0
   b4440:	a804      	add	r0, sp, #16
   b4442:	f000 fe23 	bl	b508c <_ZN6Stream15readStringUntilEc>
   b4446:	a904      	add	r1, sp, #16
   b4448:	4638      	mov	r0, r7
   b444a:	f000 fd0c 	bl	b4e66 <_ZN6StringaSEOS_>
   b444e:	a804      	add	r0, sp, #16
   b4450:	f000 fc8d 	bl	b4d6e <_ZN6StringD1Ev>
        parse1 = Serial1.readStringUntil(',');
   b4454:	f001 fa34 	bl	b58c0 <_Z22__fetch_global_Serial1v>
   b4458:	222c      	movs	r2, #44	; 0x2c
   b445a:	4601      	mov	r1, r0
   b445c:	a804      	add	r0, sp, #16
   b445e:	f000 fe15 	bl	b508c <_ZN6Stream15readStringUntilEc>
   b4462:	a904      	add	r1, sp, #16
   b4464:	4630      	mov	r0, r6
   b4466:	f000 fcfe 	bl	b4e66 <_ZN6StringaSEOS_>
   b446a:	a804      	add	r0, sp, #16
   b446c:	f000 fc7f 	bl	b4d6e <_ZN6StringD1Ev>
        parse2 = Serial1.readStringUntil(',');
   b4470:	f001 fa26 	bl	b58c0 <_Z22__fetch_global_Serial1v>
   b4474:	222c      	movs	r2, #44	; 0x2c
   b4476:	4601      	mov	r1, r0
   b4478:	a804      	add	r0, sp, #16
   b447a:	f000 fe07 	bl	b508c <_ZN6Stream15readStringUntilEc>
   b447e:	a904      	add	r1, sp, #16
   b4480:	4620      	mov	r0, r4
   b4482:	f000 fcf0 	bl	b4e66 <_ZN6StringaSEOS_>
   b4486:	a804      	add	r0, sp, #16
   b4488:	f000 fc71 	bl	b4d6e <_ZN6StringD1Ev>
        parse3 = Serial1.readStringUntil(',');
   b448c:	f001 fa18 	bl	b58c0 <_Z22__fetch_global_Serial1v>
   b4490:	222c      	movs	r2, #44	; 0x2c
   b4492:	4601      	mov	r1, r0
   b4494:	a804      	add	r0, sp, #16
   b4496:	f000 fdf9 	bl	b508c <_ZN6Stream15readStringUntilEc>
   b449a:	a904      	add	r1, sp, #16
   b449c:	4640      	mov	r0, r8
   b449e:	f000 fce2 	bl	b4e66 <_ZN6StringaSEOS_>
   b44a2:	a804      	add	r0, sp, #16
   b44a4:	f000 fc63 	bl	b4d6e <_ZN6StringD1Ev>
        parse4 = Serial1.readStringUntil('\n');
   b44a8:	f001 fa0a 	bl	b58c0 <_Z22__fetch_global_Serial1v>
   b44ac:	220a      	movs	r2, #10
   b44ae:	4601      	mov	r1, r0
   b44b0:	a804      	add	r0, sp, #16
   b44b2:	f000 fdeb 	bl	b508c <_ZN6Stream15readStringUntilEc>
   b44b6:	a904      	add	r1, sp, #16
   b44b8:	4648      	mov	r0, r9
   b44ba:	f000 fcd4 	bl	b4e66 <_ZN6StringaSEOS_>
   b44be:	a804      	add	r0, sp, #16
   b44c0:	f000 fc55 	bl	b4d6e <_ZN6StringD1Ev>
        Serial.printf("Incoming Message; %s\n%s\n%s\n%s\n%s\n", parse0.c_str(), parse1.c_str(), parse2.c_str(), parse3.c_str(), parse4.c_str());
   b44c4:	f000 ff8e 	bl	b53e4 <_Z16_fetch_usbserialv>
   b44c8:	f8d9 3000 	ldr.w	r3, [r9]
   b44cc:	9302      	str	r3, [sp, #8]
   b44ce:	f8d8 3000 	ldr.w	r3, [r8]
   b44d2:	9301      	str	r3, [sp, #4]
   b44d4:	6823      	ldr	r3, [r4, #0]
   b44d6:	9300      	str	r3, [sp, #0]
   b44d8:	683a      	ldr	r2, [r7, #0]
   b44da:	6833      	ldr	r3, [r6, #0]
   b44dc:	497f      	ldr	r1, [pc, #508]	; (b46dc <loop+0x2d4>)
        dataLen = parse1.toInt();
   b44de:	4f80      	ldr	r7, [pc, #512]	; (b46e0 <loop+0x2d8>)
        Serial.printf("Incoming Message; %s\n%s\n%s\n%s\n%s\n", parse0.c_str(), parse1.c_str(), parse2.c_str(), parse3.c_str(), parse4.c_str());
   b44e0:	f7ff fe0c 	bl	b40fc <_ZN5Print6printfEPKcz>
        dataLen = parse1.toInt();
   b44e4:	4630      	mov	r0, r6
   b44e6:	f000 fd27 	bl	b4f38 <_ZNK6String5toIntEv>
   b44ea:	6038      	str	r0, [r7, #0]
        dataLora = parse2.toInt();
   b44ec:	4620      	mov	r0, r4
   b44ee:	f000 fd23 	bl	b4f38 <_ZNK6String5toIntEv>
   b44f2:	4c7c      	ldr	r4, [pc, #496]	; (b46e4 <loop+0x2dc>)
   b44f4:	6020      	str	r0, [r4, #0]
        if(dataLora == 0){
   b44f6:	b920      	cbnz	r0, b4502 <loop+0xfa>
          Serial.printf("Scan did not work\n");
   b44f8:	f000 ff74 	bl	b53e4 <_Z16_fetch_usbserialv>
   b44fc:	497a      	ldr	r1, [pc, #488]	; (b46e8 <loop+0x2e0>)
   b44fe:	f7ff fdfd 	bl	b40fc <_ZN5Print6printfEPKcz>
        if(dataLora == 5){
   b4502:	6823      	ldr	r3, [r4, #0]
   b4504:	2b05      	cmp	r3, #5
   b4506:	d10a      	bne.n	b451e <loop+0x116>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b4508:	f000 f9f0 	bl	b48ec <HAL_Timer_Get_Micro_Seconds>
          startTimer2 = micros();
   b450c:	4b77      	ldr	r3, [pc, #476]	; (b46ec <loop+0x2e4>)
   b450e:	6018      	str	r0, [r3, #0]
          Serial.printf("Starting Timer\n");
   b4510:	f000 ff68 	bl	b53e4 <_Z16_fetch_usbserialv>
   b4514:	4976      	ldr	r1, [pc, #472]	; (b46f0 <loop+0x2e8>)
   b4516:	f7ff fdf1 	bl	b40fc <_ZN5Print6printfEPKcz>
          largestPhotoVal = 0;
   b451a:	2300      	movs	r3, #0
   b451c:	602b      	str	r3, [r5, #0]
        if(dataLora == 9){
   b451e:	6823      	ldr	r3, [r4, #0]
   b4520:	2b09      	cmp	r3, #9
   b4522:	d126      	bne.n	b4572 <loop+0x16a>
            recievedTimeString = String(recievedTime);
   b4524:	4b73      	ldr	r3, [pc, #460]	; (b46f4 <loop+0x2ec>)
   b4526:	4e74      	ldr	r6, [pc, #464]	; (b46f8 <loop+0x2f0>)
   b4528:	6819      	ldr	r1, [r3, #0]
            recievedTimeLenght = recievedTimeString.length();
   b452a:	f8df 8220 	ldr.w	r8, [pc, #544]	; b474c <loop+0x344>
            recievedTimeString = String(recievedTime);
   b452e:	220a      	movs	r2, #10
   b4530:	a804      	add	r0, sp, #16
   b4532:	f000 fcb2 	bl	b4e9a <_ZN6StringC1Ejh>
   b4536:	a904      	add	r1, sp, #16
   b4538:	4630      	mov	r0, r6
   b453a:	f000 fc94 	bl	b4e66 <_ZN6StringaSEOS_>
   b453e:	a804      	add	r0, sp, #16
   b4540:	f000 fc15 	bl	b4d6e <_ZN6StringD1Ev>
            recievedTimeLenght = recievedTimeString.length();
   b4544:	68b3      	ldr	r3, [r6, #8]
   b4546:	f8c8 3000 	str.w	r3, [r8]
            Serial1.printf("AT+SEND=999,%i,%s\r\n",recievedTimeLenght,recievedTimeString.c_str());
   b454a:	f001 f9b9 	bl	b58c0 <_Z22__fetch_global_Serial1v>
   b454e:	6833      	ldr	r3, [r6, #0]
   b4550:	f8d8 2000 	ldr.w	r2, [r8]
   b4554:	4969      	ldr	r1, [pc, #420]	; (b46fc <loop+0x2f4>)
   b4556:	f7ff fdd1 	bl	b40fc <_ZN5Print6printfEPKcz>
            Serial.printf("Sent\n");
   b455a:	f000 ff43 	bl	b53e4 <_Z16_fetch_usbserialv>
   b455e:	4968      	ldr	r1, [pc, #416]	; (b4700 <loop+0x2f8>)
   b4560:	f7ff fdcc 	bl	b40fc <_ZN5Print6printfEPKcz>
            Serial.printf("Incoming Len %i, IncomingData %i\n", dataLen, dataLora);
   b4564:	f000 ff3e 	bl	b53e4 <_Z16_fetch_usbserialv>
   b4568:	6823      	ldr	r3, [r4, #0]
   b456a:	683a      	ldr	r2, [r7, #0]
   b456c:	4965      	ldr	r1, [pc, #404]	; (b4704 <loop+0x2fc>)
   b456e:	f7ff fdc5 	bl	b40fc <_ZN5Print6printfEPKcz>
        photoVal = analogRead(PHOTODIODE);
   b4572:	2013      	movs	r0, #19
   b4574:	f001 f972 	bl	b585c <analogRead>
   b4578:	4b63      	ldr	r3, [pc, #396]	; (b4708 <loop+0x300>)
   b457a:	4c64      	ldr	r4, [pc, #400]	; (b470c <loop+0x304>)
   b457c:	6018      	str	r0, [r3, #0]
        if (photoVal > largestPhotoVal) {
   b457e:	682b      	ldr	r3, [r5, #0]
   b4580:	4298      	cmp	r0, r3
   b4582:	dd12      	ble.n	b45aa <loop+0x1a2>
            largerReadingDetected = true;
   b4584:	2301      	movs	r3, #1
            largestPhotoVal = photoVal;
   b4586:	6028      	str	r0, [r5, #0]
            largerReadingDetected = true;
   b4588:	7023      	strb	r3, [r4, #0]
   b458a:	f000 f9af 	bl	b48ec <HAL_Timer_Get_Micro_Seconds>
            recievedTime = micros()- startTimer2;
   b458e:	4b57      	ldr	r3, [pc, #348]	; (b46ec <loop+0x2e4>)
   b4590:	4d58      	ldr	r5, [pc, #352]	; (b46f4 <loop+0x2ec>)
   b4592:	681b      	ldr	r3, [r3, #0]
   b4594:	1ac0      	subs	r0, r0, r3
            largerReadingDetected = false;
   b4596:	2300      	movs	r3, #0
            recievedTime = micros()- startTimer2;
   b4598:	6028      	str	r0, [r5, #0]
            largerReadingDetected = false;
   b459a:	7023      	strb	r3, [r4, #0]
            Serial.printf("NewVal %i\n", recievedTime);
   b459c:	f000 ff22 	bl	b53e4 <_Z16_fetch_usbserialv>
   b45a0:	682a      	ldr	r2, [r5, #0]
   b45a2:	495b      	ldr	r1, [pc, #364]	; (b4710 <loop+0x308>)
   b45a4:	f7ff fdaa 	bl	b40fc <_ZN5Print6printfEPKcz>
   b45a8:	e002      	b.n	b45b0 <loop+0x1a8>
        if (largerReadingDetected) {
   b45aa:	7823      	ldrb	r3, [r4, #0]
   b45ac:	2b00      	cmp	r3, #0
   b45ae:	d1ec      	bne.n	b458a <loop+0x182>
        if (topPDval > largestTopVal + 100) {
   b45b0:	4a58      	ldr	r2, [pc, #352]	; (b4714 <loop+0x30c>)
   b45b2:	4d59      	ldr	r5, [pc, #356]	; (b4718 <loop+0x310>)
   b45b4:	6813      	ldr	r3, [r2, #0]
   b45b6:	6829      	ldr	r1, [r5, #0]
   b45b8:	3364      	adds	r3, #100	; 0x64
   b45ba:	428b      	cmp	r3, r1
   b45bc:	4b57      	ldr	r3, [pc, #348]	; (b471c <loop+0x314>)
   b45be:	da23      	bge.n	b4608 <loop+0x200>
            largestTopVal = topPDval;
   b45c0:	6011      	str	r1, [r2, #0]
            topFlag = false;
   b45c2:	2400      	movs	r4, #0
            digitalWrite(D6, LOW);
   b45c4:	4621      	mov	r1, r4
   b45c6:	2006      	movs	r0, #6
            topFlag = false;
   b45c8:	701c      	strb	r4, [r3, #0]
            digitalWrite(D6, LOW);
   b45ca:	f001 f92e 	bl	b582a <digitalWrite>
            digitalWrite(D7, LOW);
   b45ce:	4621      	mov	r1, r4
   b45d0:	2007      	movs	r0, #7
   b45d2:	f001 f92a 	bl	b582a <digitalWrite>
            digitalWrite(D8, HIGH);
   b45d6:	2101      	movs	r1, #1
   b45d8:	2008      	movs	r0, #8
   b45da:	f001 f926 	bl	b582a <digitalWrite>
            digitalWrite(D8, LOW);
   b45de:	4621      	mov	r1, r4
   b45e0:	2008      	movs	r0, #8
   b45e2:	f001 f922 	bl	b582a <digitalWrite>
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b45e6:	f000 f989 	bl	b48fc <HAL_Timer_Get_Milli_Seconds>
            rowCounter++;
   b45ea:	4a4d      	ldr	r2, [pc, #308]	; (b4720 <loop+0x318>)
            pdTimer = millis();
   b45ec:	4b4d      	ldr	r3, [pc, #308]	; (b4724 <loop+0x31c>)
            dataArray[rowCounter][0] = 0;
   b45ee:	494e      	ldr	r1, [pc, #312]	; (b4728 <loop+0x320>)
            pdTimer = millis();
   b45f0:	6018      	str	r0, [r3, #0]
            rowCounter++;
   b45f2:	6813      	ldr	r3, [r2, #0]
   b45f4:	3301      	adds	r3, #1
   b45f6:	6013      	str	r3, [r2, #0]
            dataArray[rowCounter][0] = 0;
   b45f8:	220c      	movs	r2, #12
   b45fa:	4353      	muls	r3, r2
   b45fc:	18ca      	adds	r2, r1, r3
   b45fe:	50cc      	str	r4, [r1, r3]
            dataArray[rowCounter][2] = topPDval;
   b4600:	682b      	ldr	r3, [r5, #0]
            dataArray[rowCounter][1] = pdTimer;
   b4602:	6050      	str	r0, [r2, #4]
            dataArray[rowCounter][2] = topPDval;
   b4604:	6093      	str	r3, [r2, #8]
   b4606:	e002      	b.n	b460e <loop+0x206>
        if (topFlag) {
   b4608:	781a      	ldrb	r2, [r3, #0]
   b460a:	2a00      	cmp	r2, #0
   b460c:	d1d9      	bne.n	b45c2 <loop+0x1ba>
        if (leftPDval > largestLeftVal + 100) {
   b460e:	4a47      	ldr	r2, [pc, #284]	; (b472c <loop+0x324>)
   b4610:	4d47      	ldr	r5, [pc, #284]	; (b4730 <loop+0x328>)
   b4612:	6813      	ldr	r3, [r2, #0]
   b4614:	6829      	ldr	r1, [r5, #0]
   b4616:	3364      	adds	r3, #100	; 0x64
   b4618:	428b      	cmp	r3, r1
   b461a:	4b46      	ldr	r3, [pc, #280]	; (b4734 <loop+0x32c>)
   b461c:	da24      	bge.n	b4668 <loop+0x260>
            largestLeftVal = leftPDval;
   b461e:	6011      	str	r1, [r2, #0]
            leftFlag = false;
   b4620:	2400      	movs	r4, #0
            digitalWrite(D6, LOW);
   b4622:	4621      	mov	r1, r4
   b4624:	2006      	movs	r0, #6
            leftFlag = false;
   b4626:	701c      	strb	r4, [r3, #0]
            digitalWrite(D6, LOW);
   b4628:	f001 f8ff 	bl	b582a <digitalWrite>
            digitalWrite(D7, HIGH);
   b462c:	2101      	movs	r1, #1
   b462e:	2007      	movs	r0, #7
   b4630:	f001 f8fb 	bl	b582a <digitalWrite>
            digitalWrite(D8, HIGH);
   b4634:	2101      	movs	r1, #1
   b4636:	2008      	movs	r0, #8
   b4638:	f001 f8f7 	bl	b582a <digitalWrite>
            digitalWrite(D8, LOW);
   b463c:	4621      	mov	r1, r4
   b463e:	2008      	movs	r0, #8
   b4640:	f001 f8f3 	bl	b582a <digitalWrite>
   b4644:	f000 f95a 	bl	b48fc <HAL_Timer_Get_Milli_Seconds>
            rowCounter++;
   b4648:	4a35      	ldr	r2, [pc, #212]	; (b4720 <loop+0x318>)
            pdTimer = millis();
   b464a:	4b36      	ldr	r3, [pc, #216]	; (b4724 <loop+0x31c>)
            dataArray[rowCounter][0] = 1;
   b464c:	4936      	ldr	r1, [pc, #216]	; (b4728 <loop+0x320>)
            pdTimer = millis();
   b464e:	6018      	str	r0, [r3, #0]
            rowCounter++;
   b4650:	6813      	ldr	r3, [r2, #0]
   b4652:	3301      	adds	r3, #1
   b4654:	6013      	str	r3, [r2, #0]
            dataArray[rowCounter][0] = 1;
   b4656:	220c      	movs	r2, #12
   b4658:	4353      	muls	r3, r2
   b465a:	18ca      	adds	r2, r1, r3
   b465c:	2401      	movs	r4, #1
   b465e:	50cc      	str	r4, [r1, r3]
            dataArray[rowCounter][2] = leftPDval;
   b4660:	682b      	ldr	r3, [r5, #0]
            dataArray[rowCounter][1] = pdTimer;
   b4662:	6050      	str	r0, [r2, #4]
            dataArray[rowCounter][2] = leftPDval;
   b4664:	6093      	str	r3, [r2, #8]
   b4666:	e002      	b.n	b466e <loop+0x266>
        if (leftFlag) {
   b4668:	781a      	ldrb	r2, [r3, #0]
   b466a:	2a00      	cmp	r2, #0
   b466c:	d1d8      	bne.n	b4620 <loop+0x218>
        if (rightPDval > largestRightVal + 100) {
   b466e:	4a32      	ldr	r2, [pc, #200]	; (b4738 <loop+0x330>)
   b4670:	4d32      	ldr	r5, [pc, #200]	; (b473c <loop+0x334>)
   b4672:	6813      	ldr	r3, [r2, #0]
   b4674:	6829      	ldr	r1, [r5, #0]
   b4676:	3364      	adds	r3, #100	; 0x64
   b4678:	428b      	cmp	r3, r1
   b467a:	4b31      	ldr	r3, [pc, #196]	; (b4740 <loop+0x338>)
   b467c:	da68      	bge.n	b4750 <loop+0x348>
            largestRightVal = rightPDval;
   b467e:	6011      	str	r1, [r2, #0]
            rightFlag = false;
   b4680:	2400      	movs	r4, #0
            digitalWrite(D6, HIGH);
   b4682:	2101      	movs	r1, #1
   b4684:	2006      	movs	r0, #6
            rightFlag = false;
   b4686:	701c      	strb	r4, [r3, #0]
            digitalWrite(D6, HIGH);
   b4688:	f001 f8cf 	bl	b582a <digitalWrite>
            digitalWrite(D7, LOW);
   b468c:	4621      	mov	r1, r4
   b468e:	2007      	movs	r0, #7
   b4690:	f001 f8cb 	bl	b582a <digitalWrite>
            digitalWrite(D8, HIGH);
   b4694:	2101      	movs	r1, #1
   b4696:	2008      	movs	r0, #8
   b4698:	f001 f8c7 	bl	b582a <digitalWrite>
            digitalWrite(D8, LOW);
   b469c:	4621      	mov	r1, r4
   b469e:	2008      	movs	r0, #8
   b46a0:	f001 f8c3 	bl	b582a <digitalWrite>
   b46a4:	f000 f92a 	bl	b48fc <HAL_Timer_Get_Milli_Seconds>
            rowCounter++;
   b46a8:	4a1d      	ldr	r2, [pc, #116]	; (b4720 <loop+0x318>)
            pdTimer = millis();
   b46aa:	4b1e      	ldr	r3, [pc, #120]	; (b4724 <loop+0x31c>)
            dataArray[rowCounter][0] = 2;
   b46ac:	491e      	ldr	r1, [pc, #120]	; (b4728 <loop+0x320>)
            pdTimer = millis();
   b46ae:	6018      	str	r0, [r3, #0]
            rowCounter++;
   b46b0:	6813      	ldr	r3, [r2, #0]
   b46b2:	3301      	adds	r3, #1
   b46b4:	6013      	str	r3, [r2, #0]
            dataArray[rowCounter][0] = 2;
   b46b6:	220c      	movs	r2, #12
   b46b8:	4353      	muls	r3, r2
   b46ba:	18ca      	adds	r2, r1, r3
   b46bc:	2402      	movs	r4, #2
   b46be:	50cc      	str	r4, [r1, r3]
            dataArray[rowCounter][2] = rightPDval;
   b46c0:	682b      	ldr	r3, [r5, #0]
            dataArray[rowCounter][1] = pdTimer;
   b46c2:	6050      	str	r0, [r2, #4]
            dataArray[rowCounter][2] = rightPDval;
   b46c4:	6093      	str	r3, [r2, #8]
   b46c6:	e046      	b.n	b4756 <loop+0x34e>
   b46c8:	2003e600 	.word	0x2003e600
   b46cc:	000b5d88 	.word	0x000b5d88
   b46d0:	2003e618 	.word	0x2003e618
   b46d4:	2003e628 	.word	0x2003e628
   b46d8:	2003e638 	.word	0x2003e638
   b46dc:	000b5da2 	.word	0x000b5da2
   b46e0:	2003e5ec 	.word	0x2003e5ec
   b46e4:	2003e5f0 	.word	0x2003e5f0
   b46e8:	000b5dc4 	.word	0x000b5dc4
   b46ec:	2003e6ac 	.word	0x2003e6ac
   b46f0:	000b5dd7 	.word	0x000b5dd7
   b46f4:	2003e678 	.word	0x2003e678
   b46f8:	2003e680 	.word	0x2003e680
   b46fc:	000b5de7 	.word	0x000b5de7
   b4700:	000b5dfb 	.word	0x000b5dfb
   b4704:	000b5e01 	.word	0x000b5e01
   b4708:	2003e66c 	.word	0x2003e66c
   b470c:	2003e5f4 	.word	0x2003e5f4
   b4710:	000b5e23 	.word	0x000b5e23
   b4714:	2003e608 	.word	0x2003e608
   b4718:	2003e6b4 	.word	0x2003e6b4
   b471c:	2003e6b0 	.word	0x2003e6b0
   b4720:	2003e6a8 	.word	0x2003e6a8
   b4724:	2003e668 	.word	0x2003e668
   b4728:	2002fb8c 	.word	0x2002fb8c
   b472c:	2003e5fc 	.word	0x2003e5fc
   b4730:	2003e614 	.word	0x2003e614
   b4734:	2003e610 	.word	0x2003e610
   b4738:	2003e604 	.word	0x2003e604
   b473c:	2003e6a4 	.word	0x2003e6a4
   b4740:	2003e6a0 	.word	0x2003e6a0
   b4744:	2003e648 	.word	0x2003e648
   b4748:	2003e658 	.word	0x2003e658
   b474c:	2003e67c 	.word	0x2003e67c
        if (rightFlag) {
   b4750:	781a      	ldrb	r2, [r3, #0]
   b4752:	2a00      	cmp	r2, #0
   b4754:	d194      	bne.n	b4680 <loop+0x278>
        if (bottomPDval > largestBottomVal + 100) {
   b4756:	4a19      	ldr	r2, [pc, #100]	; (b47bc <loop+0x3b4>)
   b4758:	4c19      	ldr	r4, [pc, #100]	; (b47c0 <loop+0x3b8>)
   b475a:	6813      	ldr	r3, [r2, #0]
   b475c:	6821      	ldr	r1, [r4, #0]
   b475e:	3364      	adds	r3, #100	; 0x64
   b4760:	428b      	cmp	r3, r1
   b4762:	4b18      	ldr	r3, [pc, #96]	; (b47c4 <loop+0x3bc>)
   b4764:	da24      	bge.n	b47b0 <loop+0x3a8>
            largestBottomVal = bottomPDval;
   b4766:	6011      	str	r1, [r2, #0]
            bottomFlag = false;
   b4768:	2500      	movs	r5, #0
            digitalWrite(D6, HIGH);
   b476a:	2101      	movs	r1, #1
   b476c:	2006      	movs	r0, #6
            bottomFlag = false;
   b476e:	701d      	strb	r5, [r3, #0]
            digitalWrite(D6, HIGH);
   b4770:	f001 f85b 	bl	b582a <digitalWrite>
            digitalWrite(D7, HIGH);
   b4774:	2101      	movs	r1, #1
   b4776:	2007      	movs	r0, #7
   b4778:	f001 f857 	bl	b582a <digitalWrite>
            digitalWrite(D8, HIGH);
   b477c:	2101      	movs	r1, #1
   b477e:	2008      	movs	r0, #8
   b4780:	f001 f853 	bl	b582a <digitalWrite>
            digitalWrite(D8, LOW);
   b4784:	4629      	mov	r1, r5
   b4786:	2008      	movs	r0, #8
   b4788:	f001 f84f 	bl	b582a <digitalWrite>
   b478c:	f000 f8b6 	bl	b48fc <HAL_Timer_Get_Milli_Seconds>
            rowCounter++;
   b4790:	4a0d      	ldr	r2, [pc, #52]	; (b47c8 <loop+0x3c0>)
            pdTimer = millis();
   b4792:	4b0e      	ldr	r3, [pc, #56]	; (b47cc <loop+0x3c4>)
            dataArray[rowCounter][0] = 3;
   b4794:	490e      	ldr	r1, [pc, #56]	; (b47d0 <loop+0x3c8>)
            pdTimer = millis();
   b4796:	6018      	str	r0, [r3, #0]
            rowCounter++;
   b4798:	6813      	ldr	r3, [r2, #0]
   b479a:	3301      	adds	r3, #1
   b479c:	6013      	str	r3, [r2, #0]
            dataArray[rowCounter][0] = 3;
   b479e:	220c      	movs	r2, #12
   b47a0:	4353      	muls	r3, r2
   b47a2:	18ca      	adds	r2, r1, r3
   b47a4:	2503      	movs	r5, #3
   b47a6:	50cd      	str	r5, [r1, r3]
            dataArray[rowCounter][2] = bottomPDval;
   b47a8:	6823      	ldr	r3, [r4, #0]
            dataArray[rowCounter][1] = pdTimer;
   b47aa:	6050      	str	r0, [r2, #4]
            dataArray[rowCounter][2] = bottomPDval;
   b47ac:	6093      	str	r3, [r2, #8]
    }
   b47ae:	e002      	b.n	b47b6 <loop+0x3ae>
        if (bottomFlag) {
   b47b0:	781a      	ldrb	r2, [r3, #0]
   b47b2:	2a00      	cmp	r2, #0
   b47b4:	d1d8      	bne.n	b4768 <loop+0x360>
    }
   b47b6:	b009      	add	sp, #36	; 0x24
   b47b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b47bc:	2003e5f8 	.word	0x2003e5f8
   b47c0:	2002fb60 	.word	0x2002fb60
   b47c4:	2002fb5c 	.word	0x2002fb5c
   b47c8:	2003e6a8 	.word	0x2003e6a8
   b47cc:	2003e668 	.word	0x2003e668
   b47d0:	2002fb8c 	.word	0x2002fb8c

000b47d4 <_GLOBAL__sub_I_SystemMode>:
    }
   b47d4:	b508      	push	{r3, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b47d6:	4b14      	ldr	r3, [pc, #80]	; (b4828 <_GLOBAL__sub_I_SystemMode+0x54>)
   b47d8:	2200      	movs	r2, #0
   b47da:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b47de:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b47e2:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b47e4:	2002      	movs	r0, #2
   b47e6:	f000 f969 	bl	b4abc <set_system_mode>
String reply;
   b47ea:	4910      	ldr	r1, [pc, #64]	; (b482c <_GLOBAL__sub_I_SystemMode+0x58>)
   b47ec:	4810      	ldr	r0, [pc, #64]	; (b4830 <_GLOBAL__sub_I_SystemMode+0x5c>)
   b47ee:	f000 fb09 	bl	b4e04 <_ZN6StringC1EPK19__FlashStringHelper>
String recievedTimeString;
   b47f2:	490e      	ldr	r1, [pc, #56]	; (b482c <_GLOBAL__sub_I_SystemMode+0x58>)
   b47f4:	480f      	ldr	r0, [pc, #60]	; (b4834 <_GLOBAL__sub_I_SystemMode+0x60>)
   b47f6:	f000 fb05 	bl	b4e04 <_ZN6StringC1EPK19__FlashStringHelper>
String parse0;
   b47fa:	490c      	ldr	r1, [pc, #48]	; (b482c <_GLOBAL__sub_I_SystemMode+0x58>)
   b47fc:	480e      	ldr	r0, [pc, #56]	; (b4838 <_GLOBAL__sub_I_SystemMode+0x64>)
   b47fe:	f000 fb01 	bl	b4e04 <_ZN6StringC1EPK19__FlashStringHelper>
String parse1;
   b4802:	490a      	ldr	r1, [pc, #40]	; (b482c <_GLOBAL__sub_I_SystemMode+0x58>)
   b4804:	480d      	ldr	r0, [pc, #52]	; (b483c <_GLOBAL__sub_I_SystemMode+0x68>)
   b4806:	f000 fafd 	bl	b4e04 <_ZN6StringC1EPK19__FlashStringHelper>
String parse2;
   b480a:	4908      	ldr	r1, [pc, #32]	; (b482c <_GLOBAL__sub_I_SystemMode+0x58>)
   b480c:	480c      	ldr	r0, [pc, #48]	; (b4840 <_GLOBAL__sub_I_SystemMode+0x6c>)
   b480e:	f000 faf9 	bl	b4e04 <_ZN6StringC1EPK19__FlashStringHelper>
String parse3;
   b4812:	4906      	ldr	r1, [pc, #24]	; (b482c <_GLOBAL__sub_I_SystemMode+0x58>)
   b4814:	480b      	ldr	r0, [pc, #44]	; (b4844 <_GLOBAL__sub_I_SystemMode+0x70>)
   b4816:	f000 faf5 	bl	b4e04 <_ZN6StringC1EPK19__FlashStringHelper>
    }
   b481a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
String parse4;
   b481e:	4903      	ldr	r1, [pc, #12]	; (b482c <_GLOBAL__sub_I_SystemMode+0x58>)
   b4820:	4809      	ldr	r0, [pc, #36]	; (b4848 <_GLOBAL__sub_I_SystemMode+0x74>)
   b4822:	f000 baef 	b.w	b4e04 <_ZN6StringC1EPK19__FlashStringHelper>
   b4826:	bf00      	nop
   b4828:	2002fb50 	.word	0x2002fb50
   b482c:	000b5d4d 	.word	0x000b5d4d
   b4830:	2003e690 	.word	0x2003e690
   b4834:	2003e680 	.word	0x2003e680
   b4838:	2003e618 	.word	0x2003e618
   b483c:	2003e628 	.word	0x2003e628
   b4840:	2003e638 	.word	0x2003e638
   b4844:	2003e648 	.word	0x2003e648
   b4848:	2003e658 	.word	0x2003e658

000b484c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b484c:	b508      	push	{r3, lr}
   b484e:	4b02      	ldr	r3, [pc, #8]	; (b4858 <netdb_freeaddrinfo+0xc>)
   b4850:	681b      	ldr	r3, [r3, #0]
   b4852:	689b      	ldr	r3, [r3, #8]
   b4854:	9301      	str	r3, [sp, #4]
   b4856:	bd08      	pop	{r3, pc}
   b4858:	00030268 	.word	0x00030268

000b485c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b485c:	b508      	push	{r3, lr}
   b485e:	4b02      	ldr	r3, [pc, #8]	; (b4868 <netdb_getaddrinfo+0xc>)
   b4860:	681b      	ldr	r3, [r3, #0]
   b4862:	68db      	ldr	r3, [r3, #12]
   b4864:	9301      	str	r3, [sp, #4]
   b4866:	bd08      	pop	{r3, pc}
   b4868:	00030268 	.word	0x00030268

000b486c <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b486c:	b508      	push	{r3, lr}
   b486e:	4b02      	ldr	r3, [pc, #8]	; (b4878 <HAL_Validate_Pin_Function+0xc>)
   b4870:	681b      	ldr	r3, [r3, #0]
   b4872:	685b      	ldr	r3, [r3, #4]
   b4874:	9301      	str	r3, [sp, #4]
   b4876:	bd08      	pop	{r3, pc}
   b4878:	0003022c 	.word	0x0003022c

000b487c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b487c:	b508      	push	{r3, lr}
   b487e:	4b02      	ldr	r3, [pc, #8]	; (b4888 <HAL_Pin_Mode+0xc>)
   b4880:	681b      	ldr	r3, [r3, #0]
   b4882:	689b      	ldr	r3, [r3, #8]
   b4884:	9301      	str	r3, [sp, #4]
   b4886:	bd08      	pop	{r3, pc}
   b4888:	0003022c 	.word	0x0003022c

000b488c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b488c:	b508      	push	{r3, lr}
   b488e:	4b02      	ldr	r3, [pc, #8]	; (b4898 <HAL_Get_Pin_Mode+0xc>)
   b4890:	681b      	ldr	r3, [r3, #0]
   b4892:	68db      	ldr	r3, [r3, #12]
   b4894:	9301      	str	r3, [sp, #4]
   b4896:	bd08      	pop	{r3, pc}
   b4898:	0003022c 	.word	0x0003022c

000b489c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b489c:	b508      	push	{r3, lr}
   b489e:	4b02      	ldr	r3, [pc, #8]	; (b48a8 <HAL_GPIO_Write+0xc>)
   b48a0:	681b      	ldr	r3, [r3, #0]
   b48a2:	691b      	ldr	r3, [r3, #16]
   b48a4:	9301      	str	r3, [sp, #4]
   b48a6:	bd08      	pop	{r3, pc}
   b48a8:	0003022c 	.word	0x0003022c

000b48ac <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b48ac:	b508      	push	{r3, lr}
   b48ae:	4b02      	ldr	r3, [pc, #8]	; (b48b8 <HAL_Interrupts_Attach+0xc>)
   b48b0:	681b      	ldr	r3, [r3, #0]
   b48b2:	699b      	ldr	r3, [r3, #24]
   b48b4:	9301      	str	r3, [sp, #4]
   b48b6:	bd08      	pop	{r3, pc}
   b48b8:	0003022c 	.word	0x0003022c

000b48bc <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b48bc:	b508      	push	{r3, lr}
   b48be:	4b02      	ldr	r3, [pc, #8]	; (b48c8 <HAL_Interrupts_Detach+0xc>)
   b48c0:	681b      	ldr	r3, [r3, #0]
   b48c2:	69db      	ldr	r3, [r3, #28]
   b48c4:	9301      	str	r3, [sp, #4]
   b48c6:	bd08      	pop	{r3, pc}
   b48c8:	0003022c 	.word	0x0003022c

000b48cc <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b48cc:	b508      	push	{r3, lr}
   b48ce:	4b02      	ldr	r3, [pc, #8]	; (b48d8 <hal_adc_read+0xc>)
   b48d0:	681b      	ldr	r3, [r3, #0]
   b48d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b48d4:	9301      	str	r3, [sp, #4]
   b48d6:	bd08      	pop	{r3, pc}
   b48d8:	0003022c 	.word	0x0003022c

000b48dc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b48dc:	b508      	push	{r3, lr}
   b48de:	4b02      	ldr	r3, [pc, #8]	; (b48e8 <HAL_RNG_GetRandomNumber+0xc>)
   b48e0:	681b      	ldr	r3, [r3, #0]
   b48e2:	685b      	ldr	r3, [r3, #4]
   b48e4:	9301      	str	r3, [sp, #4]
   b48e6:	bd08      	pop	{r3, pc}
   b48e8:	00030218 	.word	0x00030218

000b48ec <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b48ec:	b508      	push	{r3, lr}
   b48ee:	4b02      	ldr	r3, [pc, #8]	; (b48f8 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b48f0:	681b      	ldr	r3, [r3, #0]
   b48f2:	691b      	ldr	r3, [r3, #16]
   b48f4:	9301      	str	r3, [sp, #4]
   b48f6:	bd08      	pop	{r3, pc}
   b48f8:	00030218 	.word	0x00030218

000b48fc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b48fc:	b508      	push	{r3, lr}
   b48fe:	4b02      	ldr	r3, [pc, #8]	; (b4908 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4900:	681b      	ldr	r3, [r3, #0]
   b4902:	695b      	ldr	r3, [r3, #20]
   b4904:	9301      	str	r3, [sp, #4]
   b4906:	bd08      	pop	{r3, pc}
   b4908:	00030218 	.word	0x00030218

000b490c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b490c:	b508      	push	{r3, lr}
   b490e:	4b02      	ldr	r3, [pc, #8]	; (b4918 <os_mutex_recursive_create+0xc>)
   b4910:	681b      	ldr	r3, [r3, #0]
   b4912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4914:	9301      	str	r3, [sp, #4]
   b4916:	bd08      	pop	{r3, pc}
   b4918:	00030248 	.word	0x00030248

000b491c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b491c:	b508      	push	{r3, lr}
   b491e:	4b02      	ldr	r3, [pc, #8]	; (b4928 <inet_inet_ntop+0xc>)
   b4920:	681b      	ldr	r3, [r3, #0]
   b4922:	695b      	ldr	r3, [r3, #20]
   b4924:	9301      	str	r3, [sp, #4]
   b4926:	bd08      	pop	{r3, pc}
   b4928:	00030264 	.word	0x00030264

000b492c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b492c:	b508      	push	{r3, lr}
   b492e:	4b02      	ldr	r3, [pc, #8]	; (b4938 <hal_usart_write+0xc>)
   b4930:	681b      	ldr	r3, [r3, #0]
   b4932:	68db      	ldr	r3, [r3, #12]
   b4934:	9301      	str	r3, [sp, #4]
   b4936:	bd08      	pop	{r3, pc}
   b4938:	0003023c 	.word	0x0003023c

000b493c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b493c:	b508      	push	{r3, lr}
   b493e:	4b02      	ldr	r3, [pc, #8]	; (b4948 <hal_usart_available+0xc>)
   b4940:	681b      	ldr	r3, [r3, #0]
   b4942:	691b      	ldr	r3, [r3, #16]
   b4944:	9301      	str	r3, [sp, #4]
   b4946:	bd08      	pop	{r3, pc}
   b4948:	0003023c 	.word	0x0003023c

000b494c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b494c:	b508      	push	{r3, lr}
   b494e:	4b02      	ldr	r3, [pc, #8]	; (b4958 <hal_usart_read+0xc>)
   b4950:	681b      	ldr	r3, [r3, #0]
   b4952:	695b      	ldr	r3, [r3, #20]
   b4954:	9301      	str	r3, [sp, #4]
   b4956:	bd08      	pop	{r3, pc}
   b4958:	0003023c 	.word	0x0003023c

000b495c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b495c:	b508      	push	{r3, lr}
   b495e:	4b02      	ldr	r3, [pc, #8]	; (b4968 <hal_usart_peek+0xc>)
   b4960:	681b      	ldr	r3, [r3, #0]
   b4962:	699b      	ldr	r3, [r3, #24]
   b4964:	9301      	str	r3, [sp, #4]
   b4966:	bd08      	pop	{r3, pc}
   b4968:	0003023c 	.word	0x0003023c

000b496c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b496c:	b508      	push	{r3, lr}
   b496e:	4b02      	ldr	r3, [pc, #8]	; (b4978 <hal_usart_flush+0xc>)
   b4970:	681b      	ldr	r3, [r3, #0]
   b4972:	69db      	ldr	r3, [r3, #28]
   b4974:	9301      	str	r3, [sp, #4]
   b4976:	bd08      	pop	{r3, pc}
   b4978:	0003023c 	.word	0x0003023c

000b497c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b497c:	b508      	push	{r3, lr}
   b497e:	4b02      	ldr	r3, [pc, #8]	; (b4988 <hal_usart_is_enabled+0xc>)
   b4980:	681b      	ldr	r3, [r3, #0]
   b4982:	6a1b      	ldr	r3, [r3, #32]
   b4984:	9301      	str	r3, [sp, #4]
   b4986:	bd08      	pop	{r3, pc}
   b4988:	0003023c 	.word	0x0003023c

000b498c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b498c:	b508      	push	{r3, lr}
   b498e:	4b02      	ldr	r3, [pc, #8]	; (b4998 <hal_usart_available_data_for_write+0xc>)
   b4990:	681b      	ldr	r3, [r3, #0]
   b4992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4994:	9301      	str	r3, [sp, #4]
   b4996:	bd08      	pop	{r3, pc}
   b4998:	0003023c 	.word	0x0003023c

000b499c <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b499c:	b508      	push	{r3, lr}
   b499e:	4b02      	ldr	r3, [pc, #8]	; (b49a8 <hal_usart_begin_config+0xc>)
   b49a0:	681b      	ldr	r3, [r3, #0]
   b49a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b49a4:	9301      	str	r3, [sp, #4]
   b49a6:	bd08      	pop	{r3, pc}
   b49a8:	0003023c 	.word	0x0003023c

000b49ac <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b49ac:	b508      	push	{r3, lr}
   b49ae:	4b02      	ldr	r3, [pc, #8]	; (b49b8 <hal_usart_init_ex+0xc>)
   b49b0:	681b      	ldr	r3, [r3, #0]
   b49b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b49b4:	9301      	str	r3, [sp, #4]
   b49b6:	bd08      	pop	{r3, pc}
   b49b8:	0003023c 	.word	0x0003023c

000b49bc <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b49bc:	b508      	push	{r3, lr}
   b49be:	4b02      	ldr	r3, [pc, #8]	; (b49c8 <hal_i2c_write+0xc>)
   b49c0:	681b      	ldr	r3, [r3, #0]
   b49c2:	6a1b      	ldr	r3, [r3, #32]
   b49c4:	9301      	str	r3, [sp, #4]
   b49c6:	bd08      	pop	{r3, pc}
   b49c8:	00030228 	.word	0x00030228

000b49cc <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b49cc:	b508      	push	{r3, lr}
   b49ce:	4b02      	ldr	r3, [pc, #8]	; (b49d8 <hal_i2c_available+0xc>)
   b49d0:	681b      	ldr	r3, [r3, #0]
   b49d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b49d4:	9301      	str	r3, [sp, #4]
   b49d6:	bd08      	pop	{r3, pc}
   b49d8:	00030228 	.word	0x00030228

000b49dc <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b49dc:	b508      	push	{r3, lr}
   b49de:	4b02      	ldr	r3, [pc, #8]	; (b49e8 <hal_i2c_read+0xc>)
   b49e0:	681b      	ldr	r3, [r3, #0]
   b49e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b49e4:	9301      	str	r3, [sp, #4]
   b49e6:	bd08      	pop	{r3, pc}
   b49e8:	00030228 	.word	0x00030228

000b49ec <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b49ec:	b508      	push	{r3, lr}
   b49ee:	4b02      	ldr	r3, [pc, #8]	; (b49f8 <hal_i2c_peek+0xc>)
   b49f0:	681b      	ldr	r3, [r3, #0]
   b49f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b49f4:	9301      	str	r3, [sp, #4]
   b49f6:	bd08      	pop	{r3, pc}
   b49f8:	00030228 	.word	0x00030228

000b49fc <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b49fc:	b508      	push	{r3, lr}
   b49fe:	4b02      	ldr	r3, [pc, #8]	; (b4a08 <hal_i2c_flush+0xc>)
   b4a00:	681b      	ldr	r3, [r3, #0]
   b4a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4a04:	9301      	str	r3, [sp, #4]
   b4a06:	bd08      	pop	{r3, pc}
   b4a08:	00030228 	.word	0x00030228

000b4a0c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4a0c:	b508      	push	{r3, lr}
   b4a0e:	4b02      	ldr	r3, [pc, #8]	; (b4a18 <hal_i2c_is_enabled+0xc>)
   b4a10:	681b      	ldr	r3, [r3, #0]
   b4a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4a14:	9301      	str	r3, [sp, #4]
   b4a16:	bd08      	pop	{r3, pc}
   b4a18:	00030228 	.word	0x00030228

000b4a1c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4a1c:	b508      	push	{r3, lr}
   b4a1e:	4b02      	ldr	r3, [pc, #8]	; (b4a28 <hal_i2c_init+0xc>)
   b4a20:	681b      	ldr	r3, [r3, #0]
   b4a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4a24:	9301      	str	r3, [sp, #4]
   b4a26:	bd08      	pop	{r3, pc}
   b4a28:	00030228 	.word	0x00030228

000b4a2c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4a2c:	b508      	push	{r3, lr}
   b4a2e:	4b02      	ldr	r3, [pc, #8]	; (b4a38 <hal_spi_init+0xc>)
   b4a30:	681b      	ldr	r3, [r3, #0]
   b4a32:	69db      	ldr	r3, [r3, #28]
   b4a34:	9301      	str	r3, [sp, #4]
   b4a36:	bd08      	pop	{r3, pc}
   b4a38:	00030230 	.word	0x00030230

000b4a3c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4a3c:	b508      	push	{r3, lr}
   b4a3e:	4b02      	ldr	r3, [pc, #8]	; (b4a48 <hal_spi_is_enabled+0xc>)
   b4a40:	681b      	ldr	r3, [r3, #0]
   b4a42:	6a1b      	ldr	r3, [r3, #32]
   b4a44:	9301      	str	r3, [sp, #4]
   b4a46:	bd08      	pop	{r3, pc}
   b4a48:	00030230 	.word	0x00030230

000b4a4c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4a4c:	b508      	push	{r3, lr}
   b4a4e:	4b02      	ldr	r3, [pc, #8]	; (b4a58 <HAL_USB_USART_Init+0xc>)
   b4a50:	681b      	ldr	r3, [r3, #0]
   b4a52:	681b      	ldr	r3, [r3, #0]
   b4a54:	9301      	str	r3, [sp, #4]
   b4a56:	bd08      	pop	{r3, pc}
   b4a58:	0003024c 	.word	0x0003024c

000b4a5c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4a5c:	b508      	push	{r3, lr}
   b4a5e:	4b02      	ldr	r3, [pc, #8]	; (b4a68 <HAL_USB_USART_Begin+0xc>)
   b4a60:	681b      	ldr	r3, [r3, #0]
   b4a62:	685b      	ldr	r3, [r3, #4]
   b4a64:	9301      	str	r3, [sp, #4]
   b4a66:	bd08      	pop	{r3, pc}
   b4a68:	0003024c 	.word	0x0003024c

000b4a6c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4a6c:	b508      	push	{r3, lr}
   b4a6e:	4b02      	ldr	r3, [pc, #8]	; (b4a78 <HAL_USB_USART_Available_Data+0xc>)
   b4a70:	681b      	ldr	r3, [r3, #0]
   b4a72:	691b      	ldr	r3, [r3, #16]
   b4a74:	9301      	str	r3, [sp, #4]
   b4a76:	bd08      	pop	{r3, pc}
   b4a78:	0003024c 	.word	0x0003024c

000b4a7c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4a7c:	b508      	push	{r3, lr}
   b4a7e:	4b02      	ldr	r3, [pc, #8]	; (b4a88 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4a80:	681b      	ldr	r3, [r3, #0]
   b4a82:	695b      	ldr	r3, [r3, #20]
   b4a84:	9301      	str	r3, [sp, #4]
   b4a86:	bd08      	pop	{r3, pc}
   b4a88:	0003024c 	.word	0x0003024c

000b4a8c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4a8c:	b508      	push	{r3, lr}
   b4a8e:	4b02      	ldr	r3, [pc, #8]	; (b4a98 <HAL_USB_USART_Receive_Data+0xc>)
   b4a90:	681b      	ldr	r3, [r3, #0]
   b4a92:	699b      	ldr	r3, [r3, #24]
   b4a94:	9301      	str	r3, [sp, #4]
   b4a96:	bd08      	pop	{r3, pc}
   b4a98:	0003024c 	.word	0x0003024c

000b4a9c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4a9c:	b508      	push	{r3, lr}
   b4a9e:	4b02      	ldr	r3, [pc, #8]	; (b4aa8 <HAL_USB_USART_Send_Data+0xc>)
   b4aa0:	681b      	ldr	r3, [r3, #0]
   b4aa2:	69db      	ldr	r3, [r3, #28]
   b4aa4:	9301      	str	r3, [sp, #4]
   b4aa6:	bd08      	pop	{r3, pc}
   b4aa8:	0003024c 	.word	0x0003024c

000b4aac <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4aac:	b508      	push	{r3, lr}
   b4aae:	4b02      	ldr	r3, [pc, #8]	; (b4ab8 <HAL_USB_USART_Flush_Data+0xc>)
   b4ab0:	681b      	ldr	r3, [r3, #0]
   b4ab2:	6a1b      	ldr	r3, [r3, #32]
   b4ab4:	9301      	str	r3, [sp, #4]
   b4ab6:	bd08      	pop	{r3, pc}
   b4ab8:	0003024c 	.word	0x0003024c

000b4abc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4abc:	b508      	push	{r3, lr}
   b4abe:	4b02      	ldr	r3, [pc, #8]	; (b4ac8 <set_system_mode+0xc>)
   b4ac0:	681b      	ldr	r3, [r3, #0]
   b4ac2:	685b      	ldr	r3, [r3, #4]
   b4ac4:	9301      	str	r3, [sp, #4]
   b4ac6:	bd08      	pop	{r3, pc}
   b4ac8:	00030220 	.word	0x00030220

000b4acc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4acc:	b508      	push	{r3, lr}
   b4ace:	4b02      	ldr	r3, [pc, #8]	; (b4ad8 <system_delay_ms+0xc>)
   b4ad0:	681b      	ldr	r3, [r3, #0]
   b4ad2:	695b      	ldr	r3, [r3, #20]
   b4ad4:	9301      	str	r3, [sp, #4]
   b4ad6:	bd08      	pop	{r3, pc}
   b4ad8:	00030220 	.word	0x00030220

000b4adc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4adc:	b508      	push	{r3, lr}
   b4ade:	4b03      	ldr	r3, [pc, #12]	; (b4aec <system_ctrl_set_app_request_handler+0x10>)
   b4ae0:	681b      	ldr	r3, [r3, #0]
   b4ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4ae6:	9301      	str	r3, [sp, #4]
   b4ae8:	bd08      	pop	{r3, pc}
   b4aea:	0000      	.short	0x0000
   b4aec:	00030220 	.word	0x00030220

000b4af0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4af0:	b508      	push	{r3, lr}
   b4af2:	4b03      	ldr	r3, [pc, #12]	; (b4b00 <system_ctrl_set_result+0x10>)
   b4af4:	681b      	ldr	r3, [r3, #0]
   b4af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4afa:	9301      	str	r3, [sp, #4]
   b4afc:	bd08      	pop	{r3, pc}
   b4afe:	0000      	.short	0x0000
   b4b00:	00030220 	.word	0x00030220

000b4b04 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4b04:	b508      	push	{r3, lr}
   b4b06:	4b02      	ldr	r3, [pc, #8]	; (b4b10 <network_connect+0xc>)
   b4b08:	681b      	ldr	r3, [r3, #0]
   b4b0a:	685b      	ldr	r3, [r3, #4]
   b4b0c:	9301      	str	r3, [sp, #4]
   b4b0e:	bd08      	pop	{r3, pc}
   b4b10:	00030240 	.word	0x00030240

000b4b14 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4b14:	b508      	push	{r3, lr}
   b4b16:	4b02      	ldr	r3, [pc, #8]	; (b4b20 <network_connecting+0xc>)
   b4b18:	681b      	ldr	r3, [r3, #0]
   b4b1a:	689b      	ldr	r3, [r3, #8]
   b4b1c:	9301      	str	r3, [sp, #4]
   b4b1e:	bd08      	pop	{r3, pc}
   b4b20:	00030240 	.word	0x00030240

000b4b24 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4b24:	b508      	push	{r3, lr}
   b4b26:	4b02      	ldr	r3, [pc, #8]	; (b4b30 <network_disconnect+0xc>)
   b4b28:	681b      	ldr	r3, [r3, #0]
   b4b2a:	68db      	ldr	r3, [r3, #12]
   b4b2c:	9301      	str	r3, [sp, #4]
   b4b2e:	bd08      	pop	{r3, pc}
   b4b30:	00030240 	.word	0x00030240

000b4b34 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4b34:	b508      	push	{r3, lr}
   b4b36:	4b02      	ldr	r3, [pc, #8]	; (b4b40 <network_ready+0xc>)
   b4b38:	681b      	ldr	r3, [r3, #0]
   b4b3a:	691b      	ldr	r3, [r3, #16]
   b4b3c:	9301      	str	r3, [sp, #4]
   b4b3e:	bd08      	pop	{r3, pc}
   b4b40:	00030240 	.word	0x00030240

000b4b44 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4b44:	b508      	push	{r3, lr}
   b4b46:	4b02      	ldr	r3, [pc, #8]	; (b4b50 <network_on+0xc>)
   b4b48:	681b      	ldr	r3, [r3, #0]
   b4b4a:	695b      	ldr	r3, [r3, #20]
   b4b4c:	9301      	str	r3, [sp, #4]
   b4b4e:	bd08      	pop	{r3, pc}
   b4b50:	00030240 	.word	0x00030240

000b4b54 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4b54:	b508      	push	{r3, lr}
   b4b56:	4b02      	ldr	r3, [pc, #8]	; (b4b60 <network_off+0xc>)
   b4b58:	681b      	ldr	r3, [r3, #0]
   b4b5a:	699b      	ldr	r3, [r3, #24]
   b4b5c:	9301      	str	r3, [sp, #4]
   b4b5e:	bd08      	pop	{r3, pc}
   b4b60:	00030240 	.word	0x00030240

000b4b64 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4b64:	b508      	push	{r3, lr}
   b4b66:	4b02      	ldr	r3, [pc, #8]	; (b4b70 <network_listen+0xc>)
   b4b68:	681b      	ldr	r3, [r3, #0]
   b4b6a:	69db      	ldr	r3, [r3, #28]
   b4b6c:	9301      	str	r3, [sp, #4]
   b4b6e:	bd08      	pop	{r3, pc}
   b4b70:	00030240 	.word	0x00030240

000b4b74 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4b74:	b508      	push	{r3, lr}
   b4b76:	4b02      	ldr	r3, [pc, #8]	; (b4b80 <network_listening+0xc>)
   b4b78:	681b      	ldr	r3, [r3, #0]
   b4b7a:	6a1b      	ldr	r3, [r3, #32]
   b4b7c:	9301      	str	r3, [sp, #4]
   b4b7e:	bd08      	pop	{r3, pc}
   b4b80:	00030240 	.word	0x00030240

000b4b84 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4b84:	b508      	push	{r3, lr}
   b4b86:	4b02      	ldr	r3, [pc, #8]	; (b4b90 <network_set_listen_timeout+0xc>)
   b4b88:	681b      	ldr	r3, [r3, #0]
   b4b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4b8c:	9301      	str	r3, [sp, #4]
   b4b8e:	bd08      	pop	{r3, pc}
   b4b90:	00030240 	.word	0x00030240

000b4b94 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4b94:	b508      	push	{r3, lr}
   b4b96:	4b02      	ldr	r3, [pc, #8]	; (b4ba0 <network_get_listen_timeout+0xc>)
   b4b98:	681b      	ldr	r3, [r3, #0]
   b4b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4b9c:	9301      	str	r3, [sp, #4]
   b4b9e:	bd08      	pop	{r3, pc}
   b4ba0:	00030240 	.word	0x00030240

000b4ba4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4ba4:	b508      	push	{r3, lr}
   b4ba6:	4b02      	ldr	r3, [pc, #8]	; (b4bb0 <network_is_on+0xc>)
   b4ba8:	681b      	ldr	r3, [r3, #0]
   b4baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4bac:	9301      	str	r3, [sp, #4]
   b4bae:	bd08      	pop	{r3, pc}
   b4bb0:	00030240 	.word	0x00030240

000b4bb4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4bb4:	b508      	push	{r3, lr}
   b4bb6:	4b02      	ldr	r3, [pc, #8]	; (b4bc0 <network_is_off+0xc>)
   b4bb8:	681b      	ldr	r3, [r3, #0]
   b4bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4bbc:	9301      	str	r3, [sp, #4]
   b4bbe:	bd08      	pop	{r3, pc}
   b4bc0:	00030240 	.word	0x00030240

000b4bc4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4bc4:	b508      	push	{r3, lr}
   b4bc6:	4b02      	ldr	r3, [pc, #8]	; (b4bd0 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4bc8:	681b      	ldr	r3, [r3, #0]
   b4bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4bcc:	9301      	str	r3, [sp, #4]
   b4bce:	bd08      	pop	{r3, pc}
   b4bd0:	00030244 	.word	0x00030244

000b4bd4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4bd4:	b508      	push	{r3, lr}
   b4bd6:	4b02      	ldr	r3, [pc, #8]	; (b4be0 <malloc+0xc>)
   b4bd8:	681b      	ldr	r3, [r3, #0]
   b4bda:	681b      	ldr	r3, [r3, #0]
   b4bdc:	9301      	str	r3, [sp, #4]
   b4bde:	bd08      	pop	{r3, pc}
   b4be0:	0003021c 	.word	0x0003021c

000b4be4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4be4:	b508      	push	{r3, lr}
   b4be6:	4b02      	ldr	r3, [pc, #8]	; (b4bf0 <free+0xc>)
   b4be8:	681b      	ldr	r3, [r3, #0]
   b4bea:	685b      	ldr	r3, [r3, #4]
   b4bec:	9301      	str	r3, [sp, #4]
   b4bee:	bd08      	pop	{r3, pc}
   b4bf0:	0003021c 	.word	0x0003021c

000b4bf4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4bf4:	b508      	push	{r3, lr}
   b4bf6:	4b02      	ldr	r3, [pc, #8]	; (b4c00 <realloc+0xc>)
   b4bf8:	681b      	ldr	r3, [r3, #0]
   b4bfa:	689b      	ldr	r3, [r3, #8]
   b4bfc:	9301      	str	r3, [sp, #4]
   b4bfe:	bd08      	pop	{r3, pc}
   b4c00:	0003021c 	.word	0x0003021c

000b4c04 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b4c04:	b508      	push	{r3, lr}
   b4c06:	4b02      	ldr	r3, [pc, #8]	; (b4c10 <vsnprintf+0xc>)
   b4c08:	681b      	ldr	r3, [r3, #0]
   b4c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4c0c:	9301      	str	r3, [sp, #4]
   b4c0e:	bd08      	pop	{r3, pc}
   b4c10:	0003021c 	.word	0x0003021c

000b4c14 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b4c14:	b508      	push	{r3, lr}
   b4c16:	4b02      	ldr	r3, [pc, #8]	; (b4c20 <__errno+0xc>)
   b4c18:	681b      	ldr	r3, [r3, #0]
   b4c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4c1c:	9301      	str	r3, [sp, #4]
   b4c1e:	bd08      	pop	{r3, pc}
   b4c20:	0003021c 	.word	0x0003021c

000b4c24 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4c24:	b508      	push	{r3, lr}
   b4c26:	4b02      	ldr	r3, [pc, #8]	; (b4c30 <__assert_func+0xc>)
   b4c28:	681b      	ldr	r3, [r3, #0]
   b4c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4c2c:	9301      	str	r3, [sp, #4]
   b4c2e:	bd08      	pop	{r3, pc}
   b4c30:	0003021c 	.word	0x0003021c

000b4c34 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4c34:	b508      	push	{r3, lr}
   b4c36:	4b02      	ldr	r3, [pc, #8]	; (b4c40 <newlib_impure_ptr_callback+0xc>)
   b4c38:	681b      	ldr	r3, [r3, #0]
   b4c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4c3c:	9301      	str	r3, [sp, #4]
   b4c3e:	bd08      	pop	{r3, pc}
   b4c40:	0003021c 	.word	0x0003021c

000b4c44 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4c44:	2200      	movs	r2, #0
   b4c46:	6840      	ldr	r0, [r0, #4]
   b4c48:	4611      	mov	r1, r2
   b4c4a:	f7ff bf93 	b.w	b4b74 <network_listening>

000b4c4e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4c4e:	2200      	movs	r2, #0
   b4c50:	6840      	ldr	r0, [r0, #4]
   b4c52:	4611      	mov	r1, r2
   b4c54:	f7ff bf9e 	b.w	b4b94 <network_get_listen_timeout>

000b4c58 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4c58:	6840      	ldr	r0, [r0, #4]
   b4c5a:	2200      	movs	r2, #0
   b4c5c:	f7ff bf92 	b.w	b4b84 <network_set_listen_timeout>

000b4c60 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4c60:	6840      	ldr	r0, [r0, #4]
   b4c62:	2200      	movs	r2, #0
   b4c64:	f081 0101 	eor.w	r1, r1, #1
   b4c68:	f7ff bf7c 	b.w	b4b64 <network_listen>

000b4c6c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4c6c:	2300      	movs	r3, #0
   b4c6e:	6840      	ldr	r0, [r0, #4]
   b4c70:	461a      	mov	r2, r3
   b4c72:	4619      	mov	r1, r3
   b4c74:	f7ff bf6e 	b.w	b4b54 <network_off>

000b4c78 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4c78:	2300      	movs	r3, #0
   b4c7a:	6840      	ldr	r0, [r0, #4]
   b4c7c:	461a      	mov	r2, r3
   b4c7e:	4619      	mov	r1, r3
   b4c80:	f7ff bf60 	b.w	b4b44 <network_on>

000b4c84 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4c84:	2200      	movs	r2, #0
   b4c86:	6840      	ldr	r0, [r0, #4]
   b4c88:	4611      	mov	r1, r2
   b4c8a:	f7ff bf53 	b.w	b4b34 <network_ready>

000b4c8e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4c8e:	2200      	movs	r2, #0
   b4c90:	6840      	ldr	r0, [r0, #4]
   b4c92:	4611      	mov	r1, r2
   b4c94:	f7ff bf3e 	b.w	b4b14 <network_connecting>

000b4c98 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4c98:	6840      	ldr	r0, [r0, #4]
   b4c9a:	2200      	movs	r2, #0
   b4c9c:	2102      	movs	r1, #2
   b4c9e:	f7ff bf41 	b.w	b4b24 <network_disconnect>

000b4ca2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4ca2:	2300      	movs	r3, #0
   b4ca4:	6840      	ldr	r0, [r0, #4]
   b4ca6:	461a      	mov	r2, r3
   b4ca8:	f7ff bf2c 	b.w	b4b04 <network_connect>

000b4cac <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4cac:	4b02      	ldr	r3, [pc, #8]	; (b4cb8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4cae:	2203      	movs	r2, #3
   b4cb0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4cb2:	4a02      	ldr	r2, [pc, #8]	; (b4cbc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4cb4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4cb6:	4770      	bx	lr
   b4cb8:	2003e6b8 	.word	0x2003e6b8
   b4cbc:	000b5e38 	.word	0x000b5e38

000b4cc0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b4cc0:	b510      	push	{r4, lr}
   b4cc2:	4604      	mov	r4, r0
   b4cc4:	4608      	mov	r0, r1
{
    _spi = spi;
   b4cc6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b4cc8:	f7ff feb0 	bl	b4a2c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b4ccc:	2300      	movs	r3, #0
   b4cce:	6063      	str	r3, [r4, #4]
}
   b4cd0:	4620      	mov	r0, r4
   b4cd2:	bd10      	pop	{r4, pc}

000b4cd4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4cd4:	4b05      	ldr	r3, [pc, #20]	; (b4cec <_GLOBAL__sub_I_System+0x18>)
   b4cd6:	2202      	movs	r2, #2
   b4cd8:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4cda:	4b05      	ldr	r3, [pc, #20]	; (b4cf0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4cdc:	4a05      	ldr	r2, [pc, #20]	; (b4cf4 <_GLOBAL__sub_I_System+0x20>)
   b4cde:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4ce0:	2000      	movs	r0, #0
   b4ce2:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4ce6:	f7ff bee9 	b.w	b4abc <set_system_mode>
   b4cea:	bf00      	nop
   b4cec:	2003e6cc 	.word	0x2003e6cc
   b4cf0:	2003e6c0 	.word	0x2003e6c0
   b4cf4:	ffff0000 	.word	0xffff0000

000b4cf8 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b4cf8:	b510      	push	{r4, lr}
   b4cfa:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b4cfc:	f000 fe98 	bl	b5a30 <strlen>
   b4d00:	3801      	subs	r0, #1
   b4d02:	1823      	adds	r3, r4, r0
   b4d04:	4620      	mov	r0, r4
	while(i<j){
   b4d06:	4283      	cmp	r3, r0
   b4d08:	d906      	bls.n	b4d18 <_Z11str_reversePc+0x20>
		c = *i;
   b4d0a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b4d0c:	7819      	ldrb	r1, [r3, #0]
   b4d0e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b4d12:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b4d16:	e7f6      	b.n	b4d06 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b4d18:	bd10      	pop	{r4, pc}

000b4d1a <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b4d1a:	b570      	push	{r4, r5, r6, lr}
   b4d1c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b4d1e:	1e91      	subs	r1, r2, #2
   b4d20:	2922      	cmp	r1, #34	; 0x22
   b4d22:	d81d      	bhi.n	b4d60 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b4d24:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b4d26:	b930      	cbnz	r0, b4d36 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b4d28:	4423      	add	r3, r4
            *ptr++ = '0';
   b4d2a:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b4d2c:	429d      	cmp	r5, r3
   b4d2e:	d210      	bcs.n	b4d52 <ultoa+0x38>
            *ptr++ = '0';
   b4d30:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b4d34:	e7fa      	b.n	b4d2c <ultoa+0x12>
            result.quot = a/radix;
   b4d36:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b4d3a:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b4d3e:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b4d40:	2809      	cmp	r0, #9
                *ptr += '0';
   b4d42:	bf94      	ite	ls
   b4d44:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b4d46:	3157      	addhi	r1, #87	; 0x57
   b4d48:	b2c9      	uxtb	r1, r1
   b4d4a:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b4d4e:	4630      	mov	r0, r6
	while(a){
   b4d50:	e7e9      	b.n	b4d26 <ultoa+0xc>

	*ptr = '\0';
   b4d52:	2300      	movs	r3, #0
	str_reverse(buffer);
   b4d54:	4620      	mov	r0, r4
	*ptr = '\0';
   b4d56:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b4d58:	f7ff ffce 	bl	b4cf8 <_Z11str_reversePc>
	return buffer;
   b4d5c:	4620      	mov	r0, r4
}
   b4d5e:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b4d60:	2000      	movs	r0, #0
   b4d62:	e7fc      	b.n	b4d5e <ultoa+0x44>

000b4d64 <utoa>:
		ultoa(a, buffer, radix);
	}
	return buffer;
}

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   b4d64:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   b4d66:	2301      	movs	r3, #1
   b4d68:	f7ff ffd7 	bl	b4d1a <ultoa>
}
   b4d6c:	bd08      	pop	{r3, pc}

000b4d6e <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b4d6e:	b510      	push	{r4, lr}
   b4d70:	4604      	mov	r4, r0
{
	free(buffer);
   b4d72:	6800      	ldr	r0, [r0, #0]
   b4d74:	f7ff ff36 	bl	b4be4 <free>
}
   b4d78:	4620      	mov	r0, r4
   b4d7a:	bd10      	pop	{r4, pc}

000b4d7c <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b4d7c:	b510      	push	{r4, lr}
   b4d7e:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b4d80:	6800      	ldr	r0, [r0, #0]
   b4d82:	b108      	cbz	r0, b4d88 <_ZN6String10invalidateEv+0xc>
   b4d84:	f7ff ff2e 	bl	b4be4 <free>
	buffer = NULL;
   b4d88:	2300      	movs	r3, #0
	capacity = len = 0;
   b4d8a:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b4d8e:	6023      	str	r3, [r4, #0]
}
   b4d90:	bd10      	pop	{r4, pc}

000b4d92 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b4d92:	b538      	push	{r3, r4, r5, lr}
   b4d94:	4604      	mov	r4, r0
   b4d96:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b4d98:	6800      	ldr	r0, [r0, #0]
   b4d9a:	3101      	adds	r1, #1
   b4d9c:	f7ff ff2a 	bl	b4bf4 <realloc>
	if (newbuffer) {
   b4da0:	b110      	cbz	r0, b4da8 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b4da2:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b4da6:	2001      	movs	r0, #1
	}
	return 0;
}
   b4da8:	bd38      	pop	{r3, r4, r5, pc}

000b4daa <_ZN6String7reserveEj>:
{
   b4daa:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b4dac:	6803      	ldr	r3, [r0, #0]
{
   b4dae:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b4db0:	b123      	cbz	r3, b4dbc <_ZN6String7reserveEj+0x12>
   b4db2:	6843      	ldr	r3, [r0, #4]
   b4db4:	428b      	cmp	r3, r1
   b4db6:	d301      	bcc.n	b4dbc <_ZN6String7reserveEj+0x12>
   b4db8:	2001      	movs	r0, #1
}
   b4dba:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b4dbc:	4620      	mov	r0, r4
   b4dbe:	f7ff ffe8 	bl	b4d92 <_ZN6String12changeBufferEj>
   b4dc2:	2800      	cmp	r0, #0
   b4dc4:	d0f9      	beq.n	b4dba <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b4dc6:	68a3      	ldr	r3, [r4, #8]
   b4dc8:	2b00      	cmp	r3, #0
   b4dca:	d1f5      	bne.n	b4db8 <_ZN6String7reserveEj+0xe>
   b4dcc:	6822      	ldr	r2, [r4, #0]
   b4dce:	7013      	strb	r3, [r2, #0]
   b4dd0:	e7f2      	b.n	b4db8 <_ZN6String7reserveEj+0xe>

000b4dd2 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b4dd2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4dd4:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b4dd6:	4611      	mov	r1, r2
   b4dd8:	9201      	str	r2, [sp, #4]
{
   b4dda:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b4ddc:	f7ff ffe5 	bl	b4daa <_ZN6String7reserveEj>
   b4de0:	9a01      	ldr	r2, [sp, #4]
   b4de2:	b928      	cbnz	r0, b4df0 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b4de4:	4620      	mov	r0, r4
   b4de6:	f7ff ffc9 	bl	b4d7c <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b4dea:	4620      	mov	r0, r4
   b4dec:	b003      	add	sp, #12
   b4dee:	bd30      	pop	{r4, r5, pc}
	len = length;
   b4df0:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b4df2:	4629      	mov	r1, r5
   b4df4:	6820      	ldr	r0, [r4, #0]
   b4df6:	f000 fdcf 	bl	b5998 <memcpy>
	buffer[len] = 0;
   b4dfa:	6822      	ldr	r2, [r4, #0]
   b4dfc:	68a3      	ldr	r3, [r4, #8]
   b4dfe:	2100      	movs	r1, #0
   b4e00:	54d1      	strb	r1, [r2, r3]
	return *this;
   b4e02:	e7f2      	b.n	b4dea <_ZN6String4copyEPKcj+0x18>

000b4e04 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b4e04:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b4e06:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b4e08:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b4e0c:	4604      	mov	r4, r0
	len = 0;
   b4e0e:	6083      	str	r3, [r0, #8]
	flags = 0;
   b4e10:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b4e12:	b141      	cbz	r1, b4e26 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b4e14:	4608      	mov	r0, r1
   b4e16:	9101      	str	r1, [sp, #4]
   b4e18:	f000 fe0a 	bl	b5a30 <strlen>
   b4e1c:	9901      	ldr	r1, [sp, #4]
   b4e1e:	4602      	mov	r2, r0
   b4e20:	4620      	mov	r0, r4
   b4e22:	f7ff ffd6 	bl	b4dd2 <_ZN6String4copyEPKcj>
}
   b4e26:	4620      	mov	r0, r4
   b4e28:	b002      	add	sp, #8
   b4e2a:	bd10      	pop	{r4, pc}

000b4e2c <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b4e2c:	b538      	push	{r3, r4, r5, lr}
   b4e2e:	4605      	mov	r5, r0
	if (buffer) {
   b4e30:	6800      	ldr	r0, [r0, #0]
{
   b4e32:	460c      	mov	r4, r1
	if (buffer) {
   b4e34:	b168      	cbz	r0, b4e52 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b4e36:	686a      	ldr	r2, [r5, #4]
   b4e38:	688b      	ldr	r3, [r1, #8]
   b4e3a:	429a      	cmp	r2, r3
   b4e3c:	d307      	bcc.n	b4e4e <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b4e3e:	6809      	ldr	r1, [r1, #0]
   b4e40:	f000 fdee 	bl	b5a20 <strcpy>
			len = rhs.len;
   b4e44:	68a3      	ldr	r3, [r4, #8]
   b4e46:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b4e48:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b4e4a:	60a3      	str	r3, [r4, #8]
}
   b4e4c:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b4e4e:	f7ff fec9 	bl	b4be4 <free>
	buffer = rhs.buffer;
   b4e52:	6823      	ldr	r3, [r4, #0]
   b4e54:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b4e56:	6863      	ldr	r3, [r4, #4]
   b4e58:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b4e5a:	68a3      	ldr	r3, [r4, #8]
   b4e5c:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b4e5e:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b4e60:	e9c4 3300 	strd	r3, r3, [r4]
   b4e64:	e7f1      	b.n	b4e4a <_ZN6String4moveERS_+0x1e>

000b4e66 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   b4e66:	4288      	cmp	r0, r1
{
   b4e68:	b510      	push	{r4, lr}
   b4e6a:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   b4e6c:	d001      	beq.n	b4e72 <_ZN6StringaSEOS_+0xc>
   b4e6e:	f7ff ffdd 	bl	b4e2c <_ZN6String4moveERS_>
	return *this;
}
   b4e72:	4620      	mov	r0, r4
   b4e74:	bd10      	pop	{r4, pc}

000b4e76 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b4e76:	b513      	push	{r0, r1, r4, lr}
   b4e78:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b4e7a:	b159      	cbz	r1, b4e94 <_ZN6StringaSEPKc+0x1e>
   b4e7c:	4608      	mov	r0, r1
   b4e7e:	9101      	str	r1, [sp, #4]
   b4e80:	f000 fdd6 	bl	b5a30 <strlen>
   b4e84:	9901      	ldr	r1, [sp, #4]
   b4e86:	4602      	mov	r2, r0
   b4e88:	4620      	mov	r0, r4
   b4e8a:	f7ff ffa2 	bl	b4dd2 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b4e8e:	4620      	mov	r0, r4
   b4e90:	b002      	add	sp, #8
   b4e92:	bd10      	pop	{r4, pc}
	else invalidate();
   b4e94:	f7ff ff72 	bl	b4d7c <_ZN6String10invalidateEv>
   b4e98:	e7f9      	b.n	b4e8e <_ZN6StringaSEPKc+0x18>

000b4e9a <_ZN6StringC1Ejh>:
String::String(unsigned int value, unsigned char base)
   b4e9a:	b510      	push	{r4, lr}
   b4e9c:	4604      	mov	r4, r0
   b4e9e:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b4ea0:	2300      	movs	r3, #0
	capacity = 0;
   b4ea2:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b4ea6:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b4ea8:	7323      	strb	r3, [r4, #12]
String::String(unsigned int value, unsigned char base)
   b4eaa:	4608      	mov	r0, r1
	utoa(value, buf, base);
   b4eac:	a901      	add	r1, sp, #4
   b4eae:	f7ff ff59 	bl	b4d64 <utoa>
	*this = buf;
   b4eb2:	a901      	add	r1, sp, #4
   b4eb4:	4620      	mov	r0, r4
   b4eb6:	f7ff ffde 	bl	b4e76 <_ZN6StringaSEPKc>
}
   b4eba:	4620      	mov	r0, r4
   b4ebc:	b00a      	add	sp, #40	; 0x28
   b4ebe:	bd10      	pop	{r4, pc}

000b4ec0 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b4ec0:	b570      	push	{r4, r5, r6, lr}
   b4ec2:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b4ec4:	460e      	mov	r6, r1
   b4ec6:	b909      	cbnz	r1, b4ecc <_ZN6String6concatEPKcj+0xc>
   b4ec8:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b4eca:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b4ecc:	b16a      	cbz	r2, b4eea <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b4ece:	6884      	ldr	r4, [r0, #8]
   b4ed0:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b4ed2:	4621      	mov	r1, r4
   b4ed4:	f7ff ff69 	bl	b4daa <_ZN6String7reserveEj>
   b4ed8:	2800      	cmp	r0, #0
   b4eda:	d0f5      	beq.n	b4ec8 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b4edc:	6828      	ldr	r0, [r5, #0]
   b4ede:	68ab      	ldr	r3, [r5, #8]
   b4ee0:	4631      	mov	r1, r6
   b4ee2:	4418      	add	r0, r3
   b4ee4:	f000 fd9c 	bl	b5a20 <strcpy>
	len = newlen;
   b4ee8:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b4eea:	2001      	movs	r0, #1
   b4eec:	e7ed      	b.n	b4eca <_ZN6String6concatEPKcj+0xa>

000b4eee <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b4eee:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b4ef0:	2300      	movs	r3, #0
	buf[0] = c;
   b4ef2:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b4ef6:	2201      	movs	r2, #1
   b4ef8:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b4efa:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b4efe:	f7ff ffdf 	bl	b4ec0 <_ZN6String6concatEPKcj>
}
   b4f02:	b003      	add	sp, #12
   b4f04:	f85d fb04 	ldr.w	pc, [sp], #4

000b4f08 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   b4f08:	b558      	push	{r3, r4, r6, lr}
   b4f0a:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   b4f0c:	b12a      	cbz	r2, b4f1a <_ZNK6String8getBytesEPhjj+0x12>
   b4f0e:	b121      	cbz	r1, b4f1a <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   b4f10:	6884      	ldr	r4, [r0, #8]
   b4f12:	42a3      	cmp	r3, r4
   b4f14:	d302      	bcc.n	b4f1c <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   b4f16:	2300      	movs	r3, #0
   b4f18:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   b4f1a:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   b4f1c:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   b4f1e:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   b4f20:	6801      	ldr	r1, [r0, #0]
   b4f22:	4294      	cmp	r4, r2
   b4f24:	bf28      	it	cs
   b4f26:	4614      	movcs	r4, r2
   b4f28:	4419      	add	r1, r3
   b4f2a:	4622      	mov	r2, r4
   b4f2c:	4630      	mov	r0, r6
   b4f2e:	f000 fd87 	bl	b5a40 <strncpy>
	buf[n] = 0;
   b4f32:	2300      	movs	r3, #0
   b4f34:	5533      	strb	r3, [r6, r4]
   b4f36:	e7f0      	b.n	b4f1a <_ZNK6String8getBytesEPhjj+0x12>

000b4f38 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   b4f38:	6800      	ldr	r0, [r0, #0]
   b4f3a:	b108      	cbz	r0, b4f40 <_ZNK6String5toIntEv+0x8>
   b4f3c:	f000 bd28 	b.w	b5990 <atol>
	return 0;
}
   b4f40:	4770      	bx	lr
	...

000b4f44 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4f44:	4802      	ldr	r0, [pc, #8]	; (b4f50 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4f46:	2300      	movs	r3, #0
   b4f48:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4f4a:	f7ff bcdf 	b.w	b490c <os_mutex_recursive_create>
   b4f4e:	bf00      	nop
   b4f50:	2003e6d0 	.word	0x2003e6d0

000b4f54 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4f56:	4606      	mov	r6, r0
   b4f58:	460d      	mov	r5, r1
  size_t n = 0;
   b4f5a:	188f      	adds	r7, r1, r2
   b4f5c:	2400      	movs	r4, #0
  while (size--) {
   b4f5e:	42bd      	cmp	r5, r7
   b4f60:	d00c      	beq.n	b4f7c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b4f62:	6833      	ldr	r3, [r6, #0]
   b4f64:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4f68:	689b      	ldr	r3, [r3, #8]
   b4f6a:	4630      	mov	r0, r6
   b4f6c:	4798      	blx	r3
     if (chunk>=0)
   b4f6e:	1e03      	subs	r3, r0, #0
   b4f70:	db01      	blt.n	b4f76 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b4f72:	441c      	add	r4, r3
  while (size--) {
   b4f74:	e7f3      	b.n	b4f5e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b4f76:	2c00      	cmp	r4, #0
   b4f78:	bf08      	it	eq
   b4f7a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4f7c:	4620      	mov	r0, r4
   b4f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4f80 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b4f80:	b513      	push	{r0, r1, r4, lr}
   b4f82:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b4f84:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4f86:	b159      	cbz	r1, b4fa0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4f88:	9101      	str	r1, [sp, #4]
   b4f8a:	f000 fd51 	bl	b5a30 <strlen>
   b4f8e:	6823      	ldr	r3, [r4, #0]
   b4f90:	9901      	ldr	r1, [sp, #4]
   b4f92:	68db      	ldr	r3, [r3, #12]
   b4f94:	4602      	mov	r2, r0
   b4f96:	4620      	mov	r0, r4
    }
   b4f98:	b002      	add	sp, #8
   b4f9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4f9e:	4718      	bx	r3
    }
   b4fa0:	b002      	add	sp, #8
   b4fa2:	bd10      	pop	{r4, pc}

000b4fa4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b4fa4:	6803      	ldr	r3, [r0, #0]
   b4fa6:	689b      	ldr	r3, [r3, #8]
   b4fa8:	4718      	bx	r3

000b4faa <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b4faa:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b4fac:	210d      	movs	r1, #13
{
   b4fae:	4605      	mov	r5, r0
  size_t n = print('\r');
   b4fb0:	f7ff fff8 	bl	b4fa4 <_ZN5Print5printEc>
  n += print('\n');
   b4fb4:	210a      	movs	r1, #10
  size_t n = print('\r');
   b4fb6:	4604      	mov	r4, r0
  n += print('\n');
   b4fb8:	4628      	mov	r0, r5
   b4fba:	f7ff fff3 	bl	b4fa4 <_ZN5Print5printEc>
  return n;
}
   b4fbe:	4420      	add	r0, r4
   b4fc0:	bd38      	pop	{r3, r4, r5, pc}

000b4fc2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b4fc2:	b530      	push	{r4, r5, lr}
   b4fc4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b4fc6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b4fc8:	2a01      	cmp	r2, #1
  *str = '\0';
   b4fca:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b4fce:	bf98      	it	ls
   b4fd0:	220a      	movls	r2, #10
   b4fd2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4fd4:	460d      	mov	r5, r1
   b4fd6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b4fda:	fb01 5312 	mls	r3, r1, r2, r5
   b4fde:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4fe2:	2b09      	cmp	r3, #9
   b4fe4:	bf94      	ite	ls
   b4fe6:	3330      	addls	r3, #48	; 0x30
   b4fe8:	3337      	addhi	r3, #55	; 0x37
   b4fea:	b2db      	uxtb	r3, r3
  } while(n);
   b4fec:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4fee:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4ff2:	d9ef      	bls.n	b4fd4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4ff4:	4621      	mov	r1, r4
   b4ff6:	f7ff ffc3 	bl	b4f80 <_ZN5Print5writeEPKc>
}
   b4ffa:	b00b      	add	sp, #44	; 0x2c
   b4ffc:	bd30      	pop	{r4, r5, pc}

000b4ffe <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b4ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5002:	b086      	sub	sp, #24
   b5004:	af00      	add	r7, sp, #0
   b5006:	4605      	mov	r5, r0
   b5008:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b500a:	1d38      	adds	r0, r7, #4
   b500c:	2114      	movs	r1, #20
{
   b500e:	4614      	mov	r4, r2
    va_copy(args2, args);
   b5010:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b5012:	f7ff fdf7 	bl	b4c04 <vsnprintf>

    if (n<bufsize)
   b5016:	2813      	cmp	r0, #19
   b5018:	d80e      	bhi.n	b5038 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b501a:	1d39      	adds	r1, r7, #4
   b501c:	4628      	mov	r0, r5
   b501e:	f7ff ffaf 	bl	b4f80 <_ZN5Print5writeEPKc>
   b5022:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b5024:	b11e      	cbz	r6, b502e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b5026:	4628      	mov	r0, r5
   b5028:	f7ff ffbf 	bl	b4faa <_ZN5Print7printlnEv>
   b502c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b502e:	4620      	mov	r0, r4
   b5030:	3718      	adds	r7, #24
   b5032:	46bd      	mov	sp, r7
   b5034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b5038:	f100 0308 	add.w	r3, r0, #8
   b503c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b5040:	46e8      	mov	r8, sp
        char bigger[n+1];
   b5042:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b5046:	4622      	mov	r2, r4
   b5048:	1c41      	adds	r1, r0, #1
   b504a:	683b      	ldr	r3, [r7, #0]
   b504c:	4668      	mov	r0, sp
   b504e:	f7ff fdd9 	bl	b4c04 <vsnprintf>
  return write(str);
   b5052:	4669      	mov	r1, sp
   b5054:	4628      	mov	r0, r5
   b5056:	f7ff ff93 	bl	b4f80 <_ZN5Print5writeEPKc>
   b505a:	4604      	mov	r4, r0
   b505c:	46c5      	mov	sp, r8
   b505e:	e7e1      	b.n	b5024 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b5060 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b5060:	b510      	push	{r4, lr}
   b5062:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5064:	f7ff fc4a 	bl	b48fc <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b5068:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b506a:	6823      	ldr	r3, [r4, #0]
   b506c:	4620      	mov	r0, r4
   b506e:	695b      	ldr	r3, [r3, #20]
   b5070:	4798      	blx	r3
    if (c >= 0) return c;
   b5072:	2800      	cmp	r0, #0
   b5074:	da08      	bge.n	b5088 <_ZN6Stream9timedReadEv+0x28>
   b5076:	f7ff fc41 	bl	b48fc <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b507a:	68e3      	ldr	r3, [r4, #12]
   b507c:	1ac0      	subs	r0, r0, r3
   b507e:	68a3      	ldr	r3, [r4, #8]
   b5080:	4298      	cmp	r0, r3
   b5082:	d3f2      	bcc.n	b506a <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b5084:	f04f 30ff 	mov.w	r0, #4294967295
}
   b5088:	bd10      	pop	{r4, pc}
	...

000b508c <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   b508c:	b570      	push	{r4, r5, r6, lr}
   b508e:	460d      	mov	r5, r1
  String ret;
   b5090:	4909      	ldr	r1, [pc, #36]	; (b50b8 <_ZN6Stream15readStringUntilEc+0x2c>)
{
   b5092:	4604      	mov	r4, r0
   b5094:	4616      	mov	r6, r2
  String ret;
   b5096:	f7ff feb5 	bl	b4e04 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   b509a:	4628      	mov	r0, r5
   b509c:	f7ff ffe0 	bl	b5060 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   b50a0:	2800      	cmp	r0, #0
   b50a2:	db06      	blt.n	b50b2 <_ZN6Stream15readStringUntilEc+0x26>
   b50a4:	4286      	cmp	r6, r0
   b50a6:	d004      	beq.n	b50b2 <_ZN6Stream15readStringUntilEc+0x26>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   b50a8:	b2c1      	uxtb	r1, r0
   b50aa:	4620      	mov	r0, r4
   b50ac:	f7ff ff1f 	bl	b4eee <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   b50b0:	e7f3      	b.n	b509a <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   b50b2:	4620      	mov	r0, r4
   b50b4:	bd70      	pop	{r4, r5, r6, pc}
   b50b6:	bf00      	nop
   b50b8:	000b5d4d 	.word	0x000b5d4d

000b50bc <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b50bc:	2300      	movs	r3, #0
   b50be:	6840      	ldr	r0, [r0, #4]
   b50c0:	461a      	mov	r2, r3
   b50c2:	4619      	mov	r1, r3
   b50c4:	f7ff bd3e 	b.w	b4b44 <network_on>

000b50c8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b50c8:	4b01      	ldr	r3, [pc, #4]	; (b50d0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b50ca:	4a02      	ldr	r2, [pc, #8]	; (b50d4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b50cc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b50ce:	4770      	bx	lr
   b50d0:	2003e6d4 	.word	0x2003e6d4
   b50d4:	000b5e6c 	.word	0x000b5e6c

000b50d8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b50d8:	4b02      	ldr	r3, [pc, #8]	; (b50e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b50da:	681a      	ldr	r2, [r3, #0]
   b50dc:	4b02      	ldr	r3, [pc, #8]	; (b50e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b50de:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b50e0:	4770      	bx	lr
   b50e2:	bf00      	nop
   b50e4:	2002fae4 	.word	0x2002fae4
   b50e8:	2003e6d8 	.word	0x2003e6d8

000b50ec <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b50ec:	2100      	movs	r1, #0
   b50ee:	f7ff bced 	b.w	b4acc <system_delay_ms>
	...

000b50f4 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b50f4:	4b01      	ldr	r3, [pc, #4]	; (b50fc <_GLOBAL__sub_I_RGB+0x8>)
   b50f6:	2200      	movs	r2, #0
   b50f8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b50fa:	4770      	bx	lr
   b50fc:	2003e6dc 	.word	0x2003e6dc

000b5100 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5100:	4b01      	ldr	r3, [pc, #4]	; (b5108 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5102:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5104:	4770      	bx	lr
   b5106:	bf00      	nop
   b5108:	2002fae8 	.word	0x2002fae8

000b510c <serialEventRun>:
{
   b510c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b510e:	4b0b      	ldr	r3, [pc, #44]	; (b513c <serialEventRun+0x30>)
   b5110:	b143      	cbz	r3, b5124 <serialEventRun+0x18>
   b5112:	f000 f967 	bl	b53e4 <_Z16_fetch_usbserialv>
   b5116:	6803      	ldr	r3, [r0, #0]
   b5118:	691b      	ldr	r3, [r3, #16]
   b511a:	4798      	blx	r3
   b511c:	2800      	cmp	r0, #0
   b511e:	dd01      	ble.n	b5124 <serialEventRun+0x18>
        serialEvent();
   b5120:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5124:	4b06      	ldr	r3, [pc, #24]	; (b5140 <serialEventRun+0x34>)
   b5126:	b143      	cbz	r3, b513a <serialEventRun+0x2e>
   b5128:	f000 fbca 	bl	b58c0 <_Z22__fetch_global_Serial1v>
   b512c:	6803      	ldr	r3, [r0, #0]
   b512e:	691b      	ldr	r3, [r3, #16]
   b5130:	4798      	blx	r3
   b5132:	2800      	cmp	r0, #0
   b5134:	dd01      	ble.n	b513a <serialEventRun+0x2e>
        serialEvent1();
   b5136:	f3af 8000 	nop.w
}
   b513a:	bd08      	pop	{r3, pc}
	...

000b5144 <_post_loop>:
{
   b5144:	b508      	push	{r3, lr}
	serialEventRun();
   b5146:	f7ff ffe1 	bl	b510c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b514a:	f7ff fbd7 	bl	b48fc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b514e:	4b01      	ldr	r3, [pc, #4]	; (b5154 <_post_loop+0x10>)
   b5150:	6018      	str	r0, [r3, #0]
}
   b5152:	bd08      	pop	{r3, pc}
   b5154:	2003e740 	.word	0x2003e740

000b5158 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5158:	4805      	ldr	r0, [pc, #20]	; (b5170 <_Z33system_initialize_user_backup_ramv+0x18>)
   b515a:	4a06      	ldr	r2, [pc, #24]	; (b5174 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b515c:	4906      	ldr	r1, [pc, #24]	; (b5178 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b515e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5160:	1a12      	subs	r2, r2, r0
   b5162:	f000 fc19 	bl	b5998 <memcpy>
    __backup_sram_signature = signature;
   b5166:	4b05      	ldr	r3, [pc, #20]	; (b517c <_Z33system_initialize_user_backup_ramv+0x24>)
   b5168:	4a05      	ldr	r2, [pc, #20]	; (b5180 <_Z33system_initialize_user_backup_ramv+0x28>)
   b516a:	601a      	str	r2, [r3, #0]
}
   b516c:	bd08      	pop	{r3, pc}
   b516e:	bf00      	nop
   b5170:	2003f400 	.word	0x2003f400
   b5174:	2003f404 	.word	0x2003f404
   b5178:	000b6160 	.word	0x000b6160
   b517c:	2003f400 	.word	0x2003f400
   b5180:	9a271c1e 	.word	0x9a271c1e

000b5184 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5184:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5186:	2300      	movs	r3, #0
   b5188:	9300      	str	r3, [sp, #0]
   b518a:	461a      	mov	r2, r3
   b518c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5190:	f7ff fcae 	bl	b4af0 <system_ctrl_set_result>
}
   b5194:	b003      	add	sp, #12
   b5196:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b519c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b519c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b519e:	8843      	ldrh	r3, [r0, #2]
   b51a0:	2b0a      	cmp	r3, #10
   b51a2:	d008      	beq.n	b51b6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b51a4:	2b50      	cmp	r3, #80	; 0x50
   b51a6:	d10b      	bne.n	b51c0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b51a8:	4b09      	ldr	r3, [pc, #36]	; (b51d0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b51aa:	681b      	ldr	r3, [r3, #0]
   b51ac:	b14b      	cbz	r3, b51c2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b51ae:	b003      	add	sp, #12
   b51b0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b51b4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b51b6:	f7ff ffe5 	bl	b5184 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b51ba:	b003      	add	sp, #12
   b51bc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b51c0:	2300      	movs	r3, #0
   b51c2:	9300      	str	r3, [sp, #0]
   b51c4:	461a      	mov	r2, r3
   b51c6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b51ca:	f7ff fc91 	bl	b4af0 <system_ctrl_set_result>
}
   b51ce:	e7f4      	b.n	b51ba <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b51d0:	2003e6f0 	.word	0x2003e6f0

000b51d4 <module_user_init_hook>:
{
   b51d4:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b51d6:	4812      	ldr	r0, [pc, #72]	; (b5220 <module_user_init_hook+0x4c>)
   b51d8:	2100      	movs	r1, #0
   b51da:	f7ff fd2b 	bl	b4c34 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b51de:	4b11      	ldr	r3, [pc, #68]	; (b5224 <module_user_init_hook+0x50>)
   b51e0:	681a      	ldr	r2, [r3, #0]
   b51e2:	4b11      	ldr	r3, [pc, #68]	; (b5228 <module_user_init_hook+0x54>)
   b51e4:	429a      	cmp	r2, r3
   b51e6:	4b11      	ldr	r3, [pc, #68]	; (b522c <module_user_init_hook+0x58>)
   b51e8:	bf0c      	ite	eq
   b51ea:	2201      	moveq	r2, #1
   b51ec:	2200      	movne	r2, #0
   b51ee:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b51f0:	d001      	beq.n	b51f6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b51f2:	f7ff ffb1 	bl	b5158 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b51f6:	f7ff fb71 	bl	b48dc <HAL_RNG_GetRandomNumber>
   b51fa:	4604      	mov	r4, r0
    srand(seed);
   b51fc:	f000 fbe2 	bl	b59c4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5200:	4b0b      	ldr	r3, [pc, #44]	; (b5230 <module_user_init_hook+0x5c>)
   b5202:	b113      	cbz	r3, b520a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5204:	4620      	mov	r0, r4
   b5206:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b520a:	2100      	movs	r1, #0
   b520c:	4808      	ldr	r0, [pc, #32]	; (b5230 <module_user_init_hook+0x5c>)
   b520e:	f7ff fcd9 	bl	b4bc4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5212:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5216:	4807      	ldr	r0, [pc, #28]	; (b5234 <module_user_init_hook+0x60>)
   b5218:	2100      	movs	r1, #0
   b521a:	f7ff bc5f 	b.w	b4adc <system_ctrl_set_app_request_handler>
   b521e:	bf00      	nop
   b5220:	000b5101 	.word	0x000b5101
   b5224:	2003f400 	.word	0x2003f400
   b5228:	9a271c1e 	.word	0x9a271c1e
   b522c:	2003e6ec 	.word	0x2003e6ec
   b5230:	00000000 	.word	0x00000000
   b5234:	000b519d 	.word	0x000b519d

000b5238 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5238:	4770      	bx	lr

000b523a <_ZN9IPAddressD0Ev>:
   b523a:	b510      	push	{r4, lr}
   b523c:	2118      	movs	r1, #24
   b523e:	4604      	mov	r4, r0
   b5240:	f7fe ff29 	bl	b4096 <_ZdlPvj>
   b5244:	4620      	mov	r0, r4
   b5246:	bd10      	pop	{r4, pc}

000b5248 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5248:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b524a:	7d03      	ldrb	r3, [r0, #20]
   b524c:	2b06      	cmp	r3, #6
{
   b524e:	b08d      	sub	sp, #52	; 0x34
   b5250:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5252:	f100 0704 	add.w	r7, r0, #4
   b5256:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b525a:	d012      	beq.n	b5282 <_ZNK9IPAddress7printToER5Print+0x3a>
   b525c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5260:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5264:	220a      	movs	r2, #10
   b5266:	4630      	mov	r0, r6
   b5268:	f7ff feab 	bl	b4fc2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b526c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b526e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5270:	d019      	beq.n	b52a6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b5272:	2c00      	cmp	r4, #0
   b5274:	d0f4      	beq.n	b5260 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5276:	212e      	movs	r1, #46	; 0x2e
   b5278:	4630      	mov	r0, r6
   b527a:	f7ff fe93 	bl	b4fa4 <_ZN5Print5printEc>
   b527e:	4404      	add	r4, r0
   b5280:	e7ee      	b.n	b5260 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5282:	232f      	movs	r3, #47	; 0x2f
   b5284:	466a      	mov	r2, sp
   b5286:	4639      	mov	r1, r7
   b5288:	200a      	movs	r0, #10
		buf[0] = 0;
   b528a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b528e:	f7ff fb45 	bl	b491c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b5292:	4668      	mov	r0, sp
   b5294:	f000 fbcc 	bl	b5a30 <strlen>
   b5298:	6833      	ldr	r3, [r6, #0]
   b529a:	4602      	mov	r2, r0
   b529c:	68db      	ldr	r3, [r3, #12]
   b529e:	4669      	mov	r1, sp
   b52a0:	4630      	mov	r0, r6
   b52a2:	4798      	blx	r3
   b52a4:	4604      	mov	r4, r0
    }
    return n;
}
   b52a6:	4620      	mov	r0, r4
   b52a8:	b00d      	add	sp, #52	; 0x34
   b52aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b52ac <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b52ac:	b510      	push	{r4, lr}
   b52ae:	4b05      	ldr	r3, [pc, #20]	; (b52c4 <_ZN9IPAddressC1Ev+0x18>)
   b52b0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b52b2:	2211      	movs	r2, #17
   b52b4:	f840 3b04 	str.w	r3, [r0], #4
   b52b8:	2100      	movs	r1, #0
   b52ba:	f000 fb7b 	bl	b59b4 <memset>
}
   b52be:	4620      	mov	r0, r4
   b52c0:	bd10      	pop	{r4, pc}
   b52c2:	bf00      	nop
   b52c4:	000b5e94 	.word	0x000b5e94

000b52c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b52c8:	4603      	mov	r3, r0
   b52ca:	4a07      	ldr	r2, [pc, #28]	; (b52e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b52cc:	b510      	push	{r4, lr}
   b52ce:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b52d2:	f101 0210 	add.w	r2, r1, #16
   b52d6:	f851 4b04 	ldr.w	r4, [r1], #4
   b52da:	f843 4b04 	str.w	r4, [r3], #4
   b52de:	4291      	cmp	r1, r2
   b52e0:	d1f9      	bne.n	b52d6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b52e2:	780a      	ldrb	r2, [r1, #0]
   b52e4:	701a      	strb	r2, [r3, #0]
}
   b52e6:	bd10      	pop	{r4, pc}
   b52e8:	000b5e94 	.word	0x000b5e94

000b52ec <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b52ec:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b52ee:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b52f2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b52f6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b52fa:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b52fe:	2304      	movs	r3, #4
   b5300:	6041      	str	r1, [r0, #4]
   b5302:	7503      	strb	r3, [r0, #20]
}
   b5304:	bd10      	pop	{r4, pc}
	...

000b5308 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5308:	b507      	push	{r0, r1, r2, lr}
   b530a:	4b06      	ldr	r3, [pc, #24]	; (b5324 <_ZN9IPAddressC1EPKh+0x1c>)
   b530c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b530e:	78cb      	ldrb	r3, [r1, #3]
   b5310:	9300      	str	r3, [sp, #0]
   b5312:	788b      	ldrb	r3, [r1, #2]
   b5314:	784a      	ldrb	r2, [r1, #1]
   b5316:	7809      	ldrb	r1, [r1, #0]
   b5318:	f7ff ffe8 	bl	b52ec <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b531c:	b003      	add	sp, #12
   b531e:	f85d fb04 	ldr.w	pc, [sp], #4
   b5322:	bf00      	nop
   b5324:	000b5e94 	.word	0x000b5e94

000b5328 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5328:	7441      	strb	r1, [r0, #17]
}
   b532a:	4770      	bx	lr

000b532c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b532c:	4770      	bx	lr

000b532e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b532e:	4770      	bx	lr

000b5330 <_ZN9USBSerial4readEv>:
{
   b5330:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5332:	2100      	movs	r1, #0
   b5334:	7c00      	ldrb	r0, [r0, #16]
   b5336:	f7ff fba9 	bl	b4a8c <HAL_USB_USART_Receive_Data>
}
   b533a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b533e:	bd08      	pop	{r3, pc}

000b5340 <_ZN9USBSerial4peekEv>:
{
   b5340:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5342:	2101      	movs	r1, #1
   b5344:	7c00      	ldrb	r0, [r0, #16]
   b5346:	f7ff fba1 	bl	b4a8c <HAL_USB_USART_Receive_Data>
}
   b534a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b534e:	bd08      	pop	{r3, pc}

000b5350 <_ZN9USBSerial17availableForWriteEv>:
{
   b5350:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5352:	7c00      	ldrb	r0, [r0, #16]
   b5354:	f7ff fb92 	bl	b4a7c <HAL_USB_USART_Available_Data_For_Write>
}
   b5358:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b535c:	bd08      	pop	{r3, pc}

000b535e <_ZN9USBSerial9availableEv>:
{
   b535e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5360:	7c00      	ldrb	r0, [r0, #16]
   b5362:	f7ff fb83 	bl	b4a6c <HAL_USB_USART_Available_Data>
}
   b5366:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b536a:	bd08      	pop	{r3, pc}

000b536c <_ZN9USBSerial5writeEh>:
{
   b536c:	b513      	push	{r0, r1, r4, lr}
   b536e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5370:	7c00      	ldrb	r0, [r0, #16]
{
   b5372:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5374:	f7ff fb82 	bl	b4a7c <HAL_USB_USART_Available_Data_For_Write>
   b5378:	2800      	cmp	r0, #0
   b537a:	9901      	ldr	r1, [sp, #4]
   b537c:	dc01      	bgt.n	b5382 <_ZN9USBSerial5writeEh+0x16>
   b537e:	7c60      	ldrb	r0, [r4, #17]
   b5380:	b120      	cbz	r0, b538c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5382:	7c20      	ldrb	r0, [r4, #16]
   b5384:	f7ff fb8a 	bl	b4a9c <HAL_USB_USART_Send_Data>
   b5388:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b538c:	b002      	add	sp, #8
   b538e:	bd10      	pop	{r4, pc}

000b5390 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5390:	7c00      	ldrb	r0, [r0, #16]
   b5392:	f7ff bb8b 	b.w	b4aac <HAL_USB_USART_Flush_Data>

000b5396 <_ZN9USBSerialD0Ev>:
   b5396:	b510      	push	{r4, lr}
   b5398:	2114      	movs	r1, #20
   b539a:	4604      	mov	r4, r0
   b539c:	f7fe fe7b 	bl	b4096 <_ZdlPvj>
   b53a0:	4620      	mov	r0, r4
   b53a2:	bd10      	pop	{r4, pc}

000b53a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b53a4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b53a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b53aa:	4604      	mov	r4, r0
   b53ac:	4608      	mov	r0, r1
   b53ae:	2100      	movs	r1, #0
   b53b0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b53b4:	4b04      	ldr	r3, [pc, #16]	; (b53c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b53b6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b53b8:	2301      	movs	r3, #1
  _serial = serial;
   b53ba:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b53bc:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b53be:	4611      	mov	r1, r2
   b53c0:	f7ff fb44 	bl	b4a4c <HAL_USB_USART_Init>
}
   b53c4:	4620      	mov	r0, r4
   b53c6:	bd10      	pop	{r4, pc}
   b53c8:	000b5ea8 	.word	0x000b5ea8

000b53cc <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b53cc:	7c00      	ldrb	r0, [r0, #16]
   b53ce:	2200      	movs	r2, #0
   b53d0:	f7ff bb44 	b.w	b4a5c <HAL_USB_USART_Begin>

000b53d4 <_Z19acquireSerialBufferv>:
{
   b53d4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b53d6:	2214      	movs	r2, #20
{
   b53d8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b53da:	2100      	movs	r1, #0
   b53dc:	f000 faea 	bl	b59b4 <memset>
}
   b53e0:	4620      	mov	r0, r4
   b53e2:	bd10      	pop	{r4, pc}

000b53e4 <_Z16_fetch_usbserialv>:
{
   b53e4:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b53e6:	4c0f      	ldr	r4, [pc, #60]	; (b5424 <_Z16_fetch_usbserialv+0x40>)
{
   b53e8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b53ea:	a803      	add	r0, sp, #12
   b53ec:	f7ff fff2 	bl	b53d4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b53f0:	7821      	ldrb	r1, [r4, #0]
   b53f2:	f3bf 8f5b 	dmb	ish
   b53f6:	f011 0101 	ands.w	r1, r1, #1
   b53fa:	d10f      	bne.n	b541c <_Z16_fetch_usbserialv+0x38>
   b53fc:	4620      	mov	r0, r4
   b53fe:	9101      	str	r1, [sp, #4]
   b5400:	f7fe fe4b 	bl	b409a <__cxa_guard_acquire>
   b5404:	9901      	ldr	r1, [sp, #4]
   b5406:	b148      	cbz	r0, b541c <_Z16_fetch_usbserialv+0x38>
   b5408:	aa03      	add	r2, sp, #12
   b540a:	4807      	ldr	r0, [pc, #28]	; (b5428 <_Z16_fetch_usbserialv+0x44>)
   b540c:	f7ff ffca 	bl	b53a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5410:	4620      	mov	r0, r4
   b5412:	f7fe fe47 	bl	b40a4 <__cxa_guard_release>
   b5416:	4805      	ldr	r0, [pc, #20]	; (b542c <_Z16_fetch_usbserialv+0x48>)
   b5418:	f000 fab4 	bl	b5984 <atexit>
	return _usbserial;
}
   b541c:	4802      	ldr	r0, [pc, #8]	; (b5428 <_Z16_fetch_usbserialv+0x44>)
   b541e:	b008      	add	sp, #32
   b5420:	bd10      	pop	{r4, pc}
   b5422:	bf00      	nop
   b5424:	2003e6f4 	.word	0x2003e6f4
   b5428:	2003e6f8 	.word	0x2003e6f8
   b542c:	000b532d 	.word	0x000b532d

000b5430 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   b5430:	4700      	bx	r0
	...

000b5434 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   b5434:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   b5438:	2400      	movs	r4, #0
{
   b543a:	461d      	mov	r5, r3
   b543c:	460f      	mov	r7, r1
   b543e:	4690      	mov	r8, r2
   b5440:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   b5442:	f7ff fa3b 	bl	b48bc <HAL_Interrupts_Detach>
  if (priority >= 0) {
   b5446:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b5448:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   b544c:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   b5450:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   b5454:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   b5458:	bfa2      	ittt	ge
   b545a:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   b545e:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   b5462:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b5464:	4907      	ldr	r1, [pc, #28]	; (b5484 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   b5466:	9400      	str	r4, [sp, #0]
   b5468:	4643      	mov	r3, r8
   b546a:	463a      	mov	r2, r7
   b546c:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   b546e:	bfa8      	it	ge
   b5470:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   b5474:	f7ff fa1a 	bl	b48ac <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   b5478:	fab0 f080 	clz	r0, r0
   b547c:	0940      	lsrs	r0, r0, #5
   b547e:	b004      	add	sp, #16
   b5480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5484:	000b5431 	.word	0x000b5431

000b5488 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5488:	4770      	bx	lr

000b548a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b548a:	7441      	strb	r1, [r0, #17]
}
   b548c:	4770      	bx	lr

000b548e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b548e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5490:	7c00      	ldrb	r0, [r0, #16]
   b5492:	f7ff fa7b 	bl	b498c <hal_usart_available_data_for_write>
}
   b5496:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b549a:	bd08      	pop	{r3, pc}

000b549c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b549c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b549e:	7c00      	ldrb	r0, [r0, #16]
   b54a0:	f7ff fa4c 	bl	b493c <hal_usart_available>
}
   b54a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b54a8:	bd08      	pop	{r3, pc}

000b54aa <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b54aa:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b54ac:	7c00      	ldrb	r0, [r0, #16]
   b54ae:	f7ff fa55 	bl	b495c <hal_usart_peek>
}
   b54b2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b54b6:	bd08      	pop	{r3, pc}

000b54b8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b54b8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b54ba:	7c00      	ldrb	r0, [r0, #16]
   b54bc:	f7ff fa46 	bl	b494c <hal_usart_read>
}
   b54c0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b54c4:	bd08      	pop	{r3, pc}

000b54c6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b54c6:	7c00      	ldrb	r0, [r0, #16]
   b54c8:	f7ff ba50 	b.w	b496c <hal_usart_flush>

000b54cc <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b54cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b54ce:	7c45      	ldrb	r5, [r0, #17]
{
   b54d0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b54d2:	b12d      	cbz	r5, b54e0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b54d4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b54d6:	b003      	add	sp, #12
   b54d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b54dc:	f7ff ba26 	b.w	b492c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b54e0:	7c00      	ldrb	r0, [r0, #16]
   b54e2:	9101      	str	r1, [sp, #4]
   b54e4:	f7ff fa52 	bl	b498c <hal_usart_available_data_for_write>
   b54e8:	2800      	cmp	r0, #0
   b54ea:	9901      	ldr	r1, [sp, #4]
   b54ec:	dcf2      	bgt.n	b54d4 <_ZN11USARTSerial5writeEh+0x8>
}
   b54ee:	4628      	mov	r0, r5
   b54f0:	b003      	add	sp, #12
   b54f2:	bd30      	pop	{r4, r5, pc}

000b54f4 <_ZN11USARTSerialD0Ev>:
   b54f4:	b510      	push	{r4, lr}
   b54f6:	2114      	movs	r1, #20
   b54f8:	4604      	mov	r4, r0
   b54fa:	f7fe fdcc 	bl	b4096 <_ZdlPvj>
   b54fe:	4620      	mov	r0, r4
   b5500:	bd10      	pop	{r4, pc}
	...

000b5504 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5504:	b510      	push	{r4, lr}
   b5506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b550a:	4604      	mov	r4, r0
   b550c:	4608      	mov	r0, r1
   b550e:	4611      	mov	r1, r2
   b5510:	2200      	movs	r2, #0
   b5512:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5516:	4b04      	ldr	r3, [pc, #16]	; (b5528 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5518:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b551a:	2301      	movs	r3, #1
  _serial = serial;
   b551c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b551e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5520:	f7ff fa44 	bl	b49ac <hal_usart_init_ex>
}
   b5524:	4620      	mov	r0, r4
   b5526:	bd10      	pop	{r4, pc}
   b5528:	000b5ed8 	.word	0x000b5ed8

000b552c <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b552c:	7c00      	ldrb	r0, [r0, #16]
   b552e:	2300      	movs	r3, #0
   b5530:	f7ff ba34 	b.w	b499c <hal_usart_begin_config>

000b5534 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b5534:	2200      	movs	r2, #0
   b5536:	f7ff bff9 	b.w	b552c <_ZN11USARTSerial5beginEmm>

000b553a <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b553a:	4770      	bx	lr

000b553c <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b553c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b553e:	4606      	mov	r6, r0
   b5540:	4615      	mov	r5, r2
   b5542:	460c      	mov	r4, r1
   b5544:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5546:	42bc      	cmp	r4, r7
   b5548:	d006      	beq.n	b5558 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b554a:	6833      	ldr	r3, [r6, #0]
   b554c:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5550:	689b      	ldr	r3, [r3, #8]
   b5552:	4630      	mov	r0, r6
   b5554:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5556:	e7f6      	b.n	b5546 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b5558:	4628      	mov	r0, r5
   b555a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b555c <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b555c:	7c00      	ldrb	r0, [r0, #16]
   b555e:	2200      	movs	r2, #0
   b5560:	f7ff ba2c 	b.w	b49bc <hal_i2c_write>

000b5564 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b5564:	7c00      	ldrb	r0, [r0, #16]
   b5566:	2100      	movs	r1, #0
   b5568:	f7ff ba30 	b.w	b49cc <hal_i2c_available>

000b556c <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b556c:	7c00      	ldrb	r0, [r0, #16]
   b556e:	2100      	movs	r1, #0
   b5570:	f7ff ba34 	b.w	b49dc <hal_i2c_read>

000b5574 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b5574:	7c00      	ldrb	r0, [r0, #16]
   b5576:	2100      	movs	r1, #0
   b5578:	f7ff ba38 	b.w	b49ec <hal_i2c_peek>

000b557c <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b557c:	7c00      	ldrb	r0, [r0, #16]
   b557e:	2100      	movs	r1, #0
   b5580:	f7ff ba3c 	b.w	b49fc <hal_i2c_flush>

000b5584 <_ZN7TwoWireD0Ev>:
   b5584:	b510      	push	{r4, lr}
   b5586:	2114      	movs	r1, #20
   b5588:	4604      	mov	r4, r0
   b558a:	f7fe fd84 	bl	b4096 <_ZdlPvj>
   b558e:	4620      	mov	r0, r4
   b5590:	bd10      	pop	{r4, pc}
	...

000b5594 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5594:	b510      	push	{r4, lr}
   b5596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b559a:	4604      	mov	r4, r0
   b559c:	4608      	mov	r0, r1
   b559e:	2100      	movs	r1, #0
   b55a0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b55a4:	4b03      	ldr	r3, [pc, #12]	; (b55b4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b55a6:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b55a8:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b55aa:	4611      	mov	r1, r2
   b55ac:	f7ff fa36 	bl	b4a1c <hal_i2c_init>
}
   b55b0:	4620      	mov	r0, r4
   b55b2:	bd10      	pop	{r4, pc}
   b55b4:	000b5f08 	.word	0x000b5f08

000b55b8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b55b8:	2200      	movs	r2, #0
   b55ba:	6840      	ldr	r0, [r0, #4]
   b55bc:	4611      	mov	r1, r2
   b55be:	f7ff bab9 	b.w	b4b34 <network_ready>

000b55c2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b55c2:	2200      	movs	r2, #0
   b55c4:	6840      	ldr	r0, [r0, #4]
   b55c6:	4611      	mov	r1, r2
   b55c8:	f7ff bad4 	b.w	b4b74 <network_listening>

000b55cc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b55cc:	2200      	movs	r2, #0
   b55ce:	6840      	ldr	r0, [r0, #4]
   b55d0:	4611      	mov	r1, r2
   b55d2:	f7ff badf 	b.w	b4b94 <network_get_listen_timeout>

000b55d6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b55d6:	6840      	ldr	r0, [r0, #4]
   b55d8:	2200      	movs	r2, #0
   b55da:	f7ff bad3 	b.w	b4b84 <network_set_listen_timeout>

000b55de <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b55de:	6840      	ldr	r0, [r0, #4]
   b55e0:	2200      	movs	r2, #0
   b55e2:	f081 0101 	eor.w	r1, r1, #1
   b55e6:	f7ff babd 	b.w	b4b64 <network_listen>

000b55ea <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b55ea:	2300      	movs	r3, #0
   b55ec:	6840      	ldr	r0, [r0, #4]
   b55ee:	461a      	mov	r2, r3
   b55f0:	4619      	mov	r1, r3
   b55f2:	f7ff baaf 	b.w	b4b54 <network_off>

000b55f6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b55f6:	2200      	movs	r2, #0
   b55f8:	6840      	ldr	r0, [r0, #4]
   b55fa:	4611      	mov	r1, r2
   b55fc:	f7ff ba8a 	b.w	b4b14 <network_connecting>

000b5600 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5600:	6840      	ldr	r0, [r0, #4]
   b5602:	2200      	movs	r2, #0
   b5604:	2102      	movs	r1, #2
   b5606:	f7ff ba8d 	b.w	b4b24 <network_disconnect>

000b560a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b560a:	2300      	movs	r3, #0
   b560c:	6840      	ldr	r0, [r0, #4]
   b560e:	461a      	mov	r2, r3
   b5610:	f7ff ba78 	b.w	b4b04 <network_connect>

000b5614 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5614:	4b02      	ldr	r3, [pc, #8]	; (b5620 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b5616:	2204      	movs	r2, #4
   b5618:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b561a:	4a02      	ldr	r2, [pc, #8]	; (b5624 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b561c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b561e:	4770      	bx	lr
   b5620:	2003e70c 	.word	0x2003e70c
   b5624:	000b5f30 	.word	0x000b5f30

000b5628 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5628:	2300      	movs	r3, #0
   b562a:	6840      	ldr	r0, [r0, #4]
   b562c:	461a      	mov	r2, r3
   b562e:	f7ff ba69 	b.w	b4b04 <network_connect>

000b5632 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5632:	6840      	ldr	r0, [r0, #4]
   b5634:	2200      	movs	r2, #0
   b5636:	2102      	movs	r1, #2
   b5638:	f7ff ba74 	b.w	b4b24 <network_disconnect>

000b563c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b563c:	2200      	movs	r2, #0
   b563e:	6840      	ldr	r0, [r0, #4]
   b5640:	4611      	mov	r1, r2
   b5642:	f7ff ba67 	b.w	b4b14 <network_connecting>

000b5646 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5646:	2200      	movs	r2, #0
   b5648:	6840      	ldr	r0, [r0, #4]
   b564a:	4611      	mov	r1, r2
   b564c:	f7ff ba72 	b.w	b4b34 <network_ready>

000b5650 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5650:	2300      	movs	r3, #0
   b5652:	6840      	ldr	r0, [r0, #4]
   b5654:	461a      	mov	r2, r3
   b5656:	4619      	mov	r1, r3
   b5658:	f7ff ba74 	b.w	b4b44 <network_on>

000b565c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b565c:	2300      	movs	r3, #0
   b565e:	6840      	ldr	r0, [r0, #4]
   b5660:	461a      	mov	r2, r3
   b5662:	4619      	mov	r1, r3
   b5664:	f7ff ba76 	b.w	b4b54 <network_off>

000b5668 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5668:	6840      	ldr	r0, [r0, #4]
   b566a:	2100      	movs	r1, #0
   b566c:	f7ff ba9a 	b.w	b4ba4 <network_is_on>

000b5670 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5670:	6840      	ldr	r0, [r0, #4]
   b5672:	2100      	movs	r1, #0
   b5674:	f7ff ba9e 	b.w	b4bb4 <network_is_off>

000b5678 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5678:	6840      	ldr	r0, [r0, #4]
   b567a:	2200      	movs	r2, #0
   b567c:	f081 0101 	eor.w	r1, r1, #1
   b5680:	f7ff ba70 	b.w	b4b64 <network_listen>

000b5684 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5684:	6840      	ldr	r0, [r0, #4]
   b5686:	2200      	movs	r2, #0
   b5688:	f7ff ba7c 	b.w	b4b84 <network_set_listen_timeout>

000b568c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b568c:	2200      	movs	r2, #0
   b568e:	6840      	ldr	r0, [r0, #4]
   b5690:	4611      	mov	r1, r2
   b5692:	f7ff ba7f 	b.w	b4b94 <network_get_listen_timeout>

000b5696 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5696:	2200      	movs	r2, #0
   b5698:	6840      	ldr	r0, [r0, #4]
   b569a:	4611      	mov	r1, r2
   b569c:	f7ff ba6a 	b.w	b4b74 <network_listening>

000b56a0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b56a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b56a4:	b095      	sub	sp, #84	; 0x54
   b56a6:	4614      	mov	r4, r2
   b56a8:	460d      	mov	r5, r1
   b56aa:	4607      	mov	r7, r0
    IPAddress addr;
   b56ac:	f7ff fdfe 	bl	b52ac <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b56b0:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b56b2:	221c      	movs	r2, #28
   b56b4:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b56b6:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b56b8:	f000 f97c 	bl	b59b4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b56bc:	2340      	movs	r3, #64	; 0x40
   b56be:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b56c0:	4620      	mov	r0, r4
   b56c2:	466b      	mov	r3, sp
   b56c4:	aa0c      	add	r2, sp, #48	; 0x30
   b56c6:	2100      	movs	r1, #0
   b56c8:	f7ff f8c8 	bl	b485c <netdb_getaddrinfo>
    if (!r) {
   b56cc:	4604      	mov	r4, r0
   b56ce:	2800      	cmp	r0, #0
   b56d0:	d14b      	bne.n	b576a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b56d2:	4602      	mov	r2, r0
   b56d4:	2101      	movs	r1, #1
   b56d6:	6868      	ldr	r0, [r5, #4]
   b56d8:	f7ff fa2c 	bl	b4b34 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b56dc:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b56de:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b56e0:	4622      	mov	r2, r4
   b56e2:	6868      	ldr	r0, [r5, #4]
   b56e4:	f7ff fa26 	bl	b4b34 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b56e8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b56ea:	4681      	mov	r9, r0
        bool ok = false;
   b56ec:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b56ee:	2e00      	cmp	r6, #0
   b56f0:	d03b      	beq.n	b576a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b56f2:	2900      	cmp	r1, #0
   b56f4:	d139      	bne.n	b576a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b56f6:	6873      	ldr	r3, [r6, #4]
   b56f8:	2b02      	cmp	r3, #2
   b56fa:	d003      	beq.n	b5704 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b56fc:	2b0a      	cmp	r3, #10
   b56fe:	d011      	beq.n	b5724 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5700:	69f6      	ldr	r6, [r6, #28]
   b5702:	e7f4      	b.n	b56ee <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5704:	f1b8 0f00 	cmp.w	r8, #0
   b5708:	d0fa      	beq.n	b5700 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b570a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b570c:	a806      	add	r0, sp, #24
   b570e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5710:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5712:	f7ff fdf9 	bl	b5308 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5716:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5718:	1d3c      	adds	r4, r7, #4
   b571a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b571c:	682b      	ldr	r3, [r5, #0]
   b571e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5720:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5722:	e7ed      	b.n	b5700 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5724:	f1b9 0f00 	cmp.w	r9, #0
   b5728:	d0ea      	beq.n	b5700 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b572a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b572c:	2210      	movs	r2, #16
   b572e:	a801      	add	r0, sp, #4
   b5730:	f000 f940 	bl	b59b4 <memset>
                    a.v = 6;
   b5734:	2306      	movs	r3, #6
   b5736:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b573a:	ad01      	add	r5, sp, #4
   b573c:	f104 0308 	add.w	r3, r4, #8
   b5740:	3418      	adds	r4, #24
   b5742:	6818      	ldr	r0, [r3, #0]
   b5744:	6859      	ldr	r1, [r3, #4]
   b5746:	462a      	mov	r2, r5
   b5748:	c203      	stmia	r2!, {r0, r1}
   b574a:	3308      	adds	r3, #8
   b574c:	42a3      	cmp	r3, r4
   b574e:	4615      	mov	r5, r2
   b5750:	d1f7      	bne.n	b5742 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5752:	a901      	add	r1, sp, #4
   b5754:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5756:	ad07      	add	r5, sp, #28
   b5758:	f7ff fdb6 	bl	b52c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b575c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b575e:	1d3c      	adds	r4, r7, #4
   b5760:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5762:	682b      	ldr	r3, [r5, #0]
   b5764:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5766:	4649      	mov	r1, r9
   b5768:	e7ca      	b.n	b5700 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b576a:	9800      	ldr	r0, [sp, #0]
   b576c:	f7ff f86e 	bl	b484c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5770:	4638      	mov	r0, r7
   b5772:	b015      	add	sp, #84	; 0x54
   b5774:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5778 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5778:	4b02      	ldr	r3, [pc, #8]	; (b5784 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b577a:	4a03      	ldr	r2, [pc, #12]	; (b5788 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b577c:	601a      	str	r2, [r3, #0]
   b577e:	2200      	movs	r2, #0
   b5780:	605a      	str	r2, [r3, #4]

} // spark
   b5782:	4770      	bx	lr
   b5784:	2003e714 	.word	0x2003e714
   b5788:	000b5f6c 	.word	0x000b5f6c

000b578c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b578c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b578e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b5790:	d902      	bls.n	b5798 <pinAvailable+0xc>
    return false;
   b5792:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b5794:	b002      	add	sp, #8
   b5796:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b5798:	f1a0 030b 	sub.w	r3, r0, #11
   b579c:	2b02      	cmp	r3, #2
   b579e:	d81a      	bhi.n	b57d6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b57a0:	4c17      	ldr	r4, [pc, #92]	; (b5800 <pinAvailable+0x74>)
   b57a2:	7821      	ldrb	r1, [r4, #0]
   b57a4:	f3bf 8f5b 	dmb	ish
   b57a8:	f011 0101 	ands.w	r1, r1, #1
   b57ac:	d10b      	bne.n	b57c6 <pinAvailable+0x3a>
   b57ae:	4620      	mov	r0, r4
   b57b0:	9101      	str	r1, [sp, #4]
   b57b2:	f7fe fc72 	bl	b409a <__cxa_guard_acquire>
   b57b6:	9901      	ldr	r1, [sp, #4]
   b57b8:	b128      	cbz	r0, b57c6 <pinAvailable+0x3a>
   b57ba:	4812      	ldr	r0, [pc, #72]	; (b5804 <pinAvailable+0x78>)
   b57bc:	f7ff fa80 	bl	b4cc0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b57c0:	4620      	mov	r0, r4
   b57c2:	f7fe fc6f 	bl	b40a4 <__cxa_guard_release>
   b57c6:	4b0f      	ldr	r3, [pc, #60]	; (b5804 <pinAvailable+0x78>)
   b57c8:	7818      	ldrb	r0, [r3, #0]
   b57ca:	f7ff f937 	bl	b4a3c <hal_spi_is_enabled>
   b57ce:	2800      	cmp	r0, #0
   b57d0:	d1df      	bne.n	b5792 <pinAvailable+0x6>
  return true; // 'pin' is available
   b57d2:	2001      	movs	r0, #1
   b57d4:	e7de      	b.n	b5794 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b57d6:	2801      	cmp	r0, #1
   b57d8:	d809      	bhi.n	b57ee <pinAvailable+0x62>
   b57da:	f000 f8ad 	bl	b5938 <_Z19__fetch_global_Wirev>
   b57de:	2100      	movs	r1, #0
   b57e0:	7c00      	ldrb	r0, [r0, #16]
   b57e2:	f7ff f913 	bl	b4a0c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b57e6:	f080 0001 	eor.w	r0, r0, #1
   b57ea:	b2c0      	uxtb	r0, r0
   b57ec:	e7d2      	b.n	b5794 <pinAvailable+0x8>
   b57ee:	3809      	subs	r0, #9
   b57f0:	2801      	cmp	r0, #1
   b57f2:	d8ee      	bhi.n	b57d2 <pinAvailable+0x46>
   b57f4:	f000 f864 	bl	b58c0 <_Z22__fetch_global_Serial1v>
   b57f8:	7c00      	ldrb	r0, [r0, #16]
   b57fa:	f7ff f8bf 	bl	b497c <hal_usart_is_enabled>
   b57fe:	e7f2      	b.n	b57e6 <pinAvailable+0x5a>
   b5800:	2003e71c 	.word	0x2003e71c
   b5804:	2003e720 	.word	0x2003e720

000b5808 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5808:	2823      	cmp	r0, #35	; 0x23
{
   b580a:	b538      	push	{r3, r4, r5, lr}
   b580c:	4604      	mov	r4, r0
   b580e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5810:	d80a      	bhi.n	b5828 <pinMode+0x20>
   b5812:	29ff      	cmp	r1, #255	; 0xff
   b5814:	d008      	beq.n	b5828 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b5816:	f7ff ffb9 	bl	b578c <pinAvailable>
   b581a:	b128      	cbz	r0, b5828 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b581c:	4629      	mov	r1, r5
   b581e:	4620      	mov	r0, r4
}
   b5820:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b5824:	f7ff b82a 	b.w	b487c <HAL_Pin_Mode>
}
   b5828:	bd38      	pop	{r3, r4, r5, pc}

000b582a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b582a:	b538      	push	{r3, r4, r5, lr}
   b582c:	4604      	mov	r4, r0
   b582e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b5830:	f7ff f82c 	bl	b488c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b5834:	28ff      	cmp	r0, #255	; 0xff
   b5836:	d010      	beq.n	b585a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b5838:	2806      	cmp	r0, #6
   b583a:	d804      	bhi.n	b5846 <digitalWrite+0x1c>
   b583c:	234d      	movs	r3, #77	; 0x4d
   b583e:	fa23 f000 	lsr.w	r0, r3, r0
   b5842:	07c3      	lsls	r3, r0, #31
   b5844:	d409      	bmi.n	b585a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b5846:	4620      	mov	r0, r4
   b5848:	f7ff ffa0 	bl	b578c <pinAvailable>
   b584c:	b128      	cbz	r0, b585a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b584e:	4629      	mov	r1, r5
   b5850:	4620      	mov	r0, r4
}
   b5852:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b5856:	f7ff b821 	b.w	b489c <HAL_GPIO_Write>
}
   b585a:	bd38      	pop	{r3, r4, r5, pc}

000b585c <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b585c:	280d      	cmp	r0, #13
{
   b585e:	b510      	push	{r4, lr}
   b5860:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b5862:	bf9c      	itt	ls
   b5864:	340e      	addls	r4, #14
   b5866:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b5868:	4620      	mov	r0, r4
   b586a:	f7ff ff8f 	bl	b578c <pinAvailable>
   b586e:	b150      	cbz	r0, b5886 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b5870:	2103      	movs	r1, #3
   b5872:	4620      	mov	r0, r4
   b5874:	f7fe fffa 	bl	b486c <HAL_Validate_Pin_Function>
   b5878:	2803      	cmp	r0, #3
   b587a:	d104      	bne.n	b5886 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b587c:	4620      	mov	r0, r4
}
   b587e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b5882:	f7ff b823 	b.w	b48cc <hal_adc_read>
}
   b5886:	2000      	movs	r0, #0
   b5888:	bd10      	pop	{r4, pc}

000b588a <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b588a:	4770      	bx	lr

000b588c <_Z20acquireSerial1Bufferv>:
{
   b588c:	b538      	push	{r3, r4, r5, lr}
   b588e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b5890:	2514      	movs	r5, #20
   b5892:	462a      	mov	r2, r5
   b5894:	2100      	movs	r1, #0
   b5896:	f000 f88d 	bl	b59b4 <memset>
   b589a:	8025      	strh	r5, [r4, #0]
   b589c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b589e:	4907      	ldr	r1, [pc, #28]	; (b58bc <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b58a0:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b58a2:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b58a4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b58a6:	f000 f86b 	bl	b5980 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b58aa:	4904      	ldr	r1, [pc, #16]	; (b58bc <_Z20acquireSerial1Bufferv+0x30>)
    };
   b58ac:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b58ae:	4628      	mov	r0, r5
   b58b0:	f000 f866 	bl	b5980 <_ZnajRKSt9nothrow_t>
    };
   b58b4:	60e0      	str	r0, [r4, #12]
}
   b58b6:	4620      	mov	r0, r4
   b58b8:	bd38      	pop	{r3, r4, r5, pc}
   b58ba:	bf00      	nop
   b58bc:	000b5fa0 	.word	0x000b5fa0

000b58c0 <_Z22__fetch_global_Serial1v>:
{
   b58c0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b58c2:	4d0e      	ldr	r5, [pc, #56]	; (b58fc <_Z22__fetch_global_Serial1v+0x3c>)
   b58c4:	7829      	ldrb	r1, [r5, #0]
   b58c6:	f3bf 8f5b 	dmb	ish
   b58ca:	f011 0401 	ands.w	r4, r1, #1
{
   b58ce:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b58d0:	d111      	bne.n	b58f6 <_Z22__fetch_global_Serial1v+0x36>
   b58d2:	4628      	mov	r0, r5
   b58d4:	f7fe fbe1 	bl	b409a <__cxa_guard_acquire>
   b58d8:	b168      	cbz	r0, b58f6 <_Z22__fetch_global_Serial1v+0x36>
   b58da:	a801      	add	r0, sp, #4
   b58dc:	f7ff ffd6 	bl	b588c <_Z20acquireSerial1Bufferv>
   b58e0:	aa01      	add	r2, sp, #4
   b58e2:	4621      	mov	r1, r4
   b58e4:	4806      	ldr	r0, [pc, #24]	; (b5900 <_Z22__fetch_global_Serial1v+0x40>)
   b58e6:	f7ff fe0d 	bl	b5504 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b58ea:	4628      	mov	r0, r5
   b58ec:	f7fe fbda 	bl	b40a4 <__cxa_guard_release>
   b58f0:	4804      	ldr	r0, [pc, #16]	; (b5904 <_Z22__fetch_global_Serial1v+0x44>)
   b58f2:	f000 f847 	bl	b5984 <atexit>
    return serial1;
}
   b58f6:	4802      	ldr	r0, [pc, #8]	; (b5900 <_Z22__fetch_global_Serial1v+0x40>)
   b58f8:	b007      	add	sp, #28
   b58fa:	bd30      	pop	{r4, r5, pc}
   b58fc:	2003e728 	.word	0x2003e728
   b5900:	2003e72c 	.word	0x2003e72c
   b5904:	000b588b 	.word	0x000b588b

000b5908 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5908:	4770      	bx	lr
	...

000b590c <_Z17acquireWireBufferv>:
{
   b590c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b590e:	2520      	movs	r5, #32
   b5910:	2314      	movs	r3, #20
{
   b5912:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5914:	6003      	str	r3, [r0, #0]
   b5916:	6085      	str	r5, [r0, #8]
   b5918:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b591a:	4906      	ldr	r1, [pc, #24]	; (b5934 <_Z17acquireWireBufferv+0x28>)
   b591c:	4628      	mov	r0, r5
   b591e:	f000 f82f 	bl	b5980 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b5922:	4904      	ldr	r1, [pc, #16]	; (b5934 <_Z17acquireWireBufferv+0x28>)
	};
   b5924:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b5926:	4628      	mov	r0, r5
   b5928:	f000 f82a 	bl	b5980 <_ZnajRKSt9nothrow_t>
	};
   b592c:	60e0      	str	r0, [r4, #12]
}
   b592e:	4620      	mov	r0, r4
   b5930:	bd38      	pop	{r3, r4, r5, pc}
   b5932:	bf00      	nop
   b5934:	000b5fa0 	.word	0x000b5fa0

000b5938 <_Z19__fetch_global_Wirev>:
{
   b5938:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b593a:	4d0e      	ldr	r5, [pc, #56]	; (b5974 <_Z19__fetch_global_Wirev+0x3c>)
   b593c:	7829      	ldrb	r1, [r5, #0]
   b593e:	f3bf 8f5b 	dmb	ish
   b5942:	f011 0401 	ands.w	r4, r1, #1
{
   b5946:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5948:	d111      	bne.n	b596e <_Z19__fetch_global_Wirev+0x36>
   b594a:	4628      	mov	r0, r5
   b594c:	f7fe fba5 	bl	b409a <__cxa_guard_acquire>
   b5950:	b168      	cbz	r0, b596e <_Z19__fetch_global_Wirev+0x36>
   b5952:	a801      	add	r0, sp, #4
   b5954:	f7ff ffda 	bl	b590c <_Z17acquireWireBufferv>
   b5958:	aa01      	add	r2, sp, #4
   b595a:	4621      	mov	r1, r4
   b595c:	4806      	ldr	r0, [pc, #24]	; (b5978 <_Z19__fetch_global_Wirev+0x40>)
   b595e:	f7ff fe19 	bl	b5594 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b5962:	4628      	mov	r0, r5
   b5964:	f7fe fb9e 	bl	b40a4 <__cxa_guard_release>
   b5968:	4804      	ldr	r0, [pc, #16]	; (b597c <_Z19__fetch_global_Wirev+0x44>)
   b596a:	f000 f80b 	bl	b5984 <atexit>
	return wire;
}
   b596e:	4802      	ldr	r0, [pc, #8]	; (b5978 <_Z19__fetch_global_Wirev+0x40>)
   b5970:	b007      	add	sp, #28
   b5972:	bd30      	pop	{r4, r5, pc}
   b5974:	2003e744 	.word	0x2003e744
   b5978:	2003e748 	.word	0x2003e748
   b597c:	000b5909 	.word	0x000b5909

000b5980 <_ZnajRKSt9nothrow_t>:
   b5980:	f7fe bb87 	b.w	b4092 <_Znaj>

000b5984 <atexit>:
   b5984:	2300      	movs	r3, #0
   b5986:	4601      	mov	r1, r0
   b5988:	461a      	mov	r2, r3
   b598a:	4618      	mov	r0, r3
   b598c:	f000 b8f8 	b.w	b5b80 <__register_exitproc>

000b5990 <atol>:
   b5990:	220a      	movs	r2, #10
   b5992:	2100      	movs	r1, #0
   b5994:	f000 b8ea 	b.w	b5b6c <strtol>

000b5998 <memcpy>:
   b5998:	440a      	add	r2, r1
   b599a:	4291      	cmp	r1, r2
   b599c:	f100 33ff 	add.w	r3, r0, #4294967295
   b59a0:	d100      	bne.n	b59a4 <memcpy+0xc>
   b59a2:	4770      	bx	lr
   b59a4:	b510      	push	{r4, lr}
   b59a6:	f811 4b01 	ldrb.w	r4, [r1], #1
   b59aa:	f803 4f01 	strb.w	r4, [r3, #1]!
   b59ae:	4291      	cmp	r1, r2
   b59b0:	d1f9      	bne.n	b59a6 <memcpy+0xe>
   b59b2:	bd10      	pop	{r4, pc}

000b59b4 <memset>:
   b59b4:	4402      	add	r2, r0
   b59b6:	4603      	mov	r3, r0
   b59b8:	4293      	cmp	r3, r2
   b59ba:	d100      	bne.n	b59be <memset+0xa>
   b59bc:	4770      	bx	lr
   b59be:	f803 1b01 	strb.w	r1, [r3], #1
   b59c2:	e7f9      	b.n	b59b8 <memset+0x4>

000b59c4 <srand>:
   b59c4:	b538      	push	{r3, r4, r5, lr}
   b59c6:	4b10      	ldr	r3, [pc, #64]	; (b5a08 <srand+0x44>)
   b59c8:	681d      	ldr	r5, [r3, #0]
   b59ca:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b59cc:	4604      	mov	r4, r0
   b59ce:	b9b3      	cbnz	r3, b59fe <srand+0x3a>
   b59d0:	2018      	movs	r0, #24
   b59d2:	f7ff f8ff 	bl	b4bd4 <malloc>
   b59d6:	4602      	mov	r2, r0
   b59d8:	63a8      	str	r0, [r5, #56]	; 0x38
   b59da:	b920      	cbnz	r0, b59e6 <srand+0x22>
   b59dc:	4b0b      	ldr	r3, [pc, #44]	; (b5a0c <srand+0x48>)
   b59de:	480c      	ldr	r0, [pc, #48]	; (b5a10 <srand+0x4c>)
   b59e0:	2142      	movs	r1, #66	; 0x42
   b59e2:	f7ff f91f 	bl	b4c24 <__assert_func>
   b59e6:	490b      	ldr	r1, [pc, #44]	; (b5a14 <srand+0x50>)
   b59e8:	4b0b      	ldr	r3, [pc, #44]	; (b5a18 <srand+0x54>)
   b59ea:	e9c0 1300 	strd	r1, r3, [r0]
   b59ee:	4b0b      	ldr	r3, [pc, #44]	; (b5a1c <srand+0x58>)
   b59f0:	6083      	str	r3, [r0, #8]
   b59f2:	230b      	movs	r3, #11
   b59f4:	8183      	strh	r3, [r0, #12]
   b59f6:	2100      	movs	r1, #0
   b59f8:	2001      	movs	r0, #1
   b59fa:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b59fe:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5a00:	2200      	movs	r2, #0
   b5a02:	611c      	str	r4, [r3, #16]
   b5a04:	615a      	str	r2, [r3, #20]
   b5a06:	bd38      	pop	{r3, r4, r5, pc}
   b5a08:	2002fae8 	.word	0x2002fae8
   b5a0c:	000b5fa1 	.word	0x000b5fa1
   b5a10:	000b5fb8 	.word	0x000b5fb8
   b5a14:	abcd330e 	.word	0xabcd330e
   b5a18:	e66d1234 	.word	0xe66d1234
   b5a1c:	0005deec 	.word	0x0005deec

000b5a20 <strcpy>:
   b5a20:	4603      	mov	r3, r0
   b5a22:	f811 2b01 	ldrb.w	r2, [r1], #1
   b5a26:	f803 2b01 	strb.w	r2, [r3], #1
   b5a2a:	2a00      	cmp	r2, #0
   b5a2c:	d1f9      	bne.n	b5a22 <strcpy+0x2>
   b5a2e:	4770      	bx	lr

000b5a30 <strlen>:
   b5a30:	4603      	mov	r3, r0
   b5a32:	f813 2b01 	ldrb.w	r2, [r3], #1
   b5a36:	2a00      	cmp	r2, #0
   b5a38:	d1fb      	bne.n	b5a32 <strlen+0x2>
   b5a3a:	1a18      	subs	r0, r3, r0
   b5a3c:	3801      	subs	r0, #1
   b5a3e:	4770      	bx	lr

000b5a40 <strncpy>:
   b5a40:	b510      	push	{r4, lr}
   b5a42:	3901      	subs	r1, #1
   b5a44:	4603      	mov	r3, r0
   b5a46:	b132      	cbz	r2, b5a56 <strncpy+0x16>
   b5a48:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b5a4c:	f803 4b01 	strb.w	r4, [r3], #1
   b5a50:	3a01      	subs	r2, #1
   b5a52:	2c00      	cmp	r4, #0
   b5a54:	d1f7      	bne.n	b5a46 <strncpy+0x6>
   b5a56:	441a      	add	r2, r3
   b5a58:	2100      	movs	r1, #0
   b5a5a:	4293      	cmp	r3, r2
   b5a5c:	d100      	bne.n	b5a60 <strncpy+0x20>
   b5a5e:	bd10      	pop	{r4, pc}
   b5a60:	f803 1b01 	strb.w	r1, [r3], #1
   b5a64:	e7f9      	b.n	b5a5a <strncpy+0x1a>
	...

000b5a68 <_strtol_l.constprop.0>:
   b5a68:	2b01      	cmp	r3, #1
   b5a6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5a6e:	d001      	beq.n	b5a74 <_strtol_l.constprop.0+0xc>
   b5a70:	2b24      	cmp	r3, #36	; 0x24
   b5a72:	d906      	bls.n	b5a82 <_strtol_l.constprop.0+0x1a>
   b5a74:	f7ff f8ce 	bl	b4c14 <__errno>
   b5a78:	2316      	movs	r3, #22
   b5a7a:	6003      	str	r3, [r0, #0]
   b5a7c:	2000      	movs	r0, #0
   b5a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b5a82:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b5b68 <_strtol_l.constprop.0+0x100>
   b5a86:	460d      	mov	r5, r1
   b5a88:	462e      	mov	r6, r5
   b5a8a:	f815 4b01 	ldrb.w	r4, [r5], #1
   b5a8e:	f814 700c 	ldrb.w	r7, [r4, ip]
   b5a92:	f017 0708 	ands.w	r7, r7, #8
   b5a96:	d1f7      	bne.n	b5a88 <_strtol_l.constprop.0+0x20>
   b5a98:	2c2d      	cmp	r4, #45	; 0x2d
   b5a9a:	d132      	bne.n	b5b02 <_strtol_l.constprop.0+0x9a>
   b5a9c:	782c      	ldrb	r4, [r5, #0]
   b5a9e:	2701      	movs	r7, #1
   b5aa0:	1cb5      	adds	r5, r6, #2
   b5aa2:	2b00      	cmp	r3, #0
   b5aa4:	d05b      	beq.n	b5b5e <_strtol_l.constprop.0+0xf6>
   b5aa6:	2b10      	cmp	r3, #16
   b5aa8:	d109      	bne.n	b5abe <_strtol_l.constprop.0+0x56>
   b5aaa:	2c30      	cmp	r4, #48	; 0x30
   b5aac:	d107      	bne.n	b5abe <_strtol_l.constprop.0+0x56>
   b5aae:	782c      	ldrb	r4, [r5, #0]
   b5ab0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b5ab4:	2c58      	cmp	r4, #88	; 0x58
   b5ab6:	d14d      	bne.n	b5b54 <_strtol_l.constprop.0+0xec>
   b5ab8:	786c      	ldrb	r4, [r5, #1]
   b5aba:	2310      	movs	r3, #16
   b5abc:	3502      	adds	r5, #2
   b5abe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b5ac2:	f108 38ff 	add.w	r8, r8, #4294967295
   b5ac6:	f04f 0c00 	mov.w	ip, #0
   b5aca:	fbb8 f9f3 	udiv	r9, r8, r3
   b5ace:	4666      	mov	r6, ip
   b5ad0:	fb03 8a19 	mls	sl, r3, r9, r8
   b5ad4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b5ad8:	f1be 0f09 	cmp.w	lr, #9
   b5adc:	d816      	bhi.n	b5b0c <_strtol_l.constprop.0+0xa4>
   b5ade:	4674      	mov	r4, lr
   b5ae0:	42a3      	cmp	r3, r4
   b5ae2:	dd24      	ble.n	b5b2e <_strtol_l.constprop.0+0xc6>
   b5ae4:	f1bc 0f00 	cmp.w	ip, #0
   b5ae8:	db1e      	blt.n	b5b28 <_strtol_l.constprop.0+0xc0>
   b5aea:	45b1      	cmp	r9, r6
   b5aec:	d31c      	bcc.n	b5b28 <_strtol_l.constprop.0+0xc0>
   b5aee:	d101      	bne.n	b5af4 <_strtol_l.constprop.0+0x8c>
   b5af0:	45a2      	cmp	sl, r4
   b5af2:	db19      	blt.n	b5b28 <_strtol_l.constprop.0+0xc0>
   b5af4:	fb06 4603 	mla	r6, r6, r3, r4
   b5af8:	f04f 0c01 	mov.w	ip, #1
   b5afc:	f815 4b01 	ldrb.w	r4, [r5], #1
   b5b00:	e7e8      	b.n	b5ad4 <_strtol_l.constprop.0+0x6c>
   b5b02:	2c2b      	cmp	r4, #43	; 0x2b
   b5b04:	bf04      	itt	eq
   b5b06:	782c      	ldrbeq	r4, [r5, #0]
   b5b08:	1cb5      	addeq	r5, r6, #2
   b5b0a:	e7ca      	b.n	b5aa2 <_strtol_l.constprop.0+0x3a>
   b5b0c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b5b10:	f1be 0f19 	cmp.w	lr, #25
   b5b14:	d801      	bhi.n	b5b1a <_strtol_l.constprop.0+0xb2>
   b5b16:	3c37      	subs	r4, #55	; 0x37
   b5b18:	e7e2      	b.n	b5ae0 <_strtol_l.constprop.0+0x78>
   b5b1a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b5b1e:	f1be 0f19 	cmp.w	lr, #25
   b5b22:	d804      	bhi.n	b5b2e <_strtol_l.constprop.0+0xc6>
   b5b24:	3c57      	subs	r4, #87	; 0x57
   b5b26:	e7db      	b.n	b5ae0 <_strtol_l.constprop.0+0x78>
   b5b28:	f04f 3cff 	mov.w	ip, #4294967295
   b5b2c:	e7e6      	b.n	b5afc <_strtol_l.constprop.0+0x94>
   b5b2e:	f1bc 0f00 	cmp.w	ip, #0
   b5b32:	da05      	bge.n	b5b40 <_strtol_l.constprop.0+0xd8>
   b5b34:	2322      	movs	r3, #34	; 0x22
   b5b36:	6003      	str	r3, [r0, #0]
   b5b38:	4646      	mov	r6, r8
   b5b3a:	b942      	cbnz	r2, b5b4e <_strtol_l.constprop.0+0xe6>
   b5b3c:	4630      	mov	r0, r6
   b5b3e:	e79e      	b.n	b5a7e <_strtol_l.constprop.0+0x16>
   b5b40:	b107      	cbz	r7, b5b44 <_strtol_l.constprop.0+0xdc>
   b5b42:	4276      	negs	r6, r6
   b5b44:	2a00      	cmp	r2, #0
   b5b46:	d0f9      	beq.n	b5b3c <_strtol_l.constprop.0+0xd4>
   b5b48:	f1bc 0f00 	cmp.w	ip, #0
   b5b4c:	d000      	beq.n	b5b50 <_strtol_l.constprop.0+0xe8>
   b5b4e:	1e69      	subs	r1, r5, #1
   b5b50:	6011      	str	r1, [r2, #0]
   b5b52:	e7f3      	b.n	b5b3c <_strtol_l.constprop.0+0xd4>
   b5b54:	2430      	movs	r4, #48	; 0x30
   b5b56:	2b00      	cmp	r3, #0
   b5b58:	d1b1      	bne.n	b5abe <_strtol_l.constprop.0+0x56>
   b5b5a:	2308      	movs	r3, #8
   b5b5c:	e7af      	b.n	b5abe <_strtol_l.constprop.0+0x56>
   b5b5e:	2c30      	cmp	r4, #48	; 0x30
   b5b60:	d0a5      	beq.n	b5aae <_strtol_l.constprop.0+0x46>
   b5b62:	230a      	movs	r3, #10
   b5b64:	e7ab      	b.n	b5abe <_strtol_l.constprop.0+0x56>
   b5b66:	bf00      	nop
   b5b68:	000b6036 	.word	0x000b6036

000b5b6c <strtol>:
   b5b6c:	4613      	mov	r3, r2
   b5b6e:	460a      	mov	r2, r1
   b5b70:	4601      	mov	r1, r0
   b5b72:	4802      	ldr	r0, [pc, #8]	; (b5b7c <strtol+0x10>)
   b5b74:	6800      	ldr	r0, [r0, #0]
   b5b76:	f7ff bf77 	b.w	b5a68 <_strtol_l.constprop.0>
   b5b7a:	bf00      	nop
   b5b7c:	2002fae8 	.word	0x2002fae8

000b5b80 <__register_exitproc>:
   b5b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5b84:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b5c40 <__register_exitproc+0xc0>
   b5b88:	4606      	mov	r6, r0
   b5b8a:	f8d8 0000 	ldr.w	r0, [r8]
   b5b8e:	461f      	mov	r7, r3
   b5b90:	460d      	mov	r5, r1
   b5b92:	4691      	mov	r9, r2
   b5b94:	f000 f856 	bl	b5c44 <__retarget_lock_acquire_recursive>
   b5b98:	4b25      	ldr	r3, [pc, #148]	; (b5c30 <__register_exitproc+0xb0>)
   b5b9a:	681c      	ldr	r4, [r3, #0]
   b5b9c:	b934      	cbnz	r4, b5bac <__register_exitproc+0x2c>
   b5b9e:	4c25      	ldr	r4, [pc, #148]	; (b5c34 <__register_exitproc+0xb4>)
   b5ba0:	601c      	str	r4, [r3, #0]
   b5ba2:	4b25      	ldr	r3, [pc, #148]	; (b5c38 <__register_exitproc+0xb8>)
   b5ba4:	b113      	cbz	r3, b5bac <__register_exitproc+0x2c>
   b5ba6:	681b      	ldr	r3, [r3, #0]
   b5ba8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b5bac:	6863      	ldr	r3, [r4, #4]
   b5bae:	2b1f      	cmp	r3, #31
   b5bb0:	dd07      	ble.n	b5bc2 <__register_exitproc+0x42>
   b5bb2:	f8d8 0000 	ldr.w	r0, [r8]
   b5bb6:	f000 f847 	bl	b5c48 <__retarget_lock_release_recursive>
   b5bba:	f04f 30ff 	mov.w	r0, #4294967295
   b5bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b5bc2:	b34e      	cbz	r6, b5c18 <__register_exitproc+0x98>
   b5bc4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b5bc8:	b988      	cbnz	r0, b5bee <__register_exitproc+0x6e>
   b5bca:	4b1c      	ldr	r3, [pc, #112]	; (b5c3c <__register_exitproc+0xbc>)
   b5bcc:	b923      	cbnz	r3, b5bd8 <__register_exitproc+0x58>
   b5bce:	f8d8 0000 	ldr.w	r0, [r8]
   b5bd2:	f000 f838 	bl	b5c46 <__retarget_lock_release>
   b5bd6:	e7f0      	b.n	b5bba <__register_exitproc+0x3a>
   b5bd8:	f44f 7084 	mov.w	r0, #264	; 0x108
   b5bdc:	f7fe fffa 	bl	b4bd4 <malloc>
   b5be0:	2800      	cmp	r0, #0
   b5be2:	d0f4      	beq.n	b5bce <__register_exitproc+0x4e>
   b5be4:	2300      	movs	r3, #0
   b5be6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b5bea:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b5bee:	6863      	ldr	r3, [r4, #4]
   b5bf0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b5bf4:	2201      	movs	r2, #1
   b5bf6:	409a      	lsls	r2, r3
   b5bf8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b5bfc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b5c00:	4313      	orrs	r3, r2
   b5c02:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b5c06:	2e02      	cmp	r6, #2
   b5c08:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b5c0c:	bf02      	ittt	eq
   b5c0e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b5c12:	4313      	orreq	r3, r2
   b5c14:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b5c18:	6863      	ldr	r3, [r4, #4]
   b5c1a:	f8d8 0000 	ldr.w	r0, [r8]
   b5c1e:	1c5a      	adds	r2, r3, #1
   b5c20:	3302      	adds	r3, #2
   b5c22:	6062      	str	r2, [r4, #4]
   b5c24:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b5c28:	f000 f80e 	bl	b5c48 <__retarget_lock_release_recursive>
   b5c2c:	2000      	movs	r0, #0
   b5c2e:	e7c6      	b.n	b5bbe <__register_exitproc+0x3e>
   b5c30:	2003e7e8 	.word	0x2003e7e8
   b5c34:	2003e75c 	.word	0x2003e75c
   b5c38:	00000000 	.word	0x00000000
   b5c3c:	000b4bd5 	.word	0x000b4bd5
   b5c40:	2002fb4c 	.word	0x2002fb4c

000b5c44 <__retarget_lock_acquire_recursive>:
   b5c44:	4770      	bx	lr

000b5c46 <__retarget_lock_release>:
   b5c46:	4770      	bx	lr

000b5c48 <__retarget_lock_release_recursive>:
   b5c48:	4770      	bx	lr

000b5c4a <link_code_end>:
	...

000b5c4c <dynalib_user>:
   b5c4c:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b5c5c:	0000 0000 6542 6967 6e6e 6e69 2067 6f43     ....Beginning Co
   b5c6c:	6d6d 6e61 7364 0a20 4100 0d54 000a 7741     mmands ..AT...Aw
   b5c7c:	6961 6974 676e 5220 7065 796c 000a 6552     aiting Reply..Re
   b5c8c:	6c70 3a79 2520 0a73 4100 2b54 4441 5244     ply: %s..AT+ADDR
   b5c9c:	5345 3d53 6925 0a0d 4100 6177 7469 6e69     ESS=%i...Awaitin
   b5cac:	2067 6552 6c70 2079 7266 6d6f 6120 6464     g Reply from add
   b5cbc:	6572 7373 000a 6552 6c70 2079 6461 7264     ress..Reply addr
   b5ccc:	7365 3a73 2520 0a73 4100 2b54 454e 5754     ess: %s..AT+NETW
   b5cdc:	524f 494b 3d44 6925 0a0d 4100 6177 7469     ORKID=%i...Await
   b5cec:	6e69 2067 6552 6c70 2079 7266 6d6f 6e20     ing Reply from n
   b5cfc:	7465 6f77 6b72 6469 000a 6552 6c70 2079     etworkid..Reply 
   b5d0c:	656e 7774 726f 3a6b 2520 0a73 4100 2b54     network: %s..AT+
   b5d1c:	4441 5244 5345 3f53 0a0d 5200 7065 796c     ADDRESS?...Reply
   b5d2c:	6720 7465 6120 6464 6572 7373 203a 7325      get address: %s
   b5d3c:	000a 5441 4e2b 5445 4f57 4b52 4449 0d3f     ..AT+NETWORKID?.
   b5d4c:	000a 6552 6c70 2079 6567 2074 656e 7774     ..Reply get netw
   b5d5c:	726f 3a6b 2520 0a73 4100 2b54 5043 4e49     ork: %s..AT+CPIN
   b5d6c:	0d3f 000a 6552 6c70 2079 6567 2074 6170     ?...Reply get pa
   b5d7c:	7373 6f77 6472 203a 7325 000a 7741 6961     ssword: %s..Awai
   b5d8c:	6974 676e 4920 636e 6d6f 6e69 2067 654d     ting Incoming Me
   b5d9c:	7373 6761 0065 6e49 6f63 696d 676e 4d20     ssage.Incoming M
   b5dac:	7365 6173 6567 203b 7325 250a 0a73 7325     essage; %s.%s.%s
   b5dbc:	250a 0a73 7325 000a 6353 6e61 6420 6469     .%s.%s..Scan did
   b5dcc:	6e20 746f 7720 726f 0a6b 5300 6174 7472      not work..Start
   b5ddc:	6e69 2067 6954 656d 0a72 4100 2b54 4553     ing Timer..AT+SE
   b5dec:	444e 393d 3939 252c 2c69 7325 0a0d 5300     ND=999,%i,%s...S
   b5dfc:	6e65 0a74 4900 636e 6d6f 6e69 2067 654c     ent..Incoming Le
   b5e0c:	206e 6925 202c 6e49 6f63 696d 676e 6144     n %i, IncomingDa
   b5e1c:	6174 2520 0a69 4e00 7765 6156 206c 6925     ta %i..NewVal %i
   b5e2c:	000a 0000                                   ....

000b5e30 <_ZTVN5spark13EthernetClassE>:
	...
   b5e38:	4ca3 000b 4c99 000b 4c8f 000b 4c85 000b     .L...L...L...L..
   b5e48:	4c79 000b 4c6d 000b 5669 000b 5671 000b     yL..mL..iV..qV..
   b5e58:	4c61 000b 4c59 000b 4c4f 000b 4c45 000b     aL..YL..OL..EL..
   b5e68:	56a1 000b 7061 0070 5925 252d 2d6d 6425     .V..app.%Y-%m-%d
   b5e78:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b5e88:	6d69 0065                                   ime.

000b5e8c <_ZTV9IPAddress>:
	...
   b5e94:	5249 000b 5239 000b 523b 000b               IR..9R..;R..

000b5ea0 <_ZTV9USBSerial>:
	...
   b5ea8:	532f 000b 5397 000b 536d 000b 4f55 000b     /S...S..mS..UO..
   b5eb8:	535f 000b 5331 000b 5341 000b 5391 000b     _S..1S..AS...S..
   b5ec8:	5351 000b 5329 000b                         QS..)S..

000b5ed0 <_ZTV11USARTSerial>:
	...
   b5ed8:	5489 000b 54f5 000b 54cd 000b 4f55 000b     .T...T...T..UO..
   b5ee8:	549d 000b 54b9 000b 54ab 000b 54c7 000b     .T...T...T...T..
   b5ef8:	548b 000b 548f 000b                         .T...T..

000b5f00 <_ZTV7TwoWire>:
	...
   b5f08:	553b 000b 5585 000b 555d 000b 553d 000b     ;U...U..]U..=U..
   b5f18:	5565 000b 556d 000b 5575 000b 557d 000b     eU..mU..uU..}U..

000b5f28 <_ZTVN5spark9WiFiClassE>:
	...
   b5f30:	560b 000b 5601 000b 55f7 000b 55b9 000b     .V...V...U...U..
   b5f40:	50bd 000b 55eb 000b 5669 000b 5671 000b     .P...U..iV..qV..
   b5f50:	55df 000b 55d7 000b 55cd 000b 55c3 000b     .U...U...U...U..
   b5f60:	56a1 000b                                   .V..

000b5f64 <_ZTVN5spark12NetworkClassE>:
	...
   b5f6c:	5629 000b 5633 000b 563d 000b 5647 000b     )V..3V..=V..GV..
   b5f7c:	5651 000b 565d 000b 5669 000b 5671 000b     QV..]V..iV..qV..
   b5f8c:	5679 000b 5685 000b 568d 000b 5697 000b     yV...V...V...V..
   b5f9c:	56a1 000b                                   .V..

000b5fa0 <_ZSt7nothrow>:
   b5fa0:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b5fb0:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b5fc0:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b5fd0:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b5fe0:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b5ff0:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b6000:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b6010:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b6020:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b6030:	646e 632e                                    nd.c.

000b6035 <_ctype_>:
   b6035:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b6045:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b6055:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b6065:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b6075:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b6085:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b6095:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b60a5:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b60b5:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b6136 <link_const_variable_data_end>:
	...

000b6138 <link_constructors_location>:
   b6138:	000b47d5 	.word	0x000b47d5
   b613c:	000b4cad 	.word	0x000b4cad
   b6140:	000b4cd5 	.word	0x000b4cd5
   b6144:	000b4f45 	.word	0x000b4f45
   b6148:	000b50c9 	.word	0x000b50c9
   b614c:	000b50d9 	.word	0x000b50d9
   b6150:	000b50f5 	.word	0x000b50f5
   b6154:	000b5615 	.word	0x000b5615
   b6158:	000b5779 	.word	0x000b5779

000b615c <link_constructors_end>:
   b615c:	00000000 	.word	0x00000000
